#include <glib-object.h>

#ifndef SYMS_GOBJECT_H
#define SYMS_GOBJECT_H

struct gobject_syms {
    void *lib;
    // SYMS_gobject_HERE
    GType (*binding_get_type)(void);
    GBindingFlags (*binding_get_flags)(GBinding *binding);
    GObject * (*binding_get_source)(GBinding *binding);
    GObject * (*binding_dup_source)(GBinding *binding);
    GObject * (*binding_get_target)(GBinding *binding);
    GObject * (*binding_dup_target)(GBinding *binding);
    const gchar * (*binding_get_source_property)(GBinding *binding);
    const gchar * (*binding_get_target_property)(GBinding *binding);
    void (*binding_unbind)(GBinding *binding);
    GBinding* (*object_bind_property)(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags);
    GBinding* (*object_bind_property_full)(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify);
    GBinding* (*object_bind_property_with_closures)(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);
    GType (*binding_flags_get_type)(void);
    GBindingGroup* (*binding_group_new)(void);
    gpointer (*binding_group_dup_source)(GBindingGroup *self);
    void (*binding_group_set_source)(GBindingGroup *self, gpointer source);
    void (*binding_group_bind)(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags);
    void (*binding_group_bind_full)(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify user_data_destroy);
    void (*binding_group_bind_with_closures)(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);
    GType (*binding_group_get_type)(void);
    void (*boxed_free)(GType boxed_type, gpointer boxed);
    void (*value_set_boxed)(GValue *value, gconstpointer v_boxed);
    void (*value_set_static_boxed)(GValue *value, gconstpointer v_boxed);
    void (*value_take_boxed)(GValue *value, gconstpointer v_boxed);
    void (*value_set_boxed_take_ownership)(GValue *value, gconstpointer v_boxed);
    gpointer (*value_get_boxed)(const GValue *value);
    gpointer (*value_dup_boxed)(const GValue *value);
    GType (*boxed_type_register_static)(const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free);
    GType (*closure_get_type)(void);
    GType (*value_get_type)(void);
    gpointer (*boxed_copy)(GType boxed_type, gconstpointer src_boxed);
    GClosure* (*cclosure_new_swap)(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);
    GClosure* (*signal_type_cclosure_new)(GType itype, guint struct_offset);
    GClosure* (*closure_ref)(GClosure *closure);
    void (*closure_sink)(GClosure *closure);
    void (*closure_unref)(GClosure *closure);
    GClosure* (*closure_new_simple)(guint sizeof_closure, gpointer data);
    void (*closure_add_finalize_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
    void (*closure_remove_finalize_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
    void (*closure_add_invalidate_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
    void (*closure_remove_invalidate_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
    void (*closure_add_marshal_guards)(GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify);
    void (*closure_set_marshal)(GClosure *closure, GClosureMarshal marshal);
    void (*closure_set_meta_marshal)(GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal);
    void (*closure_invalidate)(GClosure *closure);
    void (*closure_invoke)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint);
    void (*cclosure_marshal_generic)(GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_generic_va)(GClosure *closure, GValue *return_value, gpointer instance, va_list args_list, gpointer marshal_data, int n_params, GType *param_types);
    GClosure* (*cclosure_new)(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);
    GEnumValue* (*enum_get_value_by_name)(GEnumClass *enum_class, const gchar *name);
    GEnumValue* (*enum_get_value_by_nick)(GEnumClass *enum_class, const gchar *nick);
    GFlagsValue* (*flags_get_first_value)(GFlagsClass *flags_class, guint value);
    GFlagsValue* (*flags_get_value_by_name)(GFlagsClass *flags_class, const gchar *name);
    GFlagsValue* (*flags_get_value_by_nick)(GFlagsClass *flags_class, const gchar *nick);
    gchar* (*enum_to_string)(GType g_enum_type, gint value);
    gchar* (*flags_to_string)(GType flags_type, guint value);
    void (*value_set_enum)(GValue *value, gint v_enum);
    gint (*value_get_enum)(const GValue *value);
    void (*value_set_flags)(GValue *value, guint v_flags);
    guint (*value_get_flags)(const GValue *value);
    GType (*enum_register_static)(const gchar *name, const GEnumValue *const_static_values);
    GType (*flags_register_static)(const gchar *name, const GFlagsValue *const_static_values);
    void (*enum_complete_type_info)(GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values);
    void (*flags_complete_type_info)(GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values);
    GEnumValue* (*enum_get_value)(GEnumClass *enum_class, gint value);
    GType (*unicode_break_type_get_type)(void);
    GType (*unicode_script_get_type)(void);
    GType (*normalize_mode_get_type)(void);
    GType (*unicode_type_get_type)(void);
    GType (*strv_get_type)(void);
    GType (*gstring_get_type)(void);
    GType (*hash_table_get_type)(void);
    GType (*array_get_type)(void);
    GType (*byte_array_get_type)(void);
    GType (*ptr_array_get_type)(void);
    GType (*bytes_get_type)(void);
    GType (*variant_type_get_gtype)(void);
    GType (*regex_get_type)(void);
    GType (*match_info_get_type)(void);
    GType (*error_get_type)(void);
    GType (*date_time_get_type)(void);
    GType (*time_zone_get_type)(void);
    GType (*io_channel_get_type)(void);
    GType (*io_condition_get_type)(void);
    GType (*variant_builder_get_type)(void);
    GType (*variant_dict_get_type)(void);
    GType (*key_file_get_type)(void);
    GType (*main_loop_get_type)(void);
    GType (*main_context_get_type)(void);
    GType (*source_get_type)(void);
    GType (*pollfd_get_type)(void);
    GType (*thread_get_type)(void);
    GType (*checksum_get_type)(void);
    GType (*markup_parse_context_get_type)(void);
    GType (*mapped_file_get_type)(void);
    GType (*option_group_get_type)(void);
    GType (*uri_get_type)(void);
    GType (*tree_get_type)(void);
    GType (*pattern_spec_get_type)(void);
    GType (*bookmark_file_get_type)(void);
    GType (*hmac_get_type)(void);
    GType (*dir_get_type)(void);
    GType (*rand_get_type)(void);
    GType (*strv_builder_get_type)(void);
    GType (*variant_get_gtype)(void);
    GType (*date_get_type)(void);
    void (*cclosure_marshal_VOID__VOIDv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__BOOLEAN)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__BOOLEANv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__CHAR)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__CHARv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__UCHAR)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__UCHARv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__INT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__INTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__UINT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__UINTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__LONG)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__LONGv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__ULONG)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__ULONGv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__ENUM)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__ENUMv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__FLAGS)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__FLAGSv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__FLOAT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__FLOATv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__DOUBLE)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__DOUBLEv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__STRING)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__STRINGv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__PARAM)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__PARAMv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__BOXED)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__BOXEDv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__POINTER)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__POINTERv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__OBJECT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__OBJECTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__VARIANT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__VARIANTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__UINT_POINTER)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_VOID__UINT_POINTERv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_BOOLEAN__FLAGS)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_BOOLEAN__FLAGSv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_STRING__OBJECT_POINTER)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_STRING__OBJECT_POINTERv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_BOOLEAN__BOXED_BOXED)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*cclosure_marshal_BOOLEAN__BOXED_BOXEDv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
    void (*cclosure_marshal_VOID__VOID)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
    void (*object_class_install_property)(GObjectClass *oclass, guint property_id, GParamSpec *pspec);
    GParamSpec* (*object_class_find_property)(GObjectClass *oclass, const gchar *property_name);
    GParamSpec** (*object_class_list_properties)(GObjectClass *oclass, guint *n_properties);
    void (*object_class_override_property)(GObjectClass *oclass, guint property_id, const gchar *name);
    void (*object_class_install_properties)(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs);
    void (*object_interface_install_property)(gpointer g_iface, GParamSpec *pspec);
    GParamSpec* (*object_interface_find_property)(gpointer g_iface, const gchar *property_name);
    GParamSpec** (*object_interface_list_properties)(gpointer g_iface, guint *n_properties_p);
    GType (*object_get_type)(void);
    gpointer (*object_new)(GType object_type, const gchar *first_property_name, ...);
    GObject* (*object_new_with_properties)(GType object_type, guint n_properties, const char *names[], const GValue values[]);
    void (*object_set)(gpointer object, const gchar *first_property_name, ...);
    void (*object_get)(gpointer object, const gchar *first_property_name, ...);
    gpointer (*object_connect)(gpointer object, const gchar *signal_spec, ...);
    void (*object_disconnect)(gpointer object, const gchar *signal_spec, ...);
    void (*object_setv)(GObject *object, guint n_properties, const gchar *names[], const GValue values[]);
    void (*object_set_valist)(GObject *object, const gchar *first_property_name, va_list var_args);
    void (*object_getv)(GObject *object, guint n_properties, const gchar *names[], GValue values[]);
    void (*object_get_valist)(GObject *object, const gchar *first_property_name, va_list var_args);
    void (*object_set_property)(GObject *object, const gchar *property_name, const GValue *value);
    void (*object_get_property)(GObject *object, const gchar *property_name, GValue *value);
    void (*object_freeze_notify)(GObject *object);
    void (*object_notify)(GObject *object, const gchar *property_name);
    void (*object_notify_by_pspec)(GObject *object, GParamSpec *pspec);
    void (*object_thaw_notify)(GObject *object);
    gboolean (*object_is_floating)(gpointer object);
    gpointer (*object_ref_sink)(gpointer object);
    gpointer (*object_take_ref)(gpointer object);
    gpointer (*object_ref)(gpointer object);
    void (*object_unref)(gpointer object);
    void (*object_weak_ref)(GObject *object, GWeakNotify notify, gpointer data);
    void (*object_weak_unref)(GObject *object, GWeakNotify notify, gpointer data);
    void (*object_add_weak_pointer)(GObject *object, gpointer *weak_pointer_location);
    void (*object_remove_weak_pointer)(GObject *object, gpointer *weak_pointer_location);
    void (*object_add_toggle_ref)(GObject *object, GToggleNotify notify, gpointer data);
    void (*object_remove_toggle_ref)(GObject *object, GToggleNotify notify, gpointer data);
    gpointer (*object_get_qdata)(GObject *object, GQuark quark);
    void (*object_set_qdata)(GObject *object, GQuark quark, gpointer data);
    void (*object_set_qdata_full)(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy);
    gpointer (*object_steal_qdata)(GObject *object, GQuark quark);
    gpointer (*object_dup_qdata)(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data);
    gboolean (*object_replace_qdata)(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);
    gpointer (*object_get_data)(GObject *object, const gchar *key);
    void (*object_set_data)(GObject *object, const gchar *key, gpointer data);
    void (*object_set_data_full)(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy);
    gpointer (*object_steal_data)(GObject *object, const gchar *key);
    gpointer (*object_dup_data)(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data);
    gboolean (*object_replace_data)(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);
    void (*object_watch_closure)(GObject *object, GClosure *closure);
    GClosure* (*cclosure_new_object)(GCallback callback_func, GObject *object);
    GClosure* (*cclosure_new_object_swap)(GCallback callback_func, GObject *object);
    GClosure* (*closure_new_object)(guint sizeof_closure, GObject *object);
    void (*value_set_object)(GValue *value, gpointer v_object);
    gpointer (*value_get_object)(const GValue *value);
    gpointer (*value_dup_object)(const GValue *value);
    gulong (*signal_connect_object)(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags);
    void (*object_force_floating)(GObject *object);
    void (*object_run_dispose)(GObject *object);
    void (*value_take_object)(GValue *value, gpointer v_object);
    void (*value_set_object_take_ownership)(GValue *value, gpointer v_object);
    gsize (*object_compat_control)(gsize what, gpointer data);
    void (*clear_object)(GObject **object_ptr);
    void (*weak_ref_init)(GWeakRef *weak_ref, gpointer object);
    void (*weak_ref_clear)(GWeakRef *weak_ref);
    gpointer (*weak_ref_get)(GWeakRef *weak_ref);
    void (*weak_ref_set)(GWeakRef *weak_ref, gpointer object);
    GType (*initially_unowned_get_type)(void);
    void (*param_spec_unref)(GParamSpec *pspec);
    void (*param_spec_sink)(GParamSpec *pspec);
    GParamSpec* (*param_spec_ref_sink)(GParamSpec *pspec);
    gpointer (*param_spec_get_qdata)(GParamSpec *pspec, GQuark quark);
    void (*param_spec_set_qdata)(GParamSpec *pspec, GQuark quark, gpointer data);
    void (*param_spec_set_qdata_full)(GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy);
    gpointer (*param_spec_steal_qdata)(GParamSpec *pspec, GQuark quark);
    GParamSpec* (*param_spec_get_redirect_target)(GParamSpec *pspec);
    void (*param_value_set_default)(GParamSpec *pspec, GValue *value);
    gboolean (*param_value_defaults)(GParamSpec *pspec, const GValue *value);
    gboolean (*param_value_validate)(GParamSpec *pspec, GValue *value);
    gboolean (*param_value_is_valid)(GParamSpec *pspec, const GValue *value);
    gboolean (*param_value_convert)(GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation);
    gint (*param_values_cmp)(GParamSpec *pspec, const GValue *value1, const GValue *value2);
    const gchar * (*param_spec_get_name)(GParamSpec *pspec);
    const gchar * (*param_spec_get_nick)(GParamSpec *pspec);
    const gchar * (*param_spec_get_blurb)(GParamSpec *pspec);
    void (*value_set_param)(GValue *value, GParamSpec *param);
    GParamSpec* (*value_get_param)(const GValue *value);
    GParamSpec* (*value_dup_param)(const GValue *value);
    void (*value_take_param)(GValue *value, GParamSpec *param);
    void (*value_set_param_take_ownership)(GValue *value, GParamSpec *param);
    const GValue * (*param_spec_get_default_value)(GParamSpec *pspec);
    GQuark (*param_spec_get_name_quark)(GParamSpec *pspec);
    GType (*param_type_register_static)(const gchar *name, const GParamSpecTypeInfo *pspec_info);
    gboolean (*param_spec_is_valid_name)(const gchar *name);
    GType (*_g_param_type_register_static_constant)(const gchar *name, const GParamSpecTypeInfo *pspec_info, GType opt_type);
    gpointer (*param_spec_internal)(GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);
    GParamSpecPool* (*param_spec_pool_new)(gboolean type_prefixing);
    void (*param_spec_pool_insert)(GParamSpecPool *pool, GParamSpec *pspec, GType owner_type);
    void (*param_spec_pool_remove)(GParamSpecPool *pool, GParamSpec *pspec);
    GParamSpec* (*param_spec_pool_lookup)(GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors);
    GList* (*param_spec_pool_list_owned)(GParamSpecPool *pool, GType owner_type);
    GParamSpec** (*param_spec_pool_list)(GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p);
    void (*param_spec_pool_free)(GParamSpecPool *pool);
    GParamSpec* (*param_spec_ref)(GParamSpec *pspec);
    GParamSpec* (*param_spec_uchar)(const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags);
    GParamSpec* (*param_spec_boolean)(const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags);
    GParamSpec* (*param_spec_int)(const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags);
    GParamSpec* (*param_spec_uint)(const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags);
    GParamSpec* (*param_spec_long)(const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags);
    GParamSpec* (*param_spec_ulong)(const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags);
    GParamSpec* (*param_spec_int64)(const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags);
    GParamSpec* (*param_spec_uint64)(const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags);
    GParamSpec* (*param_spec_unichar)(const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags);
    GParamSpec* (*param_spec_enum)(const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags);
    GParamSpec* (*param_spec_flags)(const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags);
    GParamSpec* (*param_spec_float)(const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags);
    GParamSpec* (*param_spec_double)(const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags);
    GParamSpec* (*param_spec_string)(const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags);
    GParamSpec* (*param_spec_param)(const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags);
    GParamSpec* (*param_spec_boxed)(const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags);
    GParamSpec* (*param_spec_pointer)(const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);
    GParamSpec* (*param_spec_value_array)(const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags);
    GParamSpec* (*param_spec_object)(const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags);
    GParamSpec* (*param_spec_override)(const gchar *name, GParamSpec *overridden);
    GParamSpec* (*param_spec_gtype)(const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags);
    GParamSpec* (*param_spec_variant)(const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags);
    GParamSpec* (*param_spec_char)(const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags);
    guint (*signal_new_valist)(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, va_list args);
    guint (*signal_new)(const gchar *signal_name, GType itype, GSignalFlags signal_flags, guint class_offset, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...);
    guint (*signal_new_class_handler)(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GCallback class_handler, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...);
    void (*signal_set_va_marshaller)(guint signal_id, GType instance_type, GSignalCVaMarshaller va_marshaller);
    void (*signal_emitv)(const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value);
    void (*signal_emit_valist)(gpointer instance, guint signal_id, GQuark detail, va_list var_args);
    void (*signal_emit)(gpointer instance, guint signal_id, GQuark detail, ...);
    void (*signal_emit_by_name)(gpointer instance, const gchar *detailed_signal, ...);
    guint (*signal_lookup)(const gchar *name, GType itype);
    const gchar * (*signal_name)(guint signal_id);
    void (*signal_query)(guint signal_id, GSignalQuery *query);
    guint* (*signal_list_ids)(GType itype, guint *n_ids);
    gboolean (*signal_is_valid_name)(const gchar *name);
    gboolean (*signal_parse_name)(const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark);
    GSignalInvocationHint* (*signal_get_invocation_hint)(gpointer instance);
    void (*signal_stop_emission)(gpointer instance, guint signal_id, GQuark detail);
    void (*signal_stop_emission_by_name)(gpointer instance, const gchar *detailed_signal);
    gulong (*signal_add_emission_hook)(guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy);
    void (*signal_remove_emission_hook)(guint signal_id, gulong hook_id);
    gboolean (*signal_has_handler_pending)(gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked);
    gulong (*signal_connect_closure_by_id)(gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after);
    gulong (*signal_connect_closure)(gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after);
    gulong (*signal_connect_data)(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags);
    void (*signal_handler_block)(gpointer instance, gulong handler_id);
    void (*signal_handler_unblock)(gpointer instance, gulong handler_id);
    void (*signal_handler_disconnect)(gpointer instance, gulong handler_id);
    gboolean (*signal_handler_is_connected)(gpointer instance, gulong handler_id);
    gulong (*signal_handler_find)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
    guint (*signal_handlers_block_matched)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
    guint (*signal_handlers_unblock_matched)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
    guint (*signal_handlers_disconnect_matched)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
    void (*clear_signal_handler)(gulong *handler_id_ptr, gpointer instance);
    void (*signal_override_class_closure)(guint signal_id, GType instance_type, GClosure *class_closure);
    void (*signal_override_class_handler)(const gchar *signal_name, GType instance_type, GCallback class_handler);
    void (*signal_chain_from_overridden)(const GValue *instance_and_params, GValue *return_value);
    void (*signal_chain_from_overridden_handler)(gpointer instance, ...);
    gboolean (*signal_accumulator_true_handled)(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);
    gboolean (*signal_accumulator_first_wins)(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);
    void (*signal_handlers_destroy)(gpointer instance);
    void (*_g_signals_destroy)(GType itype);
    guint (*signal_newv)(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types);
    GSignalGroup* (*signal_group_new)(GType target_type);
    void (*signal_group_set_target)(GSignalGroup *self, gpointer target);
    gpointer (*signal_group_dup_target)(GSignalGroup *self);
    void (*signal_group_block)(GSignalGroup *self);
    void (*signal_group_unblock)(GSignalGroup *self);
    void (*signal_group_connect_closure)(GSignalGroup *self, const gchar *detailed_signal, GClosure *closure, gboolean after);
    void (*signal_group_connect_object)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer object, GConnectFlags flags);
    void (*signal_group_connect_data)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify notify, GConnectFlags flags);
    void (*signal_group_connect)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data);
    void (*signal_group_connect_after)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data);
    void (*signal_group_connect_swapped)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data);
    GType (*signal_group_get_type)(void);
    void (*source_set_dummy_callback)(GSource *source);
    void (*source_set_closure)(GSource *source, GClosure *closure);
    void (*type_init_with_debug_flags)(GTypeDebugFlags debug_flags);
    GQuark (*type_qname)(GType type);
    GType (*type_from_name)(const gchar *name);
    GType (*type_parent)(GType type);
    guint (*type_depth)(GType type);
    GType (*type_next_base)(GType leaf_type, GType root_type);
    gboolean (*type_is_a)(GType type, GType is_a_type);
    gpointer (*type_class_ref)(GType type);
    gpointer (*type_class_peek)(GType type);
    gpointer (*type_class_peek_static)(GType type);
    void (*type_class_unref)(gpointer g_class);
    gpointer (*type_class_peek_parent)(gpointer g_class);
    gpointer (*type_interface_peek)(gpointer instance_class, GType iface_type);
    gpointer (*type_interface_peek_parent)(gpointer g_iface);
    gpointer (*type_default_interface_ref)(GType g_type);
    gpointer (*type_default_interface_peek)(GType g_type);
    void (*type_default_interface_unref)(gpointer g_iface);
    GType* (*type_children)(GType type, guint *n_children);
    GType* (*type_interfaces)(GType type, guint *n_interfaces);
    void (*type_set_qdata)(GType type, GQuark quark, gpointer data);
    gpointer (*type_get_qdata)(GType type, GQuark quark);
    void (*type_query)(GType type, GTypeQuery *query);
    int (*type_get_instance_count)(GType type);
    GType (*type_register_static_simple)(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags);
    GType (*type_register_dynamic)(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags);
    GType (*type_register_fundamental)(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags);
    void (*type_add_interface_static)(GType instance_type, GType interface_type, const GInterfaceInfo *info);
    void (*type_add_interface_dynamic)(GType instance_type, GType interface_type, GTypePlugin *plugin);
    void (*type_interface_add_prerequisite)(GType interface_type, GType prerequisite_type);
    GType* (*type_interface_prerequisites)(GType interface_type, guint *n_prerequisites);
    GType (*type_interface_instantiatable_prerequisite)(GType interface_type);
    void (*type_class_add_private)(gpointer g_class, gsize private_size);
    gint (*type_add_instance_private)(GType class_type, gsize private_size);
    gpointer (*type_instance_get_private)(GTypeInstance *instance, GType private_type);
    void (*type_class_adjust_private_offset)(gpointer g_class, gint *private_size_or_offset);
    void (*type_add_class_private)(GType class_type, gsize private_size);
    gpointer (*type_class_get_private)(GTypeClass *klass, GType private_type);
    gint (*type_class_get_instance_private_offset)(gpointer g_class);
    void (*type_ensure)(GType type);
    guint (*type_get_type_registration_serial)(void);
    GTypePlugin* (*type_get_plugin)(GType type);
    GTypePlugin* (*type_interface_get_plugin)(GType instance_type, GType interface_type);
    GType (*type_fundamental_next)(void);
    GType (*type_fundamental)(GType type_id);
    GTypeInstance* (*type_create_instance)(GType type);
    void (*type_free_instance)(GTypeInstance *instance);
    void (*type_add_class_cache_func)(gpointer cache_data, GTypeClassCacheFunc cache_func);
    void (*type_remove_class_cache_func)(gpointer cache_data, GTypeClassCacheFunc cache_func);
    void (*type_class_unref_uncached)(gpointer g_class);
    void (*type_add_interface_check)(gpointer check_data, GTypeInterfaceCheckFunc check_func);
    void (*type_remove_interface_check)(gpointer check_data, GTypeInterfaceCheckFunc check_func);
    GTypeValueTable* (*type_value_table_peek)(GType type);
    gboolean (*type_check_instance)(GTypeInstance *instanc);
    GTypeInstance* (*type_check_instance_cast)(GTypeInstance *instance, GType iface_type);
    gboolean (*type_check_instance_is_a)(GTypeInstance *instance, GType iface_typ);
    gboolean (*type_check_instance_is_fundamentally_a)(GTypeInstance *instance, GType fundamental_typ);
    GTypeClass* (*type_check_class_cast)(GTypeClass *g_class, GType is_a_type);
    gboolean (*type_check_class_is_a)(GTypeClass *g_class, GType is_a_typ);
    gboolean (*type_check_is_value_type)(GType type);
    gboolean (*type_check_value)(const GValue *valu);
    gboolean (*type_check_value_holds)(const GValue *value, GType typ);
    gboolean (*type_test_flags)(GType type, guint flags);
    const gchar * (*type_name_from_instance)(GTypeInstance *instance);
    const gchar * (*type_name_from_class)(GTypeClass *g_class);
    gboolean (*type_module_use)(GTypeModule *module);
    void (*type_module_unuse)(GTypeModule *module);
    void (*type_module_set_name)(GTypeModule *module, const gchar *name);
    GType (*type_module_register_type)(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags);
    void (*type_module_add_interface)(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info);
    GType (*type_module_register_enum)(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values);
    GType (*type_module_register_flags)(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values);
    void (*type_plugin_use)(GTypePlugin *plugin);
    void (*type_plugin_unuse)(GTypePlugin *plugin);
    void (*type_plugin_complete_type_info)(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table);
    void (*type_plugin_complete_interface_info)(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info);
    GType (*type_plugin_get_type)(void);
    void (*value_copy)(const GValue *src_value, GValue *dest_value);
    GValue* (*value_reset)(GValue *value);
    void (*value_unset)(GValue *value);
    void (*value_set_instance)(GValue *value, gpointer instance);
    void (*value_init_from_instance)(GValue *value, gpointer instance);
    gboolean (*value_fits_pointer)(const GValue *value);
    gpointer (*value_peek_pointer)(const GValue *value);
    gboolean (*value_type_compatible)(GType src_type, GType dest_type);
    gboolean (*value_type_transformable)(GType src_type, GType dest_type);
    gboolean (*value_transform)(const GValue *src_value, GValue *dest_value);
    void (*value_register_transform_func)(GType src_type, GType dest_type, GValueTransform transform_func);
    GValue* (*value_init)(GValue *value, GType g_type);
    GValue* (*value_array_get_nth)(GValueArray *value_array, guint index_);
    GValueArray* (*value_array_new)(guint n_prealloced);
    void (*value_array_free)(GValueArray *value_array);
    GValueArray* (*value_array_copy)(const GValueArray *value_array);
    GValueArray* (*value_array_prepend)(GValueArray *value_array, const GValue *value);
    GValueArray* (*value_array_append)(GValueArray *value_array, const GValue *value);
    GValueArray* (*value_array_insert)(GValueArray *value_array, guint index_, const GValue *value);
    GValueArray* (*value_array_remove)(GValueArray *value_array, guint index_);
    GValueArray* (*value_array_sort)(GValueArray *value_array, GCompareFunc compare_func);
    GValueArray* (*value_array_sort_with_data)(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data);
    GType (*value_array_get_type)(void);
    gchar (*value_get_char)(const GValue *value);
    void (*value_set_schar)(GValue *value, gint8 v_char);
    gint8 (*value_get_schar)(const GValue *value);
    void (*value_set_uchar)(GValue *value, guchar v_uchar);
    guchar (*value_get_uchar)(const GValue *value);
    void (*value_set_boolean)(GValue *value, gboolean v_boolean);
    gboolean (*value_get_boolean)(const GValue *value);
    void (*value_set_int)(GValue *value, gint v_int);
    gint (*value_get_int)(const GValue *value);
    void (*value_set_uint)(GValue *value, guint v_uint);
    guint (*value_get_uint)(const GValue *value);
    void (*value_set_long)(GValue *value, glong v_long);
    glong (*value_get_long)(const GValue *value);
    void (*value_set_ulong)(GValue *value, gulong v_ulong);
    gulong (*value_get_ulong)(const GValue *value);
    void (*value_set_int64)(GValue *value, gint64 v_int64);
    gint64 (*value_get_int64)(const GValue *value);
    void (*value_set_uint64)(GValue *value, guint64 v_uint64);
    guint64 (*value_get_uint64)(const GValue *value);
    void (*value_set_float)(GValue *value, gfloat v_float);
    gfloat (*value_get_float)(const GValue *value);
    void (*value_set_double)(GValue *value, gdouble v_double);
    gdouble (*value_get_double)(const GValue *value);
    void (*value_set_string)(GValue *value, const gchar *v_string);
    void (*value_set_static_string)(GValue *value, const gchar *v_string);
    void (*value_set_interned_string)(GValue *value, const gchar *v_string);
    const gchar * (*value_get_string)(const GValue *value);
    gchar* (*value_dup_string)(const GValue *value);
    gchar* (*value_steal_string)(GValue *value);
    void (*value_set_pointer)(GValue *value, gpointer v_pointer);
    gpointer (*value_get_pointer)(const GValue *value);
    GType (*gtype_get_type)(void);
    void (*value_set_gtype)(GValue *value, GType v_gtype);
    GType (*value_get_gtype)(const GValue *value);
    void (*value_set_variant)(GValue *value, GVariant *variant);
    void (*value_take_variant)(GValue *value, GVariant *variant);
    GVariant* (*value_get_variant)(const GValue *value);
    GVariant* (*value_dup_variant)(const GValue *value);
    GType (*pointer_type_register_static)(const gchar *name);
    gchar* (*strdup_value_contents)(const GValue *value);
    void (*value_take_string)(GValue *value, gchar *v_string);
    void (*value_set_string_take_ownership)(GValue *value, gchar *v_string);
    void (*value_set_char)(GValue *value, gchar v_char);
};

// DEFINE_STRUCT_HERE


extern struct gobject_syms *gobject;
// DEFINE_STRUCT_VAR_HERE
#endif

void initialize_gobject(void);
void close_gobject(void);
