#include <gtk/gtk.h>
#include <gtk/a11y/gtkatspi.h>
#include <gdk/x11/gdkx.h>
#include <gdk/wayland/gdkwayland.h>
#include <gdk/broadway/gdkbroadway.h>

void initialize_gtk4(void);
void close_gtk4(void);

GType (gtk_css_parser_error_get_type)(void);
GType (gtk_css_parser_warning_get_type)(void);
GQuark (gtk_css_parser_warning_quark)(void);
GQuark (gtk_css_parser_error_quark)(void);
GType (gtk_css_section_get_type)(void);
GtkCssSection * (gtk_css_section_new)(GFile *file, const GtkCssLocation *start, const GtkCssLocation *end);
GtkCssSection * (gtk_css_section_ref)(GtkCssSection *section);
void (gtk_css_section_unref)(GtkCssSection *section);
void (gtk_css_section_print)(const GtkCssSection *section, GString *string);
char * (gtk_css_section_to_string)(const GtkCssSection *section);
GtkCssSection * (gtk_css_section_get_parent)(const GtkCssSection *section);
GFile * (gtk_css_section_get_file)(const GtkCssSection *section);
const GtkCssLocation * (gtk_css_section_get_start_location)(const GtkCssSection *section);
const GtkCssLocation * (gtk_css_section_get_end_location)(const GtkCssSection *section);
GType (gtk_app_chooser_get_type)(void);
GAppInfo * (gtk_app_chooser_get_app_info)(GtkAppChooser *self);
char * (gtk_app_chooser_get_content_type)(GtkAppChooser *self);
void (gtk_app_chooser_refresh)(GtkAppChooser *self);
GType (gtk_app_chooser_button_get_type)(void);
GtkWidget * (gtk_app_chooser_button_new)(const char *content_type);
void (gtk_app_chooser_button_append_separator)(GtkAppChooserButton *self);
void (gtk_app_chooser_button_append_custom_item)(GtkAppChooserButton *self, const char *name, const char *label, GIcon *icon);
void (gtk_app_chooser_button_set_active_custom_item)(GtkAppChooserButton *self, const char *name);
void (gtk_app_chooser_button_set_show_dialog_item)(GtkAppChooserButton *self, gboolean setting);
gboolean (gtk_app_chooser_button_get_show_dialog_item)(GtkAppChooserButton *self);
void (gtk_app_chooser_button_set_heading)(GtkAppChooserButton *self, const char *heading);
const char * (gtk_app_chooser_button_get_heading)(GtkAppChooserButton *self);
void (gtk_app_chooser_button_set_show_default_item)(GtkAppChooserButton *self, gboolean setting);
gboolean (gtk_app_chooser_button_get_show_default_item)(GtkAppChooserButton *self);
gboolean (gtk_app_chooser_button_get_modal)(GtkAppChooserButton *self);
void (gtk_app_chooser_button_set_modal)(GtkAppChooserButton *self, gboolean modal);
GType (gtk_app_chooser_dialog_get_type)(void);
GtkWidget * (gtk_app_chooser_dialog_new)(GtkWindow *parent, GtkDialogFlags flags, GFile *file);
GtkWidget * (gtk_app_chooser_dialog_new_for_content_type)(GtkWindow *parent, GtkDialogFlags flags, const char *content_type);
GtkWidget * (gtk_app_chooser_dialog_get_widget)(GtkAppChooserDialog *self);
void (gtk_app_chooser_dialog_set_heading)(GtkAppChooserDialog *self, const char *heading);
const char * (gtk_app_chooser_dialog_get_heading)(GtkAppChooserDialog *self);
GType (gtk_app_chooser_widget_get_type)(void);
GtkWidget * (gtk_app_chooser_widget_new)(const char *content_type);
void (gtk_app_chooser_widget_set_show_default)(GtkAppChooserWidget *self, gboolean setting);
gboolean (gtk_app_chooser_widget_get_show_default)(GtkAppChooserWidget *self);
void (gtk_app_chooser_widget_set_show_recommended)(GtkAppChooserWidget *self, gboolean setting);
gboolean (gtk_app_chooser_widget_get_show_recommended)(GtkAppChooserWidget *self);
void (gtk_app_chooser_widget_set_show_fallback)(GtkAppChooserWidget *self, gboolean setting);
gboolean (gtk_app_chooser_widget_get_show_fallback)(GtkAppChooserWidget *self);
void (gtk_app_chooser_widget_set_show_other)(GtkAppChooserWidget *self, gboolean setting);
gboolean (gtk_app_chooser_widget_get_show_other)(GtkAppChooserWidget *self);
void (gtk_app_chooser_widget_set_show_all)(GtkAppChooserWidget *self, gboolean setting);
gboolean (gtk_app_chooser_widget_get_show_all)(GtkAppChooserWidget *self);
void (gtk_app_chooser_widget_set_default_text)(GtkAppChooserWidget *self, const char *text);
const char * (gtk_app_chooser_widget_get_default_text)(GtkAppChooserWidget *self);
GType (gtk_assistant_get_type)(void);
GType (gtk_assistant_page_get_type)(void);
GtkWidget* (gtk_assistant_new)(void);
void (gtk_assistant_next_page)(GtkAssistant *assistant);
void (gtk_assistant_previous_page)(GtkAssistant *assistant);
int (gtk_assistant_get_current_page)(GtkAssistant *assistant);
void (gtk_assistant_set_current_page)(GtkAssistant *assistant, int page_num);
int (gtk_assistant_get_n_pages)(GtkAssistant *assistant);
GtkWidget* (gtk_assistant_get_nth_page)(GtkAssistant *assistant, int page_num);
int (gtk_assistant_prepend_page)(GtkAssistant *assistant, GtkWidget *page);
int (gtk_assistant_append_page)(GtkAssistant *assistant, GtkWidget *page);
int (gtk_assistant_insert_page)(GtkAssistant *assistant, GtkWidget *page, int position);
void (gtk_assistant_remove_page)(GtkAssistant *assistant, int page_num);
void (gtk_assistant_set_forward_page_func)(GtkAssistant *assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy);
void (gtk_assistant_set_page_type)(GtkAssistant *assistant, GtkWidget *page, GtkAssistantPageType type);
GtkAssistantPageType (gtk_assistant_get_page_type)(GtkAssistant *assistant, GtkWidget *page);
void (gtk_assistant_set_page_title)(GtkAssistant *assistant, GtkWidget *page, const char *title);
const char * (gtk_assistant_get_page_title)(GtkAssistant *assistant, GtkWidget *page);
void (gtk_assistant_set_page_complete)(GtkAssistant *assistant, GtkWidget *page, gboolean complete);
gboolean (gtk_assistant_get_page_complete)(GtkAssistant *assistant, GtkWidget *page);
void (gtk_assistant_add_action_widget)(GtkAssistant *assistant, GtkWidget *child);
void (gtk_assistant_remove_action_widget)(GtkAssistant *assistant, GtkWidget *child);
void (gtk_assistant_update_buttons_state)(GtkAssistant *assistant);
void (gtk_assistant_commit)(GtkAssistant *assistant);
GtkAssistantPage * (gtk_assistant_get_page)(GtkAssistant *assistant, GtkWidget *child);
GtkWidget * (gtk_assistant_page_get_child)(GtkAssistantPage *page);
GListModel * (gtk_assistant_get_pages)(GtkAssistant *assistant);
GType (gtk_cell_area_get_type)(void);
void (gtk_cell_area_add)(GtkCellArea *area, GtkCellRenderer *renderer);
void (gtk_cell_area_remove)(GtkCellArea *area, GtkCellRenderer *renderer);
gboolean (gtk_cell_area_has_renderer)(GtkCellArea *area, GtkCellRenderer *renderer);
void (gtk_cell_area_foreach)(GtkCellArea *area, GtkCellCallback callback, gpointer callback_data);
void (gtk_cell_area_foreach_alloc)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, const GdkRectangle *background_area, GtkCellAllocCallback callback, gpointer callback_data);
int (gtk_cell_area_event)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags);
void (gtk_cell_area_snapshot)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkSnapshot *snapshot, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean paint_focus);
void (gtk_cell_area_get_cell_allocation)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkCellRenderer *renderer, const GdkRectangle *cell_area, GdkRectangle *allocation);
GtkCellRenderer* (gtk_cell_area_get_cell_at_position)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, int x, int y, GdkRectangle *alloc_area);
GtkCellAreaContext* (gtk_cell_area_create_context)(GtkCellArea *area);
GtkCellAreaContext* (gtk_cell_area_copy_context)(GtkCellArea *area, GtkCellAreaContext *context);
GtkSizeRequestMode (gtk_cell_area_get_request_mode)(GtkCellArea *area);
void (gtk_cell_area_get_preferred_width)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, int *minimum_width, int *natural_width);
void (gtk_cell_area_get_preferred_height_for_width)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, int width, int *minimum_height, int *natural_height);
void (gtk_cell_area_get_preferred_height)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, int *minimum_height, int *natural_height);
void (gtk_cell_area_get_preferred_width_for_height)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, int height, int *minimum_width, int *natural_width);
const char * (gtk_cell_area_get_current_path_string)(GtkCellArea *area);
void (gtk_cell_area_apply_attributes)(GtkCellArea *area, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded);
void (gtk_cell_area_attribute_connect)(GtkCellArea *area, GtkCellRenderer *renderer, const char *attribute, int column);
void (gtk_cell_area_attribute_disconnect)(GtkCellArea *area, GtkCellRenderer *renderer, const char *attribute);
int (gtk_cell_area_attribute_get_column)(GtkCellArea *area, GtkCellRenderer *renderer, const char *attribute);
void (gtk_cell_area_class_install_cell_property)(GtkCellAreaClass *aclass, guint property_id, GParamSpec *pspec);
GParamSpec* (gtk_cell_area_class_find_cell_property)(GtkCellAreaClass *aclass, const char *property_name);
GParamSpec** (gtk_cell_area_class_list_cell_properties)(GtkCellAreaClass *aclass, guint *n_properties);
void (gtk_cell_area_cell_set_valist)(GtkCellArea *area, GtkCellRenderer *renderer, const char *first_property_name, va_list var_args);
void (gtk_cell_area_cell_get_valist)(GtkCellArea *area, GtkCellRenderer *renderer, const char *first_property_name, va_list var_args);
void (gtk_cell_area_cell_set_property)(GtkCellArea *area, GtkCellRenderer *renderer, const char *property_name, const GValue *value);
void (gtk_cell_area_cell_get_property)(GtkCellArea *area, GtkCellRenderer *renderer, const char *property_name, GValue *value);
gboolean (gtk_cell_area_is_activatable)(GtkCellArea *area);
gboolean (gtk_cell_area_activate)(GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean edit_only);
gboolean (gtk_cell_area_focus)(GtkCellArea *area, GtkDirectionType direction);
void (gtk_cell_area_set_focus_cell)(GtkCellArea *area, GtkCellRenderer *renderer);
GtkCellRenderer* (gtk_cell_area_get_focus_cell)(GtkCellArea *area);
void (gtk_cell_area_add_focus_sibling)(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling);
void (gtk_cell_area_remove_focus_sibling)(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling);
gboolean (gtk_cell_area_is_focus_sibling)(GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling);
const GList * (gtk_cell_area_get_focus_siblings)(GtkCellArea *area, GtkCellRenderer *renderer);
GtkCellRenderer* (gtk_cell_area_get_focus_from_sibling)(GtkCellArea *area, GtkCellRenderer *renderer);
GtkCellRenderer* (gtk_cell_area_get_edited_cell)(GtkCellArea *area);
GtkCellEditable* (gtk_cell_area_get_edit_widget)(GtkCellArea *area);
gboolean (gtk_cell_area_activate_cell)(GtkCellArea *area, GtkWidget *widget, GtkCellRenderer *renderer, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags);
void (gtk_cell_area_stop_editing)(GtkCellArea *area, gboolean canceled);
void (gtk_cell_area_inner_cell_area)(GtkCellArea *area, GtkWidget *widget, const GdkRectangle *cell_area, GdkRectangle *inner_area);
void (gtk_cell_area_request_renderer)(GtkCellArea *area, GtkCellRenderer *renderer, GtkOrientation orientation, GtkWidget *widget, int for_size, int *minimum_size, int *natural_size);
void (_gtk_cell_area_set_cell_data_func_with_proxy)(GtkCellArea *area, GtkCellRenderer *cell, GFunc func, gpointer func_data, GDestroyNotify destroy, gpointer proxy);
GType (gtk_cell_area_box_get_type)(void);
GtkCellArea* (gtk_cell_area_box_new)(void);
void (gtk_cell_area_box_pack_start)(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed);
void (gtk_cell_area_box_pack_end)(GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed);
int (gtk_cell_area_box_get_spacing)(GtkCellAreaBox *box);
void (gtk_cell_area_box_set_spacing)(GtkCellAreaBox *box, int spacing);
gboolean (_gtk_cell_area_box_group_visible)(GtkCellAreaBox *box, int group_idx);
GType (gtk_cell_area_context_get_type)(void);
GtkCellArea* (gtk_cell_area_context_get_area)(GtkCellAreaContext *context);
void (gtk_cell_area_context_allocate)(GtkCellAreaContext *context, int width, int height);
void (gtk_cell_area_context_reset)(GtkCellAreaContext *context);
void (gtk_cell_area_context_get_preferred_width)(GtkCellAreaContext *context, int *minimum_width, int *natural_width);
void (gtk_cell_area_context_get_preferred_height)(GtkCellAreaContext *context, int *minimum_height, int *natural_height);
void (gtk_cell_area_context_get_preferred_height_for_width)(GtkCellAreaContext *context, int width, int *minimum_height, int *natural_height);
void (gtk_cell_area_context_get_preferred_width_for_height)(GtkCellAreaContext *context, int height, int *minimum_width, int *natural_width);
void (gtk_cell_area_context_get_allocation)(GtkCellAreaContext *context, int *width, int *height);
void (gtk_cell_area_context_push_preferred_width)(GtkCellAreaContext *context, int minimum_width, int natural_width);
void (gtk_cell_area_context_push_preferred_height)(GtkCellAreaContext *context, int minimum_height, int natural_height);
GType (gtk_cell_editable_get_type)(void);
void (gtk_cell_editable_start_editing)(GtkCellEditable *cell_editable, GdkEvent *event);
void (gtk_cell_editable_editing_done)(GtkCellEditable *cell_editable);
void (gtk_cell_editable_remove_widget)(GtkCellEditable *cell_editable);
GType (gtk_cell_layout_get_type)(void);
void (gtk_cell_layout_pack_start)(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);
void (gtk_cell_layout_pack_end)(GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);
GList* (gtk_cell_layout_get_cells)(GtkCellLayout *cell_layout);
void (gtk_cell_layout_clear)(GtkCellLayout *cell_layout);
void (gtk_cell_layout_add_attribute)(GtkCellLayout *cell_layout, GtkCellRenderer *cell, const char *attribute, int column);
void (gtk_cell_layout_set_cell_data_func)(GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy);
void (gtk_cell_layout_clear_attributes)(GtkCellLayout *cell_layout, GtkCellRenderer *cell);
void (gtk_cell_layout_reorder)(GtkCellLayout *cell_layout, GtkCellRenderer *cell, int position);
GtkCellArea* (gtk_cell_layout_get_area)(GtkCellLayout *cell_layout);
gboolean (_gtk_cell_layout_buildable_custom_tag_start)(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const char *tagname, GtkBuildableParser *parser, gpointer *data);
gboolean (_gtk_cell_layout_buildable_custom_tag_end)(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const char *tagname, gpointer *data);
void (_gtk_cell_layout_buildable_add_child)(GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const char *type);
GType (gtk_cell_renderer_get_type)(void);
GtkSizeRequestMode (gtk_cell_renderer_get_request_mode)(GtkCellRenderer *cell);
void (gtk_cell_renderer_get_preferred_width)(GtkCellRenderer *cell, GtkWidget *widget, int *minimum_size, int *natural_size);
void (gtk_cell_renderer_get_preferred_height_for_width)(GtkCellRenderer *cell, GtkWidget *widget, int width, int *minimum_height, int *natural_height);
void (gtk_cell_renderer_get_preferred_height)(GtkCellRenderer *cell, GtkWidget *widget, int *minimum_size, int *natural_size);
void (gtk_cell_renderer_get_preferred_width_for_height)(GtkCellRenderer *cell, GtkWidget *widget, int height, int *minimum_width, int *natural_width);
void (gtk_cell_renderer_get_preferred_size)(GtkCellRenderer *cell, GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size);
void (gtk_cell_renderer_get_aligned_area)(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle *aligned_area);
void (gtk_cell_renderer_snapshot)(GtkCellRenderer *cell, GtkSnapshot *snapshot, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);
gboolean (gtk_cell_renderer_activate)(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const char *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);
GtkCellEditable* (gtk_cell_renderer_start_editing)(GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const char *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);
void (gtk_cell_renderer_set_fixed_size)(GtkCellRenderer *cell, int width, int height);
void (gtk_cell_renderer_get_fixed_size)(GtkCellRenderer *cell, int *width, int *height);
void (gtk_cell_renderer_set_alignment)(GtkCellRenderer *cell, float xalign, float yalign);
void (gtk_cell_renderer_get_alignment)(GtkCellRenderer *cell, float *xalign, float *yalign);
void (gtk_cell_renderer_set_padding)(GtkCellRenderer *cell, int xpad, int ypad);
void (gtk_cell_renderer_get_padding)(GtkCellRenderer *cell, int *xpad, int *ypad);
void (gtk_cell_renderer_set_visible)(GtkCellRenderer *cell, gboolean visible);
gboolean (gtk_cell_renderer_get_visible)(GtkCellRenderer *cell);
void (gtk_cell_renderer_set_sensitive)(GtkCellRenderer *cell, gboolean sensitive);
gboolean (gtk_cell_renderer_get_sensitive)(GtkCellRenderer *cell);
gboolean (gtk_cell_renderer_is_activatable)(GtkCellRenderer *cell);
void (gtk_cell_renderer_set_is_expander)(GtkCellRenderer *cell, gboolean is_expander);
gboolean (gtk_cell_renderer_get_is_expander)(GtkCellRenderer *cell);
void (gtk_cell_renderer_set_is_expanded)(GtkCellRenderer *cell, gboolean is_expanded);
gboolean (gtk_cell_renderer_get_is_expanded)(GtkCellRenderer *cell);
void (gtk_cell_renderer_stop_editing)(GtkCellRenderer *cell, gboolean canceled);
void (_gtk_cell_renderer_calc_offset)(GtkCellRenderer *cell, const GdkRectangle *cell_area, GtkTextDirection direction, int width, int height, int *x_offset, int *y_offset);
GtkStateFlags (gtk_cell_renderer_get_state)(GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState cell_state);
GType (gtk_cell_renderer_accel_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_accel_new)(void);
GType (gtk_cell_renderer_combo_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_combo_new)(void);
GType (gtk_cell_renderer_pixbuf_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_pixbuf_new)(void);
GType (gtk_cell_renderer_progress_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_progress_new)(void);
GType (gtk_cell_renderer_spin_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_spin_new)(void);
GType (gtk_cell_renderer_spinner_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_spinner_new)(void);
GType (gtk_cell_renderer_text_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_text_new)(void);
void (gtk_cell_renderer_text_set_fixed_height_from_font)(GtkCellRendererText *renderer, int number_of_rows);
GType (gtk_cell_renderer_toggle_get_type)(void);
GtkCellRenderer* (gtk_cell_renderer_toggle_new)(void);
gboolean (gtk_cell_renderer_toggle_get_radio)(GtkCellRendererToggle *toggle);
void (gtk_cell_renderer_toggle_set_radio)(GtkCellRendererToggle *toggle, gboolean radio);
gboolean (gtk_cell_renderer_toggle_get_active)(GtkCellRendererToggle *toggle);
void (gtk_cell_renderer_toggle_set_active)(GtkCellRendererToggle *toggle, gboolean setting);
gboolean (gtk_cell_renderer_toggle_get_activatable)(GtkCellRendererToggle *toggle);
void (gtk_cell_renderer_toggle_set_activatable)(GtkCellRendererToggle *toggle, gboolean setting);
GType (gtk_cell_view_get_type)(void);
GtkWidget* (gtk_cell_view_new)(void);
GtkWidget* (gtk_cell_view_new_with_context)(GtkCellArea *area, GtkCellAreaContext *context);
GtkWidget* (gtk_cell_view_new_with_text)(const char *text);
GtkWidget* (gtk_cell_view_new_with_markup)(const char *markup);
GtkWidget* (gtk_cell_view_new_with_texture)(GdkTexture *texture);
void (gtk_cell_view_set_model)(GtkCellView *cell_view, GtkTreeModel *model);
GtkTreeModel* (gtk_cell_view_get_model)(GtkCellView *cell_view);
void (gtk_cell_view_set_displayed_row)(GtkCellView *cell_view, GtkTreePath *path);
GtkTreePath* (gtk_cell_view_get_displayed_row)(GtkCellView *cell_view);
gboolean (gtk_cell_view_get_draw_sensitive)(GtkCellView *cell_view);
void (gtk_cell_view_set_draw_sensitive)(GtkCellView *cell_view, gboolean draw_sensitive);
gboolean (gtk_cell_view_get_fit_model)(GtkCellView *cell_view);
void (gtk_cell_view_set_fit_model)(GtkCellView *cell_view, gboolean fit_model);
GType (gtk_color_button_get_type)(void);
GtkWidget * (gtk_color_button_new)(void);
GtkWidget * (gtk_color_button_new_with_rgba)(const GdkRGBA *rgba);
void (gtk_color_button_set_title)(GtkColorButton *button, const char *title);
const char* (gtk_color_button_get_title)(GtkColorButton *button);
gboolean (gtk_color_button_get_modal)(GtkColorButton *button);
void (gtk_color_button_set_modal)(GtkColorButton *button, gboolean modal);
GType (gtk_color_chooser_get_type)(void);
void (gtk_color_chooser_get_rgba)(GtkColorChooser *chooser, GdkRGBA *color);
void (gtk_color_chooser_set_rgba)(GtkColorChooser *chooser, const GdkRGBA *color);
gboolean (gtk_color_chooser_get_use_alpha)(GtkColorChooser *chooser);
void (gtk_color_chooser_set_use_alpha)(GtkColorChooser *chooser, gboolean use_alpha);
void (gtk_color_chooser_add_palette)(GtkColorChooser *chooser, GtkOrientation orientation, int colors_per_line, int n_colors, GdkRGBA *colors);
GType (gtk_color_chooser_dialog_get_type)(void);
GtkWidget * (gtk_color_chooser_dialog_new)(const char *title, GtkWindow *parent);
GType (gtk_color_chooser_widget_get_type)(void);
GtkWidget * (gtk_color_chooser_widget_new)(void);
GType (gtk_combo_box_get_type)(void);
GtkWidget* (gtk_combo_box_new)(void);
GtkWidget* (gtk_combo_box_new_with_entry)(void);
GtkWidget* (gtk_combo_box_new_with_model)(GtkTreeModel *model);
GtkWidget* (gtk_combo_box_new_with_model_and_entry)(GtkTreeModel *model);
int (gtk_combo_box_get_active)(GtkComboBox *combo_box);
void (gtk_combo_box_set_active)(GtkComboBox *combo_box, int index_);
gboolean (gtk_combo_box_get_active_iter)(GtkComboBox *combo_box, GtkTreeIter *iter);
void (gtk_combo_box_set_active_iter)(GtkComboBox *combo_box, GtkTreeIter *iter);
void (gtk_combo_box_set_model)(GtkComboBox *combo_box, GtkTreeModel *model);
GtkTreeModel* (gtk_combo_box_get_model)(GtkComboBox *combo_box);
GtkTreeViewRowSeparatorFunc (gtk_combo_box_get_row_separator_func)(GtkComboBox *combo_box);
void (gtk_combo_box_set_row_separator_func)(GtkComboBox *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy);
void (gtk_combo_box_set_button_sensitivity)(GtkComboBox *combo_box, GtkSensitivityType sensitivity);
GtkSensitivityType (gtk_combo_box_get_button_sensitivity)(GtkComboBox *combo_box);
gboolean (gtk_combo_box_get_has_entry)(GtkComboBox *combo_box);
void (gtk_combo_box_set_entry_text_column)(GtkComboBox *combo_box, int text_column);
int (gtk_combo_box_get_entry_text_column)(GtkComboBox *combo_box);
void (gtk_combo_box_set_popup_fixed_width)(GtkComboBox *combo_box, gboolean fixed);
gboolean (gtk_combo_box_get_popup_fixed_width)(GtkComboBox *combo_box);
void (gtk_combo_box_popup)(GtkComboBox *combo_box);
void (gtk_combo_box_popup_for_device)(GtkComboBox *combo_box, GdkDevice *device);
void (gtk_combo_box_popdown)(GtkComboBox *combo_box);
int (gtk_combo_box_get_id_column)(GtkComboBox *combo_box);
void (gtk_combo_box_set_id_column)(GtkComboBox *combo_box, int id_column);
const char * (gtk_combo_box_get_active_id)(GtkComboBox *combo_box);
gboolean (gtk_combo_box_set_active_id)(GtkComboBox *combo_box, const char *active_id);
void (gtk_combo_box_set_child)(GtkComboBox *combo_box, GtkWidget *child);
GtkWidget * (gtk_combo_box_get_child)(GtkComboBox *combo_box);
GType (gtk_combo_box_text_get_type)(void);
GtkWidget* (gtk_combo_box_text_new)(void);
GtkWidget* (gtk_combo_box_text_new_with_entry)(void);
void (gtk_combo_box_text_append_text)(GtkComboBoxText *combo_box, const char *text);
void (gtk_combo_box_text_insert_text)(GtkComboBoxText *combo_box, int position, const char *text);
void (gtk_combo_box_text_prepend_text)(GtkComboBoxText *combo_box, const char *text);
void (gtk_combo_box_text_remove)(GtkComboBoxText *combo_box, int position);
void (gtk_combo_box_text_remove_all)(GtkComboBoxText *combo_box);
char* (gtk_combo_box_text_get_active_text)(GtkComboBoxText *combo_box);
void (gtk_combo_box_text_insert)(GtkComboBoxText *combo_box, int position, const char *id, const char *text);
void (gtk_combo_box_text_append)(GtkComboBoxText *combo_box, const char *id, const char *text);
void (gtk_combo_box_text_prepend)(GtkComboBoxText *combo_box, const char *id, const char *text);
GType (gtk_dialog_get_type)(void);
GtkWidget* (gtk_dialog_new)(void);
void (gtk_dialog_add_action_widget)(GtkDialog *dialog, GtkWidget *child, int response_id);
GtkWidget* (gtk_dialog_add_button)(GtkDialog *dialog, const char *button_text, int response_id);
void (gtk_dialog_set_response_sensitive)(GtkDialog *dialog, int response_id, gboolean setting);
void (gtk_dialog_set_default_response)(GtkDialog *dialog, int response_id);
GtkWidget* (gtk_dialog_get_widget_for_response)(GtkDialog *dialog, int response_id);
int (gtk_dialog_get_response_for_widget)(GtkDialog *dialog, GtkWidget *widget);
void (gtk_dialog_response)(GtkDialog *dialog, int response_id);
GtkWidget * (gtk_dialog_get_content_area)(GtkDialog *dialog);
GtkWidget * (gtk_dialog_get_header_bar)(GtkDialog *dialog);
GType (gtk_entry_completion_get_type)(void);
GtkEntryCompletion* (gtk_entry_completion_new)(void);
GtkEntryCompletion* (gtk_entry_completion_new_with_area)(GtkCellArea *area);
GtkWidget* (gtk_entry_completion_get_entry)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_model)(GtkEntryCompletion *completion, GtkTreeModel *model);
GtkTreeModel* (gtk_entry_completion_get_model)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_match_func)(GtkEntryCompletion *completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify);
void (gtk_entry_completion_set_minimum_key_length)(GtkEntryCompletion *completion, int length);
int (gtk_entry_completion_get_minimum_key_length)(GtkEntryCompletion *completion);
char * (gtk_entry_completion_compute_prefix)(GtkEntryCompletion *completion, const char *key);
void (gtk_entry_completion_complete)(GtkEntryCompletion *completion);
void (gtk_entry_completion_insert_prefix)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_inline_completion)(GtkEntryCompletion *completion, gboolean inline_completion);
gboolean (gtk_entry_completion_get_inline_completion)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_inline_selection)(GtkEntryCompletion *completion, gboolean inline_selection);
gboolean (gtk_entry_completion_get_inline_selection)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_popup_completion)(GtkEntryCompletion *completion, gboolean popup_completion);
gboolean (gtk_entry_completion_get_popup_completion)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_popup_set_width)(GtkEntryCompletion *completion, gboolean popup_set_width);
gboolean (gtk_entry_completion_get_popup_set_width)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_popup_single_match)(GtkEntryCompletion *completion, gboolean popup_single_match);
gboolean (gtk_entry_completion_get_popup_single_match)(GtkEntryCompletion *completion);
const char* (gtk_entry_completion_get_completion_prefix)(GtkEntryCompletion *completion);
void (gtk_entry_completion_set_text_column)(GtkEntryCompletion *completion, int column);
int (gtk_entry_completion_get_text_column)(GtkEntryCompletion *completion);
GType (gtk_file_chooser_get_type)(void);
GQuark (gtk_file_chooser_error_quark)(void);
void (gtk_file_chooser_set_action)(GtkFileChooser *chooser, GtkFileChooserAction action);
GtkFileChooserAction (gtk_file_chooser_get_action)(GtkFileChooser *chooser);
void (gtk_file_chooser_set_select_multiple)(GtkFileChooser *chooser, gboolean select_multiple);
gboolean (gtk_file_chooser_get_select_multiple)(GtkFileChooser *chooser);
void (gtk_file_chooser_set_create_folders)(GtkFileChooser *chooser, gboolean create_folders);
gboolean (gtk_file_chooser_get_create_folders)(GtkFileChooser *chooser);
void (gtk_file_chooser_set_current_name)(GtkFileChooser *chooser, const char *name);
char * (gtk_file_chooser_get_current_name)(GtkFileChooser *chooser);
GFile * (gtk_file_chooser_get_file)(GtkFileChooser *chooser);
gboolean (gtk_file_chooser_set_file)(GtkFileChooser *chooser, GFile *file, GError **error);
GListModel * (gtk_file_chooser_get_files)(GtkFileChooser *chooser);
gboolean (gtk_file_chooser_set_current_folder)(GtkFileChooser *chooser, GFile *file, GError **error);
GFile * (gtk_file_chooser_get_current_folder)(GtkFileChooser *chooser);
void (gtk_file_chooser_add_filter)(GtkFileChooser *chooser, GtkFileFilter *filter);
void (gtk_file_chooser_remove_filter)(GtkFileChooser *chooser, GtkFileFilter *filter);
GListModel * (gtk_file_chooser_get_filters)(GtkFileChooser *chooser);
void (gtk_file_chooser_set_filter)(GtkFileChooser *chooser, GtkFileFilter *filter);
GtkFileFilter * (gtk_file_chooser_get_filter)(GtkFileChooser *chooser);
gboolean (gtk_file_chooser_add_shortcut_folder)(GtkFileChooser *chooser, GFile *folder, GError **error);
gboolean (gtk_file_chooser_remove_shortcut_folder)(GtkFileChooser *chooser, GFile *folder, GError **error);
GListModel * (gtk_file_chooser_get_shortcut_folders)(GtkFileChooser *chooser);
void (gtk_file_chooser_add_choice)(GtkFileChooser *chooser, const char *id, const char *label, const char **options, const char **option_labels);
void (gtk_file_chooser_remove_choice)(GtkFileChooser *chooser, const char *id);
void (gtk_file_chooser_set_choice)(GtkFileChooser *chooser, const char *id, const char *option);
const char * (gtk_file_chooser_get_choice)(GtkFileChooser *chooser, const char *id);
GType (gtk_file_chooser_dialog_get_type)(void);
GType (gtk_file_chooser_native_get_type)(void);
GtkFileChooserNative* (gtk_file_chooser_native_new)(const char *title, GtkWindow *parent, GtkFileChooserAction action, const char *accept_label, const char *cancel_label);
const char* (gtk_file_chooser_native_get_accept_label)(GtkFileChooserNative *self);
void (gtk_file_chooser_native_set_accept_label)(GtkFileChooserNative *self, const char *accept_label);
const char* (gtk_file_chooser_native_get_cancel_label)(GtkFileChooserNative *self);
void (gtk_file_chooser_native_set_cancel_label)(GtkFileChooserNative *self, const char *cancel_label);
GType (gtk_file_chooser_widget_get_type)(void);
GtkWidget* (gtk_file_chooser_widget_new)(GtkFileChooserAction action);
GType (gtk_font_button_get_type)(void);
GtkWidget* (gtk_font_button_new)(void);
GtkWidget* (gtk_font_button_new_with_font)(const char *fontname);
const char * (gtk_font_button_get_title)(GtkFontButton *font_button);
void (gtk_font_button_set_title)(GtkFontButton *font_button, const char *title);
gboolean (gtk_font_button_get_modal)(GtkFontButton *font_button);
void (gtk_font_button_set_modal)(GtkFontButton *font_button, gboolean modal);
gboolean (gtk_font_button_get_use_font)(GtkFontButton *font_button);
void (gtk_font_button_set_use_font)(GtkFontButton *font_button, gboolean use_font);
gboolean (gtk_font_button_get_use_size)(GtkFontButton *font_button);
void (gtk_font_button_set_use_size)(GtkFontButton *font_button, gboolean use_size);
GType (gtk_font_chooser_get_type)(void);
PangoFontFamily* (gtk_font_chooser_get_font_family)(GtkFontChooser *fontchooser);
PangoFontFace* (gtk_font_chooser_get_font_face)(GtkFontChooser *fontchooser);
int (gtk_font_chooser_get_font_size)(GtkFontChooser *fontchooser);
PangoFontDescription * (gtk_font_chooser_get_font_desc)(GtkFontChooser *fontchooser);
void (gtk_font_chooser_set_font_desc)(GtkFontChooser *fontchooser, const PangoFontDescription *font_desc);
char * (gtk_font_chooser_get_font)(GtkFontChooser *fontchooser);
void (gtk_font_chooser_set_font)(GtkFontChooser *fontchooser, const char *fontname);
char * (gtk_font_chooser_get_preview_text)(GtkFontChooser *fontchooser);
void (gtk_font_chooser_set_preview_text)(GtkFontChooser *fontchooser, const char *text);
gboolean (gtk_font_chooser_get_show_preview_entry)(GtkFontChooser *fontchooser);
void (gtk_font_chooser_set_show_preview_entry)(GtkFontChooser *fontchooser, gboolean show_preview_entry);
void (gtk_font_chooser_set_filter_func)(GtkFontChooser *fontchooser, GtkFontFilterFunc filter, gpointer user_data, GDestroyNotify destroy);
void (gtk_font_chooser_set_font_map)(GtkFontChooser *fontchooser, PangoFontMap *fontmap);
PangoFontMap * (gtk_font_chooser_get_font_map)(GtkFontChooser *fontchooser);
void (gtk_font_chooser_set_level)(GtkFontChooser *fontchooser, GtkFontChooserLevel level);
GtkFontChooserLevel (gtk_font_chooser_get_level)(GtkFontChooser *fontchooser);
char * (gtk_font_chooser_get_font_features)(GtkFontChooser *fontchooser);
char * (gtk_font_chooser_get_language)(GtkFontChooser *fontchooser);
void (gtk_font_chooser_set_language)(GtkFontChooser *fontchooser, const char *language);
GType (gtk_font_chooser_dialog_get_type)(void);
GtkWidget* (gtk_font_chooser_dialog_new)(const char *title, GtkWindow *parent);
GType (gtk_font_chooser_widget_get_type)(void);
GtkWidget* (gtk_font_chooser_widget_new)(void);
GType (gtk_icon_view_get_type)(void);
GtkWidget * (gtk_icon_view_new)(void);
GtkWidget * (gtk_icon_view_new_with_area)(GtkCellArea *area);
GtkWidget * (gtk_icon_view_new_with_model)(GtkTreeModel *model);
void (gtk_icon_view_set_model)(GtkIconView *icon_view, GtkTreeModel *model);
GtkTreeModel * (gtk_icon_view_get_model)(GtkIconView *icon_view);
void (gtk_icon_view_set_text_column)(GtkIconView *icon_view, int column);
int (gtk_icon_view_get_text_column)(GtkIconView *icon_view);
void (gtk_icon_view_set_markup_column)(GtkIconView *icon_view, int column);
int (gtk_icon_view_get_markup_column)(GtkIconView *icon_view);
void (gtk_icon_view_set_pixbuf_column)(GtkIconView *icon_view, int column);
int (gtk_icon_view_get_pixbuf_column)(GtkIconView *icon_view);
void (gtk_icon_view_set_item_orientation)(GtkIconView *icon_view, GtkOrientation orientation);
GtkOrientation (gtk_icon_view_get_item_orientation)(GtkIconView *icon_view);
void (gtk_icon_view_set_columns)(GtkIconView *icon_view, int columns);
int (gtk_icon_view_get_columns)(GtkIconView *icon_view);
void (gtk_icon_view_set_item_width)(GtkIconView *icon_view, int item_width);
int (gtk_icon_view_get_item_width)(GtkIconView *icon_view);
void (gtk_icon_view_set_spacing)(GtkIconView *icon_view, int spacing);
int (gtk_icon_view_get_spacing)(GtkIconView *icon_view);
void (gtk_icon_view_set_row_spacing)(GtkIconView *icon_view, int row_spacing);
int (gtk_icon_view_get_row_spacing)(GtkIconView *icon_view);
void (gtk_icon_view_set_column_spacing)(GtkIconView *icon_view, int column_spacing);
int (gtk_icon_view_get_column_spacing)(GtkIconView *icon_view);
void (gtk_icon_view_set_margin)(GtkIconView *icon_view, int margin);
int (gtk_icon_view_get_margin)(GtkIconView *icon_view);
void (gtk_icon_view_set_item_padding)(GtkIconView *icon_view, int item_padding);
int (gtk_icon_view_get_item_padding)(GtkIconView *icon_view);
GtkTreePath * (gtk_icon_view_get_path_at_pos)(GtkIconView *icon_view, int x, int y);
gboolean (gtk_icon_view_get_item_at_pos)(GtkIconView *icon_view, int x, int y, GtkTreePath **path, GtkCellRenderer **cell);
gboolean (gtk_icon_view_get_visible_range)(GtkIconView *icon_view, GtkTreePath **start_path, GtkTreePath **end_path);
void (gtk_icon_view_set_activate_on_single_click)(GtkIconView *icon_view, gboolean single);
gboolean (gtk_icon_view_get_activate_on_single_click)(GtkIconView *icon_view);
void (gtk_icon_view_selected_foreach)(GtkIconView *icon_view, GtkIconViewForeachFunc func, gpointer data);
void (gtk_icon_view_set_selection_mode)(GtkIconView *icon_view, GtkSelectionMode mode);
GtkSelectionMode (gtk_icon_view_get_selection_mode)(GtkIconView *icon_view);
void (gtk_icon_view_select_path)(GtkIconView *icon_view, GtkTreePath *path);
void (gtk_icon_view_unselect_path)(GtkIconView *icon_view, GtkTreePath *path);
gboolean (gtk_icon_view_path_is_selected)(GtkIconView *icon_view, GtkTreePath *path);
int (gtk_icon_view_get_item_row)(GtkIconView *icon_view, GtkTreePath *path);
int (gtk_icon_view_get_item_column)(GtkIconView *icon_view, GtkTreePath *path);
GList* (gtk_icon_view_get_selected_items)(GtkIconView *icon_view);
void (gtk_icon_view_select_all)(GtkIconView *icon_view);
void (gtk_icon_view_unselect_all)(GtkIconView *icon_view);
void (gtk_icon_view_item_activated)(GtkIconView *icon_view, GtkTreePath *path);
void (gtk_icon_view_set_cursor)(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, gboolean start_editing);
gboolean (gtk_icon_view_get_cursor)(GtkIconView *icon_view, GtkTreePath **path, GtkCellRenderer **cell);
void (gtk_icon_view_scroll_to_path)(GtkIconView *icon_view, GtkTreePath *path, gboolean use_align, float row_align, float col_align);
void (gtk_icon_view_enable_model_drag_source)(GtkIconView *icon_view, GdkModifierType start_button_mask, GdkContentFormats *formats, GdkDragAction actions);
void (gtk_icon_view_enable_model_drag_dest)(GtkIconView *icon_view, GdkContentFormats *formats, GdkDragAction actions);
void (gtk_icon_view_unset_model_drag_source)(GtkIconView *icon_view);
void (gtk_icon_view_unset_model_drag_dest)(GtkIconView *icon_view);
void (gtk_icon_view_set_reorderable)(GtkIconView *icon_view, gboolean reorderable);
gboolean (gtk_icon_view_get_reorderable)(GtkIconView *icon_view);
void (gtk_icon_view_set_drag_dest_item)(GtkIconView *icon_view, GtkTreePath *path, GtkIconViewDropPosition pos);
void (gtk_icon_view_get_drag_dest_item)(GtkIconView *icon_view, GtkTreePath **path, GtkIconViewDropPosition *pos);
gboolean (gtk_icon_view_get_dest_item_at_pos)(GtkIconView *icon_view, int drag_x, int drag_y, GtkTreePath **path, GtkIconViewDropPosition *pos);
GdkPaintable* (gtk_icon_view_create_drag_icon)(GtkIconView *icon_view, GtkTreePath *path);
gboolean (gtk_icon_view_get_cell_rect)(GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, GdkRectangle *rect);
void (gtk_icon_view_set_tooltip_item)(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path);
void (gtk_icon_view_set_tooltip_cell)(GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path, GtkCellRenderer *cell);
gboolean (gtk_icon_view_get_tooltip_context)(GtkIconView *icon_view, int x, int y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter);
void (gtk_icon_view_set_tooltip_column)(GtkIconView *icon_view, int column);
int (gtk_icon_view_get_tooltip_column)(GtkIconView *icon_view);
GType (gtk_info_bar_get_type)(void);
GtkWidget* (gtk_info_bar_new)(void);
void (gtk_info_bar_add_action_widget)(GtkInfoBar *info_bar, GtkWidget *child, int response_id);
void (gtk_info_bar_remove_action_widget)(GtkInfoBar *info_bar, GtkWidget *widget);
GtkWidget* (gtk_info_bar_add_button)(GtkInfoBar *info_bar, const char *button_text, int response_id);
void (gtk_info_bar_add_child)(GtkInfoBar *info_bar, GtkWidget *widget);
void (gtk_info_bar_remove_child)(GtkInfoBar *info_bar, GtkWidget *widget);
void (gtk_info_bar_set_response_sensitive)(GtkInfoBar *info_bar, int response_id, gboolean setting);
void (gtk_info_bar_set_default_response)(GtkInfoBar *info_bar, int response_id);
void (gtk_info_bar_response)(GtkInfoBar *info_bar, int response_id);
void (gtk_info_bar_set_message_type)(GtkInfoBar *info_bar, GtkMessageType message_type);
GtkMessageType (gtk_info_bar_get_message_type)(GtkInfoBar *info_bar);
void (gtk_info_bar_set_show_close_button)(GtkInfoBar *info_bar, gboolean setting);
gboolean (gtk_info_bar_get_show_close_button)(GtkInfoBar *info_bar);
void (gtk_info_bar_set_revealed)(GtkInfoBar *info_bar, gboolean revealed);
gboolean (gtk_info_bar_get_revealed)(GtkInfoBar *info_bar);
GType (gtk_list_store_get_type)(void);
GtkListStore* (gtk_list_store_newv)(int n_columns, GType *types);
void (gtk_list_store_set_column_types)(GtkListStore *list_store, int n_columns, GType *types);
void (gtk_list_store_set_value)(GtkListStore *list_store, GtkTreeIter *iter, int column, GValue *value);
void (gtk_list_store_set_valuesv)(GtkListStore *list_store, GtkTreeIter *iter, int *columns, GValue *values, int n_values);
void (gtk_list_store_set_valist)(GtkListStore *list_store, GtkTreeIter *iter, va_list var_args);
gboolean (gtk_list_store_remove)(GtkListStore *list_store, GtkTreeIter *iter);
void (gtk_list_store_insert)(GtkListStore *list_store, GtkTreeIter *iter, int position);
void (gtk_list_store_insert_before)(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling);
void (gtk_list_store_insert_after)(GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling);
void (gtk_list_store_insert_with_valuesv)(GtkListStore *list_store, GtkTreeIter *iter, int position, int *columns, GValue *values, int n_values);
void (gtk_list_store_prepend)(GtkListStore *list_store, GtkTreeIter *iter);
void (gtk_list_store_append)(GtkListStore *list_store, GtkTreeIter *iter);
void (gtk_list_store_clear)(GtkListStore *list_store);
gboolean (gtk_list_store_iter_is_valid)(GtkListStore *list_store, GtkTreeIter *iter);
void (gtk_list_store_reorder)(GtkListStore *store, int *new_order);
void (gtk_list_store_swap)(GtkListStore *store, GtkTreeIter *a, GtkTreeIter *b);
void (gtk_list_store_move_after)(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position);
void (gtk_list_store_move_before)(GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position);
GType (gtk_lock_button_get_type)(void);
GtkWidget* (gtk_lock_button_new)(GPermission *permission);
GPermission* (gtk_lock_button_get_permission)(GtkLockButton *button);
void (gtk_lock_button_set_permission)(GtkLockButton *button, GPermission *permission);
GType (gtk_message_dialog_get_type)(void);
void (gtk_message_dialog_set_markup)(GtkMessageDialog *message_dialog, const char *str);
GtkWidget* (gtk_message_dialog_get_message_area)(GtkMessageDialog *message_dialog);
void (gtk_render_option)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_arrow)(GtkStyleContext *context, cairo_t *cr, double angle, double x, double y, double size);
void (gtk_render_background)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_frame)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_expander)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_focus)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_layout)(GtkStyleContext *context, cairo_t *cr, double x, double y, PangoLayout *layout);
void (gtk_render_line)(GtkStyleContext *context, cairo_t *cr, double x0, double y0, double x1, double y1);
void (gtk_render_handle)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_activity)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
void (gtk_render_icon)(GtkStyleContext *context, cairo_t *cr, GdkTexture *texture, double x, double y);
void (gtk_snapshot_render_background)(GtkSnapshot *snapshot, GtkStyleContext *context, double x, double y, double width, double height);
void (gtk_snapshot_render_frame)(GtkSnapshot *snapshot, GtkStyleContext *context, double x, double y, double width, double height);
void (gtk_snapshot_render_focus)(GtkSnapshot *snapshot, GtkStyleContext *context, double x, double y, double width, double height);
void (gtk_snapshot_render_layout)(GtkSnapshot *snapshot, GtkStyleContext *context, double x, double y, PangoLayout *layout);
void (gtk_snapshot_render_insertion_cursor)(GtkSnapshot *snapshot, GtkStyleContext *context, double x, double y, PangoLayout *layout, int index, PangoDirection direction);
void (gtk_render_check)(GtkStyleContext *context, cairo_t *cr, double x, double y, double width, double height);
gboolean (gtk_show_uri_full_finish)(GtkWindow *parent, GAsyncResult *result, GError **error);
void (gtk_show_uri)(GtkWindow *parent, const char *uri, guint32 timestamp);
void (gtk_show_uri_full)(GtkWindow *parent, const char *uri, guint32 timestamp, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GType (gtk_statusbar_get_type)(void);
GtkWidget* (gtk_statusbar_new)(void);
guint (gtk_statusbar_get_context_id)(GtkStatusbar *statusbar, const char *context_description);
guint (gtk_statusbar_push)(GtkStatusbar *statusbar, guint context_id, const char *text);
void (gtk_statusbar_pop)(GtkStatusbar *statusbar, guint context_id);
void (gtk_statusbar_remove)(GtkStatusbar *statusbar, guint context_id, guint message_id);
void (gtk_statusbar_remove_all)(GtkStatusbar *statusbar, guint context_id);
GType (gtk_style_context_get_type)(void);
void (gtk_style_context_add_provider)(GtkStyleContext *context, GtkStyleProvider *provider, guint priority);
void (gtk_style_context_remove_provider)(GtkStyleContext *context, GtkStyleProvider *provider);
void (gtk_style_context_save)(GtkStyleContext *context);
void (gtk_style_context_restore)(GtkStyleContext *context);
void (gtk_style_context_set_state)(GtkStyleContext *context, GtkStateFlags flags);
GtkStateFlags (gtk_style_context_get_state)(GtkStyleContext *context);
void (gtk_style_context_set_scale)(GtkStyleContext *context, int scale);
int (gtk_style_context_get_scale)(GtkStyleContext *context);
void (gtk_style_context_add_class)(GtkStyleContext *context, const char *class_name);
void (gtk_style_context_remove_class)(GtkStyleContext *context, const char *class_name);
gboolean (gtk_style_context_has_class)(GtkStyleContext *context, const char *class_name);
void (gtk_style_context_set_display)(GtkStyleContext *context, GdkDisplay *display);
GdkDisplay* (gtk_style_context_get_display)(GtkStyleContext *context);
gboolean (gtk_style_context_lookup_color)(GtkStyleContext *context, const char *color_name, GdkRGBA *color);
void (gtk_style_context_get_color)(GtkStyleContext *context, GdkRGBA *color);
void (gtk_style_context_get_border)(GtkStyleContext *context, GtkBorder *border);
void (gtk_style_context_get_padding)(GtkStyleContext *context, GtkBorder *padding);
void (gtk_style_context_get_margin)(GtkStyleContext *context, GtkBorder *margin);
char * (gtk_style_context_to_string)(GtkStyleContext *context, GtkStyleContextPrintFlags flags);
GType (gtk_tree_row_data_get_type)(void);
GType (gtk_tree_drag_source_get_type)(void);
gboolean (gtk_tree_drag_source_row_draggable)(GtkTreeDragSource *drag_source, GtkTreePath *path);
gboolean (gtk_tree_drag_source_drag_data_delete)(GtkTreeDragSource *drag_source, GtkTreePath *path);
GdkContentProvider * (gtk_tree_drag_source_drag_data_get)(GtkTreeDragSource *drag_source, GtkTreePath *path);
GType (gtk_tree_drag_dest_get_type)(void);
gboolean (gtk_tree_drag_dest_drag_data_received)(GtkTreeDragDest *drag_dest, GtkTreePath *dest, const GValue *value);
gboolean (gtk_tree_drag_dest_row_drop_possible)(GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, const GValue *value);
GdkContentProvider * (gtk_tree_create_row_drag_content)(GtkTreeModel *tree_model, GtkTreePath *path);
gboolean (gtk_tree_get_row_drag_data)(const GValue *value, GtkTreeModel **tree_model, GtkTreePath **path);
GType (gtk_tree_model_get_type)(void);
GType (gtk_tree_iter_get_type)(void);
GType (gtk_tree_path_get_type)(void);
GType (gtk_tree_row_reference_get_type)(void);
GtkTreePath* (gtk_tree_path_new)(void);
GtkTreePath* (gtk_tree_path_new_from_string)(const char *path);
GtkTreePath* (gtk_tree_path_new_from_indicesv)(int *indices, gsize length);
char* (gtk_tree_path_to_string)(GtkTreePath *path);
GtkTreePath* (gtk_tree_path_new_first)(void);
void (gtk_tree_path_append_index)(GtkTreePath *path, int index_);
void (gtk_tree_path_prepend_index)(GtkTreePath *path, int index_);
int (gtk_tree_path_get_depth)(GtkTreePath *path);
int* (gtk_tree_path_get_indices)(GtkTreePath *path);
int* (gtk_tree_path_get_indices_with_depth)(GtkTreePath *path, int *depth);
void (gtk_tree_path_free)(GtkTreePath *path);
GtkTreePath* (gtk_tree_path_copy)(const GtkTreePath *path);
int (gtk_tree_path_compare)(const GtkTreePath *a, const GtkTreePath *b);
void (gtk_tree_path_next)(GtkTreePath *path);
gboolean (gtk_tree_path_prev)(GtkTreePath *path);
gboolean (gtk_tree_path_up)(GtkTreePath *path);
void (gtk_tree_path_down)(GtkTreePath *path);
gboolean (gtk_tree_path_is_ancestor)(GtkTreePath *path, GtkTreePath *descendant);
gboolean (gtk_tree_path_is_descendant)(GtkTreePath *path, GtkTreePath *ancestor);
GtkTreeRowReference* (gtk_tree_row_reference_new)(GtkTreeModel *model, GtkTreePath *path);
GtkTreeRowReference* (gtk_tree_row_reference_new_proxy)(GObject *proxy, GtkTreeModel *model, GtkTreePath *path);
GtkTreePath* (gtk_tree_row_reference_get_path)(GtkTreeRowReference *reference);
GtkTreeModel* (gtk_tree_row_reference_get_model)(GtkTreeRowReference *reference);
gboolean (gtk_tree_row_reference_valid)(GtkTreeRowReference *reference);
GtkTreeRowReference* (gtk_tree_row_reference_copy)(GtkTreeRowReference *reference);
void (gtk_tree_row_reference_free)(GtkTreeRowReference *reference);
void (gtk_tree_row_reference_inserted)(GObject *proxy, GtkTreePath *path);
void (gtk_tree_row_reference_deleted)(GObject *proxy, GtkTreePath *path);
void (gtk_tree_row_reference_reordered)(GObject *proxy, GtkTreePath *path, GtkTreeIter *iter, int *new_order);
GtkTreeIter * (gtk_tree_iter_copy)(GtkTreeIter *iter);
void (gtk_tree_iter_free)(GtkTreeIter *iter);
GtkTreeModelFlags (gtk_tree_model_get_flags)(GtkTreeModel *tree_model);
int (gtk_tree_model_get_n_columns)(GtkTreeModel *tree_model);
GType (gtk_tree_model_get_column_type)(GtkTreeModel *tree_model, int index_);
gboolean (gtk_tree_model_get_iter)(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path);
gboolean (gtk_tree_model_get_iter_from_string)(GtkTreeModel *tree_model, GtkTreeIter *iter, const char *path_string);
char * (gtk_tree_model_get_string_from_iter)(GtkTreeModel *tree_model, GtkTreeIter *iter);
gboolean (gtk_tree_model_get_iter_first)(GtkTreeModel *tree_model, GtkTreeIter *iter);
GtkTreePath * (gtk_tree_model_get_path)(GtkTreeModel *tree_model, GtkTreeIter *iter);
void (gtk_tree_model_get_value)(GtkTreeModel *tree_model, GtkTreeIter *iter, int column, GValue *value);
gboolean (gtk_tree_model_iter_previous)(GtkTreeModel *tree_model, GtkTreeIter *iter);
gboolean (gtk_tree_model_iter_next)(GtkTreeModel *tree_model, GtkTreeIter *iter);
gboolean (gtk_tree_model_iter_children)(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent);
gboolean (gtk_tree_model_iter_has_child)(GtkTreeModel *tree_model, GtkTreeIter *iter);
int (gtk_tree_model_iter_n_children)(GtkTreeModel *tree_model, GtkTreeIter *iter);
gboolean (gtk_tree_model_iter_nth_child)(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, int n);
gboolean (gtk_tree_model_iter_parent)(GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child);
void (gtk_tree_model_ref_node)(GtkTreeModel *tree_model, GtkTreeIter *iter);
void (gtk_tree_model_unref_node)(GtkTreeModel *tree_model, GtkTreeIter *iter);
void (gtk_tree_model_get_valist)(GtkTreeModel *tree_model, GtkTreeIter *iter, va_list var_args);
void (gtk_tree_model_foreach)(GtkTreeModel *model, GtkTreeModelForeachFunc func, gpointer user_data);
void (gtk_tree_model_row_changed)(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);
void (gtk_tree_model_row_inserted)(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);
void (gtk_tree_model_row_has_child_toggled)(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);
void (gtk_tree_model_row_deleted)(GtkTreeModel *tree_model, GtkTreePath *path);
void (gtk_tree_model_rows_reordered)(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, int *new_order);
void (gtk_tree_model_rows_reordered_with_length)(GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, int *new_order, int length);
GType (gtk_tree_model_filter_get_type)(void);
GtkTreeModel* (gtk_tree_model_filter_new)(GtkTreeModel *child_model, GtkTreePath *root);
void (gtk_tree_model_filter_set_visible_func)(GtkTreeModelFilter *filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy);
void (gtk_tree_model_filter_set_modify_func)(GtkTreeModelFilter *filter, int n_columns, GType *types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy);
void (gtk_tree_model_filter_set_visible_column)(GtkTreeModelFilter *filter, int column);
GtkTreeModel* (gtk_tree_model_filter_get_model)(GtkTreeModelFilter *filter);
gboolean (gtk_tree_model_filter_convert_child_iter_to_iter)(GtkTreeModelFilter *filter, GtkTreeIter *filter_iter, GtkTreeIter *child_iter);
void (gtk_tree_model_filter_convert_iter_to_child_iter)(GtkTreeModelFilter *filter, GtkTreeIter *child_iter, GtkTreeIter *filter_iter);
GtkTreePath* (gtk_tree_model_filter_convert_child_path_to_path)(GtkTreeModelFilter *filter, GtkTreePath *child_path);
GtkTreePath* (gtk_tree_model_filter_convert_path_to_child_path)(GtkTreeModelFilter *filter, GtkTreePath *filter_path);
void (gtk_tree_model_filter_refilter)(GtkTreeModelFilter *filter);
void (gtk_tree_model_filter_clear_cache)(GtkTreeModelFilter *filter);
GType (gtk_tree_model_sort_get_type)(void);
GtkTreeModel* (gtk_tree_model_sort_new_with_model)(GtkTreeModel *child_model);
GtkTreeModel* (gtk_tree_model_sort_get_model)(GtkTreeModelSort *tree_model);
GtkTreePath* (gtk_tree_model_sort_convert_child_path_to_path)(GtkTreeModelSort *tree_model_sort, GtkTreePath *child_path);
gboolean (gtk_tree_model_sort_convert_child_iter_to_iter)(GtkTreeModelSort *tree_model_sort, GtkTreeIter *sort_iter, GtkTreeIter *child_iter);
GtkTreePath* (gtk_tree_model_sort_convert_path_to_child_path)(GtkTreeModelSort *tree_model_sort, GtkTreePath *sorted_path);
void (gtk_tree_model_sort_convert_iter_to_child_iter)(GtkTreeModelSort *tree_model_sort, GtkTreeIter *child_iter, GtkTreeIter *sorted_iter);
void (gtk_tree_model_sort_reset_default_sort_func)(GtkTreeModelSort *tree_model_sort);
void (gtk_tree_model_sort_clear_cache)(GtkTreeModelSort *tree_model_sort);
gboolean (gtk_tree_model_sort_iter_is_valid)(GtkTreeModelSort *tree_model_sort, GtkTreeIter *iter);
GType (gtk_tree_selection_get_type)(void);
void (gtk_tree_selection_set_mode)(GtkTreeSelection *selection, GtkSelectionMode type);
GtkSelectionMode (gtk_tree_selection_get_mode)(GtkTreeSelection *selection);
void (gtk_tree_selection_set_select_function)(GtkTreeSelection *selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy);
gpointer (gtk_tree_selection_get_user_data)(GtkTreeSelection *selection);
GtkTreeView* (gtk_tree_selection_get_tree_view)(GtkTreeSelection *selection);
GtkTreeSelectionFunc (gtk_tree_selection_get_select_function)(GtkTreeSelection *selection);
gboolean (gtk_tree_selection_get_selected)(GtkTreeSelection *selection, GtkTreeModel **model, GtkTreeIter *iter);
GList * (gtk_tree_selection_get_selected_rows)(GtkTreeSelection *selection, GtkTreeModel **model);
int (gtk_tree_selection_count_selected_rows)(GtkTreeSelection *selection);
void (gtk_tree_selection_selected_foreach)(GtkTreeSelection *selection, GtkTreeSelectionForeachFunc func, gpointer data);
void (gtk_tree_selection_select_path)(GtkTreeSelection *selection, GtkTreePath *path);
void (gtk_tree_selection_unselect_path)(GtkTreeSelection *selection, GtkTreePath *path);
void (gtk_tree_selection_select_iter)(GtkTreeSelection *selection, GtkTreeIter *iter);
void (gtk_tree_selection_unselect_iter)(GtkTreeSelection *selection, GtkTreeIter *iter);
gboolean (gtk_tree_selection_path_is_selected)(GtkTreeSelection *selection, GtkTreePath *path);
gboolean (gtk_tree_selection_iter_is_selected)(GtkTreeSelection *selection, GtkTreeIter *iter);
void (gtk_tree_selection_select_all)(GtkTreeSelection *selection);
void (gtk_tree_selection_unselect_all)(GtkTreeSelection *selection);
void (gtk_tree_selection_select_range)(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path);
void (gtk_tree_selection_unselect_range)(GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path);
GType (gtk_tree_sortable_get_type)(void);
void (gtk_tree_sortable_sort_column_changed)(GtkTreeSortable *sortable);
gboolean (gtk_tree_sortable_get_sort_column_id)(GtkTreeSortable *sortable, int *sort_column_id, GtkSortType *order);
void (gtk_tree_sortable_set_sort_column_id)(GtkTreeSortable *sortable, int sort_column_id, GtkSortType order);
void (gtk_tree_sortable_set_sort_func)(GtkTreeSortable *sortable, int sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);
void (gtk_tree_sortable_set_default_sort_func)(GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);
gboolean (gtk_tree_sortable_has_default_sort_func)(GtkTreeSortable *sortable);
GType (gtk_tree_store_get_type)(void);
GtkTreeStore* (gtk_tree_store_newv)(int n_columns, GType *types);
void (gtk_tree_store_set_column_types)(GtkTreeStore *tree_store, int n_columns, GType *types);
void (gtk_tree_store_set_value)(GtkTreeStore *tree_store, GtkTreeIter *iter, int column, GValue *value);
void (gtk_tree_store_set_valuesv)(GtkTreeStore *tree_store, GtkTreeIter *iter, int *columns, GValue *values, int n_values);
void (gtk_tree_store_set_valist)(GtkTreeStore *tree_store, GtkTreeIter *iter, va_list var_args);
gboolean (gtk_tree_store_remove)(GtkTreeStore *tree_store, GtkTreeIter *iter);
void (gtk_tree_store_insert)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, int position);
void (gtk_tree_store_insert_before)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling);
void (gtk_tree_store_insert_after)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling);
void (gtk_tree_store_insert_with_valuesv)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, int position, int *columns, GValue *values, int n_values);
void (gtk_tree_store_prepend)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent);
void (gtk_tree_store_append)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent);
gboolean (gtk_tree_store_is_ancestor)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *descendant);
int (gtk_tree_store_iter_depth)(GtkTreeStore *tree_store, GtkTreeIter *iter);
void (gtk_tree_store_clear)(GtkTreeStore *tree_store);
gboolean (gtk_tree_store_iter_is_valid)(GtkTreeStore *tree_store, GtkTreeIter *iter);
void (gtk_tree_store_reorder)(GtkTreeStore *tree_store, GtkTreeIter *parent, int *new_order);
void (gtk_tree_store_swap)(GtkTreeStore *tree_store, GtkTreeIter *a, GtkTreeIter *b);
void (gtk_tree_store_move_before)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position);
void (gtk_tree_store_move_after)(GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position);
GType (gtk_tree_view_get_type)(void);
GtkWidget* (gtk_tree_view_new)(void);
GtkWidget* (gtk_tree_view_new_with_model)(GtkTreeModel *model);
GtkTreeModel* (gtk_tree_view_get_model)(GtkTreeView *tree_view);
void (gtk_tree_view_set_model)(GtkTreeView *tree_view, GtkTreeModel *model);
GtkTreeSelection* (gtk_tree_view_get_selection)(GtkTreeView *tree_view);
gboolean (gtk_tree_view_get_headers_visible)(GtkTreeView *tree_view);
void (gtk_tree_view_set_headers_visible)(GtkTreeView *tree_view, gboolean headers_visible);
void (gtk_tree_view_columns_autosize)(GtkTreeView *tree_view);
gboolean (gtk_tree_view_get_headers_clickable)(GtkTreeView *tree_view);
void (gtk_tree_view_set_headers_clickable)(GtkTreeView *tree_view, gboolean setting);
gboolean (gtk_tree_view_get_activate_on_single_click)(GtkTreeView *tree_view);
void (gtk_tree_view_set_activate_on_single_click)(GtkTreeView *tree_view, gboolean single);
int (gtk_tree_view_append_column)(GtkTreeView *tree_view, GtkTreeViewColumn *column);
int (gtk_tree_view_remove_column)(GtkTreeView *tree_view, GtkTreeViewColumn *column);
int (gtk_tree_view_insert_column)(GtkTreeView *tree_view, GtkTreeViewColumn *column, int position);
int (gtk_tree_view_insert_column_with_data_func)(GtkTreeView *tree_view, int position, const char *title, GtkCellRenderer *cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify);
guint (gtk_tree_view_get_n_columns)(GtkTreeView *tree_view);
GtkTreeViewColumn* (gtk_tree_view_get_column)(GtkTreeView *tree_view, int n);
GList* (gtk_tree_view_get_columns)(GtkTreeView *tree_view);
void (gtk_tree_view_move_column_after)(GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *base_column);
void (gtk_tree_view_set_expander_column)(GtkTreeView *tree_view, GtkTreeViewColumn *column);
GtkTreeViewColumn* (gtk_tree_view_get_expander_column)(GtkTreeView *tree_view);
void (gtk_tree_view_set_column_drag_function)(GtkTreeView *tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy);
void (gtk_tree_view_scroll_to_point)(GtkTreeView *tree_view, int tree_x, int tree_y);
void (gtk_tree_view_scroll_to_cell)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, gboolean use_align, float row_align, float col_align);
void (gtk_tree_view_row_activated)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column);
void (gtk_tree_view_expand_all)(GtkTreeView *tree_view);
void (gtk_tree_view_collapse_all)(GtkTreeView *tree_view);
void (gtk_tree_view_expand_to_path)(GtkTreeView *tree_view, GtkTreePath *path);
gboolean (gtk_tree_view_expand_row)(GtkTreeView *tree_view, GtkTreePath *path, gboolean open_all);
gboolean (gtk_tree_view_collapse_row)(GtkTreeView *tree_view, GtkTreePath *path);
void (gtk_tree_view_map_expanded_rows)(GtkTreeView *tree_view, GtkTreeViewMappingFunc func, gpointer data);
gboolean (gtk_tree_view_row_expanded)(GtkTreeView *tree_view, GtkTreePath *path);
void (gtk_tree_view_set_reorderable)(GtkTreeView *tree_view, gboolean reorderable);
gboolean (gtk_tree_view_get_reorderable)(GtkTreeView *tree_view);
void (gtk_tree_view_set_cursor)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, gboolean start_editing);
void (gtk_tree_view_set_cursor_on_cell)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, GtkCellRenderer *focus_cell, gboolean start_editing);
void (gtk_tree_view_get_cursor)(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewColumn **focus_column);
gboolean (gtk_tree_view_get_path_at_pos)(GtkTreeView *tree_view, int x, int y, GtkTreePath **path, GtkTreeViewColumn **column, int *cell_x, int *cell_y);
void (gtk_tree_view_get_cell_area)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect);
void (gtk_tree_view_get_background_area)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect);
void (gtk_tree_view_get_visible_rect)(GtkTreeView *tree_view, GdkRectangle *visible_rect);
gboolean (gtk_tree_view_get_visible_range)(GtkTreeView *tree_view, GtkTreePath **start_path, GtkTreePath **end_path);
gboolean (gtk_tree_view_is_blank_at_pos)(GtkTreeView *tree_view, int x, int y, GtkTreePath **path, GtkTreeViewColumn **column, int *cell_x, int *cell_y);
void (gtk_tree_view_enable_model_drag_source)(GtkTreeView *tree_view, GdkModifierType start_button_mask, GdkContentFormats *formats, GdkDragAction actions);
void (gtk_tree_view_enable_model_drag_dest)(GtkTreeView *tree_view, GdkContentFormats *formats, GdkDragAction actions);
void (gtk_tree_view_unset_rows_drag_source)(GtkTreeView *tree_view);
void (gtk_tree_view_unset_rows_drag_dest)(GtkTreeView *tree_view);
void (gtk_tree_view_set_drag_dest_row)(GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewDropPosition pos);
void (gtk_tree_view_get_drag_dest_row)(GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewDropPosition *pos);
gboolean (gtk_tree_view_get_dest_row_at_pos)(GtkTreeView *tree_view, int drag_x, int drag_y, GtkTreePath **path, GtkTreeViewDropPosition *pos);
GdkPaintable* (gtk_tree_view_create_row_drag_icon)(GtkTreeView *tree_view, GtkTreePath *path);
void (gtk_tree_view_set_enable_search)(GtkTreeView *tree_view, gboolean enable_search);
gboolean (gtk_tree_view_get_enable_search)(GtkTreeView *tree_view);
int (gtk_tree_view_get_search_column)(GtkTreeView *tree_view);
void (gtk_tree_view_set_search_column)(GtkTreeView *tree_view, int column);
GtkTreeViewSearchEqualFunc (gtk_tree_view_get_search_equal_func)(GtkTreeView *tree_view);
void (gtk_tree_view_set_search_equal_func)(GtkTreeView *tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy);
GtkEditable* (gtk_tree_view_get_search_entry)(GtkTreeView *tree_view);
void (gtk_tree_view_set_search_entry)(GtkTreeView *tree_view, GtkEditable *entry);
void (gtk_tree_view_convert_widget_to_tree_coords)(GtkTreeView *tree_view, int wx, int wy, int *tx, int *ty);
void (gtk_tree_view_convert_tree_to_widget_coords)(GtkTreeView *tree_view, int tx, int ty, int *wx, int *wy);
void (gtk_tree_view_convert_widget_to_bin_window_coords)(GtkTreeView *tree_view, int wx, int wy, int *bx, int *by);
void (gtk_tree_view_convert_bin_window_to_widget_coords)(GtkTreeView *tree_view, int bx, int by, int *wx, int *wy);
void (gtk_tree_view_convert_tree_to_bin_window_coords)(GtkTreeView *tree_view, int tx, int ty, int *bx, int *by);
void (gtk_tree_view_convert_bin_window_to_tree_coords)(GtkTreeView *tree_view, int bx, int by, int *tx, int *ty);
void (gtk_tree_view_set_fixed_height_mode)(GtkTreeView *tree_view, gboolean enable);
gboolean (gtk_tree_view_get_fixed_height_mode)(GtkTreeView *tree_view);
void (gtk_tree_view_set_hover_selection)(GtkTreeView *tree_view, gboolean hover);
gboolean (gtk_tree_view_get_hover_selection)(GtkTreeView *tree_view);
void (gtk_tree_view_set_hover_expand)(GtkTreeView *tree_view, gboolean expand);
gboolean (gtk_tree_view_get_hover_expand)(GtkTreeView *tree_view);
void (gtk_tree_view_set_rubber_banding)(GtkTreeView *tree_view, gboolean enable);
gboolean (gtk_tree_view_get_rubber_banding)(GtkTreeView *tree_view);
gboolean (gtk_tree_view_is_rubber_banding_active)(GtkTreeView *tree_view);
GtkTreeViewRowSeparatorFunc (gtk_tree_view_get_row_separator_func)(GtkTreeView *tree_view);
void (gtk_tree_view_set_row_separator_func)(GtkTreeView *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy);
GtkTreeViewGridLines (gtk_tree_view_get_grid_lines)(GtkTreeView *tree_view);
void (gtk_tree_view_set_grid_lines)(GtkTreeView *tree_view, GtkTreeViewGridLines grid_lines);
gboolean (gtk_tree_view_get_enable_tree_lines)(GtkTreeView *tree_view);
void (gtk_tree_view_set_enable_tree_lines)(GtkTreeView *tree_view, gboolean enabled);
void (gtk_tree_view_set_show_expanders)(GtkTreeView *tree_view, gboolean enabled);
gboolean (gtk_tree_view_get_show_expanders)(GtkTreeView *tree_view);
void (gtk_tree_view_set_level_indentation)(GtkTreeView *tree_view, int indentation);
int (gtk_tree_view_get_level_indentation)(GtkTreeView *tree_view);
void (gtk_tree_view_set_tooltip_row)(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path);
void (gtk_tree_view_set_tooltip_cell)(GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path, GtkTreeViewColumn *column, GtkCellRenderer *cell);
gboolean (gtk_tree_view_get_tooltip_context)(GtkTreeView *tree_view, int x, int y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter);
void (gtk_tree_view_set_tooltip_column)(GtkTreeView *tree_view, int column);
int (gtk_tree_view_get_tooltip_column)(GtkTreeView *tree_view);
GType (gtk_tree_view_column_get_type)(void);
GtkTreeViewColumn* (gtk_tree_view_column_new)(void);
GtkTreeViewColumn* (gtk_tree_view_column_new_with_area)(GtkCellArea *area);
void (gtk_tree_view_column_pack_start)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand);
void (gtk_tree_view_column_pack_end)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand);
void (gtk_tree_view_column_clear)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_add_attribute)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, const char *attribute, int column);
void (gtk_tree_view_column_set_cell_data_func)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy);
void (gtk_tree_view_column_clear_attributes)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer);
void (gtk_tree_view_column_set_spacing)(GtkTreeViewColumn *tree_column, int spacing);
int (gtk_tree_view_column_get_spacing)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_visible)(GtkTreeViewColumn *tree_column, gboolean visible);
gboolean (gtk_tree_view_column_get_visible)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_resizable)(GtkTreeViewColumn *tree_column, gboolean resizable);
gboolean (gtk_tree_view_column_get_resizable)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_sizing)(GtkTreeViewColumn *tree_column, GtkTreeViewColumnSizing type);
GtkTreeViewColumnSizing (gtk_tree_view_column_get_sizing)(GtkTreeViewColumn *tree_column);
int (gtk_tree_view_column_get_x_offset)(GtkTreeViewColumn *tree_column);
int (gtk_tree_view_column_get_width)(GtkTreeViewColumn *tree_column);
int (gtk_tree_view_column_get_fixed_width)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_fixed_width)(GtkTreeViewColumn *tree_column, int fixed_width);
void (gtk_tree_view_column_set_min_width)(GtkTreeViewColumn *tree_column, int min_width);
int (gtk_tree_view_column_get_min_width)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_max_width)(GtkTreeViewColumn *tree_column, int max_width);
int (gtk_tree_view_column_get_max_width)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_clicked)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_title)(GtkTreeViewColumn *tree_column, const char *title);
const char * (gtk_tree_view_column_get_title)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_expand)(GtkTreeViewColumn *tree_column, gboolean expand);
gboolean (gtk_tree_view_column_get_expand)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_clickable)(GtkTreeViewColumn *tree_column, gboolean clickable);
gboolean (gtk_tree_view_column_get_clickable)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_widget)(GtkTreeViewColumn *tree_column, GtkWidget *widget);
GtkWidget* (gtk_tree_view_column_get_widget)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_alignment)(GtkTreeViewColumn *tree_column, float xalign);
float (gtk_tree_view_column_get_alignment)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_reorderable)(GtkTreeViewColumn *tree_column, gboolean reorderable);
gboolean (gtk_tree_view_column_get_reorderable)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_sort_column_id)(GtkTreeViewColumn *tree_column, int sort_column_id);
int (gtk_tree_view_column_get_sort_column_id)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_sort_indicator)(GtkTreeViewColumn *tree_column, gboolean setting);
gboolean (gtk_tree_view_column_get_sort_indicator)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_set_sort_order)(GtkTreeViewColumn *tree_column, GtkSortType order);
GtkSortType (gtk_tree_view_column_get_sort_order)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_cell_set_cell_data)(GtkTreeViewColumn *tree_column, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded);
void (gtk_tree_view_column_cell_get_size)(GtkTreeViewColumn *tree_column, int *x_offset, int *y_offset, int *width, int *height);
gboolean (gtk_tree_view_column_cell_is_visible)(GtkTreeViewColumn *tree_column);
void (gtk_tree_view_column_focus_cell)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell);
gboolean (gtk_tree_view_column_cell_get_position)(GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, int *x_offset, int *width);
void (gtk_tree_view_column_queue_resize)(GtkTreeViewColumn *tree_column);
GtkWidget* (gtk_tree_view_column_get_tree_view)(GtkTreeViewColumn *tree_column);
GtkWidget* (gtk_tree_view_column_get_button)(GtkTreeViewColumn *tree_column);
GType (gtk_volume_button_get_type)(void);
GtkWidget* (gtk_volume_button_new)(void);
GType (gtk_page_setup_get_type)(void);
GtkPageSetup * (gtk_page_setup_new)(void);
GtkPageSetup * (gtk_page_setup_copy)(GtkPageSetup *other);
GtkPageOrientation (gtk_page_setup_get_orientation)(GtkPageSetup *setup);
void (gtk_page_setup_set_orientation)(GtkPageSetup *setup, GtkPageOrientation orientation);
GtkPaperSize * (gtk_page_setup_get_paper_size)(GtkPageSetup *setup);
void (gtk_page_setup_set_paper_size)(GtkPageSetup *setup, GtkPaperSize *size);
double (gtk_page_setup_get_top_margin)(GtkPageSetup *setup, GtkUnit unit);
void (gtk_page_setup_set_top_margin)(GtkPageSetup *setup, double margin, GtkUnit unit);
double (gtk_page_setup_get_bottom_margin)(GtkPageSetup *setup, GtkUnit unit);
void (gtk_page_setup_set_bottom_margin)(GtkPageSetup *setup, double margin, GtkUnit unit);
double (gtk_page_setup_get_left_margin)(GtkPageSetup *setup, GtkUnit unit);
void (gtk_page_setup_set_left_margin)(GtkPageSetup *setup, double margin, GtkUnit unit);
double (gtk_page_setup_get_right_margin)(GtkPageSetup *setup, GtkUnit unit);
void (gtk_page_setup_set_right_margin)(GtkPageSetup *setup, double margin, GtkUnit unit);
void (gtk_page_setup_set_paper_size_and_default_margins)(GtkPageSetup *setup, GtkPaperSize *size);
double (gtk_page_setup_get_paper_width)(GtkPageSetup *setup, GtkUnit unit);
double (gtk_page_setup_get_paper_height)(GtkPageSetup *setup, GtkUnit unit);
double (gtk_page_setup_get_page_width)(GtkPageSetup *setup, GtkUnit unit);
double (gtk_page_setup_get_page_height)(GtkPageSetup *setup, GtkUnit unit);
GtkPageSetup* (gtk_page_setup_new_from_file)(const char *file_name, GError **error);
gboolean (gtk_page_setup_load_file)(GtkPageSetup *setup, const char *file_name, GError **error);
gboolean (gtk_page_setup_to_file)(GtkPageSetup *setup, const char *file_name, GError **error);
GtkPageSetup* (gtk_page_setup_new_from_key_file)(GKeyFile *key_file, const char *group_name, GError **error);
gboolean (gtk_page_setup_load_key_file)(GtkPageSetup *setup, GKeyFile *key_file, const char *group_name, GError **error);
void (gtk_page_setup_to_key_file)(GtkPageSetup *setup, GKeyFile *key_file, const char *group_name);
GVariant* (gtk_page_setup_to_gvariant)(GtkPageSetup *setup);
GtkPageSetup* (gtk_page_setup_new_from_gvariant)(GVariant *variant);
GType (gtk_paper_size_get_type)(void);
GtkPaperSize* (gtk_paper_size_new)(const char *name);
GtkPaperSize* (gtk_paper_size_new_from_ppd)(const char *ppd_name, const char *ppd_display_name, double width, double height);
GtkPaperSize* (gtk_paper_size_new_from_ipp)(const char *ipp_name, double width, double height);
GtkPaperSize* (gtk_paper_size_new_custom)(const char *name, const char *display_name, double width, double height, GtkUnit unit);
GtkPaperSize* (gtk_paper_size_copy)(GtkPaperSize *other);
void (gtk_paper_size_free)(GtkPaperSize *size);
gboolean (gtk_paper_size_is_equal)(GtkPaperSize *size1, GtkPaperSize *size2);
GList* (gtk_paper_size_get_paper_sizes)(gboolean include_custom);
const char* (gtk_paper_size_get_name)(GtkPaperSize *size);
const char* (gtk_paper_size_get_display_name)(GtkPaperSize *size);
const char* (gtk_paper_size_get_ppd_name)(GtkPaperSize *size);
double (gtk_paper_size_get_width)(GtkPaperSize *size, GtkUnit unit);
double (gtk_paper_size_get_height)(GtkPaperSize *size, GtkUnit unit);
gboolean (gtk_paper_size_is_custom)(GtkPaperSize *size);
gboolean (gtk_paper_size_is_ipp)(GtkPaperSize *size);
void (gtk_paper_size_set_size)(GtkPaperSize *size, double width, double height, GtkUnit unit);
double (gtk_paper_size_get_default_top_margin)(GtkPaperSize *size, GtkUnit unit);
double (gtk_paper_size_get_default_bottom_margin)(GtkPaperSize *size, GtkUnit unit);
double (gtk_paper_size_get_default_left_margin)(GtkPaperSize *size, GtkUnit unit);
double (gtk_paper_size_get_default_right_margin)(GtkPaperSize *size, GtkUnit unit);
const char* (gtk_paper_size_get_default)(void);
GtkPaperSize* (gtk_paper_size_new_from_key_file)(GKeyFile *key_file, const char *group_name, GError **error);
void (gtk_paper_size_to_key_file)(GtkPaperSize *size, GKeyFile *key_file, const char *group_name);
GtkPaperSize* (gtk_paper_size_new_from_gvariant)(GVariant *variant);
GVariant* (gtk_paper_size_to_gvariant)(GtkPaperSize *paper_size);
GType (gtk_print_context_get_type)(void);
cairo_t* (gtk_print_context_get_cairo_context)(GtkPrintContext *context);
GtkPageSetup* (gtk_print_context_get_page_setup)(GtkPrintContext *context);
double (gtk_print_context_get_width)(GtkPrintContext *context);
double (gtk_print_context_get_height)(GtkPrintContext *context);
double (gtk_print_context_get_dpi_x)(GtkPrintContext *context);
double (gtk_print_context_get_dpi_y)(GtkPrintContext *context);
gboolean (gtk_print_context_get_hard_margins)(GtkPrintContext *context, double *top, double *bottom, double *left, double *right);
PangoFontMap* (gtk_print_context_get_pango_fontmap)(GtkPrintContext *context);
PangoContext* (gtk_print_context_create_pango_context)(GtkPrintContext *context);
PangoLayout* (gtk_print_context_create_pango_layout)(GtkPrintContext *context);
void (gtk_print_context_set_cairo_context)(GtkPrintContext *context, cairo_t *cr, double dpi_x, double dpi_y);
GType (gtk_print_operation_get_type)(void);
GQuark (gtk_print_error_quark)(void);
GtkPrintOperation * (gtk_print_operation_new)(void);
void (gtk_print_operation_set_default_page_setup)(GtkPrintOperation *op, GtkPageSetup *default_page_setup);
GtkPageSetup * (gtk_print_operation_get_default_page_setup)(GtkPrintOperation *op);
void (gtk_print_operation_set_print_settings)(GtkPrintOperation *op, GtkPrintSettings *print_settings);
GtkPrintSettings * (gtk_print_operation_get_print_settings)(GtkPrintOperation *op);
void (gtk_print_operation_set_job_name)(GtkPrintOperation *op, const char *job_name);
void (gtk_print_operation_set_n_pages)(GtkPrintOperation *op, int n_pages);
void (gtk_print_operation_set_current_page)(GtkPrintOperation *op, int current_page);
void (gtk_print_operation_set_use_full_page)(GtkPrintOperation *op, gboolean full_page);
void (gtk_print_operation_set_unit)(GtkPrintOperation *op, GtkUnit unit);
void (gtk_print_operation_set_export_filename)(GtkPrintOperation *op, const char *filename);
void (gtk_print_operation_set_track_print_status)(GtkPrintOperation *op, gboolean track_status);
void (gtk_print_operation_set_show_progress)(GtkPrintOperation *op, gboolean show_progress);
void (gtk_print_operation_set_allow_async)(GtkPrintOperation *op, gboolean allow_async);
void (gtk_print_operation_set_custom_tab_label)(GtkPrintOperation *op, const char *label);
GtkPrintOperationResult (gtk_print_operation_run)(GtkPrintOperation *op, GtkPrintOperationAction action, GtkWindow *parent, GError **error);
void (gtk_print_operation_get_error)(GtkPrintOperation *op, GError **error);
GtkPrintStatus (gtk_print_operation_get_status)(GtkPrintOperation *op);
const char * (gtk_print_operation_get_status_string)(GtkPrintOperation *op);
gboolean (gtk_print_operation_is_finished)(GtkPrintOperation *op);
void (gtk_print_operation_cancel)(GtkPrintOperation *op);
void (gtk_print_operation_draw_page_finish)(GtkPrintOperation *op);
void (gtk_print_operation_set_defer_drawing)(GtkPrintOperation *op);
void (gtk_print_operation_set_support_selection)(GtkPrintOperation *op, gboolean support_selection);
gboolean (gtk_print_operation_get_support_selection)(GtkPrintOperation *op);
void (gtk_print_operation_set_has_selection)(GtkPrintOperation *op, gboolean has_selection);
gboolean (gtk_print_operation_get_has_selection)(GtkPrintOperation *op);
void (gtk_print_operation_set_embed_page_setup)(GtkPrintOperation *op, gboolean embed);
gboolean (gtk_print_operation_get_embed_page_setup)(GtkPrintOperation *op);
int (gtk_print_operation_get_n_pages_to_print)(GtkPrintOperation *op);
GtkPageSetup* (gtk_print_run_page_setup_dialog)(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings);
void (gtk_print_run_page_setup_dialog_async)(GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings, GtkPageSetupDoneFunc done_cb, gpointer data);
GType (gtk_print_operation_preview_get_type)(void);
void (gtk_print_operation_preview_render_page)(GtkPrintOperationPreview *preview, int page_nr);
void (gtk_print_operation_preview_end_preview)(GtkPrintOperationPreview *preview);
gboolean (gtk_print_operation_preview_is_selected)(GtkPrintOperationPreview *preview, int page_nr);
GType (gtk_print_settings_get_type)(void);
GtkPrintSettings* (gtk_print_settings_new)(void);
GtkPrintSettings* (gtk_print_settings_copy)(GtkPrintSettings *other);
GtkPrintSettings* (gtk_print_settings_new_from_file)(const char *file_name, GError **error);
gboolean (gtk_print_settings_load_file)(GtkPrintSettings *settings, const char *file_name, GError **error);
gboolean (gtk_print_settings_to_file)(GtkPrintSettings *settings, const char *file_name, GError **error);
GtkPrintSettings* (gtk_print_settings_new_from_key_file)(GKeyFile *key_file, const char *group_name, GError **error);
gboolean (gtk_print_settings_load_key_file)(GtkPrintSettings *settings, GKeyFile *key_file, const char *group_name, GError **error);
void (gtk_print_settings_to_key_file)(GtkPrintSettings *settings, GKeyFile *key_file, const char *group_name);
gboolean (gtk_print_settings_has_key)(GtkPrintSettings *settings, const char *key);
const char * (gtk_print_settings_get)(GtkPrintSettings *settings, const char *key);
void (gtk_print_settings_set)(GtkPrintSettings *settings, const char *key, const char *value);
void (gtk_print_settings_unset)(GtkPrintSettings *settings, const char *key);
void (gtk_print_settings_foreach)(GtkPrintSettings *settings, GtkPrintSettingsFunc func, gpointer user_data);
gboolean (gtk_print_settings_get_bool)(GtkPrintSettings *settings, const char *key);
void (gtk_print_settings_set_bool)(GtkPrintSettings *settings, const char *key, gboolean value);
double (gtk_print_settings_get_double)(GtkPrintSettings *settings, const char *key);
double (gtk_print_settings_get_double_with_default)(GtkPrintSettings *settings, const char *key, double def);
void (gtk_print_settings_set_double)(GtkPrintSettings *settings, const char *key, double value);
double (gtk_print_settings_get_length)(GtkPrintSettings *settings, const char *key, GtkUnit unit);
void (gtk_print_settings_set_length)(GtkPrintSettings *settings, const char *key, double value, GtkUnit unit);
int (gtk_print_settings_get_int)(GtkPrintSettings *settings, const char *key);
int (gtk_print_settings_get_int_with_default)(GtkPrintSettings *settings, const char *key, int def);
void (gtk_print_settings_set_int)(GtkPrintSettings *settings, const char *key, int value);
const char * (gtk_print_settings_get_printer)(GtkPrintSettings *settings);
void (gtk_print_settings_set_printer)(GtkPrintSettings *settings, const char *printer);
GtkPageOrientation (gtk_print_settings_get_orientation)(GtkPrintSettings *settings);
void (gtk_print_settings_set_orientation)(GtkPrintSettings *settings, GtkPageOrientation orientation);
GtkPaperSize * (gtk_print_settings_get_paper_size)(GtkPrintSettings *settings);
void (gtk_print_settings_set_paper_size)(GtkPrintSettings *settings, GtkPaperSize *paper_size);
double (gtk_print_settings_get_paper_width)(GtkPrintSettings *settings, GtkUnit unit);
void (gtk_print_settings_set_paper_width)(GtkPrintSettings *settings, double width, GtkUnit unit);
double (gtk_print_settings_get_paper_height)(GtkPrintSettings *settings, GtkUnit unit);
void (gtk_print_settings_set_paper_height)(GtkPrintSettings *settings, double height, GtkUnit unit);
gboolean (gtk_print_settings_get_use_color)(GtkPrintSettings *settings);
void (gtk_print_settings_set_use_color)(GtkPrintSettings *settings, gboolean use_color);
gboolean (gtk_print_settings_get_collate)(GtkPrintSettings *settings);
void (gtk_print_settings_set_collate)(GtkPrintSettings *settings, gboolean collate);
gboolean (gtk_print_settings_get_reverse)(GtkPrintSettings *settings);
void (gtk_print_settings_set_reverse)(GtkPrintSettings *settings, gboolean reverse);
GtkPrintDuplex (gtk_print_settings_get_duplex)(GtkPrintSettings *settings);
void (gtk_print_settings_set_duplex)(GtkPrintSettings *settings, GtkPrintDuplex duplex);
GtkPrintQuality (gtk_print_settings_get_quality)(GtkPrintSettings *settings);
void (gtk_print_settings_set_quality)(GtkPrintSettings *settings, GtkPrintQuality quality);
int (gtk_print_settings_get_n_copies)(GtkPrintSettings *settings);
void (gtk_print_settings_set_n_copies)(GtkPrintSettings *settings, int num_copies);
int (gtk_print_settings_get_number_up)(GtkPrintSettings *settings);
void (gtk_print_settings_set_number_up)(GtkPrintSettings *settings, int number_up);
GtkNumberUpLayout (gtk_print_settings_get_number_up_layout)(GtkPrintSettings *settings);
void (gtk_print_settings_set_number_up_layout)(GtkPrintSettings *settings, GtkNumberUpLayout number_up_layout);
int (gtk_print_settings_get_resolution)(GtkPrintSettings *settings);
void (gtk_print_settings_set_resolution)(GtkPrintSettings *settings, int resolution);
int (gtk_print_settings_get_resolution_x)(GtkPrintSettings *settings);
int (gtk_print_settings_get_resolution_y)(GtkPrintSettings *settings);
void (gtk_print_settings_set_resolution_xy)(GtkPrintSettings *settings, int resolution_x, int resolution_y);
double (gtk_print_settings_get_printer_lpi)(GtkPrintSettings *settings);
void (gtk_print_settings_set_printer_lpi)(GtkPrintSettings *settings, double lpi);
double (gtk_print_settings_get_scale)(GtkPrintSettings *settings);
void (gtk_print_settings_set_scale)(GtkPrintSettings *settings, double scale);
GtkPrintPages (gtk_print_settings_get_print_pages)(GtkPrintSettings *settings);
void (gtk_print_settings_set_print_pages)(GtkPrintSettings *settings, GtkPrintPages pages);
GtkPageRange * (gtk_print_settings_get_page_ranges)(GtkPrintSettings *settings, int *num_ranges);
void (gtk_print_settings_set_page_ranges)(GtkPrintSettings *settings, GtkPageRange *page_ranges, int num_ranges);
GtkPageSet (gtk_print_settings_get_page_set)(GtkPrintSettings *settings);
void (gtk_print_settings_set_page_set)(GtkPrintSettings *settings, GtkPageSet page_set);
const char * (gtk_print_settings_get_default_source)(GtkPrintSettings *settings);
void (gtk_print_settings_set_default_source)(GtkPrintSettings *settings, const char *default_source);
const char * (gtk_print_settings_get_media_type)(GtkPrintSettings *settings);
void (gtk_print_settings_set_media_type)(GtkPrintSettings *settings, const char *media_type);
const char * (gtk_print_settings_get_dither)(GtkPrintSettings *settings);
void (gtk_print_settings_set_dither)(GtkPrintSettings *settings, const char *dither);
const char * (gtk_print_settings_get_finishings)(GtkPrintSettings *settings);
void (gtk_print_settings_set_finishings)(GtkPrintSettings *settings, const char *finishings);
const char * (gtk_print_settings_get_output_bin)(GtkPrintSettings *settings);
void (gtk_print_settings_set_output_bin)(GtkPrintSettings *settings, const char *output_bin);
GVariant* (gtk_print_settings_to_gvariant)(GtkPrintSettings *settings);
GtkPrintSettings* (gtk_print_settings_new_from_gvariant)(GVariant *variant);
GType (gtk_at_spi_socket_get_type)(void);
GtkAccessible * (gtk_at_spi_socket_new)(const char *bus_name, const char *object_path, GError **error);
const char * (gtk_at_spi_socket_get_bus_name)(GtkAtSpiSocket *self);
const char * (gtk_at_spi_socket_get_object_path)(GtkAtSpiSocket *self);
GType (gtk_about_dialog_get_type)(void);
GtkWidget* (gtk_about_dialog_new)(void);
const char * (gtk_about_dialog_get_program_name)(GtkAboutDialog *about);
void (gtk_about_dialog_set_program_name)(GtkAboutDialog *about, const char *name);
const char * (gtk_about_dialog_get_version)(GtkAboutDialog *about);
void (gtk_about_dialog_set_version)(GtkAboutDialog *about, const char *version);
const char * (gtk_about_dialog_get_copyright)(GtkAboutDialog *about);
void (gtk_about_dialog_set_copyright)(GtkAboutDialog *about, const char *copyright);
const char * (gtk_about_dialog_get_comments)(GtkAboutDialog *about);
void (gtk_about_dialog_set_comments)(GtkAboutDialog *about, const char *comments);
const char * (gtk_about_dialog_get_license)(GtkAboutDialog *about);
void (gtk_about_dialog_set_license)(GtkAboutDialog *about, const char *license);
void (gtk_about_dialog_set_license_type)(GtkAboutDialog *about, GtkLicense license_type);
GtkLicense (gtk_about_dialog_get_license_type)(GtkAboutDialog *about);
gboolean (gtk_about_dialog_get_wrap_license)(GtkAboutDialog *about);
void (gtk_about_dialog_set_wrap_license)(GtkAboutDialog *about, gboolean wrap_license);
const char * (gtk_about_dialog_get_system_information)(GtkAboutDialog *about);
void (gtk_about_dialog_set_system_information)(GtkAboutDialog *about, const char *system_information);
const char * (gtk_about_dialog_get_website)(GtkAboutDialog *about);
void (gtk_about_dialog_set_website)(GtkAboutDialog *about, const char *website);
const char * (gtk_about_dialog_get_website_label)(GtkAboutDialog *about);
void (gtk_about_dialog_set_website_label)(GtkAboutDialog *about, const char *website_label);
const char * const * (gtk_about_dialog_get_authors)(GtkAboutDialog *about);
void (gtk_about_dialog_set_authors)(GtkAboutDialog *about, const char **authors);
const char * const * (gtk_about_dialog_get_documenters)(GtkAboutDialog *about);
void (gtk_about_dialog_set_documenters)(GtkAboutDialog *about, const char **documenters);
const char * const * (gtk_about_dialog_get_artists)(GtkAboutDialog *about);
void (gtk_about_dialog_set_artists)(GtkAboutDialog *about, const char **artists);
const char * (gtk_about_dialog_get_translator_credits)(GtkAboutDialog *about);
void (gtk_about_dialog_set_translator_credits)(GtkAboutDialog *about, const char *translator_credits);
GdkPaintable* (gtk_about_dialog_get_logo)(GtkAboutDialog *about);
void (gtk_about_dialog_set_logo)(GtkAboutDialog *about, GdkPaintable *logo);
const char * (gtk_about_dialog_get_logo_icon_name)(GtkAboutDialog *about);
void (gtk_about_dialog_set_logo_icon_name)(GtkAboutDialog *about, const char *icon_name);
void (gtk_about_dialog_add_credit_section)(GtkAboutDialog *about, const char *section_name, const char **people);
gboolean (gtk_accelerator_parse)(const char *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods);
gboolean (gtk_accelerator_parse_with_keycode)(const char *accelerator, GdkDisplay *display, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods);
char * (gtk_accelerator_name)(guint accelerator_key, GdkModifierType accelerator_mods);
char * (gtk_accelerator_name_with_keycode)(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);
char * (gtk_accelerator_get_label)(guint accelerator_key, GdkModifierType accelerator_mods);
char * (gtk_accelerator_get_label_with_keycode)(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);
GdkModifierType (gtk_accelerator_get_default_mod_mask)(void);
gboolean (gtk_accelerator_valid)(guint keyval, GdkModifierType modifiers);
GType (gtk_accessible_get_type)(void);
gboolean (gtk_accessible_get_platform_state)(GtkAccessible *self, GtkAccessiblePlatformState state);
GtkAccessible * (gtk_accessible_get_accessible_parent)(GtkAccessible *self);
void (gtk_accessible_set_accessible_parent)(GtkAccessible *self, GtkAccessible *parent, GtkAccessible *next_sibling);
GtkAccessible * (gtk_accessible_get_first_accessible_child)(GtkAccessible *self);
GtkAccessible * (gtk_accessible_get_next_accessible_sibling)(GtkAccessible *self);
void (gtk_accessible_update_next_accessible_sibling)(GtkAccessible *self, GtkAccessible *new_sibling);
gboolean (gtk_accessible_get_bounds)(GtkAccessible *self, int *x, int *y, int *width, int *height);
GtkAccessibleRole (gtk_accessible_get_accessible_role)(GtkAccessible *self);
void (gtk_accessible_update_state_value)(GtkAccessible *self, int n_states, GtkAccessibleState states[], const GValue values[]);
void (gtk_accessible_update_property_value)(GtkAccessible *self, int n_properties, GtkAccessibleProperty properties[], const GValue values[]);
void (gtk_accessible_update_relation_value)(GtkAccessible *self, int n_relations, GtkAccessibleRelation relations[], const GValue values[]);
void (gtk_accessible_reset_state)(GtkAccessible *self, GtkAccessibleState state);
void (gtk_accessible_reset_property)(GtkAccessible *self, GtkAccessibleProperty property);
void (gtk_accessible_reset_relation)(GtkAccessible *self, GtkAccessibleRelation relation);
void (gtk_accessible_state_init_value)(GtkAccessibleState state, GValue *value);
void (gtk_accessible_property_init_value)(GtkAccessibleProperty property, GValue *value);
void (gtk_accessible_relation_init_value)(GtkAccessibleRelation relation, GValue *value);
GType (gtk_accessible_list_get_type)(void);
GList * (gtk_accessible_list_get_objects)(GtkAccessibleList *accessible_list);
GtkAccessibleList * (gtk_accessible_list_new_from_list)(GList *list);
GtkAccessibleList * (gtk_accessible_list_new_from_array)(GtkAccessible **accessibles, gsize n_accessibles);
void (gtk_accessible_announce)(GtkAccessible *self, const char *message, GtkAccessibleAnnouncementPriority priority);
GType (gtk_accessible_range_get_type)(void);
GType (gtk_accessible_text_get_type)(void);
void (gtk_accessible_text_update_selection_bound)(GtkAccessibleText *self);
void (gtk_accessible_text_update_contents)(GtkAccessibleText *self, GtkAccessibleTextContentChange change, unsigned int start, unsigned int end);
GType (gtk_actionable_get_type)(void);
const char * (gtk_actionable_get_action_name)(GtkActionable *actionable);
void (gtk_actionable_set_action_name)(GtkActionable *actionable, const char *action_name);
GVariant * (gtk_actionable_get_action_target_value)(GtkActionable *actionable);
void (gtk_actionable_set_action_target_value)(GtkActionable *actionable, GVariant *target_value);
void (gtk_actionable_set_detailed_action_name)(GtkActionable *actionable, const char *detailed_action_name);
GType (gtk_action_bar_get_type)(void);
GtkWidget* (gtk_action_bar_new)(void);
GtkWidget* (gtk_action_bar_get_center_widget)(GtkActionBar *action_bar);
void (gtk_action_bar_set_center_widget)(GtkActionBar *action_bar, GtkWidget *center_widget);
void (gtk_action_bar_pack_start)(GtkActionBar *action_bar, GtkWidget *child);
void (gtk_action_bar_pack_end)(GtkActionBar *action_bar, GtkWidget *child);
void (gtk_action_bar_remove)(GtkActionBar *action_bar, GtkWidget *child);
void (gtk_action_bar_set_revealed)(GtkActionBar *action_bar, gboolean revealed);
gboolean (gtk_action_bar_get_revealed)(GtkActionBar *action_bar);
GType (gtk_adjustment_get_type)(void);
GtkAdjustment* (gtk_adjustment_new)(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
void (gtk_adjustment_clamp_page)(GtkAdjustment *adjustment, double lower, double upper);
double (gtk_adjustment_get_value)(GtkAdjustment *adjustment);
void (gtk_adjustment_set_value)(GtkAdjustment *adjustment, double value);
double (gtk_adjustment_get_lower)(GtkAdjustment *adjustment);
void (gtk_adjustment_set_lower)(GtkAdjustment *adjustment, double lower);
double (gtk_adjustment_get_upper)(GtkAdjustment *adjustment);
void (gtk_adjustment_set_upper)(GtkAdjustment *adjustment, double upper);
double (gtk_adjustment_get_step_increment)(GtkAdjustment *adjustment);
void (gtk_adjustment_set_step_increment)(GtkAdjustment *adjustment, double step_increment);
double (gtk_adjustment_get_page_increment)(GtkAdjustment *adjustment);
void (gtk_adjustment_set_page_increment)(GtkAdjustment *adjustment, double page_increment);
double (gtk_adjustment_get_page_size)(GtkAdjustment *adjustment);
void (gtk_adjustment_set_page_size)(GtkAdjustment *adjustment, double page_size);
void (gtk_adjustment_configure)(GtkAdjustment *adjustment, double value, double lower, double upper, double step_increment, double page_increment, double page_size);
double (gtk_adjustment_get_minimum_increment)(GtkAdjustment *adjustment);
GType (gtk_alert_dialog_get_type)(void);
gboolean (gtk_alert_dialog_get_modal)(GtkAlertDialog *self);
void (gtk_alert_dialog_set_modal)(GtkAlertDialog *self, gboolean modal);
const char * (gtk_alert_dialog_get_message)(GtkAlertDialog *self);
void (gtk_alert_dialog_set_message)(GtkAlertDialog *self, const char *message);
const char * (gtk_alert_dialog_get_detail)(GtkAlertDialog *self);
void (gtk_alert_dialog_set_detail)(GtkAlertDialog *self, const char *detail);
const char * const * (gtk_alert_dialog_get_buttons)(GtkAlertDialog *self);
void (gtk_alert_dialog_set_buttons)(GtkAlertDialog *self, const char * const *labels);
int (gtk_alert_dialog_get_cancel_button)(GtkAlertDialog *self);
void (gtk_alert_dialog_set_cancel_button)(GtkAlertDialog *self, int button);
int (gtk_alert_dialog_get_default_button)(GtkAlertDialog *self);
void (gtk_alert_dialog_set_default_button)(GtkAlertDialog *self, int button);
void (gtk_alert_dialog_choose)(GtkAlertDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
int (gtk_alert_dialog_choose_finish)(GtkAlertDialog *self, GAsyncResult *result, GError **error);
void (gtk_alert_dialog_show)(GtkAlertDialog *self, GtkWindow *parent);
GType (gtk_application_get_type)(void);
GtkApplication * (gtk_application_new)(const char *application_id, GApplicationFlags flags);
void (gtk_application_add_window)(GtkApplication *application, GtkWindow *window);
void (gtk_application_remove_window)(GtkApplication *application, GtkWindow *window);
GList * (gtk_application_get_windows)(GtkApplication *application);
GMenuModel * (gtk_application_get_menubar)(GtkApplication *application);
void (gtk_application_set_menubar)(GtkApplication *application, GMenuModel *menubar);
guint (gtk_application_inhibit)(GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const char *reason);
void (gtk_application_uninhibit)(GtkApplication *application, guint cookie);
GtkWindow * (gtk_application_get_window_by_id)(GtkApplication *application, guint id);
GtkWindow * (gtk_application_get_active_window)(GtkApplication *application);
char ** (gtk_application_list_action_descriptions)(GtkApplication *application);
char ** (gtk_application_get_accels_for_action)(GtkApplication *application, const char *detailed_action_name);
char ** (gtk_application_get_actions_for_accel)(GtkApplication *application, const char *accel);
void (gtk_application_set_accels_for_action)(GtkApplication *application, const char *detailed_action_name, const char * const *accels);
GMenu * (gtk_application_get_menu_by_id)(GtkApplication *application, const char *id);
GType (gtk_application_window_get_type)(void);
GtkWidget * (gtk_application_window_new)(GtkApplication *application);
void (gtk_application_window_set_show_menubar)(GtkApplicationWindow *window, gboolean show_menubar);
gboolean (gtk_application_window_get_show_menubar)(GtkApplicationWindow *window);
guint (gtk_application_window_get_id)(GtkApplicationWindow *window);
void (gtk_application_window_set_help_overlay)(GtkApplicationWindow *window, GtkShortcutsWindow *help_overlay);
GtkShortcutsWindow * (gtk_application_window_get_help_overlay)(GtkApplicationWindow *window);
GType (gtk_aspect_frame_get_type)(void);
GtkWidget* (gtk_aspect_frame_new)(float xalign, float yalign, float ratio, gboolean obey_child);
void (gtk_aspect_frame_set_xalign)(GtkAspectFrame *self, float xalign);
float (gtk_aspect_frame_get_xalign)(GtkAspectFrame *self);
void (gtk_aspect_frame_set_yalign)(GtkAspectFrame *self, float yalign);
float (gtk_aspect_frame_get_yalign)(GtkAspectFrame *self);
void (gtk_aspect_frame_set_ratio)(GtkAspectFrame *self, float ratio);
float (gtk_aspect_frame_get_ratio)(GtkAspectFrame *self);
void (gtk_aspect_frame_set_obey_child)(GtkAspectFrame *self, gboolean obey_child);
gboolean (gtk_aspect_frame_get_obey_child)(GtkAspectFrame *self);
void (gtk_aspect_frame_set_child)(GtkAspectFrame *self, GtkWidget *child);
GtkWidget* (gtk_aspect_frame_get_child)(GtkAspectFrame *self);
GType (gtk_at_context_get_type)(void);
GtkAccessible * (gtk_at_context_get_accessible)(GtkATContext *self);
GtkAccessibleRole (gtk_at_context_get_accessible_role)(GtkATContext *self);
GtkATContext * (gtk_at_context_create)(GtkAccessibleRole accessible_role, GtkAccessible *accessible, GdkDisplay *display);
GType (gtk_bin_layout_get_type)(void);
GtkLayoutManager * (gtk_bin_layout_new)(void);
GType (gtk_bitset_get_type)(void);
GtkBitset * (gtk_bitset_ref)(GtkBitset *self);
void (gtk_bitset_unref)(GtkBitset *self);
gboolean (gtk_bitset_is_empty)(const GtkBitset *self);
gboolean (gtk_bitset_equals)(const GtkBitset *self, const GtkBitset *other);
guint64 (gtk_bitset_get_size)(const GtkBitset *self);
guint64 (gtk_bitset_get_size_in_range)(const GtkBitset *self, guint first, guint last);
guint (gtk_bitset_get_nth)(const GtkBitset *self, guint nth);
guint (gtk_bitset_get_minimum)(const GtkBitset *self);
guint (gtk_bitset_get_maximum)(const GtkBitset *self);
GtkBitset * (gtk_bitset_new_empty)(void);
GtkBitset * (gtk_bitset_copy)(const GtkBitset *self);
GtkBitset * (gtk_bitset_new_range)(guint start, guint n_items);
void (gtk_bitset_remove_all)(GtkBitset *self);
gboolean (gtk_bitset_add)(GtkBitset *self, guint value);
gboolean (gtk_bitset_remove)(GtkBitset *self, guint value);
void (gtk_bitset_add_range)(GtkBitset *self, guint start, guint n_items);
void (gtk_bitset_remove_range)(GtkBitset *self, guint start, guint n_items);
void (gtk_bitset_add_range_closed)(GtkBitset *self, guint first, guint last);
void (gtk_bitset_remove_range_closed)(GtkBitset *self, guint first, guint last);
void (gtk_bitset_add_rectangle)(GtkBitset *self, guint start, guint width, guint height, guint stride);
void (gtk_bitset_remove_rectangle)(GtkBitset *self, guint start, guint width, guint height, guint stride);
void (gtk_bitset_union)(GtkBitset *self, const GtkBitset *other);
void (gtk_bitset_intersect)(GtkBitset *self, const GtkBitset *other);
void (gtk_bitset_subtract)(GtkBitset *self, const GtkBitset *other);
void (gtk_bitset_difference)(GtkBitset *self, const GtkBitset *other);
void (gtk_bitset_shift_left)(GtkBitset *self, guint amount);
void (gtk_bitset_shift_right)(GtkBitset *self, guint amount);
void (gtk_bitset_splice)(GtkBitset *self, guint position, guint removed, guint added);
GType (gtk_bitset_iter_get_type)(void);
gboolean (gtk_bitset_iter_init_first)(GtkBitsetIter *iter, const GtkBitset *set, guint *value);
gboolean (gtk_bitset_iter_init_last)(GtkBitsetIter *iter, const GtkBitset *set, guint *value);
gboolean (gtk_bitset_iter_init_at)(GtkBitsetIter *iter, const GtkBitset *set, guint target, guint *value);
gboolean (gtk_bitset_iter_next)(GtkBitsetIter *iter, guint *value);
gboolean (gtk_bitset_iter_previous)(GtkBitsetIter *iter, guint *value);
guint (gtk_bitset_iter_get_value)(const GtkBitsetIter *iter);
gboolean (gtk_bitset_iter_is_valid)(const GtkBitsetIter *iter);
GType (gtk_bookmark_list_get_type)(void);
GtkBookmarkList * (gtk_bookmark_list_new)(const char *filename, const char *attributes);
const char * (gtk_bookmark_list_get_filename)(GtkBookmarkList *self);
void (gtk_bookmark_list_set_attributes)(GtkBookmarkList *self, const char *attributes);
const char * (gtk_bookmark_list_get_attributes)(GtkBookmarkList *self);
void (gtk_bookmark_list_set_io_priority)(GtkBookmarkList *self, int io_priority);
int (gtk_bookmark_list_get_io_priority)(GtkBookmarkList *self);
gboolean (gtk_bookmark_list_is_loading)(GtkBookmarkList *self);
GType (gtk_bool_filter_get_type)(void);
GtkBoolFilter * (gtk_bool_filter_new)(GtkExpression *expression);
GtkExpression * (gtk_bool_filter_get_expression)(GtkBoolFilter *self);
void (gtk_bool_filter_set_expression)(GtkBoolFilter *self, GtkExpression *expression);
gboolean (gtk_bool_filter_get_invert)(GtkBoolFilter *self);
void (gtk_bool_filter_set_invert)(GtkBoolFilter *self, gboolean invert);
GType (gtk_border_get_type)(void);
GtkBorder* (gtk_border_new)(void);
GtkBorder* (gtk_border_copy)(const GtkBorder *border_);
void (gtk_border_free)(GtkBorder *border_);
GType (gtk_box_get_type)(void);
GtkWidget* (gtk_box_new)(GtkOrientation orientation, int spacing);
void (gtk_box_set_homogeneous)(GtkBox *box, gboolean homogeneous);
gboolean (gtk_box_get_homogeneous)(GtkBox *box);
void (gtk_box_set_spacing)(GtkBox *box, int spacing);
int (gtk_box_get_spacing)(GtkBox *box);
void (gtk_box_set_baseline_position)(GtkBox *box, GtkBaselinePosition position);
GtkBaselinePosition (gtk_box_get_baseline_position)(GtkBox *box);
void (gtk_box_set_baseline_child)(GtkBox *box, int child);
int (gtk_box_get_baseline_child)(GtkBox *box);
void (gtk_box_append)(GtkBox *box, GtkWidget *child);
void (gtk_box_prepend)(GtkBox *box, GtkWidget *child);
void (gtk_box_remove)(GtkBox *box, GtkWidget *child);
void (gtk_box_insert_child_after)(GtkBox *box, GtkWidget *child, GtkWidget *sibling);
void (gtk_box_reorder_child_after)(GtkBox *box, GtkWidget *child, GtkWidget *sibling);
GType (gtk_box_layout_get_type)(void);
GtkLayoutManager * (gtk_box_layout_new)(GtkOrientation orientation);
void (gtk_box_layout_set_homogeneous)(GtkBoxLayout *box_layout, gboolean homogeneous);
gboolean (gtk_box_layout_get_homogeneous)(GtkBoxLayout *box_layout);
void (gtk_box_layout_set_spacing)(GtkBoxLayout *box_layout, guint spacing);
guint (gtk_box_layout_get_spacing)(GtkBoxLayout *box_layout);
void (gtk_box_layout_set_baseline_position)(GtkBoxLayout *box_layout, GtkBaselinePosition position);
GtkBaselinePosition (gtk_box_layout_get_baseline_position)(GtkBoxLayout *box_layout);
void (gtk_box_layout_set_baseline_child)(GtkBoxLayout *box_layout, int child);
int (gtk_box_layout_get_baseline_child)(GtkBoxLayout *box_layout);
GType (gtk_buildable_get_type)(void);
const char * (gtk_buildable_get_buildable_id)(GtkBuildable *buildable);
void (gtk_buildable_parse_context_push)(GtkBuildableParseContext *context, const GtkBuildableParser *parser, gpointer user_data);
gpointer (gtk_buildable_parse_context_pop)(GtkBuildableParseContext *context);
const char * (gtk_buildable_parse_context_get_element)(GtkBuildableParseContext *context);
GPtrArray* (gtk_buildable_parse_context_get_element_stack)(GtkBuildableParseContext *context);
void (gtk_buildable_parse_context_get_position)(GtkBuildableParseContext *context, int *line_number, int *char_number);
GType (gtk_builder_get_type)(void);
GQuark (gtk_builder_error_quark)(void);
GtkBuilder* (gtk_builder_new)(void);
gboolean (gtk_builder_add_from_file)(GtkBuilder *builder, const char *filename, GError **error);
gboolean (gtk_builder_add_from_resource)(GtkBuilder *builder, const char *resource_path, GError **error);
gboolean (gtk_builder_add_from_string)(GtkBuilder *builder, const char *buffer, gssize length, GError **error);
gboolean (gtk_builder_add_objects_from_file)(GtkBuilder *builder, const char *filename, const char **object_ids, GError **error);
gboolean (gtk_builder_add_objects_from_resource)(GtkBuilder *builder, const char *resource_path, const char **object_ids, GError **error);
gboolean (gtk_builder_add_objects_from_string)(GtkBuilder *builder, const char *buffer, gssize length, const char **object_ids, GError **error);
GObject* (gtk_builder_get_object)(GtkBuilder *builder, const char *name);
GSList* (gtk_builder_get_objects)(GtkBuilder *builder);
void (gtk_builder_expose_object)(GtkBuilder *builder, const char *name, GObject *object);
GObject * (gtk_builder_get_current_object)(GtkBuilder *builder);
void (gtk_builder_set_current_object)(GtkBuilder *builder, GObject *current_object);
void (gtk_builder_set_translation_domain)(GtkBuilder *builder, const char *domain);
const char * (gtk_builder_get_translation_domain)(GtkBuilder *builder);
GtkBuilderScope* (gtk_builder_get_scope)(GtkBuilder *builder);
void (gtk_builder_set_scope)(GtkBuilder *builder, GtkBuilderScope *scope);
GType (gtk_builder_get_type_from_name)(GtkBuilder *builder, const char *type_name);
gboolean (gtk_builder_value_from_string)(GtkBuilder *builder, GParamSpec *pspec, const char *string, GValue *value, GError **error);
gboolean (gtk_builder_value_from_string_type)(GtkBuilder *builder, GType type, const char *string, GValue *value, GError **error);
GtkBuilder * (gtk_builder_new_from_file)(const char *filename);
GtkBuilder * (gtk_builder_new_from_resource)(const char *resource_path);
GtkBuilder * (gtk_builder_new_from_string)(const char *string, gssize length);
GClosure * (gtk_builder_create_closure)(GtkBuilder *builder, const char *function_name, GtkBuilderClosureFlags flags, GObject *object, GError **error);
gboolean (gtk_builder_extend_with_template)(GtkBuilder *builder, GObject *object, GType template_type, const char *buffer, gssize length, GError **error);
GType (gtk_builder_list_item_factory_get_type)(void);
GtkListItemFactory * (gtk_builder_list_item_factory_new_from_bytes)(GtkBuilderScope *scope, GBytes *bytes);
GtkListItemFactory * (gtk_builder_list_item_factory_new_from_resource)(GtkBuilderScope *scope, const char *resource_path);
GBytes * (gtk_builder_list_item_factory_get_bytes)(GtkBuilderListItemFactory *self);
const char * (gtk_builder_list_item_factory_get_resource)(GtkBuilderListItemFactory *self);
GtkBuilderScope * (gtk_builder_list_item_factory_get_scope)(GtkBuilderListItemFactory *self);
GType (gtk_builder_scope_get_type)(void);
GType (gtk_builder_cscope_get_type)(void);
GtkBuilderScope * (gtk_builder_cscope_new)(void);
void (gtk_builder_cscope_add_callback_symbol)(GtkBuilderCScope *self, const char *callback_name, GCallback callback_symbol);
GCallback (gtk_builder_cscope_lookup_callback_symbol)(GtkBuilderCScope *self, const char *callback_name);
GType (gtk_button_get_type)(void);
GtkWidget* (gtk_button_new)(void);
GtkWidget* (gtk_button_new_with_label)(const char *label);
GtkWidget* (gtk_button_new_from_icon_name)(const char *icon_name);
GtkWidget* (gtk_button_new_with_mnemonic)(const char *label);
void (gtk_button_set_has_frame)(GtkButton *button, gboolean has_frame);
gboolean (gtk_button_get_has_frame)(GtkButton *button);
void (gtk_button_set_label)(GtkButton *button, const char *label);
const char * (gtk_button_get_label)(GtkButton *button);
void (gtk_button_set_use_underline)(GtkButton *button, gboolean use_underline);
gboolean (gtk_button_get_use_underline)(GtkButton *button);
void (gtk_button_set_icon_name)(GtkButton *button, const char *icon_name);
const char * (gtk_button_get_icon_name)(GtkButton *button);
void (gtk_button_set_child)(GtkButton *button, GtkWidget *child);
GtkWidget * (gtk_button_get_child)(GtkButton *button);
void (gtk_button_set_can_shrink)(GtkButton *button, gboolean can_shrink);
gboolean (gtk_button_get_can_shrink)(GtkButton *button);
GType (gtk_calendar_get_type)(void);
GtkWidget* (gtk_calendar_new)(void);
void (gtk_calendar_select_day)(GtkCalendar *self, GDateTime *date);
void (gtk_calendar_mark_day)(GtkCalendar *calendar, guint day);
void (gtk_calendar_unmark_day)(GtkCalendar *calendar, guint day);
void (gtk_calendar_clear_marks)(GtkCalendar *calendar);
void (gtk_calendar_set_show_week_numbers)(GtkCalendar *self, gboolean value);
gboolean (gtk_calendar_get_show_week_numbers)(GtkCalendar *self);
void (gtk_calendar_set_show_heading)(GtkCalendar *self, gboolean value);
gboolean (gtk_calendar_get_show_heading)(GtkCalendar *self);
void (gtk_calendar_set_show_day_names)(GtkCalendar *self, gboolean value);
gboolean (gtk_calendar_get_show_day_names)(GtkCalendar *self);
void (gtk_calendar_set_day)(GtkCalendar *self, int day);
int (gtk_calendar_get_day)(GtkCalendar *self);
void (gtk_calendar_set_month)(GtkCalendar *self, int month);
int (gtk_calendar_get_month)(GtkCalendar *self);
void (gtk_calendar_set_year)(GtkCalendar *self, int year);
int (gtk_calendar_get_year)(GtkCalendar *self);
GDateTime * (gtk_calendar_get_date)(GtkCalendar *self);
gboolean (gtk_calendar_get_day_is_marked)(GtkCalendar *calendar, guint day);
GType (gtk_center_box_get_type)(void);
GtkWidget* (gtk_center_box_new)(void);
void (gtk_center_box_set_start_widget)(GtkCenterBox *self, GtkWidget *child);
void (gtk_center_box_set_center_widget)(GtkCenterBox *self, GtkWidget *child);
void (gtk_center_box_set_end_widget)(GtkCenterBox *self, GtkWidget *child);
GtkWidget * (gtk_center_box_get_start_widget)(GtkCenterBox *self);
GtkWidget * (gtk_center_box_get_center_widget)(GtkCenterBox *self);
GtkWidget * (gtk_center_box_get_end_widget)(GtkCenterBox *self);
void (gtk_center_box_set_baseline_position)(GtkCenterBox *self, GtkBaselinePosition position);
GtkBaselinePosition (gtk_center_box_get_baseline_position)(GtkCenterBox *self);
void (gtk_center_box_set_shrink_center_last)(GtkCenterBox *self, gboolean shrink_center_last);
gboolean (gtk_center_box_get_shrink_center_last)(GtkCenterBox *self);
GType (gtk_center_layout_get_type)(void);
GtkLayoutManager * (gtk_center_layout_new)(void);
void (gtk_center_layout_set_orientation)(GtkCenterLayout *self, GtkOrientation orientation);
GtkOrientation (gtk_center_layout_get_orientation)(GtkCenterLayout *self);
void (gtk_center_layout_set_baseline_position)(GtkCenterLayout *self, GtkBaselinePosition baseline_position);
GtkBaselinePosition (gtk_center_layout_get_baseline_position)(GtkCenterLayout *self);
void (gtk_center_layout_set_start_widget)(GtkCenterLayout *self, GtkWidget *widget);
GtkWidget * (gtk_center_layout_get_start_widget)(GtkCenterLayout *self);
void (gtk_center_layout_set_center_widget)(GtkCenterLayout *self, GtkWidget *widget);
GtkWidget * (gtk_center_layout_get_center_widget)(GtkCenterLayout *self);
void (gtk_center_layout_set_end_widget)(GtkCenterLayout *self, GtkWidget *widget);
GtkWidget * (gtk_center_layout_get_end_widget)(GtkCenterLayout *self);
void (gtk_center_layout_set_shrink_center_last)(GtkCenterLayout *self, gboolean shrink_center_last);
gboolean (gtk_center_layout_get_shrink_center_last)(GtkCenterLayout *self);
GType (gtk_check_button_get_type)(void);
GtkWidget * (gtk_check_button_new)(void);
GtkWidget * (gtk_check_button_new_with_label)(const char *label);
GtkWidget * (gtk_check_button_new_with_mnemonic)(const char *label);
void (gtk_check_button_set_inconsistent)(GtkCheckButton *check_button, gboolean inconsistent);
gboolean (gtk_check_button_get_inconsistent)(GtkCheckButton *check_button);
gboolean (gtk_check_button_get_active)(GtkCheckButton *self);
void (gtk_check_button_set_active)(GtkCheckButton *self, gboolean setting);
const char * (gtk_check_button_get_label)(GtkCheckButton *self);
void (gtk_check_button_set_label)(GtkCheckButton *self, const char *label);
void (gtk_check_button_set_group)(GtkCheckButton *self, GtkCheckButton *group);
gboolean (gtk_check_button_get_use_underline)(GtkCheckButton *self);
void (gtk_check_button_set_use_underline)(GtkCheckButton *self, gboolean setting);
GtkWidget * (gtk_check_button_get_child)(GtkCheckButton *button);
void (gtk_check_button_set_child)(GtkCheckButton *button, GtkWidget *child);
GType (gtk_color_dialog_get_type)(void);
GtkColorDialog* (gtk_color_dialog_new)(void);
const char * (gtk_color_dialog_get_title)(GtkColorDialog *self);
void (gtk_color_dialog_set_title)(GtkColorDialog *self, const char *title);
gboolean (gtk_color_dialog_get_modal)(GtkColorDialog *self);
void (gtk_color_dialog_set_modal)(GtkColorDialog *self, gboolean modal);
gboolean (gtk_color_dialog_get_with_alpha)(GtkColorDialog *self);
void (gtk_color_dialog_set_with_alpha)(GtkColorDialog *self, gboolean with_alpha);
void (gtk_color_dialog_choose_rgba)(GtkColorDialog *self, GtkWindow *parent, const GdkRGBA *initial_color, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GdkRGBA * (gtk_color_dialog_choose_rgba_finish)(GtkColorDialog *self, GAsyncResult *result, GError **error);
GType (gtk_color_dialog_button_get_type)(void);
GtkWidget * (gtk_color_dialog_button_new)(GtkColorDialog *dialog);
GtkColorDialog* (gtk_color_dialog_button_get_dialog)(GtkColorDialogButton *self);
void (gtk_color_dialog_button_set_dialog)(GtkColorDialogButton *self, GtkColorDialog *dialog);
const GdkRGBA * (gtk_color_dialog_button_get_rgba)(GtkColorDialogButton *self);
void (gtk_color_dialog_button_set_rgba)(GtkColorDialogButton *self, const GdkRGBA *color);
void (gtk_rgb_to_hsv)(float r, float g, float b, float *h, float *s, float *v);
void (gtk_hsv_to_rgb)(float h, float s, float v, float *r, float *g, float *b);
GType (gtk_column_view_get_type)(void);
GtkWidget * (gtk_column_view_new)(GtkSelectionModel *model);
GListModel * (gtk_column_view_get_columns)(GtkColumnView *self);
void (gtk_column_view_append_column)(GtkColumnView *self, GtkColumnViewColumn *column);
void (gtk_column_view_remove_column)(GtkColumnView *self, GtkColumnViewColumn *column);
void (gtk_column_view_insert_column)(GtkColumnView *self, guint position, GtkColumnViewColumn *column);
GtkSelectionModel * (gtk_column_view_get_model)(GtkColumnView *self);
void (gtk_column_view_set_model)(GtkColumnView *self, GtkSelectionModel *model);
gboolean (gtk_column_view_get_show_row_separators)(GtkColumnView *self);
void (gtk_column_view_set_show_row_separators)(GtkColumnView *self, gboolean show_row_separators);
gboolean (gtk_column_view_get_show_column_separators)(GtkColumnView *self);
void (gtk_column_view_set_show_column_separators)(GtkColumnView *self, gboolean show_column_separators);
GtkSorter * (gtk_column_view_get_sorter)(GtkColumnView *self);
void (gtk_column_view_sort_by_column)(GtkColumnView *self, GtkColumnViewColumn *column, GtkSortType direction);
void (gtk_column_view_set_single_click_activate)(GtkColumnView *self, gboolean single_click_activate);
gboolean (gtk_column_view_get_single_click_activate)(GtkColumnView *self);
void (gtk_column_view_set_reorderable)(GtkColumnView *self, gboolean reorderable);
gboolean (gtk_column_view_get_reorderable)(GtkColumnView *self);
void (gtk_column_view_set_enable_rubberband)(GtkColumnView *self, gboolean enable_rubberband);
gboolean (gtk_column_view_get_enable_rubberband)(GtkColumnView *self);
void (gtk_column_view_set_tab_behavior)(GtkColumnView *self, GtkListTabBehavior tab_behavior);
GtkListTabBehavior (gtk_column_view_get_tab_behavior)(GtkColumnView *self);
void (gtk_column_view_set_row_factory)(GtkColumnView *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_column_view_get_row_factory)(GtkColumnView *self);
void (gtk_column_view_set_header_factory)(GtkColumnView *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_column_view_get_header_factory)(GtkColumnView *self);
void (gtk_column_view_scroll_to)(GtkColumnView *self, guint pos, GtkColumnViewColumn *column, GtkListScrollFlags flags, GtkScrollInfo *scroll);
GType (gtk_column_view_cell_get_type)(void);
gpointer (gtk_column_view_cell_get_item)(GtkColumnViewCell *self);
guint (gtk_column_view_cell_get_position)(GtkColumnViewCell *self);
gboolean (gtk_column_view_cell_get_selected)(GtkColumnViewCell *self);
gboolean (gtk_column_view_cell_get_focusable)(GtkColumnViewCell *self);
void (gtk_column_view_cell_set_focusable)(GtkColumnViewCell *self, gboolean focusable);
void (gtk_column_view_cell_set_child)(GtkColumnViewCell *self, GtkWidget *child);
GtkWidget * (gtk_column_view_cell_get_child)(GtkColumnViewCell *self);
GType (gtk_column_view_column_get_type)(void);
GtkColumnViewColumn * (gtk_column_view_column_new)(const char *title, GtkListItemFactory *factory);
GtkColumnView * (gtk_column_view_column_get_column_view)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_factory)(GtkColumnViewColumn *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_column_view_column_get_factory)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_title)(GtkColumnViewColumn *self, const char *title);
const char * (gtk_column_view_column_get_title)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_sorter)(GtkColumnViewColumn *self, GtkSorter *sorter);
GtkSorter * (gtk_column_view_column_get_sorter)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_visible)(GtkColumnViewColumn *self, gboolean visible);
gboolean (gtk_column_view_column_get_visible)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_header_menu)(GtkColumnViewColumn *self, GMenuModel *menu);
GMenuModel * (gtk_column_view_column_get_header_menu)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_fixed_width)(GtkColumnViewColumn *self, int fixed_width);
int (gtk_column_view_column_get_fixed_width)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_resizable)(GtkColumnViewColumn *self, gboolean resizable);
gboolean (gtk_column_view_column_get_resizable)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_expand)(GtkColumnViewColumn *self, gboolean expand);
gboolean (gtk_column_view_column_get_expand)(GtkColumnViewColumn *self);
void (gtk_column_view_column_set_id)(GtkColumnViewColumn *self, const char *id);
const char * (gtk_column_view_column_get_id)(GtkColumnViewColumn *self);
GType (gtk_column_view_row_get_type)(void);
gpointer (gtk_column_view_row_get_item)(GtkColumnViewRow *self);
guint (gtk_column_view_row_get_position)(GtkColumnViewRow *self);
gboolean (gtk_column_view_row_get_selected)(GtkColumnViewRow *self);
gboolean (gtk_column_view_row_get_selectable)(GtkColumnViewRow *self);
void (gtk_column_view_row_set_selectable)(GtkColumnViewRow *self, gboolean selectable);
gboolean (gtk_column_view_row_get_activatable)(GtkColumnViewRow *self);
void (gtk_column_view_row_set_activatable)(GtkColumnViewRow *self, gboolean activatable);
gboolean (gtk_column_view_row_get_focusable)(GtkColumnViewRow *self);
void (gtk_column_view_row_set_focusable)(GtkColumnViewRow *self, gboolean focusable);
const char * (gtk_column_view_row_get_accessible_description)(GtkColumnViewRow *self);
void (gtk_column_view_row_set_accessible_description)(GtkColumnViewRow *self, const char *description);
const char * (gtk_column_view_row_get_accessible_label)(GtkColumnViewRow *self);
void (gtk_column_view_row_set_accessible_label)(GtkColumnViewRow *self, const char *label);
GType (gtk_column_view_sorter_get_type)(void);
GtkColumnViewColumn * (gtk_column_view_sorter_get_primary_sort_column)(GtkColumnViewSorter *self);
GtkSortType (gtk_column_view_sorter_get_primary_sort_order)(GtkColumnViewSorter *self);
guint (gtk_column_view_sorter_get_n_sort_columns)(GtkColumnViewSorter *self);
GtkColumnViewColumn * (gtk_column_view_sorter_get_nth_sort_column)(GtkColumnViewSorter *self, guint position, GtkSortType *sort_order);
GType (gtk_constraint_target_get_type)(void);
GType (gtk_constraint_get_type)(void);
GtkConstraint * (gtk_constraint_new)(gpointer target, GtkConstraintAttribute target_attribute, GtkConstraintRelation relation, gpointer source, GtkConstraintAttribute source_attribute, double multiplier, double constant, int strength);
GtkConstraint * (gtk_constraint_new_constant)(gpointer target, GtkConstraintAttribute target_attribute, GtkConstraintRelation relation, double constant, int strength);
GtkConstraintTarget * (gtk_constraint_get_target)(GtkConstraint *constraint);
GtkConstraintAttribute (gtk_constraint_get_target_attribute)(GtkConstraint *constraint);
GtkConstraintTarget * (gtk_constraint_get_source)(GtkConstraint *constraint);
GtkConstraintAttribute (gtk_constraint_get_source_attribute)(GtkConstraint *constraint);
GtkConstraintRelation (gtk_constraint_get_relation)(GtkConstraint *constraint);
double (gtk_constraint_get_multiplier)(GtkConstraint *constraint);
double (gtk_constraint_get_constant)(GtkConstraint *constraint);
int (gtk_constraint_get_strength)(GtkConstraint *constraint);
gboolean (gtk_constraint_is_required)(GtkConstraint *constraint);
gboolean (gtk_constraint_is_attached)(GtkConstraint *constraint);
gboolean (gtk_constraint_is_constant)(GtkConstraint *constraint);
GType (gtk_constraint_guide_get_type)(void);
GtkConstraintGuide * (gtk_constraint_guide_new)(void);
void (gtk_constraint_guide_set_min_size)(GtkConstraintGuide *guide, int width, int height);
void (gtk_constraint_guide_get_min_size)(GtkConstraintGuide *guide, int *width, int *height);
void (gtk_constraint_guide_set_nat_size)(GtkConstraintGuide *guide, int width, int height);
void (gtk_constraint_guide_get_nat_size)(GtkConstraintGuide *guide, int *width, int *height);
void (gtk_constraint_guide_set_max_size)(GtkConstraintGuide *guide, int width, int height);
void (gtk_constraint_guide_get_max_size)(GtkConstraintGuide *guide, int *width, int *height);
GtkConstraintStrength (gtk_constraint_guide_get_strength)(GtkConstraintGuide *guide);
void (gtk_constraint_guide_set_strength)(GtkConstraintGuide *guide, GtkConstraintStrength strength);
void (gtk_constraint_guide_set_name)(GtkConstraintGuide *guide, const char *name);
const char * (gtk_constraint_guide_get_name)(GtkConstraintGuide *guide);
GType (gtk_constraint_layout_get_type)(void);
GType (gtk_constraint_layout_child_get_type)(void);
GQuark (gtk_constraint_vfl_parser_error_quark)(void);
GtkLayoutManager * (gtk_constraint_layout_new)(void);
void (gtk_constraint_layout_add_constraint)(GtkConstraintLayout *layout, GtkConstraint *constraint);
void (gtk_constraint_layout_remove_constraint)(GtkConstraintLayout *layout, GtkConstraint *constraint);
void (gtk_constraint_layout_add_guide)(GtkConstraintLayout *layout, GtkConstraintGuide *guide);
void (gtk_constraint_layout_remove_guide)(GtkConstraintLayout *layout, GtkConstraintGuide *guide);
void (gtk_constraint_layout_remove_all_constraints)(GtkConstraintLayout *layout);
GList * (gtk_constraint_layout_add_constraints_from_descriptionv)(GtkConstraintLayout *layout, const char * const lines[], gsize n_lines, int hspacing, int vspacing, GHashTable *views, GError **error);
GListModel * (gtk_constraint_layout_observe_constraints)(GtkConstraintLayout *layout);
GListModel * (gtk_constraint_layout_observe_guides)(GtkConstraintLayout *layout);
GType (gtk_css_provider_get_type)(void);
GtkCssProvider * (gtk_css_provider_new)(void);
char * (gtk_css_provider_to_string)(GtkCssProvider *provider);
void (gtk_css_provider_load_from_data)(GtkCssProvider *css_provider, const char *data, gssize length);
void (gtk_css_provider_load_from_string)(GtkCssProvider *css_provider, const char *string);
void (gtk_css_provider_load_from_bytes)(GtkCssProvider *css_provider, GBytes *data);
void (gtk_css_provider_load_from_file)(GtkCssProvider *css_provider, GFile *file);
void (gtk_css_provider_load_from_path)(GtkCssProvider *css_provider, const char *path);
void (gtk_css_provider_load_from_resource)(GtkCssProvider *css_provider, const char *resource_path);
void (gtk_css_provider_load_named)(GtkCssProvider *provider, const char *name, const char *variant);
GType (gtk_custom_filter_get_type)(void);
GtkCustomFilter * (gtk_custom_filter_new)(GtkCustomFilterFunc match_func, gpointer user_data, GDestroyNotify user_destroy);
void (gtk_custom_filter_set_filter_func)(GtkCustomFilter *self, GtkCustomFilterFunc match_func, gpointer user_data, GDestroyNotify user_destroy);
GType (gtk_custom_layout_get_type)(void);
GtkLayoutManager * (gtk_custom_layout_new)(GtkCustomRequestModeFunc request_mode, GtkCustomMeasureFunc measure, GtkCustomAllocateFunc allocate);
GType (gtk_custom_sorter_get_type)(void);
GtkCustomSorter * (gtk_custom_sorter_new)(GCompareDataFunc sort_func, gpointer user_data, GDestroyNotify user_destroy);
void (gtk_custom_sorter_set_sort_func)(GtkCustomSorter *self, GCompareDataFunc sort_func, gpointer user_data, GDestroyNotify user_destroy);
void (gtk_set_debug_flags)(GtkDebugFlags flags);
GtkDebugFlags (gtk_get_debug_flags)(void);
GQuark (gtk_dialog_error_quark)(void);
GType (gtk_directory_list_get_type)(void);
GtkDirectoryList * (gtk_directory_list_new)(const char *attributes, GFile *file);
void (gtk_directory_list_set_file)(GtkDirectoryList *self, GFile *file);
GFile * (gtk_directory_list_get_file)(GtkDirectoryList *self);
void (gtk_directory_list_set_attributes)(GtkDirectoryList *self, const char *attributes);
const char * (gtk_directory_list_get_attributes)(GtkDirectoryList *self);
void (gtk_directory_list_set_io_priority)(GtkDirectoryList *self, int io_priority);
int (gtk_directory_list_get_io_priority)(GtkDirectoryList *self);
gboolean (gtk_directory_list_is_loading)(GtkDirectoryList *self);
const GError * (gtk_directory_list_get_error)(GtkDirectoryList *self);
void (gtk_directory_list_set_monitored)(GtkDirectoryList *self, gboolean monitored);
gboolean (gtk_directory_list_get_monitored)(GtkDirectoryList *self);
GType (gtk_drag_icon_get_type)(void);
GtkWidget * (gtk_drag_icon_get_for_drag)(GdkDrag *drag);
void (gtk_drag_icon_set_child)(GtkDragIcon *self, GtkWidget *child);
GtkWidget * (gtk_drag_icon_get_child)(GtkDragIcon *self);
void (gtk_drag_icon_set_from_paintable)(GdkDrag *drag, GdkPaintable *paintable, int hot_x, int hot_y);
GtkWidget * (gtk_drag_icon_create_widget_for_value)(const GValue *value);
GType (gtk_drag_source_get_type)(void);
GtkDragSource* (gtk_drag_source_new)(void);
void (gtk_drag_source_set_content)(GtkDragSource *source, GdkContentProvider *content);
GdkContentProvider* (gtk_drag_source_get_content)(GtkDragSource *source);
void (gtk_drag_source_set_actions)(GtkDragSource *source, GdkDragAction actions);
GdkDragAction (gtk_drag_source_get_actions)(GtkDragSource *source);
void (gtk_drag_source_set_icon)(GtkDragSource *source, GdkPaintable *paintable, int hot_x, int hot_y);
void (gtk_drag_source_drag_cancel)(GtkDragSource *source);
GdkDrag * (gtk_drag_source_get_drag)(GtkDragSource *source);
gboolean (gtk_drag_check_threshold)(GtkWidget *widget, int start_x, int start_y, int current_x, int current_y);
GType (gtk_drawing_area_get_type)(void);
GtkWidget* (gtk_drawing_area_new)(void);
void (gtk_drawing_area_set_content_width)(GtkDrawingArea *self, int width);
int (gtk_drawing_area_get_content_width)(GtkDrawingArea *self);
void (gtk_drawing_area_set_content_height)(GtkDrawingArea *self, int height);
int (gtk_drawing_area_get_content_height)(GtkDrawingArea *self);
void (gtk_drawing_area_set_draw_func)(GtkDrawingArea *self, GtkDrawingAreaDrawFunc draw_func, gpointer user_data, GDestroyNotify destroy);
GType (gtk_drop_controller_motion_get_type)(void);
GtkEventController * (gtk_drop_controller_motion_new)(void);
gboolean (gtk_drop_controller_motion_contains_pointer)(GtkDropControllerMotion *self);
GdkDrop * (gtk_drop_controller_motion_get_drop)(GtkDropControllerMotion *self);
gboolean (gtk_drop_controller_motion_is_pointer)(GtkDropControllerMotion *self);
GType (gtk_drop_down_get_type)(void);
GtkWidget * (gtk_drop_down_new)(GListModel *model, GtkExpression *expression);
GtkWidget * (gtk_drop_down_new_from_strings)(const char * const * strings);
void (gtk_drop_down_set_model)(GtkDropDown *self, GListModel *model);
GListModel * (gtk_drop_down_get_model)(GtkDropDown *self);
void (gtk_drop_down_set_selected)(GtkDropDown *self, guint position);
guint (gtk_drop_down_get_selected)(GtkDropDown *self);
gpointer (gtk_drop_down_get_selected_item)(GtkDropDown *self);
void (gtk_drop_down_set_factory)(GtkDropDown *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_drop_down_get_factory)(GtkDropDown *self);
void (gtk_drop_down_set_list_factory)(GtkDropDown *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_drop_down_get_list_factory)(GtkDropDown *self);
void (gtk_drop_down_set_header_factory)(GtkDropDown *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_drop_down_get_header_factory)(GtkDropDown *self);
void (gtk_drop_down_set_expression)(GtkDropDown *self, GtkExpression *expression);
GtkExpression * (gtk_drop_down_get_expression)(GtkDropDown *self);
void (gtk_drop_down_set_enable_search)(GtkDropDown *self, gboolean enable_search);
gboolean (gtk_drop_down_get_enable_search)(GtkDropDown *self);
void (gtk_drop_down_set_show_arrow)(GtkDropDown *self, gboolean show_arrow);
gboolean (gtk_drop_down_get_show_arrow)(GtkDropDown *self);
void (gtk_drop_down_set_search_match_mode)(GtkDropDown *self, GtkStringFilterMatchMode search_match_mode);
GtkStringFilterMatchMode (gtk_drop_down_get_search_match_mode)(GtkDropDown *self);
GType (gtk_drop_target_get_type)(void);
GtkDropTarget * (gtk_drop_target_new)(GType type, GdkDragAction actions);
void (gtk_drop_target_set_gtypes)(GtkDropTarget *self, GType *types, gsize n_types);
const GType * (gtk_drop_target_get_gtypes)(GtkDropTarget *self, gsize *n_types);
GdkContentFormats * (gtk_drop_target_get_formats)(GtkDropTarget *self);
void (gtk_drop_target_set_actions)(GtkDropTarget *self, GdkDragAction actions);
GdkDragAction (gtk_drop_target_get_actions)(GtkDropTarget *self);
void (gtk_drop_target_set_preload)(GtkDropTarget *self, gboolean preload);
gboolean (gtk_drop_target_get_preload)(GtkDropTarget *self);
GdkDrop * (gtk_drop_target_get_drop)(GtkDropTarget *self);
GdkDrop * (gtk_drop_target_get_current_drop)(GtkDropTarget *self);
const GValue * (gtk_drop_target_get_value)(GtkDropTarget *self);
void (gtk_drop_target_reject)(GtkDropTarget *self);
GType (gtk_drop_target_async_get_type)(void);
GtkDropTargetAsync * (gtk_drop_target_async_new)(GdkContentFormats *formats, GdkDragAction actions);
void (gtk_drop_target_async_set_formats)(GtkDropTargetAsync *self, GdkContentFormats *formats);
GdkContentFormats * (gtk_drop_target_async_get_formats)(GtkDropTargetAsync *self);
void (gtk_drop_target_async_set_actions)(GtkDropTargetAsync *self, GdkDragAction actions);
GdkDragAction (gtk_drop_target_async_get_actions)(GtkDropTargetAsync *self);
void (gtk_drop_target_async_reject_drop)(GtkDropTargetAsync *self, GdkDrop *drop);
GType (gtk_editable_get_type)(void);
const char * (gtk_editable_get_text)(GtkEditable *editable);
void (gtk_editable_set_text)(GtkEditable *editable, const char *text);
char * (gtk_editable_get_chars)(GtkEditable *editable, int start_pos, int end_pos);
void (gtk_editable_insert_text)(GtkEditable *editable, const char *text, int length, int *position);
void (gtk_editable_delete_text)(GtkEditable *editable, int start_pos, int end_pos);
gboolean (gtk_editable_get_selection_bounds)(GtkEditable *editable, int *start_pos, int *end_pos);
void (gtk_editable_delete_selection)(GtkEditable *editable);
void (gtk_editable_select_region)(GtkEditable *editable, int start_pos, int end_pos);
void (gtk_editable_set_position)(GtkEditable *editable, int position);
int (gtk_editable_get_position)(GtkEditable *editable);
gboolean (gtk_editable_get_editable)(GtkEditable *editable);
void (gtk_editable_set_editable)(GtkEditable *editable, gboolean is_editable);
float (gtk_editable_get_alignment)(GtkEditable *editable);
void (gtk_editable_set_alignment)(GtkEditable *editable, float xalign);
int (gtk_editable_get_width_chars)(GtkEditable *editable);
void (gtk_editable_set_width_chars)(GtkEditable *editable, int n_chars);
int (gtk_editable_get_max_width_chars)(GtkEditable *editable);
void (gtk_editable_set_max_width_chars)(GtkEditable *editable, int n_chars);
gboolean (gtk_editable_get_enable_undo)(GtkEditable *editable);
void (gtk_editable_set_enable_undo)(GtkEditable *editable, gboolean enable_undo);
guint (gtk_editable_install_properties)(GObjectClass *object_class, guint first_prop);
GtkEditable* (gtk_editable_get_delegate)(GtkEditable *editable);
void (gtk_editable_init_delegate)(GtkEditable *editable);
void (gtk_editable_finish_delegate)(GtkEditable *editable);
gboolean (gtk_editable_delegate_set_property)(GObject *object, guint prop_id, const GValue *value, GParamSpec *pspec);
gboolean (gtk_editable_delegate_get_property)(GObject *object, guint prop_id, GValue *value, GParamSpec *pspec);
gboolean (gtk_editable_delegate_get_accessible_platform_state)(GtkEditable *editable, GtkAccessiblePlatformState state);
GType (gtk_editable_label_get_type)(void);
GtkWidget * (gtk_editable_label_new)(const char *str);
gboolean (gtk_editable_label_get_editing)(GtkEditableLabel *self);
void (gtk_editable_label_start_editing)(GtkEditableLabel *self);
void (gtk_editable_label_stop_editing)(GtkEditableLabel *self, gboolean commit);
GType (gtk_emoji_chooser_get_type)(void);
GtkWidget* (gtk_emoji_chooser_new)(void);
GType (gtk_entry_get_type)(void);
GtkWidget* (gtk_entry_new)(void);
GtkWidget* (gtk_entry_new_with_buffer)(GtkEntryBuffer *buffer);
GtkEntryBuffer* (gtk_entry_get_buffer)(GtkEntry *entry);
void (gtk_entry_set_buffer)(GtkEntry *entry, GtkEntryBuffer *buffer);
void (gtk_entry_set_visibility)(GtkEntry *entry, gboolean visible);
gboolean (gtk_entry_get_visibility)(GtkEntry *entry);
void (gtk_entry_set_invisible_char)(GtkEntry *entry, gunichar ch);
gunichar (gtk_entry_get_invisible_char)(GtkEntry *entry);
void (gtk_entry_unset_invisible_char)(GtkEntry *entry);
void (gtk_entry_set_has_frame)(GtkEntry *entry, gboolean setting);
gboolean (gtk_entry_get_has_frame)(GtkEntry *entry);
void (gtk_entry_set_overwrite_mode)(GtkEntry *entry, gboolean overwrite);
gboolean (gtk_entry_get_overwrite_mode)(GtkEntry *entry);
void (gtk_entry_set_max_length)(GtkEntry *entry, int max);
int (gtk_entry_get_max_length)(GtkEntry *entry);
guint16 (gtk_entry_get_text_length)(GtkEntry *entry);
void (gtk_entry_set_activates_default)(GtkEntry *entry, gboolean setting);
gboolean (gtk_entry_get_activates_default)(GtkEntry *entry);
void (gtk_entry_set_alignment)(GtkEntry *entry, float xalign);
float (gtk_entry_get_alignment)(GtkEntry *entry);
void (gtk_entry_set_completion)(GtkEntry *entry, GtkEntryCompletion *completion);
GtkEntryCompletion* (gtk_entry_get_completion)(GtkEntry *entry);
void (gtk_entry_set_progress_fraction)(GtkEntry *entry, double fraction);
double (gtk_entry_get_progress_fraction)(GtkEntry *entry);
void (gtk_entry_set_progress_pulse_step)(GtkEntry *entry, double fraction);
double (gtk_entry_get_progress_pulse_step)(GtkEntry *entry);
void (gtk_entry_progress_pulse)(GtkEntry *entry);
const char * (gtk_entry_get_placeholder_text)(GtkEntry *entry);
void (gtk_entry_set_placeholder_text)(GtkEntry *entry, const char *text);
void (gtk_entry_set_icon_from_paintable)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPaintable *paintable);
void (gtk_entry_set_icon_from_icon_name)(GtkEntry *entry, GtkEntryIconPosition icon_pos, const char *icon_name);
void (gtk_entry_set_icon_from_gicon)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon);
GtkImageType (gtk_entry_get_icon_storage_type)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
GdkPaintable * (gtk_entry_get_icon_paintable)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
const char * (gtk_entry_get_icon_name)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
GIcon* (gtk_entry_get_icon_gicon)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
void (gtk_entry_set_icon_activatable)(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable);
gboolean (gtk_entry_get_icon_activatable)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
void (gtk_entry_set_icon_sensitive)(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive);
gboolean (gtk_entry_get_icon_sensitive)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
int (gtk_entry_get_icon_at_pos)(GtkEntry *entry, int x, int y);
void (gtk_entry_set_icon_tooltip_text)(GtkEntry *entry, GtkEntryIconPosition icon_pos, const char *tooltip);
char * (gtk_entry_get_icon_tooltip_text)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
void (gtk_entry_set_icon_tooltip_markup)(GtkEntry *entry, GtkEntryIconPosition icon_pos, const char *tooltip);
char * (gtk_entry_get_icon_tooltip_markup)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
void (gtk_entry_set_icon_drag_source)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkContentProvider *provider, GdkDragAction actions);
int (gtk_entry_get_current_icon_drag_source)(GtkEntry *entry);
void (gtk_entry_get_icon_area)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkRectangle *icon_area);
void (gtk_entry_reset_im_context)(GtkEntry *entry);
void (gtk_entry_set_input_purpose)(GtkEntry *entry, GtkInputPurpose purpose);
GtkInputPurpose (gtk_entry_get_input_purpose)(GtkEntry *entry);
void (gtk_entry_set_input_hints)(GtkEntry *entry, GtkInputHints hints);
GtkInputHints (gtk_entry_get_input_hints)(GtkEntry *entry);
void (gtk_entry_set_attributes)(GtkEntry *entry, PangoAttrList *attrs);
PangoAttrList* (gtk_entry_get_attributes)(GtkEntry *entry);
void (gtk_entry_set_tabs)(GtkEntry *entry, PangoTabArray *tabs);
PangoTabArray* (gtk_entry_get_tabs)(GtkEntry *entry);
gboolean (gtk_entry_grab_focus_without_selecting)(GtkEntry *entry);
void (gtk_entry_set_extra_menu)(GtkEntry *entry, GMenuModel *model);
GMenuModel * (gtk_entry_get_extra_menu)(GtkEntry *entry);
GType (gtk_entry_buffer_get_type)(void);
GtkEntryBuffer* (gtk_entry_buffer_new)(const char *initial_chars, int n_initial_chars);
gsize (gtk_entry_buffer_get_bytes)(GtkEntryBuffer *buffer);
guint (gtk_entry_buffer_get_length)(GtkEntryBuffer *buffer);
const char * (gtk_entry_buffer_get_text)(GtkEntryBuffer *buffer);
void (gtk_entry_buffer_set_text)(GtkEntryBuffer *buffer, const char *chars, int n_chars);
void (gtk_entry_buffer_set_max_length)(GtkEntryBuffer *buffer, int max_length);
int (gtk_entry_buffer_get_max_length)(GtkEntryBuffer *buffer);
guint (gtk_entry_buffer_insert_text)(GtkEntryBuffer *buffer, guint position, const char *chars, int n_chars);
guint (gtk_entry_buffer_delete_text)(GtkEntryBuffer *buffer, guint position, int n_chars);
void (gtk_entry_buffer_emit_inserted_text)(GtkEntryBuffer *buffer, guint position, const char *chars, guint n_chars);
void (gtk_entry_buffer_emit_deleted_text)(GtkEntryBuffer *buffer, guint position, guint n_chars);
GType (gtk_event_controller_get_type)(void);
GtkWidget * (gtk_event_controller_get_widget)(GtkEventController *controller);
void (gtk_event_controller_reset)(GtkEventController *controller);
GtkPropagationPhase (gtk_event_controller_get_propagation_phase)(GtkEventController *controller);
void (gtk_event_controller_set_propagation_phase)(GtkEventController *controller, GtkPropagationPhase phase);
GtkPropagationLimit (gtk_event_controller_get_propagation_limit)(GtkEventController *controller);
void (gtk_event_controller_set_propagation_limit)(GtkEventController *controller, GtkPropagationLimit limit);
const char * (gtk_event_controller_get_name)(GtkEventController *controller);
void (gtk_event_controller_set_name)(GtkEventController *controller, const char *name);
void (gtk_event_controller_set_static_name)(GtkEventController *controller, const char *name);
GdkEvent * (gtk_event_controller_get_current_event)(GtkEventController *controller);
guint32 (gtk_event_controller_get_current_event_time)(GtkEventController *controller);
GdkDevice * (gtk_event_controller_get_current_event_device)(GtkEventController *controller);
GdkModifierType (gtk_event_controller_get_current_event_state)(GtkEventController *controller);
GType (gtk_event_controller_focus_get_type)(void);
GtkEventController* (gtk_event_controller_focus_new)(void);
gboolean (gtk_event_controller_focus_contains_focus)(GtkEventControllerFocus *self);
gboolean (gtk_event_controller_focus_is_focus)(GtkEventControllerFocus *self);
GType (gtk_event_controller_key_get_type)(void);
GtkEventController* (gtk_event_controller_key_new)(void);
void (gtk_event_controller_key_set_im_context)(GtkEventControllerKey *controller, GtkIMContext *im_context);
GtkIMContext * (gtk_event_controller_key_get_im_context)(GtkEventControllerKey *controller);
gboolean (gtk_event_controller_key_forward)(GtkEventControllerKey *controller, GtkWidget *widget);
guint (gtk_event_controller_key_get_group)(GtkEventControllerKey *controller);
GType (gtk_event_controller_legacy_get_type)(void);
GtkEventController* (gtk_event_controller_legacy_new)(void);
GType (gtk_event_controller_motion_get_type)(void);
GtkEventController* (gtk_event_controller_motion_new)(void);
gboolean (gtk_event_controller_motion_contains_pointer)(GtkEventControllerMotion *self);
gboolean (gtk_event_controller_motion_is_pointer)(GtkEventControllerMotion *self);
GType (gtk_event_controller_scroll_get_type)(void);
GtkEventController* (gtk_event_controller_scroll_new)(GtkEventControllerScrollFlags flags);
void (gtk_event_controller_scroll_set_flags)(GtkEventControllerScroll *scroll, GtkEventControllerScrollFlags flags);
GtkEventControllerScrollFlags (gtk_event_controller_scroll_get_flags)(GtkEventControllerScroll *scroll);
GdkScrollUnit (gtk_event_controller_scroll_get_unit)(GtkEventControllerScroll *scroll);
GType (gtk_expander_get_type)(void);
GtkWidget* (gtk_expander_new)(const char *label);
GtkWidget* (gtk_expander_new_with_mnemonic)(const char *label);
void (gtk_expander_set_expanded)(GtkExpander *expander, gboolean expanded);
gboolean (gtk_expander_get_expanded)(GtkExpander *expander);
void (gtk_expander_set_label)(GtkExpander *expander, const char *label);
const char * (gtk_expander_get_label)(GtkExpander *expander);
void (gtk_expander_set_use_underline)(GtkExpander *expander, gboolean use_underline);
gboolean (gtk_expander_get_use_underline)(GtkExpander *expander);
void (gtk_expander_set_use_markup)(GtkExpander *expander, gboolean use_markup);
gboolean (gtk_expander_get_use_markup)(GtkExpander *expander);
void (gtk_expander_set_label_widget)(GtkExpander *expander, GtkWidget *label_widget);
GtkWidget* (gtk_expander_get_label_widget)(GtkExpander *expander);
void (gtk_expander_set_resize_toplevel)(GtkExpander *expander, gboolean resize_toplevel);
gboolean (gtk_expander_get_resize_toplevel)(GtkExpander *expander);
void (gtk_expander_set_child)(GtkExpander *expander, GtkWidget *child);
GtkWidget * (gtk_expander_get_child)(GtkExpander *expander);
GType (gtk_expression_get_type)(void);
GType (gtk_expression_watch_get_type)(void);
GtkExpression * (gtk_expression_ref)(GtkExpression *self);
void (gtk_expression_unref)(GtkExpression *self);
gboolean (gtk_expression_is_static)(GtkExpression *self);
gboolean (gtk_expression_evaluate)(GtkExpression *self, gpointer this_, GValue *value);
GtkExpressionWatch * (gtk_expression_watch)(GtkExpression *self, gpointer this_, GtkExpressionNotify notify, gpointer user_data, GDestroyNotify user_destroy);
GtkExpressionWatch * (gtk_expression_bind)(GtkExpression *self, gpointer target, const char * property, gpointer this_);
GtkExpressionWatch * (gtk_expression_watch_ref)(GtkExpressionWatch *watch);
void (gtk_expression_watch_unref)(GtkExpressionWatch *watch);
gboolean (gtk_expression_watch_evaluate)(GtkExpressionWatch *watch, GValue *value);
void (gtk_expression_watch_unwatch)(GtkExpressionWatch *watch);
GType (gtk_property_expression_get_type)(void);
GtkExpression * (gtk_property_expression_new)(GType this_type, GtkExpression *expression, const char *property_name);
GtkExpression * (gtk_property_expression_new_for_pspec)(GtkExpression *expression, GParamSpec *pspec);
GtkExpression * (gtk_property_expression_get_expression)(GtkExpression *expression);
GParamSpec * (gtk_property_expression_get_pspec)(GtkExpression *expression);
GType (gtk_constant_expression_get_type)(void);
GtkExpression * (gtk_constant_expression_new_for_value)(const GValue *value);
const GValue * (gtk_constant_expression_get_value)(GtkExpression *expression);
GType (gtk_object_expression_get_type)(void);
GtkExpression * (gtk_object_expression_new)(GObject *object);
GObject * (gtk_object_expression_get_object)(GtkExpression *expression);
GType (gtk_closure_expression_get_type)(void);
GtkExpression * (gtk_closure_expression_new)(GType value_type, GClosure *closure, guint n_params, GtkExpression **params);
GType (gtk_cclosure_expression_get_type)(void);
GtkExpression * (gtk_cclosure_expression_new)(GType value_type, GClosureMarshal marshal, guint n_params, GtkExpression **params, GCallback callback_func, gpointer user_data, GClosureNotify user_destroy);
void (gtk_value_set_expression)(GValue *value, GtkExpression *expression);
void (gtk_value_take_expression)(GValue *value, GtkExpression *expression);
GtkExpression * (gtk_value_get_expression)(const GValue *value);
GtkExpression * (gtk_value_dup_expression)(const GValue *value);
GType (gtk_param_expression_get_type)(void);
GParamSpec * (gtk_param_spec_expression)(const char *name, const char *nick, const char *blurb, GParamFlags flags);
GType (gtk_file_dialog_get_type)(void);
GtkFileDialog * (gtk_file_dialog_new)(void);
const char * (gtk_file_dialog_get_title)(GtkFileDialog *self);
void (gtk_file_dialog_set_title)(GtkFileDialog *self, const char *title);
gboolean (gtk_file_dialog_get_modal)(GtkFileDialog *self);
void (gtk_file_dialog_set_modal)(GtkFileDialog *self, gboolean modal);
GListModel * (gtk_file_dialog_get_filters)(GtkFileDialog *self);
void (gtk_file_dialog_set_filters)(GtkFileDialog *self, GListModel *filters);
GtkFileFilter * (gtk_file_dialog_get_default_filter)(GtkFileDialog *self);
void (gtk_file_dialog_set_default_filter)(GtkFileDialog *self, GtkFileFilter *filter);
GFile * (gtk_file_dialog_get_initial_folder)(GtkFileDialog *self);
void (gtk_file_dialog_set_initial_folder)(GtkFileDialog *self, GFile *folder);
const char * (gtk_file_dialog_get_initial_name)(GtkFileDialog *self);
void (gtk_file_dialog_set_initial_name)(GtkFileDialog *self, const char *name);
GFile * (gtk_file_dialog_get_initial_file)(GtkFileDialog *self);
void (gtk_file_dialog_set_initial_file)(GtkFileDialog *self, GFile *file);
const char * (gtk_file_dialog_get_accept_label)(GtkFileDialog *self);
void (gtk_file_dialog_set_accept_label)(GtkFileDialog *self, const char *accept_label);
void (gtk_file_dialog_open)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (gtk_file_dialog_open_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
void (gtk_file_dialog_select_folder)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (gtk_file_dialog_select_folder_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
void (gtk_file_dialog_save)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (gtk_file_dialog_save_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
void (gtk_file_dialog_open_multiple)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GListModel * (gtk_file_dialog_open_multiple_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
void (gtk_file_dialog_select_multiple_folders)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GListModel * (gtk_file_dialog_select_multiple_folders_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
GType (gtk_file_filter_get_type)(void);
GtkFileFilter * (gtk_file_filter_new)(void);
void (gtk_file_filter_set_name)(GtkFileFilter *filter, const char *name);
const char * (gtk_file_filter_get_name)(GtkFileFilter *filter);
void (gtk_file_filter_add_mime_type)(GtkFileFilter *filter, const char *mime_type);
void (gtk_file_filter_add_pattern)(GtkFileFilter *filter, const char *pattern);
void (gtk_file_filter_add_suffix)(GtkFileFilter *filter, const char *suffix);
void (gtk_file_filter_add_pixbuf_formats)(GtkFileFilter *filter);
const char ** (gtk_file_filter_get_attributes)(GtkFileFilter *filter);
GVariant * (gtk_file_filter_to_gvariant)(GtkFileFilter *filter);
GtkFileFilter * (gtk_file_filter_new_from_gvariant)(GVariant *variant);
GType (gtk_file_launcher_get_type)(void);
GtkFileLauncher * (gtk_file_launcher_new)(GFile *file);
GFile * (gtk_file_launcher_get_file)(GtkFileLauncher *self);
void (gtk_file_launcher_set_file)(GtkFileLauncher *self, GFile *file);
gboolean (gtk_file_launcher_get_always_ask)(GtkFileLauncher *self);
void (gtk_file_launcher_set_always_ask)(GtkFileLauncher *self, gboolean always_ask);
gboolean (gtk_file_launcher_get_writable)(GtkFileLauncher *self);
void (gtk_file_launcher_set_writable)(GtkFileLauncher *self, gboolean writable);
void (gtk_file_launcher_launch)(GtkFileLauncher *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gtk_file_launcher_launch_finish)(GtkFileLauncher *self, GAsyncResult *result, GError **error);
void (gtk_file_launcher_open_containing_folder)(GtkFileLauncher *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gtk_file_launcher_open_containing_folder_finish)(GtkFileLauncher *self, GAsyncResult *result, GError **error);
GType (gtk_filter_get_type)(void);
gboolean (gtk_filter_match)(GtkFilter *self, gpointer item);
GtkFilterMatch (gtk_filter_get_strictness)(GtkFilter *self);
void (gtk_filter_changed)(GtkFilter *self, GtkFilterChange change);
GType (gtk_filter_list_model_get_type)(void);
GtkFilterListModel * (gtk_filter_list_model_new)(GListModel *model, GtkFilter *filter);
void (gtk_filter_list_model_set_filter)(GtkFilterListModel *self, GtkFilter *filter);
GtkFilter * (gtk_filter_list_model_get_filter)(GtkFilterListModel *self);
void (gtk_filter_list_model_set_model)(GtkFilterListModel *self, GListModel *model);
GListModel * (gtk_filter_list_model_get_model)(GtkFilterListModel *self);
void (gtk_filter_list_model_set_incremental)(GtkFilterListModel *self, gboolean incremental);
gboolean (gtk_filter_list_model_get_incremental)(GtkFilterListModel *self);
guint (gtk_filter_list_model_get_pending)(GtkFilterListModel *self);
GType (gtk_fixed_get_type)(void);
GtkWidget * (gtk_fixed_new)(void);
void (gtk_fixed_put)(GtkFixed *fixed, GtkWidget *widget, double x, double y);
void (gtk_fixed_remove)(GtkFixed *fixed, GtkWidget *widget);
void (gtk_fixed_move)(GtkFixed *fixed, GtkWidget *widget, double x, double y);
void (gtk_fixed_get_child_position)(GtkFixed *fixed, GtkWidget *widget, double *x, double *y);
void (gtk_fixed_set_child_transform)(GtkFixed *fixed, GtkWidget *widget, GskTransform *transform);
GskTransform * (gtk_fixed_get_child_transform)(GtkFixed *fixed, GtkWidget *widget);
GType (gtk_fixed_layout_get_type)(void);
GType (gtk_fixed_layout_child_get_type)(void);
GtkLayoutManager * (gtk_fixed_layout_new)(void);
void (gtk_fixed_layout_child_set_transform)(GtkFixedLayoutChild *child, GskTransform *transform);
GskTransform * (gtk_fixed_layout_child_get_transform)(GtkFixedLayoutChild *child);
GType (gtk_flatten_list_model_get_type)(void);
GtkFlattenListModel * (gtk_flatten_list_model_new)(GListModel *model);
void (gtk_flatten_list_model_set_model)(GtkFlattenListModel *self, GListModel *model);
GListModel * (gtk_flatten_list_model_get_model)(GtkFlattenListModel *self);
GListModel * (gtk_flatten_list_model_get_model_for_item)(GtkFlattenListModel *self, guint position);
GType (gtk_flow_box_get_type)(void);
GType (gtk_flow_box_child_get_type)(void);
GtkWidget* (gtk_flow_box_child_new)(void);
void (gtk_flow_box_child_set_child)(GtkFlowBoxChild *self, GtkWidget *child);
GtkWidget * (gtk_flow_box_child_get_child)(GtkFlowBoxChild *self);
int (gtk_flow_box_child_get_index)(GtkFlowBoxChild *child);
gboolean (gtk_flow_box_child_is_selected)(GtkFlowBoxChild *child);
void (gtk_flow_box_child_changed)(GtkFlowBoxChild *child);
GtkWidget* (gtk_flow_box_new)(void);
void (gtk_flow_box_bind_model)(GtkFlowBox *box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func);
void (gtk_flow_box_set_homogeneous)(GtkFlowBox *box, gboolean homogeneous);
gboolean (gtk_flow_box_get_homogeneous)(GtkFlowBox *box);
void (gtk_flow_box_set_row_spacing)(GtkFlowBox *box, guint spacing);
guint (gtk_flow_box_get_row_spacing)(GtkFlowBox *box);
void (gtk_flow_box_set_column_spacing)(GtkFlowBox *box, guint spacing);
guint (gtk_flow_box_get_column_spacing)(GtkFlowBox *box);
void (gtk_flow_box_set_min_children_per_line)(GtkFlowBox *box, guint n_children);
guint (gtk_flow_box_get_min_children_per_line)(GtkFlowBox *box);
void (gtk_flow_box_set_max_children_per_line)(GtkFlowBox *box, guint n_children);
guint (gtk_flow_box_get_max_children_per_line)(GtkFlowBox *box);
void (gtk_flow_box_set_activate_on_single_click)(GtkFlowBox *box, gboolean single);
gboolean (gtk_flow_box_get_activate_on_single_click)(GtkFlowBox *box);
void (gtk_flow_box_prepend)(GtkFlowBox *self, GtkWidget *child);
void (gtk_flow_box_append)(GtkFlowBox *self, GtkWidget *child);
void (gtk_flow_box_insert)(GtkFlowBox *box, GtkWidget *widget, int position);
void (gtk_flow_box_remove)(GtkFlowBox *box, GtkWidget *widget);
void (gtk_flow_box_remove_all)(GtkFlowBox *box);
GtkFlowBoxChild* (gtk_flow_box_get_child_at_index)(GtkFlowBox *box, int idx);
GtkFlowBoxChild* (gtk_flow_box_get_child_at_pos)(GtkFlowBox *box, int x, int y);
void (gtk_flow_box_selected_foreach)(GtkFlowBox *box, GtkFlowBoxForeachFunc func, gpointer data);
GList* (gtk_flow_box_get_selected_children)(GtkFlowBox *box);
void (gtk_flow_box_select_child)(GtkFlowBox *box, GtkFlowBoxChild *child);
void (gtk_flow_box_unselect_child)(GtkFlowBox *box, GtkFlowBoxChild *child);
void (gtk_flow_box_select_all)(GtkFlowBox *box);
void (gtk_flow_box_unselect_all)(GtkFlowBox *box);
void (gtk_flow_box_set_selection_mode)(GtkFlowBox *box, GtkSelectionMode mode);
GtkSelectionMode (gtk_flow_box_get_selection_mode)(GtkFlowBox *box);
void (gtk_flow_box_set_hadjustment)(GtkFlowBox *box, GtkAdjustment *adjustment);
void (gtk_flow_box_set_vadjustment)(GtkFlowBox *box, GtkAdjustment *adjustment);
void (gtk_flow_box_set_filter_func)(GtkFlowBox *box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy);
void (gtk_flow_box_invalidate_filter)(GtkFlowBox *box);
void (gtk_flow_box_set_sort_func)(GtkFlowBox *box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy);
void (gtk_flow_box_invalidate_sort)(GtkFlowBox *box);
GType (gtk_font_dialog_get_type)(void);
GtkFontDialog * (gtk_font_dialog_new)(void);
const char * (gtk_font_dialog_get_title)(GtkFontDialog *self);
void (gtk_font_dialog_set_title)(GtkFontDialog *self, const char *title);
gboolean (gtk_font_dialog_get_modal)(GtkFontDialog *self);
void (gtk_font_dialog_set_modal)(GtkFontDialog *self, gboolean modal);
PangoLanguage * (gtk_font_dialog_get_language)(GtkFontDialog *self);
void (gtk_font_dialog_set_language)(GtkFontDialog *self, PangoLanguage *language);
PangoFontMap * (gtk_font_dialog_get_font_map)(GtkFontDialog *self);
void (gtk_font_dialog_set_font_map)(GtkFontDialog *self, PangoFontMap *fontmap);
GtkFilter * (gtk_font_dialog_get_filter)(GtkFontDialog *self);
void (gtk_font_dialog_set_filter)(GtkFontDialog *self, GtkFilter *filter);
void (gtk_font_dialog_choose_family)(GtkFontDialog *self, GtkWindow *parent, PangoFontFamily *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
PangoFontFamily * (gtk_font_dialog_choose_family_finish)(GtkFontDialog *self, GAsyncResult *result, GError **error);
void (gtk_font_dialog_choose_face)(GtkFontDialog *self, GtkWindow *parent, PangoFontFace *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
PangoFontFace * (gtk_font_dialog_choose_face_finish)(GtkFontDialog *self, GAsyncResult *result, GError **error);
void (gtk_font_dialog_choose_font)(GtkFontDialog *self, GtkWindow *parent, PangoFontDescription *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
PangoFontDescription * (gtk_font_dialog_choose_font_finish)(GtkFontDialog *self, GAsyncResult *result, GError **error);
void (gtk_font_dialog_choose_font_and_features)(GtkFontDialog *self, GtkWindow *parent, PangoFontDescription *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gtk_font_dialog_choose_font_and_features_finish)(GtkFontDialog *self, GAsyncResult *result, PangoFontDescription **font_desc, char **font_features, PangoLanguage **language, GError **error);
GType (gtk_font_dialog_button_get_type)(void);
GtkWidget * (gtk_font_dialog_button_new)(GtkFontDialog *dialog);
GtkFontDialog * (gtk_font_dialog_button_get_dialog)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_dialog)(GtkFontDialogButton *self, GtkFontDialog *dialog);
GtkFontLevel (gtk_font_dialog_button_get_level)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_level)(GtkFontDialogButton *self, GtkFontLevel level);
PangoFontDescription * (gtk_font_dialog_button_get_font_desc)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_font_desc)(GtkFontDialogButton *self, const PangoFontDescription *font_desc);
const char * (gtk_font_dialog_button_get_font_features)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_font_features)(GtkFontDialogButton *self, const char *font_features);
PangoLanguage * (gtk_font_dialog_button_get_language)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_language)(GtkFontDialogButton *self, PangoLanguage *language);
gboolean (gtk_font_dialog_button_get_use_font)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_use_font)(GtkFontDialogButton *self, gboolean use_font);
gboolean (gtk_font_dialog_button_get_use_size)(GtkFontDialogButton *self);
void (gtk_font_dialog_button_set_use_size)(GtkFontDialogButton *self, gboolean use_size);
GType (gtk_frame_get_type)(void);
GtkWidget* (gtk_frame_new)(const char *label);
void (gtk_frame_set_label)(GtkFrame *frame, const char *label);
const char * (gtk_frame_get_label)(GtkFrame *frame);
void (gtk_frame_set_label_widget)(GtkFrame *frame, GtkWidget *label_widget);
GtkWidget* (gtk_frame_get_label_widget)(GtkFrame *frame);
void (gtk_frame_set_label_align)(GtkFrame *frame, float xalign);
float (gtk_frame_get_label_align)(GtkFrame *frame);
void (gtk_frame_set_child)(GtkFrame *frame, GtkWidget *child);
GtkWidget* (gtk_frame_get_child)(GtkFrame *frame);
GType (gtk_gesture_get_type)(void);
GdkDevice * (gtk_gesture_get_device)(GtkGesture *gesture);
gboolean (gtk_gesture_set_state)(GtkGesture *gesture, GtkEventSequenceState state);
GtkEventSequenceState (gtk_gesture_get_sequence_state)(GtkGesture *gesture, GdkEventSequence *sequence);
gboolean (gtk_gesture_set_sequence_state)(GtkGesture *gesture, GdkEventSequence *sequence, GtkEventSequenceState state);
GList * (gtk_gesture_get_sequences)(GtkGesture *gesture);
GdkEventSequence * (gtk_gesture_get_last_updated_sequence)(GtkGesture *gesture);
gboolean (gtk_gesture_handles_sequence)(GtkGesture *gesture, GdkEventSequence *sequence);
GdkEvent * (gtk_gesture_get_last_event)(GtkGesture *gesture, GdkEventSequence *sequence);
gboolean (gtk_gesture_get_point)(GtkGesture *gesture, GdkEventSequence *sequence, double *x, double *y);
gboolean (gtk_gesture_get_bounding_box)(GtkGesture *gesture, GdkRectangle *rect);
gboolean (gtk_gesture_get_bounding_box_center)(GtkGesture *gesture, double *x, double *y);
gboolean (gtk_gesture_is_active)(GtkGesture *gesture);
gboolean (gtk_gesture_is_recognized)(GtkGesture *gesture);
void (gtk_gesture_group)(GtkGesture *group_gesture, GtkGesture *gesture);
void (gtk_gesture_ungroup)(GtkGesture *gesture);
GList * (gtk_gesture_get_group)(GtkGesture *gesture);
gboolean (gtk_gesture_is_grouped_with)(GtkGesture *gesture, GtkGesture *other);
GType (gtk_gesture_click_get_type)(void);
GtkGesture * (gtk_gesture_click_new)(void);
GType (gtk_gesture_drag_get_type)(void);
GtkGesture * (gtk_gesture_drag_new)(void);
gboolean (gtk_gesture_drag_get_start_point)(GtkGestureDrag *gesture, double *x, double *y);
gboolean (gtk_gesture_drag_get_offset)(GtkGestureDrag *gesture, double *x, double *y);
GType (gtk_gesture_long_press_get_type)(void);
GtkGesture * (gtk_gesture_long_press_new)(void);
void (gtk_gesture_long_press_set_delay_factor)(GtkGestureLongPress *gesture, double delay_factor);
double (gtk_gesture_long_press_get_delay_factor)(GtkGestureLongPress *gesture);
GType (gtk_gesture_pan_get_type)(void);
GtkGesture * (gtk_gesture_pan_new)(GtkOrientation orientation);
GtkOrientation (gtk_gesture_pan_get_orientation)(GtkGesturePan *gesture);
void (gtk_gesture_pan_set_orientation)(GtkGesturePan *gesture, GtkOrientation orientation);
GType (gtk_gesture_rotate_get_type)(void);
GtkGesture * (gtk_gesture_rotate_new)(void);
double (gtk_gesture_rotate_get_angle_delta)(GtkGestureRotate *gesture);
GType (gtk_gesture_single_get_type)(void);
gboolean (gtk_gesture_single_get_touch_only)(GtkGestureSingle *gesture);
void (gtk_gesture_single_set_touch_only)(GtkGestureSingle *gesture, gboolean touch_only);
gboolean (gtk_gesture_single_get_exclusive)(GtkGestureSingle *gesture);
void (gtk_gesture_single_set_exclusive)(GtkGestureSingle *gesture, gboolean exclusive);
guint (gtk_gesture_single_get_button)(GtkGestureSingle *gesture);
void (gtk_gesture_single_set_button)(GtkGestureSingle *gesture, guint button);
guint (gtk_gesture_single_get_current_button)(GtkGestureSingle *gesture);
GdkEventSequence * (gtk_gesture_single_get_current_sequence)(GtkGestureSingle *gesture);
GType (gtk_gesture_stylus_get_type)(void);
GtkGesture * (gtk_gesture_stylus_new)(void);
gboolean (gtk_gesture_stylus_get_stylus_only)(GtkGestureStylus *gesture);
void (gtk_gesture_stylus_set_stylus_only)(GtkGestureStylus *gesture, gboolean stylus_only);
gboolean (gtk_gesture_stylus_get_axis)(GtkGestureStylus *gesture, GdkAxisUse axis, double *value);
gboolean (gtk_gesture_stylus_get_axes)(GtkGestureStylus *gesture, GdkAxisUse axes[], double **values);
gboolean (gtk_gesture_stylus_get_backlog)(GtkGestureStylus *gesture, GdkTimeCoord **backlog, guint *n_elems);
GdkDeviceTool * (gtk_gesture_stylus_get_device_tool)(GtkGestureStylus *gesture);
GType (gtk_gesture_swipe_get_type)(void);
GtkGesture * (gtk_gesture_swipe_new)(void);
gboolean (gtk_gesture_swipe_get_velocity)(GtkGestureSwipe *gesture, double *velocity_x, double *velocity_y);
GType (gtk_gesture_zoom_get_type)(void);
GtkGesture * (gtk_gesture_zoom_new)(void);
double (gtk_gesture_zoom_get_scale_delta)(GtkGestureZoom *gesture);
GType (gtk_gl_area_get_type)(void);
GtkWidget * (gtk_gl_area_new)(void);
void (gtk_gl_area_set_allowed_apis)(GtkGLArea *area, GdkGLAPI apis);
GdkGLAPI (gtk_gl_area_get_allowed_apis)(GtkGLArea *area);
GdkGLAPI (gtk_gl_area_get_api)(GtkGLArea *area);
void (gtk_gl_area_set_use_es)(GtkGLArea *area, gboolean use_es);
gboolean (gtk_gl_area_get_use_es)(GtkGLArea *area);
void (gtk_gl_area_set_required_version)(GtkGLArea *area, int major, int minor);
void (gtk_gl_area_get_required_version)(GtkGLArea *area, int *major, int *minor);
gboolean (gtk_gl_area_get_has_depth_buffer)(GtkGLArea *area);
void (gtk_gl_area_set_has_depth_buffer)(GtkGLArea *area, gboolean has_depth_buffer);
gboolean (gtk_gl_area_get_has_stencil_buffer)(GtkGLArea *area);
void (gtk_gl_area_set_has_stencil_buffer)(GtkGLArea *area, gboolean has_stencil_buffer);
gboolean (gtk_gl_area_get_auto_render)(GtkGLArea *area);
void (gtk_gl_area_set_auto_render)(GtkGLArea *area, gboolean auto_render);
void (gtk_gl_area_queue_render)(GtkGLArea *area);
GdkGLContext * (gtk_gl_area_get_context)(GtkGLArea *area);
void (gtk_gl_area_make_current)(GtkGLArea *area);
void (gtk_gl_area_attach_buffers)(GtkGLArea *area);
void (gtk_gl_area_set_error)(GtkGLArea *area, const GError *error);
GError * (gtk_gl_area_get_error)(GtkGLArea *area);
GType (gtk_graphics_offload_get_type)(void);
GtkWidget * (gtk_graphics_offload_new)(GtkWidget *child);
void (gtk_graphics_offload_set_child)(GtkGraphicsOffload *self, GtkWidget *child);
GtkWidget * (gtk_graphics_offload_get_child)(GtkGraphicsOffload *self);
void (gtk_graphics_offload_set_enabled)(GtkGraphicsOffload *self, GtkGraphicsOffloadEnabled enabled);
GtkGraphicsOffloadEnabled (gtk_graphics_offload_get_enabled)(GtkGraphicsOffload *self);
GType (gtk_grid_get_type)(void);
GtkWidget* (gtk_grid_new)(void);
void (gtk_grid_attach)(GtkGrid *grid, GtkWidget *child, int column, int row, int width, int height);
void (gtk_grid_attach_next_to)(GtkGrid *grid, GtkWidget *child, GtkWidget *sibling, GtkPositionType side, int width, int height);
GtkWidget* (gtk_grid_get_child_at)(GtkGrid *grid, int column, int row);
void (gtk_grid_remove)(GtkGrid *grid, GtkWidget *child);
void (gtk_grid_insert_row)(GtkGrid *grid, int position);
void (gtk_grid_insert_column)(GtkGrid *grid, int position);
void (gtk_grid_remove_row)(GtkGrid *grid, int position);
void (gtk_grid_remove_column)(GtkGrid *grid, int position);
void (gtk_grid_insert_next_to)(GtkGrid *grid, GtkWidget *sibling, GtkPositionType side);
void (gtk_grid_set_row_homogeneous)(GtkGrid *grid, gboolean homogeneous);
gboolean (gtk_grid_get_row_homogeneous)(GtkGrid *grid);
void (gtk_grid_set_row_spacing)(GtkGrid *grid, guint spacing);
guint (gtk_grid_get_row_spacing)(GtkGrid *grid);
void (gtk_grid_set_column_homogeneous)(GtkGrid *grid, gboolean homogeneous);
gboolean (gtk_grid_get_column_homogeneous)(GtkGrid *grid);
void (gtk_grid_set_column_spacing)(GtkGrid *grid, guint spacing);
guint (gtk_grid_get_column_spacing)(GtkGrid *grid);
void (gtk_grid_set_row_baseline_position)(GtkGrid *grid, int row, GtkBaselinePosition pos);
GtkBaselinePosition (gtk_grid_get_row_baseline_position)(GtkGrid *grid, int row);
void (gtk_grid_set_baseline_row)(GtkGrid *grid, int row);
int (gtk_grid_get_baseline_row)(GtkGrid *grid);
void (gtk_grid_query_child)(GtkGrid *grid, GtkWidget *child, int *column, int *row, int *width, int *height);
GType (gtk_grid_layout_get_type)(void);
GType (gtk_grid_layout_child_get_type)(void);
GtkLayoutManager * (gtk_grid_layout_new)(void);
void (gtk_grid_layout_set_row_homogeneous)(GtkGridLayout *grid, gboolean homogeneous);
gboolean (gtk_grid_layout_get_row_homogeneous)(GtkGridLayout *grid);
void (gtk_grid_layout_set_row_spacing)(GtkGridLayout *grid, guint spacing);
guint (gtk_grid_layout_get_row_spacing)(GtkGridLayout *grid);
void (gtk_grid_layout_set_column_homogeneous)(GtkGridLayout *grid, gboolean homogeneous);
gboolean (gtk_grid_layout_get_column_homogeneous)(GtkGridLayout *grid);
void (gtk_grid_layout_set_column_spacing)(GtkGridLayout *grid, guint spacing);
guint (gtk_grid_layout_get_column_spacing)(GtkGridLayout *grid);
void (gtk_grid_layout_set_row_baseline_position)(GtkGridLayout *grid, int row, GtkBaselinePosition pos);
GtkBaselinePosition (gtk_grid_layout_get_row_baseline_position)(GtkGridLayout *grid, int row);
void (gtk_grid_layout_set_baseline_row)(GtkGridLayout *grid, int row);
int (gtk_grid_layout_get_baseline_row)(GtkGridLayout *grid);
void (gtk_grid_layout_child_set_row)(GtkGridLayoutChild *child, int row);
int (gtk_grid_layout_child_get_row)(GtkGridLayoutChild *child);
void (gtk_grid_layout_child_set_column)(GtkGridLayoutChild *child, int column);
int (gtk_grid_layout_child_get_column)(GtkGridLayoutChild *child);
void (gtk_grid_layout_child_set_column_span)(GtkGridLayoutChild *child, int span);
int (gtk_grid_layout_child_get_column_span)(GtkGridLayoutChild *child);
void (gtk_grid_layout_child_set_row_span)(GtkGridLayoutChild *child, int span);
int (gtk_grid_layout_child_get_row_span)(GtkGridLayoutChild *child);
GType (gtk_grid_view_get_type)(void);
GtkWidget * (gtk_grid_view_new)(GtkSelectionModel *model, GtkListItemFactory *factory);
GtkSelectionModel * (gtk_grid_view_get_model)(GtkGridView *self);
void (gtk_grid_view_set_model)(GtkGridView *self, GtkSelectionModel *model);
void (gtk_grid_view_set_factory)(GtkGridView *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_grid_view_get_factory)(GtkGridView *self);
guint (gtk_grid_view_get_min_columns)(GtkGridView *self);
void (gtk_grid_view_set_min_columns)(GtkGridView *self, guint min_columns);
guint (gtk_grid_view_get_max_columns)(GtkGridView *self);
void (gtk_grid_view_set_max_columns)(GtkGridView *self, guint max_columns);
void (gtk_grid_view_set_enable_rubberband)(GtkGridView *self, gboolean enable_rubberband);
gboolean (gtk_grid_view_get_enable_rubberband)(GtkGridView *self);
void (gtk_grid_view_set_tab_behavior)(GtkGridView *self, GtkListTabBehavior tab_behavior);
GtkListTabBehavior (gtk_grid_view_get_tab_behavior)(GtkGridView *self);
void (gtk_grid_view_set_single_click_activate)(GtkGridView *self, gboolean single_click_activate);
gboolean (gtk_grid_view_get_single_click_activate)(GtkGridView *self);
void (gtk_grid_view_scroll_to)(GtkGridView *self, guint pos, GtkListScrollFlags flags, GtkScrollInfo *scroll);
GType (gtk_header_bar_get_type)(void);
GtkWidget* (gtk_header_bar_new)(void);
void (gtk_header_bar_set_title_widget)(GtkHeaderBar *bar, GtkWidget *title_widget);
GtkWidget* (gtk_header_bar_get_title_widget)(GtkHeaderBar *bar);
void (gtk_header_bar_pack_start)(GtkHeaderBar *bar, GtkWidget *child);
void (gtk_header_bar_pack_end)(GtkHeaderBar *bar, GtkWidget *child);
void (gtk_header_bar_remove)(GtkHeaderBar *bar, GtkWidget *child);
gboolean (gtk_header_bar_get_show_title_buttons)(GtkHeaderBar *bar);
void (gtk_header_bar_set_show_title_buttons)(GtkHeaderBar *bar, gboolean setting);
void (gtk_header_bar_set_decoration_layout)(GtkHeaderBar *bar, const char *layout);
const char* (gtk_header_bar_get_decoration_layout)(GtkHeaderBar *bar);
GType (gtk_icon_paintable_get_type)(void);
GType (gtk_icon_theme_get_type)(void);
GQuark (gtk_icon_theme_error_quark)(void);
GtkIconTheme* (gtk_icon_theme_new)(void);
GtkIconTheme* (gtk_icon_theme_get_for_display)(GdkDisplay *display);
GdkDisplay * (gtk_icon_theme_get_display)(GtkIconTheme *self);
void (gtk_icon_theme_set_search_path)(GtkIconTheme *self, const char * const *path);
char ** (gtk_icon_theme_get_search_path)(GtkIconTheme *self);
void (gtk_icon_theme_add_search_path)(GtkIconTheme *self, const char *path);
void (gtk_icon_theme_set_resource_path)(GtkIconTheme *self, const char * const *path);
char ** (gtk_icon_theme_get_resource_path)(GtkIconTheme *self);
void (gtk_icon_theme_add_resource_path)(GtkIconTheme *self, const char *path);
void (gtk_icon_theme_set_theme_name)(GtkIconTheme *self, const char *theme_name);
char * (gtk_icon_theme_get_theme_name)(GtkIconTheme *self);
gboolean (gtk_icon_theme_has_icon)(GtkIconTheme *self, const char *icon_name);
gboolean (gtk_icon_theme_has_gicon)(GtkIconTheme *self, GIcon *gicon);
int* (gtk_icon_theme_get_icon_sizes)(GtkIconTheme *self, const char *icon_name);
GtkIconPaintable* (gtk_icon_theme_lookup_icon)(GtkIconTheme *self, const char *icon_name, const char *fallbacks[], int size, int scale, GtkTextDirection direction, GtkIconLookupFlags flags);
GtkIconPaintable* (gtk_icon_theme_lookup_by_gicon)(GtkIconTheme *self, GIcon *icon, int size, int scale, GtkTextDirection direction, GtkIconLookupFlags flags);
GtkIconPaintable* (gtk_icon_paintable_new_for_file)(GFile *file, int size, int scale);
char ** (gtk_icon_theme_get_icon_names)(GtkIconTheme *self);
GFile * (gtk_icon_paintable_get_file)(GtkIconPaintable *self);
const char * (gtk_icon_paintable_get_icon_name)(GtkIconPaintable *self);
gboolean (gtk_icon_paintable_is_symbolic)(GtkIconPaintable *self);
GType (gtk_image_get_type)(void);
GtkWidget* (gtk_image_new)(void);
GtkWidget* (gtk_image_new_from_file)(const char *filename);
GtkWidget* (gtk_image_new_from_resource)(const char *resource_path);
GtkWidget* (gtk_image_new_from_pixbuf)(GdkPixbuf *pixbuf);
GtkWidget* (gtk_image_new_from_paintable)(GdkPaintable *paintable);
GtkWidget* (gtk_image_new_from_icon_name)(const char *icon_name);
GtkWidget* (gtk_image_new_from_gicon)(GIcon *icon);
void (gtk_image_clear)(GtkImage *image);
void (gtk_image_set_from_file)(GtkImage *image, const char *filename);
void (gtk_image_set_from_resource)(GtkImage *image, const char *resource_path);
void (gtk_image_set_from_pixbuf)(GtkImage *image, GdkPixbuf *pixbuf);
void (gtk_image_set_from_paintable)(GtkImage *image, GdkPaintable *paintable);
void (gtk_image_set_from_icon_name)(GtkImage *image, const char *icon_name);
void (gtk_image_set_from_gicon)(GtkImage *image, GIcon *icon);
void (gtk_image_set_pixel_size)(GtkImage *image, int pixel_size);
void (gtk_image_set_icon_size)(GtkImage *image, GtkIconSize icon_size);
GtkImageType (gtk_image_get_storage_type)(GtkImage *image);
GdkPaintable* (gtk_image_get_paintable)(GtkImage *image);
const char* (gtk_image_get_icon_name)(GtkImage *image);
GIcon * (gtk_image_get_gicon)(GtkImage *image);
int (gtk_image_get_pixel_size)(GtkImage *image);
GtkIconSize (gtk_image_get_icon_size)(GtkImage *image);
GType (gtk_im_context_get_type)(void);
void (gtk_im_context_set_client_widget)(GtkIMContext *context, GtkWidget *widget);
void (gtk_im_context_get_preedit_string)(GtkIMContext *context, char **str, PangoAttrList **attrs, int *cursor_pos);
gboolean (gtk_im_context_filter_keypress)(GtkIMContext *context, GdkEvent *event);
gboolean (gtk_im_context_filter_key)(GtkIMContext *context, gboolean press, GdkSurface *surface, GdkDevice *device, guint32 time, guint keycode, GdkModifierType state, int group);
void (gtk_im_context_focus_in)(GtkIMContext *context);
void (gtk_im_context_focus_out)(GtkIMContext *context);
void (gtk_im_context_reset)(GtkIMContext *context);
void (gtk_im_context_set_cursor_location)(GtkIMContext *context, const GdkRectangle *area);
void (gtk_im_context_set_use_preedit)(GtkIMContext *context, gboolean use_preedit);
void (gtk_im_context_set_surrounding)(GtkIMContext *context, const char *text, int len, int cursor_index);
gboolean (gtk_im_context_get_surrounding)(GtkIMContext *context, char **text, int *cursor_index);
void (gtk_im_context_set_surrounding_with_selection)(GtkIMContext *context, const char *text, int len, int cursor_index, int anchor_index);
gboolean (gtk_im_context_get_surrounding_with_selection)(GtkIMContext *context, char **text, int *cursor_index, int *anchor_index);
gboolean (gtk_im_context_delete_surrounding)(GtkIMContext *context, int offset, int n_chars);
gboolean (gtk_im_context_activate_osk)(GtkIMContext *context, GdkEvent *event);
GType (gtk_im_context_simple_get_type)(void);
GtkIMContext* (gtk_im_context_simple_new)(void);
void (gtk_im_context_simple_add_table)(GtkIMContextSimple *context_simple, guint16 *data, int max_seq_len, int n_seqs);
void (gtk_im_context_simple_add_compose_file)(GtkIMContextSimple *context_simple, const char *compose_file);
GType (gtk_im_multicontext_get_type)(void);
GtkIMContext* (gtk_im_multicontext_new)(void);
const char * (gtk_im_multicontext_get_context_id)(GtkIMMulticontext *context);
void (gtk_im_multicontext_set_context_id)(GtkIMMulticontext *context, const char *context_id);
GType (gtk_inscription_get_type)(void);
GtkWidget * (gtk_inscription_new)(const char *text);
const char * (gtk_inscription_get_text)(GtkInscription *self);
void (gtk_inscription_set_text)(GtkInscription *self, const char *text);
PangoAttrList * (gtk_inscription_get_attributes)(GtkInscription *self);
void (gtk_inscription_set_attributes)(GtkInscription *self, PangoAttrList *attrs);
void (gtk_inscription_set_markup)(GtkInscription *self, const char *markup);
GtkInscriptionOverflow (gtk_inscription_get_text_overflow)(GtkInscription *self);
void (gtk_inscription_set_text_overflow)(GtkInscription *self, GtkInscriptionOverflow overflow);
PangoWrapMode (gtk_inscription_get_wrap_mode)(GtkInscription *self);
void (gtk_inscription_set_wrap_mode)(GtkInscription *self, PangoWrapMode wrap_mode);
guint (gtk_inscription_get_min_chars)(GtkInscription *self);
void (gtk_inscription_set_min_chars)(GtkInscription *self, guint min_chars);
guint (gtk_inscription_get_nat_chars)(GtkInscription *self);
void (gtk_inscription_set_nat_chars)(GtkInscription *self, guint nat_chars);
guint (gtk_inscription_get_min_lines)(GtkInscription *self);
void (gtk_inscription_set_min_lines)(GtkInscription *self, guint min_lines);
guint (gtk_inscription_get_nat_lines)(GtkInscription *self);
void (gtk_inscription_set_nat_lines)(GtkInscription *self, guint nat_lines);
float (gtk_inscription_get_xalign)(GtkInscription *self);
void (gtk_inscription_set_xalign)(GtkInscription *self, float xalign);
float (gtk_inscription_get_yalign)(GtkInscription *self);
void (gtk_inscription_set_yalign)(GtkInscription *self, float yalign);
GType (gtk_label_get_type)(void);
GtkWidget* (gtk_label_new)(const char *str);
GtkWidget* (gtk_label_new_with_mnemonic)(const char *str);
void (gtk_label_set_text)(GtkLabel *self, const char *str);
const char * (gtk_label_get_text)(GtkLabel *self);
void (gtk_label_set_attributes)(GtkLabel *self, PangoAttrList *attrs);
PangoAttrList* (gtk_label_get_attributes)(GtkLabel *self);
void (gtk_label_set_label)(GtkLabel *self, const char *str);
const char * (gtk_label_get_label)(GtkLabel *self);
void (gtk_label_set_markup)(GtkLabel *self, const char *str);
void (gtk_label_set_use_markup)(GtkLabel *self, gboolean setting);
gboolean (gtk_label_get_use_markup)(GtkLabel *self);
void (gtk_label_set_use_underline)(GtkLabel *self, gboolean setting);
gboolean (gtk_label_get_use_underline)(GtkLabel *self);
void (gtk_label_set_markup_with_mnemonic)(GtkLabel *self, const char *str);
guint (gtk_label_get_mnemonic_keyval)(GtkLabel *self);
void (gtk_label_set_mnemonic_widget)(GtkLabel *self, GtkWidget *widget);
GtkWidget* (gtk_label_get_mnemonic_widget)(GtkLabel *self);
void (gtk_label_set_text_with_mnemonic)(GtkLabel *self, const char *str);
void (gtk_label_set_justify)(GtkLabel *self, GtkJustification jtype);
GtkJustification (gtk_label_get_justify)(GtkLabel *self);
void (gtk_label_set_ellipsize)(GtkLabel *self, PangoEllipsizeMode mode);
PangoEllipsizeMode (gtk_label_get_ellipsize)(GtkLabel *self);
void (gtk_label_set_width_chars)(GtkLabel *self, int n_chars);
int (gtk_label_get_width_chars)(GtkLabel *self);
void (gtk_label_set_max_width_chars)(GtkLabel *self, int n_chars);
int (gtk_label_get_max_width_chars)(GtkLabel *self);
void (gtk_label_set_lines)(GtkLabel *self, int lines);
int (gtk_label_get_lines)(GtkLabel *self);
void (gtk_label_set_wrap)(GtkLabel *self, gboolean wrap);
gboolean (gtk_label_get_wrap)(GtkLabel *self);
void (gtk_label_set_wrap_mode)(GtkLabel *self, PangoWrapMode wrap_mode);
PangoWrapMode (gtk_label_get_wrap_mode)(GtkLabel *self);
void (gtk_label_set_natural_wrap_mode)(GtkLabel *self, GtkNaturalWrapMode wrap_mode);
GtkNaturalWrapMode (gtk_label_get_natural_wrap_mode)(GtkLabel *self);
void (gtk_label_set_selectable)(GtkLabel *self, gboolean setting);
gboolean (gtk_label_get_selectable)(GtkLabel *self);
void (gtk_label_select_region)(GtkLabel *self, int start_offset, int end_offset);
gboolean (gtk_label_get_selection_bounds)(GtkLabel *self, int *start, int *end);
PangoLayout* (gtk_label_get_layout)(GtkLabel *self);
void (gtk_label_get_layout_offsets)(GtkLabel *self, int *x, int *y);
void (gtk_label_set_single_line_mode)(GtkLabel *self, gboolean single_line_mode);
gboolean (gtk_label_get_single_line_mode)(GtkLabel *self);
const char* (gtk_label_get_current_uri)(GtkLabel *self);
void (gtk_label_set_xalign)(GtkLabel *self, float xalign);
float (gtk_label_get_xalign)(GtkLabel *self);
void (gtk_label_set_yalign)(GtkLabel *self, float yalign);
float (gtk_label_get_yalign)(GtkLabel *self);
void (gtk_label_set_extra_menu)(GtkLabel *self, GMenuModel *model);
GMenuModel * (gtk_label_get_extra_menu)(GtkLabel *self);
void (gtk_label_set_tabs)(GtkLabel *self, PangoTabArray *tabs);
PangoTabArray * (gtk_label_get_tabs)(GtkLabel *self);
GType (gtk_layout_child_get_type)(void);
GtkLayoutManager * (gtk_layout_child_get_layout_manager)(GtkLayoutChild *layout_child);
GtkWidget * (gtk_layout_child_get_child_widget)(GtkLayoutChild *layout_child);
GType (gtk_layout_manager_get_type)(void);
void (gtk_layout_manager_measure)(GtkLayoutManager *manager, GtkWidget *widget, GtkOrientation orientation, int for_size, int *minimum, int *natural, int *minimum_baseline, int *natural_baseline);
void (gtk_layout_manager_allocate)(GtkLayoutManager *manager, GtkWidget *widget, int width, int height, int baseline);
GtkSizeRequestMode (gtk_layout_manager_get_request_mode)(GtkLayoutManager *manager);
GtkWidget * (gtk_layout_manager_get_widget)(GtkLayoutManager *manager);
void (gtk_layout_manager_layout_changed)(GtkLayoutManager *manager);
GtkLayoutChild * (gtk_layout_manager_get_layout_child)(GtkLayoutManager *manager, GtkWidget *child);
GType (gtk_level_bar_get_type)(void);
GtkWidget* (gtk_level_bar_new)(void);
GtkWidget* (gtk_level_bar_new_for_interval)(double min_value, double max_value);
void (gtk_level_bar_set_mode)(GtkLevelBar *self, GtkLevelBarMode mode);
GtkLevelBarMode (gtk_level_bar_get_mode)(GtkLevelBar *self);
void (gtk_level_bar_set_value)(GtkLevelBar *self, double value);
double (gtk_level_bar_get_value)(GtkLevelBar *self);
void (gtk_level_bar_set_min_value)(GtkLevelBar *self, double value);
double (gtk_level_bar_get_min_value)(GtkLevelBar *self);
void (gtk_level_bar_set_max_value)(GtkLevelBar *self, double value);
double (gtk_level_bar_get_max_value)(GtkLevelBar *self);
void (gtk_level_bar_set_inverted)(GtkLevelBar *self, gboolean inverted);
gboolean (gtk_level_bar_get_inverted)(GtkLevelBar *self);
void (gtk_level_bar_add_offset_value)(GtkLevelBar *self, const char *name, double value);
void (gtk_level_bar_remove_offset_value)(GtkLevelBar *self, const char *name);
gboolean (gtk_level_bar_get_offset_value)(GtkLevelBar *self, const char *name, double *value);
GType (gtk_link_button_get_type)(void);
GtkWidget * (gtk_link_button_new)(const char *uri);
GtkWidget * (gtk_link_button_new_with_label)(const char *uri, const char *label);
const char * (gtk_link_button_get_uri)(GtkLinkButton *link_button);
void (gtk_link_button_set_uri)(GtkLinkButton *link_button, const char *uri);
gboolean (gtk_link_button_get_visited)(GtkLinkButton *link_button);
void (gtk_link_button_set_visited)(GtkLinkButton *link_button, gboolean visited);
GType (gtk_list_base_get_type)(void);
GType (gtk_list_box_get_type)(void);
GType (gtk_list_box_row_get_type)(void);
GtkWidget* (gtk_list_box_row_new)(void);
void (gtk_list_box_row_set_child)(GtkListBoxRow *row, GtkWidget *child);
GtkWidget* (gtk_list_box_row_get_child)(GtkListBoxRow *row);
GtkWidget* (gtk_list_box_row_get_header)(GtkListBoxRow *row);
void (gtk_list_box_row_set_header)(GtkListBoxRow *row, GtkWidget *header);
int (gtk_list_box_row_get_index)(GtkListBoxRow *row);
void (gtk_list_box_row_changed)(GtkListBoxRow *row);
gboolean (gtk_list_box_row_is_selected)(GtkListBoxRow *row);
void (gtk_list_box_row_set_selectable)(GtkListBoxRow *row, gboolean selectable);
gboolean (gtk_list_box_row_get_selectable)(GtkListBoxRow *row);
void (gtk_list_box_row_set_activatable)(GtkListBoxRow *row, gboolean activatable);
gboolean (gtk_list_box_row_get_activatable)(GtkListBoxRow *row);
void (gtk_list_box_prepend)(GtkListBox *box, GtkWidget *child);
void (gtk_list_box_append)(GtkListBox *box, GtkWidget *child);
void (gtk_list_box_insert)(GtkListBox *box, GtkWidget *child, int position);
void (gtk_list_box_remove)(GtkListBox *box, GtkWidget *child);
void (gtk_list_box_remove_all)(GtkListBox *box);
GtkListBoxRow* (gtk_list_box_get_selected_row)(GtkListBox *box);
GtkListBoxRow* (gtk_list_box_get_row_at_index)(GtkListBox *box, int index_);
GtkListBoxRow* (gtk_list_box_get_row_at_y)(GtkListBox *box, int y);
void (gtk_list_box_select_row)(GtkListBox *box, GtkListBoxRow *row);
void (gtk_list_box_set_placeholder)(GtkListBox *box, GtkWidget *placeholder);
void (gtk_list_box_set_adjustment)(GtkListBox *box, GtkAdjustment *adjustment);
GtkAdjustment* (gtk_list_box_get_adjustment)(GtkListBox *box);
void (gtk_list_box_selected_foreach)(GtkListBox *box, GtkListBoxForeachFunc func, gpointer data);
GList* (gtk_list_box_get_selected_rows)(GtkListBox *box);
void (gtk_list_box_unselect_row)(GtkListBox *box, GtkListBoxRow *row);
void (gtk_list_box_select_all)(GtkListBox *box);
void (gtk_list_box_unselect_all)(GtkListBox *box);
void (gtk_list_box_set_selection_mode)(GtkListBox *box, GtkSelectionMode mode);
GtkSelectionMode (gtk_list_box_get_selection_mode)(GtkListBox *box);
void (gtk_list_box_set_filter_func)(GtkListBox *box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy);
void (gtk_list_box_set_header_func)(GtkListBox *box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy);
void (gtk_list_box_invalidate_filter)(GtkListBox *box);
void (gtk_list_box_invalidate_sort)(GtkListBox *box);
void (gtk_list_box_invalidate_headers)(GtkListBox *box);
void (gtk_list_box_set_sort_func)(GtkListBox *box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy);
void (gtk_list_box_set_activate_on_single_click)(GtkListBox *box, gboolean single);
gboolean (gtk_list_box_get_activate_on_single_click)(GtkListBox *box);
void (gtk_list_box_drag_unhighlight_row)(GtkListBox *box);
void (gtk_list_box_drag_highlight_row)(GtkListBox *box, GtkListBoxRow *row);
GtkWidget* (gtk_list_box_new)(void);
void (gtk_list_box_bind_model)(GtkListBox *box, GListModel *model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func);
void (gtk_list_box_set_show_separators)(GtkListBox *box, gboolean show_separators);
gboolean (gtk_list_box_get_show_separators)(GtkListBox *box);
GType (gtk_list_header_get_type)(void);
gpointer (gtk_list_header_get_item)(GtkListHeader *self);
guint (gtk_list_header_get_start)(GtkListHeader *self);
guint (gtk_list_header_get_end)(GtkListHeader *self);
guint (gtk_list_header_get_n_items)(GtkListHeader *self);
void (gtk_list_header_set_child)(GtkListHeader *self, GtkWidget *child);
GtkWidget * (gtk_list_header_get_child)(GtkListHeader *self);
GType (gtk_list_item_get_type)(void);
gpointer (gtk_list_item_get_item)(GtkListItem *self);
guint (gtk_list_item_get_position)(GtkListItem *self);
gboolean (gtk_list_item_get_selected)(GtkListItem *self);
gboolean (gtk_list_item_get_selectable)(GtkListItem *self);
void (gtk_list_item_set_selectable)(GtkListItem *self, gboolean selectable);
gboolean (gtk_list_item_get_activatable)(GtkListItem *self);
void (gtk_list_item_set_activatable)(GtkListItem *self, gboolean activatable);
gboolean (gtk_list_item_get_focusable)(GtkListItem *self);
void (gtk_list_item_set_focusable)(GtkListItem *self, gboolean focusable);
void (gtk_list_item_set_child)(GtkListItem *self, GtkWidget *child);
GtkWidget * (gtk_list_item_get_child)(GtkListItem *self);
void (gtk_list_item_set_accessible_description)(GtkListItem *self, const char *description);
const char * (gtk_list_item_get_accessible_description)(GtkListItem *self);
void (gtk_list_item_set_accessible_label)(GtkListItem *self, const char *label);
const char * (gtk_list_item_get_accessible_label)(GtkListItem *self);
GType (gtk_list_item_factory_get_type)(void);
GType (gtk_list_view_get_type)(void);
GtkWidget * (gtk_list_view_new)(GtkSelectionModel *model, GtkListItemFactory *factory);
GtkSelectionModel * (gtk_list_view_get_model)(GtkListView *self);
void (gtk_list_view_set_model)(GtkListView *self, GtkSelectionModel *model);
void (gtk_list_view_set_factory)(GtkListView *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_list_view_get_factory)(GtkListView *self);
void (gtk_list_view_set_header_factory)(GtkListView *self, GtkListItemFactory *factory);
GtkListItemFactory * (gtk_list_view_get_header_factory)(GtkListView *self);
void (gtk_list_view_set_show_separators)(GtkListView *self, gboolean show_separators);
gboolean (gtk_list_view_get_show_separators)(GtkListView *self);
void (gtk_list_view_set_single_click_activate)(GtkListView *self, gboolean single_click_activate);
gboolean (gtk_list_view_get_single_click_activate)(GtkListView *self);
void (gtk_list_view_set_enable_rubberband)(GtkListView *self, gboolean enable_rubberband);
gboolean (gtk_list_view_get_enable_rubberband)(GtkListView *self);
void (gtk_list_view_set_tab_behavior)(GtkListView *self, GtkListTabBehavior tab_behavior);
GtkListTabBehavior (gtk_list_view_get_tab_behavior)(GtkListView *self);
void (gtk_list_view_scroll_to)(GtkListView *self, guint pos, GtkListScrollFlags flags, GtkScrollInfo *scroll);
gboolean (gtk_init_check)(void);
gboolean (gtk_is_initialized)(void);
void (gtk_init_abi_check)(int num_checks, size_t sizeof_GtkWindow, size_t sizeof_GtkBox);
gboolean (gtk_init_check_abi_check)(int num_checks, size_t sizeof_GtkWindow, size_t sizeof_GtkBox);
void (gtk_disable_setlocale)(void);
PangoLanguage * (gtk_get_default_language)(void);
GtkTextDirection (gtk_get_locale_direction)(void);
void (gtk_init)(void);
GType (gtk_map_list_model_get_type)(void);
GtkMapListModel * (gtk_map_list_model_new)(GListModel *model, GtkMapListModelMapFunc map_func, gpointer user_data, GDestroyNotify user_destroy);
void (gtk_map_list_model_set_map_func)(GtkMapListModel *self, GtkMapListModelMapFunc map_func, gpointer user_data, GDestroyNotify user_destroy);
void (gtk_map_list_model_set_model)(GtkMapListModel *self, GListModel *model);
GListModel * (gtk_map_list_model_get_model)(GtkMapListModel *self);
gboolean (gtk_map_list_model_has_map)(GtkMapListModel *self);
GType (gtk_media_controls_get_type)(void);
GtkWidget* (gtk_media_controls_new)(GtkMediaStream *stream);
GtkMediaStream* (gtk_media_controls_get_media_stream)(GtkMediaControls *controls);
void (gtk_media_controls_set_media_stream)(GtkMediaControls *controls, GtkMediaStream *stream);
GType (gtk_media_file_get_type)(void);
GtkMediaStream * (gtk_media_file_new)(void);
GtkMediaStream * (gtk_media_file_new_for_filename)(const char *filename);
GtkMediaStream * (gtk_media_file_new_for_resource)(const char *resource_path);
GtkMediaStream * (gtk_media_file_new_for_file)(GFile *file);
GtkMediaStream * (gtk_media_file_new_for_input_stream)(GInputStream *stream);
void (gtk_media_file_clear)(GtkMediaFile *self);
void (gtk_media_file_set_filename)(GtkMediaFile *self, const char *filename);
void (gtk_media_file_set_resource)(GtkMediaFile *self, const char *resource_path);
void (gtk_media_file_set_file)(GtkMediaFile *self, GFile *file);
GFile * (gtk_media_file_get_file)(GtkMediaFile *self);
void (gtk_media_file_set_input_stream)(GtkMediaFile *self, GInputStream *stream);
GInputStream * (gtk_media_file_get_input_stream)(GtkMediaFile *self);
GType (gtk_media_stream_get_type)(void);
gboolean (gtk_media_stream_is_prepared)(GtkMediaStream *self);
const GError * (gtk_media_stream_get_error)(GtkMediaStream *self);
gboolean (gtk_media_stream_has_audio)(GtkMediaStream *self);
gboolean (gtk_media_stream_has_video)(GtkMediaStream *self);
void (gtk_media_stream_play)(GtkMediaStream *self);
void (gtk_media_stream_pause)(GtkMediaStream *self);
gboolean (gtk_media_stream_get_playing)(GtkMediaStream *self);
void (gtk_media_stream_set_playing)(GtkMediaStream *self, gboolean playing);
gboolean (gtk_media_stream_get_ended)(GtkMediaStream *self);
gint64 (gtk_media_stream_get_timestamp)(GtkMediaStream *self);
gint64 (gtk_media_stream_get_duration)(GtkMediaStream *self);
gboolean (gtk_media_stream_is_seekable)(GtkMediaStream *self);
gboolean (gtk_media_stream_is_seeking)(GtkMediaStream *self);
void (gtk_media_stream_seek)(GtkMediaStream *self, gint64 timestamp);
gboolean (gtk_media_stream_get_loop)(GtkMediaStream *self);
void (gtk_media_stream_set_loop)(GtkMediaStream *self, gboolean loop);
gboolean (gtk_media_stream_get_muted)(GtkMediaStream *self);
void (gtk_media_stream_set_muted)(GtkMediaStream *self, gboolean muted);
double (gtk_media_stream_get_volume)(GtkMediaStream *self);
void (gtk_media_stream_set_volume)(GtkMediaStream *self, double volume);
void (gtk_media_stream_realize)(GtkMediaStream *self, GdkSurface *surface);
void (gtk_media_stream_unrealize)(GtkMediaStream *self, GdkSurface *surface);
void (gtk_media_stream_prepared)(GtkMediaStream *self, gboolean has_audio, gboolean has_video, gboolean seekable, gint64 duration);
void (gtk_media_stream_unprepared)(GtkMediaStream *self);
void (gtk_media_stream_stream_prepared)(GtkMediaStream *self, gboolean has_audio, gboolean has_video, gboolean seekable, gint64 duration);
void (gtk_media_stream_stream_unprepared)(GtkMediaStream *self);
void (gtk_media_stream_update)(GtkMediaStream *self, gint64 timestamp);
void (gtk_media_stream_ended)(GtkMediaStream *self);
void (gtk_media_stream_stream_ended)(GtkMediaStream *self);
void (gtk_media_stream_seek_success)(GtkMediaStream *self);
void (gtk_media_stream_seek_failed)(GtkMediaStream *self);
void (gtk_media_stream_gerror)(GtkMediaStream *self, GError *error);
void (gtk_media_stream_error_valist)(GtkMediaStream *self, GQuark domain, int code, const char *format, va_list args);
GType (gtk_menu_button_get_type)(void);
GtkWidget* (gtk_menu_button_new)(void);
void (gtk_menu_button_set_popover)(GtkMenuButton *menu_button, GtkWidget *popover);
GtkPopover* (gtk_menu_button_get_popover)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_direction)(GtkMenuButton *menu_button, GtkArrowType direction);
GtkArrowType (gtk_menu_button_get_direction)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_menu_model)(GtkMenuButton *menu_button, GMenuModel *menu_model);
GMenuModel* (gtk_menu_button_get_menu_model)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_icon_name)(GtkMenuButton *menu_button, const char *icon_name);
const char * (gtk_menu_button_get_icon_name)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_always_show_arrow)(GtkMenuButton *menu_button, gboolean always_show_arrow);
gboolean (gtk_menu_button_get_always_show_arrow)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_label)(GtkMenuButton *menu_button, const char *label);
const char * (gtk_menu_button_get_label)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_use_underline)(GtkMenuButton *menu_button, gboolean use_underline);
gboolean (gtk_menu_button_get_use_underline)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_has_frame)(GtkMenuButton *menu_button, gboolean has_frame);
gboolean (gtk_menu_button_get_has_frame)(GtkMenuButton *menu_button);
void (gtk_menu_button_popup)(GtkMenuButton *menu_button);
void (gtk_menu_button_popdown)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_create_popup_func)(GtkMenuButton *menu_button, GtkMenuButtonCreatePopupFunc func, gpointer user_data, GDestroyNotify destroy_notify);
void (gtk_menu_button_set_primary)(GtkMenuButton *menu_button, gboolean primary);
gboolean (gtk_menu_button_get_primary)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_child)(GtkMenuButton *menu_button, GtkWidget *child);
GtkWidget * (gtk_menu_button_get_child)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_active)(GtkMenuButton *menu_button, gboolean active);
gboolean (gtk_menu_button_get_active)(GtkMenuButton *menu_button);
void (gtk_menu_button_set_can_shrink)(GtkMenuButton *menu_button, gboolean can_shrink);
gboolean (gtk_menu_button_get_can_shrink)(GtkMenuButton *menu_button);
GType (gtk_mount_operation_get_type)(void);
GMountOperation* (gtk_mount_operation_new)(GtkWindow *parent);
gboolean (gtk_mount_operation_is_showing)(GtkMountOperation *op);
void (gtk_mount_operation_set_parent)(GtkMountOperation *op, GtkWindow *parent);
GtkWindow * (gtk_mount_operation_get_parent)(GtkMountOperation *op);
void (gtk_mount_operation_set_display)(GtkMountOperation *op, GdkDisplay *display);
GdkDisplay * (gtk_mount_operation_get_display)(GtkMountOperation *op);
GType (gtk_multi_filter_get_type)(void);
void (gtk_multi_filter_append)(GtkMultiFilter *self, GtkFilter *filter);
void (gtk_multi_filter_remove)(GtkMultiFilter *self, guint position);
GType (gtk_any_filter_get_type)(void);
GtkAnyFilter * (gtk_any_filter_new)(void);
GType (gtk_every_filter_get_type)(void);
GtkEveryFilter * (gtk_every_filter_new)(void);
GType (gtk_multi_selection_get_type)(void);
GtkMultiSelection * (gtk_multi_selection_new)(GListModel *model);
GListModel * (gtk_multi_selection_get_model)(GtkMultiSelection *self);
void (gtk_multi_selection_set_model)(GtkMultiSelection *self, GListModel *model);
GType (gtk_multi_sorter_get_type)(void);
GtkMultiSorter * (gtk_multi_sorter_new)(void);
void (gtk_multi_sorter_append)(GtkMultiSorter *self, GtkSorter *sorter);
void (gtk_multi_sorter_remove)(GtkMultiSorter *self, guint position);
GType (gtk_native_get_type)(void);
void (gtk_native_unrealize)(GtkNative *self);
GtkNative * (gtk_native_get_for_surface)(GdkSurface *surface);
GdkSurface* (gtk_native_get_surface)(GtkNative *self);
GskRenderer* (gtk_native_get_renderer)(GtkNative *self);
void (gtk_native_get_surface_transform)(GtkNative *self, double *x, double *y);
GType (gtk_native_dialog_get_type)(void);
void (gtk_native_dialog_show)(GtkNativeDialog *self);
void (gtk_native_dialog_hide)(GtkNativeDialog *self);
void (gtk_native_dialog_destroy)(GtkNativeDialog *self);
gboolean (gtk_native_dialog_get_visible)(GtkNativeDialog *self);
void (gtk_native_dialog_set_modal)(GtkNativeDialog *self, gboolean modal);
gboolean (gtk_native_dialog_get_modal)(GtkNativeDialog *self);
void (gtk_native_dialog_set_title)(GtkNativeDialog *self, const char *title);
const char * (gtk_native_dialog_get_title)(GtkNativeDialog *self);
void (gtk_native_dialog_set_transient_for)(GtkNativeDialog *self, GtkWindow *parent);
GtkWindow * (gtk_native_dialog_get_transient_for)(GtkNativeDialog *self);
GType (gtk_no_selection_get_type)(void);
GtkNoSelection * (gtk_no_selection_new)(GListModel *model);
GListModel * (gtk_no_selection_get_model)(GtkNoSelection *self);
void (gtk_no_selection_set_model)(GtkNoSelection *self, GListModel *model);
GType (gtk_notebook_get_type)(void);
GType (gtk_notebook_page_get_type)(void);
GtkWidget * (gtk_notebook_new)(void);
int (gtk_notebook_append_page)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);
int (gtk_notebook_append_page_menu)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);
int (gtk_notebook_prepend_page)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);
int (gtk_notebook_prepend_page_menu)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);
int (gtk_notebook_insert_page)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, int position);
int (gtk_notebook_insert_page_menu)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, int position);
void (gtk_notebook_remove_page)(GtkNotebook *notebook, int page_num);
void (gtk_notebook_set_group_name)(GtkNotebook *notebook, const char *group_name);
const char* (gtk_notebook_get_group_name)(GtkNotebook *notebook);
int (gtk_notebook_get_current_page)(GtkNotebook *notebook);
GtkWidget* (gtk_notebook_get_nth_page)(GtkNotebook *notebook, int page_num);
int (gtk_notebook_get_n_pages)(GtkNotebook *notebook);
int (gtk_notebook_page_num)(GtkNotebook *notebook, GtkWidget *child);
void (gtk_notebook_set_current_page)(GtkNotebook *notebook, int page_num);
void (gtk_notebook_next_page)(GtkNotebook *notebook);
void (gtk_notebook_prev_page)(GtkNotebook *notebook);
void (gtk_notebook_set_show_border)(GtkNotebook *notebook, gboolean show_border);
gboolean (gtk_notebook_get_show_border)(GtkNotebook *notebook);
void (gtk_notebook_set_show_tabs)(GtkNotebook *notebook, gboolean show_tabs);
gboolean (gtk_notebook_get_show_tabs)(GtkNotebook *notebook);
void (gtk_notebook_set_tab_pos)(GtkNotebook *notebook, GtkPositionType pos);
GtkPositionType (gtk_notebook_get_tab_pos)(GtkNotebook *notebook);
void (gtk_notebook_set_scrollable)(GtkNotebook *notebook, gboolean scrollable);
gboolean (gtk_notebook_get_scrollable)(GtkNotebook *notebook);
void (gtk_notebook_popup_enable)(GtkNotebook *notebook);
void (gtk_notebook_popup_disable)(GtkNotebook *notebook);
GtkWidget * (gtk_notebook_get_tab_label)(GtkNotebook *notebook, GtkWidget *child);
void (gtk_notebook_set_tab_label)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);
void (gtk_notebook_set_tab_label_text)(GtkNotebook *notebook, GtkWidget *child, const char *tab_text);
const char * (gtk_notebook_get_tab_label_text)(GtkNotebook *notebook, GtkWidget *child);
GtkWidget * (gtk_notebook_get_menu_label)(GtkNotebook *notebook, GtkWidget *child);
void (gtk_notebook_set_menu_label)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label);
void (gtk_notebook_set_menu_label_text)(GtkNotebook *notebook, GtkWidget *child, const char *menu_text);
const char * (gtk_notebook_get_menu_label_text)(GtkNotebook *notebook, GtkWidget *child);
void (gtk_notebook_reorder_child)(GtkNotebook *notebook, GtkWidget *child, int position);
gboolean (gtk_notebook_get_tab_reorderable)(GtkNotebook *notebook, GtkWidget *child);
void (gtk_notebook_set_tab_reorderable)(GtkNotebook *notebook, GtkWidget *child, gboolean reorderable);
gboolean (gtk_notebook_get_tab_detachable)(GtkNotebook *notebook, GtkWidget *child);
void (gtk_notebook_set_tab_detachable)(GtkNotebook *notebook, GtkWidget *child, gboolean detachable);
void (gtk_notebook_detach_tab)(GtkNotebook *notebook, GtkWidget *child);
GtkWidget* (gtk_notebook_get_action_widget)(GtkNotebook *notebook, GtkPackType pack_type);
void (gtk_notebook_set_action_widget)(GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type);
GtkNotebookPage* (gtk_notebook_get_page)(GtkNotebook *notebook, GtkWidget *child);
GtkWidget* (gtk_notebook_page_get_child)(GtkNotebookPage *page);
GListModel* (gtk_notebook_get_pages)(GtkNotebook *notebook);
GType (gtk_numeric_sorter_get_type)(void);
GtkNumericSorter * (gtk_numeric_sorter_new)(GtkExpression *expression);
GtkExpression * (gtk_numeric_sorter_get_expression)(GtkNumericSorter *self);
void (gtk_numeric_sorter_set_expression)(GtkNumericSorter *self, GtkExpression *expression);
GtkSortType (gtk_numeric_sorter_get_sort_order)(GtkNumericSorter *self);
void (gtk_numeric_sorter_set_sort_order)(GtkNumericSorter *self, GtkSortType sort_order);
GType (gtk_orientable_get_type)(void);
void (gtk_orientable_set_orientation)(GtkOrientable *orientable, GtkOrientation orientation);
GtkOrientation (gtk_orientable_get_orientation)(GtkOrientable *orientable);
GType (gtk_overlay_get_type)(void);
GtkWidget* (gtk_overlay_new)(void);
void (gtk_overlay_add_overlay)(GtkOverlay *overlay, GtkWidget *widget);
void (gtk_overlay_remove_overlay)(GtkOverlay *overlay, GtkWidget *widget);
void (gtk_overlay_set_child)(GtkOverlay *overlay, GtkWidget *child);
GtkWidget * (gtk_overlay_get_child)(GtkOverlay *overlay);
gboolean (gtk_overlay_get_measure_overlay)(GtkOverlay *overlay, GtkWidget *widget);
void (gtk_overlay_set_measure_overlay)(GtkOverlay *overlay, GtkWidget *widget, gboolean measure);
gboolean (gtk_overlay_get_clip_overlay)(GtkOverlay *overlay, GtkWidget *widget);
void (gtk_overlay_set_clip_overlay)(GtkOverlay *overlay, GtkWidget *widget, gboolean clip_overlay);
GType (gtk_overlay_layout_get_type)(void);
GType (gtk_overlay_layout_child_get_type)(void);
GtkLayoutManager * (gtk_overlay_layout_new)(void);
void (gtk_overlay_layout_child_set_measure)(GtkOverlayLayoutChild *child, gboolean measure);
gboolean (gtk_overlay_layout_child_get_measure)(GtkOverlayLayoutChild *child);
void (gtk_overlay_layout_child_set_clip_overlay)(GtkOverlayLayoutChild *child, gboolean clip_overlay);
gboolean (gtk_overlay_layout_child_get_clip_overlay)(GtkOverlayLayoutChild *child);
GType (gtk_pad_controller_get_type)(void);
GtkPadController* (gtk_pad_controller_new)(GActionGroup *group, GdkDevice *pad);
void (gtk_pad_controller_set_action_entries)(GtkPadController *controller, const GtkPadActionEntry *entries, int n_entries);
void (gtk_pad_controller_set_action)(GtkPadController *controller, GtkPadActionType type, int index, int mode, const char *label, const char *action_name);
GType (gtk_paned_get_type)(void);
GtkWidget * (gtk_paned_new)(GtkOrientation orientation);
void (gtk_paned_set_start_child)(GtkPaned *paned, GtkWidget *child);
GtkWidget * (gtk_paned_get_start_child)(GtkPaned *paned);
void (gtk_paned_set_resize_start_child)(GtkPaned *paned, gboolean resize);
gboolean (gtk_paned_get_resize_start_child)(GtkPaned *paned);
void (gtk_paned_set_end_child)(GtkPaned *paned, GtkWidget *child);
GtkWidget * (gtk_paned_get_end_child)(GtkPaned *paned);
void (gtk_paned_set_shrink_start_child)(GtkPaned *paned, gboolean resize);
gboolean (gtk_paned_get_shrink_start_child)(GtkPaned *paned);
void (gtk_paned_set_resize_end_child)(GtkPaned *paned, gboolean resize);
gboolean (gtk_paned_get_resize_end_child)(GtkPaned *paned);
void (gtk_paned_set_shrink_end_child)(GtkPaned *paned, gboolean resize);
gboolean (gtk_paned_get_shrink_end_child)(GtkPaned *paned);
int (gtk_paned_get_position)(GtkPaned *paned);
void (gtk_paned_set_position)(GtkPaned *paned, int position);
void (gtk_paned_set_wide_handle)(GtkPaned *paned, gboolean wide);
gboolean (gtk_paned_get_wide_handle)(GtkPaned *paned);
GType (gtk_password_entry_get_type)(void);
GtkWidget * (gtk_password_entry_new)(void);
void (gtk_password_entry_set_show_peek_icon)(GtkPasswordEntry *entry, gboolean show_peek_icon);
gboolean (gtk_password_entry_get_show_peek_icon)(GtkPasswordEntry *entry);
void (gtk_password_entry_set_extra_menu)(GtkPasswordEntry *entry, GMenuModel *model);
GMenuModel * (gtk_password_entry_get_extra_menu)(GtkPasswordEntry *entry);
GType (gtk_password_entry_buffer_get_type)(void);
GtkEntryBuffer * (gtk_password_entry_buffer_new)(void);
GType (gtk_picture_get_type)(void);
GtkWidget* (gtk_picture_new)(void);
GtkWidget* (gtk_picture_new_for_paintable)(GdkPaintable *paintable);
GtkWidget* (gtk_picture_new_for_pixbuf)(GdkPixbuf *pixbuf);
GtkWidget* (gtk_picture_new_for_file)(GFile *file);
GtkWidget* (gtk_picture_new_for_filename)(const char *filename);
GtkWidget* (gtk_picture_new_for_resource)(const char *resource_path);
void (gtk_picture_set_paintable)(GtkPicture *self, GdkPaintable *paintable);
GdkPaintable * (gtk_picture_get_paintable)(GtkPicture *self);
void (gtk_picture_set_file)(GtkPicture *self, GFile *file);
GFile * (gtk_picture_get_file)(GtkPicture *self);
void (gtk_picture_set_filename)(GtkPicture *self, const char *filename);
void (gtk_picture_set_resource)(GtkPicture *self, const char *resource_path);
void (gtk_picture_set_pixbuf)(GtkPicture *self, GdkPixbuf *pixbuf);
void (gtk_picture_set_keep_aspect_ratio)(GtkPicture *self, gboolean keep_aspect_ratio);
gboolean (gtk_picture_get_keep_aspect_ratio)(GtkPicture *self);
void (gtk_picture_set_can_shrink)(GtkPicture *self, gboolean can_shrink);
gboolean (gtk_picture_get_can_shrink)(GtkPicture *self);
void (gtk_picture_set_content_fit)(GtkPicture *self, GtkContentFit content_fit);
GtkContentFit (gtk_picture_get_content_fit)(GtkPicture *self);
void (gtk_picture_set_alternative_text)(GtkPicture *self, const char *alternative_text);
const char * (gtk_picture_get_alternative_text)(GtkPicture *self);
GType (gtk_popover_get_type)(void);
GtkWidget * (gtk_popover_new)(void);
void (gtk_popover_set_child)(GtkPopover *popover, GtkWidget *child);
GtkWidget * (gtk_popover_get_child)(GtkPopover *popover);
void (gtk_popover_set_pointing_to)(GtkPopover *popover, const GdkRectangle *rect);
gboolean (gtk_popover_get_pointing_to)(GtkPopover *popover, GdkRectangle *rect);
void (gtk_popover_set_position)(GtkPopover *popover, GtkPositionType position);
GtkPositionType (gtk_popover_get_position)(GtkPopover *popover);
void (gtk_popover_set_autohide)(GtkPopover *popover, gboolean autohide);
gboolean (gtk_popover_get_autohide)(GtkPopover *popover);
void (gtk_popover_set_has_arrow)(GtkPopover *popover, gboolean has_arrow);
gboolean (gtk_popover_get_has_arrow)(GtkPopover *popover);
void (gtk_popover_set_mnemonics_visible)(GtkPopover *popover, gboolean mnemonics_visible);
gboolean (gtk_popover_get_mnemonics_visible)(GtkPopover *popover);
void (gtk_popover_popup)(GtkPopover *popover);
void (gtk_popover_popdown)(GtkPopover *popover);
void (gtk_popover_set_offset)(GtkPopover *popover, int x_offset, int y_offset);
void (gtk_popover_get_offset)(GtkPopover *popover, int *x_offset, int *y_offset);
void (gtk_popover_set_cascade_popdown)(GtkPopover *popover, gboolean cascade_popdown);
gboolean (gtk_popover_get_cascade_popdown)(GtkPopover *popover);
void (gtk_popover_set_default_widget)(GtkPopover *popover, GtkWidget *widget);
void (gtk_popover_present)(GtkPopover *popover);
GType (gtk_popover_menu_get_type)(void);
GtkWidget * (gtk_popover_menu_new_from_model)(GMenuModel *model);
GtkWidget * (gtk_popover_menu_new_from_model_full)(GMenuModel *model, GtkPopoverMenuFlags flags);
void (gtk_popover_menu_set_menu_model)(GtkPopoverMenu *popover, GMenuModel *model);
GMenuModel* (gtk_popover_menu_get_menu_model)(GtkPopoverMenu *popover);
void (gtk_popover_menu_set_flags)(GtkPopoverMenu *popover, GtkPopoverMenuFlags flags);
GtkPopoverMenuFlags (gtk_popover_menu_get_flags)(GtkPopoverMenu *popover);
gboolean (gtk_popover_menu_add_child)(GtkPopoverMenu *popover, GtkWidget *child, const char *id);
gboolean (gtk_popover_menu_remove_child)(GtkPopoverMenu *popover, GtkWidget *child);
GtkWidget * (gtk_popover_menu_bar_new_from_model)(GMenuModel *model);
void (gtk_popover_menu_bar_set_menu_model)(GtkPopoverMenuBar *bar, GMenuModel *model);
GMenuModel * (gtk_popover_menu_bar_get_menu_model)(GtkPopoverMenuBar *bar);
gboolean (gtk_popover_menu_bar_add_child)(GtkPopoverMenuBar *bar, GtkWidget *child, const char *id);
gboolean (gtk_popover_menu_bar_remove_child)(GtkPopoverMenuBar *bar, GtkWidget *child);
GType (gtk_popover_menu_bar_get_type)(void);
GType (gtk_print_setup_get_type)(void);
GtkPrintSetup* (gtk_print_setup_ref)(GtkPrintSetup *setup);
void (gtk_print_setup_unref)(GtkPrintSetup *setup);
GtkPrintSettings * (gtk_print_setup_get_print_settings)(GtkPrintSetup *setup);
GtkPageSetup * (gtk_print_setup_get_page_setup)(GtkPrintSetup *setup);
GType (gtk_print_dialog_get_type)(void);
GtkPrintDialog* (gtk_print_dialog_new)(void);
const char * (gtk_print_dialog_get_title)(GtkPrintDialog *self);
void (gtk_print_dialog_set_title)(GtkPrintDialog *self, const char *title);
const char * (gtk_print_dialog_get_accept_label)(GtkPrintDialog *self);
void (gtk_print_dialog_set_accept_label)(GtkPrintDialog *self, const char *accept_label);
gboolean (gtk_print_dialog_get_modal)(GtkPrintDialog *self);
void (gtk_print_dialog_set_modal)(GtkPrintDialog *self, gboolean modal);
GtkPageSetup * (gtk_print_dialog_get_page_setup)(GtkPrintDialog *self);
void (gtk_print_dialog_set_page_setup)(GtkPrintDialog *self, GtkPageSetup *page_setup);
GtkPrintSettings * (gtk_print_dialog_get_print_settings)(GtkPrintDialog *self);
void (gtk_print_dialog_set_print_settings)(GtkPrintDialog *self, GtkPrintSettings *print_settings);
void (gtk_print_dialog_setup)(GtkPrintDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GtkPrintSetup* (gtk_print_dialog_setup_finish)(GtkPrintDialog *self, GAsyncResult *result, GError **error);
void (gtk_print_dialog_print)(GtkPrintDialog *self, GtkWindow *parent, GtkPrintSetup *setup, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GOutputStream * (gtk_print_dialog_print_finish)(GtkPrintDialog *self, GAsyncResult *result, GError **error);
void (gtk_print_dialog_print_file)(GtkPrintDialog *self, GtkWindow *parent, GtkPrintSetup *setup, GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gtk_print_dialog_print_file_finish)(GtkPrintDialog *self, GAsyncResult *result, GError **error);
GType (gtk_progress_bar_get_type)(void);
GtkWidget* (gtk_progress_bar_new)(void);
void (gtk_progress_bar_pulse)(GtkProgressBar *pbar);
void (gtk_progress_bar_set_text)(GtkProgressBar *pbar, const char *text);
void (gtk_progress_bar_set_fraction)(GtkProgressBar *pbar, double fraction);
void (gtk_progress_bar_set_pulse_step)(GtkProgressBar *pbar, double fraction);
void (gtk_progress_bar_set_inverted)(GtkProgressBar *pbar, gboolean inverted);
const char * (gtk_progress_bar_get_text)(GtkProgressBar *pbar);
double (gtk_progress_bar_get_fraction)(GtkProgressBar *pbar);
double (gtk_progress_bar_get_pulse_step)(GtkProgressBar *pbar);
gboolean (gtk_progress_bar_get_inverted)(GtkProgressBar *pbar);
void (gtk_progress_bar_set_ellipsize)(GtkProgressBar *pbar, PangoEllipsizeMode mode);
PangoEllipsizeMode (gtk_progress_bar_get_ellipsize)(GtkProgressBar *pbar);
void (gtk_progress_bar_set_show_text)(GtkProgressBar *pbar, gboolean show_text);
gboolean (gtk_progress_bar_get_show_text)(GtkProgressBar *pbar);
GType (gtk_range_get_type)(void);
void (gtk_range_set_adjustment)(GtkRange *range, GtkAdjustment *adjustment);
GtkAdjustment* (gtk_range_get_adjustment)(GtkRange *range);
void (gtk_range_set_inverted)(GtkRange *range, gboolean setting);
gboolean (gtk_range_get_inverted)(GtkRange *range);
void (gtk_range_set_flippable)(GtkRange *range, gboolean flippable);
gboolean (gtk_range_get_flippable)(GtkRange *range);
void (gtk_range_set_slider_size_fixed)(GtkRange *range, gboolean size_fixed);
gboolean (gtk_range_get_slider_size_fixed)(GtkRange *range);
void (gtk_range_get_range_rect)(GtkRange *range, GdkRectangle *range_rect);
void (gtk_range_get_slider_range)(GtkRange *range, int *slider_start, int *slider_end);
void (gtk_range_set_increments)(GtkRange *range, double step, double page);
void (gtk_range_set_range)(GtkRange *range, double min, double max);
void (gtk_range_set_value)(GtkRange *range, double value);
double (gtk_range_get_value)(GtkRange *range);
void (gtk_range_set_show_fill_level)(GtkRange *range, gboolean show_fill_level);
gboolean (gtk_range_get_show_fill_level)(GtkRange *range);
void (gtk_range_set_restrict_to_fill_level)(GtkRange *range, gboolean restrict_to_fill_level);
gboolean (gtk_range_get_restrict_to_fill_level)(GtkRange *range);
void (gtk_range_set_fill_level)(GtkRange *range, double fill_level);
double (gtk_range_get_fill_level)(GtkRange *range);
void (gtk_range_set_round_digits)(GtkRange *range, int round_digits);
int (gtk_range_get_round_digits)(GtkRange *range);
GType (gtk_recent_info_get_type)(void);
GType (gtk_recent_manager_get_type)(void);
GQuark (gtk_recent_manager_error_quark)(void);
GtkRecentManager* (gtk_recent_manager_new)(void);
GtkRecentManager* (gtk_recent_manager_get_default)(void);
gboolean (gtk_recent_manager_add_item)(GtkRecentManager *manager, const char *uri);
gboolean (gtk_recent_manager_add_full)(GtkRecentManager *manager, const char *uri, const GtkRecentData *recent_data);
gboolean (gtk_recent_manager_remove_item)(GtkRecentManager *manager, const char *uri, GError **error);
GtkRecentInfo * (gtk_recent_manager_lookup_item)(GtkRecentManager *manager, const char *uri, GError **error);
gboolean (gtk_recent_manager_has_item)(GtkRecentManager *manager, const char *uri);
gboolean (gtk_recent_manager_move_item)(GtkRecentManager *manager, const char *uri, const char *new_uri, GError **error);
GList * (gtk_recent_manager_get_items)(GtkRecentManager *manager);
int (gtk_recent_manager_purge_items)(GtkRecentManager *manager, GError **error);
GtkRecentInfo * (gtk_recent_info_ref)(GtkRecentInfo *info);
void (gtk_recent_info_unref)(GtkRecentInfo *info);
const char * (gtk_recent_info_get_uri)(GtkRecentInfo *info);
const char * (gtk_recent_info_get_display_name)(GtkRecentInfo *info);
const char * (gtk_recent_info_get_description)(GtkRecentInfo *info);
const char * (gtk_recent_info_get_mime_type)(GtkRecentInfo *info);
GDateTime * (gtk_recent_info_get_added)(GtkRecentInfo *info);
GDateTime * (gtk_recent_info_get_modified)(GtkRecentInfo *info);
GDateTime * (gtk_recent_info_get_visited)(GtkRecentInfo *info);
gboolean (gtk_recent_info_get_private_hint)(GtkRecentInfo *info);
gboolean (gtk_recent_info_get_application_info)(GtkRecentInfo *info, const char *app_name, const char **app_exec, guint *count, GDateTime **stamp);
GAppInfo * (gtk_recent_info_create_app_info)(GtkRecentInfo *info, const char *app_name, GError **error);
char ** (gtk_recent_info_get_applications)(GtkRecentInfo *info, gsize *length);
char * (gtk_recent_info_last_application)(GtkRecentInfo *info);
gboolean (gtk_recent_info_has_application)(GtkRecentInfo *info, const char *app_name);
char ** (gtk_recent_info_get_groups)(GtkRecentInfo *info, gsize *length);
gboolean (gtk_recent_info_has_group)(GtkRecentInfo *info, const char *group_name);
GIcon * (gtk_recent_info_get_gicon)(GtkRecentInfo *info);
char * (gtk_recent_info_get_short_name)(GtkRecentInfo *info);
char * (gtk_recent_info_get_uri_display)(GtkRecentInfo *info);
int (gtk_recent_info_get_age)(GtkRecentInfo *info);
gboolean (gtk_recent_info_is_local)(GtkRecentInfo *info);
gboolean (gtk_recent_info_exists)(GtkRecentInfo *info);
gboolean (gtk_recent_info_match)(GtkRecentInfo *info_a, GtkRecentInfo *info_b);
void (_gtk_recent_manager_sync)(void);
GType (gtk_revealer_get_type)(void);
GtkWidget* (gtk_revealer_new)(void);
gboolean (gtk_revealer_get_reveal_child)(GtkRevealer *revealer);
void (gtk_revealer_set_reveal_child)(GtkRevealer *revealer, gboolean reveal_child);
gboolean (gtk_revealer_get_child_revealed)(GtkRevealer *revealer);
guint (gtk_revealer_get_transition_duration)(GtkRevealer *revealer);
void (gtk_revealer_set_transition_duration)(GtkRevealer *revealer, guint duration);
void (gtk_revealer_set_transition_type)(GtkRevealer *revealer, GtkRevealerTransitionType transition);
GtkRevealerTransitionType (gtk_revealer_get_transition_type)(GtkRevealer *revealer);
void (gtk_revealer_set_child)(GtkRevealer *revealer, GtkWidget *child);
GtkWidget * (gtk_revealer_get_child)(GtkRevealer *revealer);
GType (gtk_root_get_type)(void);
void (gtk_root_set_focus)(GtkRoot *self, GtkWidget *focus);
GtkWidget * (gtk_root_get_focus)(GtkRoot *self);
GType (gtk_scale_get_type)(void);
GtkWidget * (gtk_scale_new)(GtkOrientation orientation, GtkAdjustment *adjustment);
GtkWidget * (gtk_scale_new_with_range)(GtkOrientation orientation, double min, double max, double step);
void (gtk_scale_set_digits)(GtkScale *scale, int digits);
int (gtk_scale_get_digits)(GtkScale *scale);
void (gtk_scale_set_draw_value)(GtkScale *scale, gboolean draw_value);
gboolean (gtk_scale_get_draw_value)(GtkScale *scale);
void (gtk_scale_set_has_origin)(GtkScale *scale, gboolean has_origin);
gboolean (gtk_scale_get_has_origin)(GtkScale *scale);
void (gtk_scale_set_value_pos)(GtkScale *scale, GtkPositionType pos);
GtkPositionType (gtk_scale_get_value_pos)(GtkScale *scale);
PangoLayout * (gtk_scale_get_layout)(GtkScale *scale);
void (gtk_scale_get_layout_offsets)(GtkScale *scale, int *x, int *y);
void (gtk_scale_add_mark)(GtkScale *scale, double value, GtkPositionType position, const char *markup);
void (gtk_scale_clear_marks)(GtkScale *scale);
void (gtk_scale_set_format_value_func)(GtkScale *scale, GtkScaleFormatValueFunc func, gpointer user_data, GDestroyNotify destroy_notify);
GType (gtk_scale_button_get_type)(void);
GtkWidget * (gtk_scale_button_new)(double min, double max, double step, const char **icons);
void (gtk_scale_button_set_icons)(GtkScaleButton *button, const char **icons);
double (gtk_scale_button_get_value)(GtkScaleButton *button);
void (gtk_scale_button_set_value)(GtkScaleButton *button, double value);
GtkAdjustment * (gtk_scale_button_get_adjustment)(GtkScaleButton *button);
void (gtk_scale_button_set_adjustment)(GtkScaleButton *button, GtkAdjustment *adjustment);
GtkWidget * (gtk_scale_button_get_plus_button)(GtkScaleButton *button);
GtkWidget * (gtk_scale_button_get_minus_button)(GtkScaleButton *button);
GtkWidget * (gtk_scale_button_get_popup)(GtkScaleButton *button);
gboolean (gtk_scale_button_get_active)(GtkScaleButton *button);
gboolean (gtk_scale_button_get_has_frame)(GtkScaleButton *button);
void (gtk_scale_button_set_has_frame)(GtkScaleButton *button, gboolean has_frame);
GType (gtk_scrollable_get_type)(void);
GtkAdjustment* (gtk_scrollable_get_hadjustment)(GtkScrollable *scrollable);
void (gtk_scrollable_set_hadjustment)(GtkScrollable *scrollable, GtkAdjustment *hadjustment);
GtkAdjustment* (gtk_scrollable_get_vadjustment)(GtkScrollable *scrollable);
void (gtk_scrollable_set_vadjustment)(GtkScrollable *scrollable, GtkAdjustment *vadjustment);
GtkScrollablePolicy (gtk_scrollable_get_hscroll_policy)(GtkScrollable *scrollable);
void (gtk_scrollable_set_hscroll_policy)(GtkScrollable *scrollable, GtkScrollablePolicy policy);
GtkScrollablePolicy (gtk_scrollable_get_vscroll_policy)(GtkScrollable *scrollable);
void (gtk_scrollable_set_vscroll_policy)(GtkScrollable *scrollable, GtkScrollablePolicy policy);
gboolean (gtk_scrollable_get_border)(GtkScrollable *scrollable, GtkBorder *border);
GType (gtk_scrollbar_get_type)(void);
GtkWidget * (gtk_scrollbar_new)(GtkOrientation orientation, GtkAdjustment *adjustment);
void (gtk_scrollbar_set_adjustment)(GtkScrollbar *self, GtkAdjustment *adjustment);
GtkAdjustment* (gtk_scrollbar_get_adjustment)(GtkScrollbar *self);
GType (gtk_scrolled_window_get_type)(void);
GtkWidget* (gtk_scrolled_window_new)(void);
void (gtk_scrolled_window_set_hadjustment)(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment);
void (gtk_scrolled_window_set_vadjustment)(GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment);
GtkAdjustment* (gtk_scrolled_window_get_hadjustment)(GtkScrolledWindow *scrolled_window);
GtkAdjustment* (gtk_scrolled_window_get_vadjustment)(GtkScrolledWindow *scrolled_window);
GtkWidget* (gtk_scrolled_window_get_hscrollbar)(GtkScrolledWindow *scrolled_window);
GtkWidget* (gtk_scrolled_window_get_vscrollbar)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_policy)(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy);
void (gtk_scrolled_window_get_policy)(GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy);
void (gtk_scrolled_window_set_placement)(GtkScrolledWindow *scrolled_window, GtkCornerType window_placement);
void (gtk_scrolled_window_unset_placement)(GtkScrolledWindow *scrolled_window);
GtkCornerType (gtk_scrolled_window_get_placement)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_has_frame)(GtkScrolledWindow *scrolled_window, gboolean has_frame);
gboolean (gtk_scrolled_window_get_has_frame)(GtkScrolledWindow *scrolled_window);
int (gtk_scrolled_window_get_min_content_width)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_min_content_width)(GtkScrolledWindow *scrolled_window, int width);
int (gtk_scrolled_window_get_min_content_height)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_min_content_height)(GtkScrolledWindow *scrolled_window, int height);
void (gtk_scrolled_window_set_kinetic_scrolling)(GtkScrolledWindow *scrolled_window, gboolean kinetic_scrolling);
gboolean (gtk_scrolled_window_get_kinetic_scrolling)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_overlay_scrolling)(GtkScrolledWindow *scrolled_window, gboolean overlay_scrolling);
gboolean (gtk_scrolled_window_get_overlay_scrolling)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_max_content_width)(GtkScrolledWindow *scrolled_window, int width);
int (gtk_scrolled_window_get_max_content_width)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_max_content_height)(GtkScrolledWindow *scrolled_window, int height);
int (gtk_scrolled_window_get_max_content_height)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_propagate_natural_width)(GtkScrolledWindow *scrolled_window, gboolean propagate);
gboolean (gtk_scrolled_window_get_propagate_natural_width)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_propagate_natural_height)(GtkScrolledWindow *scrolled_window, gboolean propagate);
gboolean (gtk_scrolled_window_get_propagate_natural_height)(GtkScrolledWindow *scrolled_window);
void (gtk_scrolled_window_set_child)(GtkScrolledWindow *scrolled_window, GtkWidget *child);
GtkWidget* (gtk_scrolled_window_get_child)(GtkScrolledWindow *scrolled_window);
GType (gtk_scroll_info_get_type)(void);
GtkScrollInfo * (gtk_scroll_info_new)(void);
GtkScrollInfo * (gtk_scroll_info_ref)(GtkScrollInfo *self);
void (gtk_scroll_info_unref)(GtkScrollInfo *self);
void (gtk_scroll_info_set_enable_horizontal)(GtkScrollInfo *self, gboolean horizontal);
gboolean (gtk_scroll_info_get_enable_horizontal)(GtkScrollInfo *self);
void (gtk_scroll_info_set_enable_vertical)(GtkScrollInfo *self, gboolean vertical);
gboolean (gtk_scroll_info_get_enable_vertical)(GtkScrollInfo *self);
GType (gtk_search_bar_get_type)(void);
GtkWidget* (gtk_search_bar_new)(void);
void (gtk_search_bar_connect_entry)(GtkSearchBar *bar, GtkEditable *entry);
gboolean (gtk_search_bar_get_search_mode)(GtkSearchBar *bar);
void (gtk_search_bar_set_search_mode)(GtkSearchBar *bar, gboolean search_mode);
gboolean (gtk_search_bar_get_show_close_button)(GtkSearchBar *bar);
void (gtk_search_bar_set_show_close_button)(GtkSearchBar *bar, gboolean visible);
void (gtk_search_bar_set_key_capture_widget)(GtkSearchBar *bar, GtkWidget *widget);
GtkWidget * (gtk_search_bar_get_key_capture_widget)(GtkSearchBar *bar);
void (gtk_search_bar_set_child)(GtkSearchBar *bar, GtkWidget *child);
GtkWidget * (gtk_search_bar_get_child)(GtkSearchBar *bar);
GType (gtk_search_entry_get_type)(void);
GtkWidget* (gtk_search_entry_new)(void);
void (gtk_search_entry_set_key_capture_widget)(GtkSearchEntry *entry, GtkWidget *widget);
GtkWidget* (gtk_search_entry_get_key_capture_widget)(GtkSearchEntry *entry);
void (gtk_search_entry_set_search_delay)(GtkSearchEntry *entry, guint delay);
guint (gtk_search_entry_get_search_delay)(GtkSearchEntry *entry);
void (gtk_search_entry_set_placeholder_text)(GtkSearchEntry *entry, const char *text);
const char * (gtk_search_entry_get_placeholder_text)(GtkSearchEntry *entry);
void (gtk_search_entry_set_input_purpose)(GtkSearchEntry *entry, GtkInputPurpose purpose);
GtkInputPurpose (gtk_search_entry_get_input_purpose)(GtkSearchEntry *entry);
void (gtk_search_entry_set_input_hints)(GtkSearchEntry *entry, GtkInputHints hints);
GtkInputHints (gtk_search_entry_get_input_hints)(GtkSearchEntry *entry);
GType (gtk_section_model_get_type)(void);
void (gtk_section_model_sections_changed)(GtkSectionModel *self, guint position, guint n_items);
GType (gtk_selection_filter_model_get_type)(void);
GtkSelectionFilterModel * (gtk_selection_filter_model_new)(GtkSelectionModel *model);
void (gtk_selection_filter_model_set_model)(GtkSelectionFilterModel *self, GtkSelectionModel *model);
GtkSelectionModel * (gtk_selection_filter_model_get_model)(GtkSelectionFilterModel *self);
GType (gtk_selection_model_get_type)(void);
GtkBitset * (gtk_selection_model_get_selection)(GtkSelectionModel *model);
GtkBitset * (gtk_selection_model_get_selection_in_range)(GtkSelectionModel *model, guint position, guint n_items);
gboolean (gtk_selection_model_select_item)(GtkSelectionModel *model, guint position, gboolean unselect_rest);
gboolean (gtk_selection_model_unselect_item)(GtkSelectionModel *model, guint position);
gboolean (gtk_selection_model_select_range)(GtkSelectionModel *model, guint position, guint n_items, gboolean unselect_rest);
gboolean (gtk_selection_model_unselect_range)(GtkSelectionModel *model, guint position, guint n_items);
gboolean (gtk_selection_model_select_all)(GtkSelectionModel *model);
gboolean (gtk_selection_model_unselect_all)(GtkSelectionModel *model);
gboolean (gtk_selection_model_set_selection)(GtkSelectionModel *model, GtkBitset *selected, GtkBitset *mask);
void (gtk_selection_model_selection_changed)(GtkSelectionModel *model, guint position, guint n_items);
GType (gtk_separator_get_type)(void);
GtkWidget * (gtk_separator_new)(GtkOrientation orientation);
GType (gtk_settings_get_type)(void);
GtkSettings* (gtk_settings_get_default)(void);
GtkSettings* (gtk_settings_get_for_display)(GdkDisplay *display);
void (gtk_settings_reset_property)(GtkSettings *settings, const char *name);
GType (gtk_shortcut_get_type)(void);
GtkShortcut * (gtk_shortcut_new)(GtkShortcutTrigger *trigger, GtkShortcutAction *action);
GtkShortcutTrigger * (gtk_shortcut_get_trigger)(GtkShortcut *self);
void (gtk_shortcut_set_trigger)(GtkShortcut *self, GtkShortcutTrigger *trigger);
GtkShortcutAction * (gtk_shortcut_get_action)(GtkShortcut *self);
void (gtk_shortcut_set_action)(GtkShortcut *self, GtkShortcutAction *action);
GVariant * (gtk_shortcut_get_arguments)(GtkShortcut *self);
void (gtk_shortcut_set_arguments)(GtkShortcut *self, GVariant *args);
GType (gtk_shortcut_action_get_type)(void);
char * (gtk_shortcut_action_to_string)(GtkShortcutAction *self);
GtkShortcutAction * (gtk_shortcut_action_parse_string)(const char * string);
void (gtk_shortcut_action_print)(GtkShortcutAction *self, GString *string);
gboolean (gtk_shortcut_action_activate)(GtkShortcutAction *self, GtkShortcutActionFlags flags, GtkWidget *widget, GVariant *args);
GType (gtk_nothing_action_get_type)(void);
GtkShortcutAction * (gtk_nothing_action_get)(void);
GType (gtk_callback_action_get_type)(void);
GtkShortcutAction * (gtk_callback_action_new)(GtkShortcutFunc callback, gpointer data, GDestroyNotify destroy);
GType (gtk_mnemonic_action_get_type)(void);
GtkShortcutAction * (gtk_mnemonic_action_get)(void);
GType (gtk_activate_action_get_type)(void);
GtkShortcutAction * (gtk_activate_action_get)(void);
GType (gtk_signal_action_get_type)(void);
GtkShortcutAction * (gtk_signal_action_new)(const char *signal_name);
const char * (gtk_signal_action_get_signal_name)(GtkSignalAction *self);
GType (gtk_named_action_get_type)(void);
GtkShortcutAction * (gtk_named_action_new)(const char *name);
const char * (gtk_named_action_get_action_name)(GtkNamedAction *self);
GType (gtk_shortcut_controller_get_type)(void);
GtkEventController * (gtk_shortcut_controller_new)(void);
GtkEventController * (gtk_shortcut_controller_new_for_model)(GListModel *model);
void (gtk_shortcut_controller_set_mnemonics_modifiers)(GtkShortcutController *self, GdkModifierType modifiers);
GdkModifierType (gtk_shortcut_controller_get_mnemonics_modifiers)(GtkShortcutController *self);
void (gtk_shortcut_controller_set_scope)(GtkShortcutController *self, GtkShortcutScope scope);
GtkShortcutScope (gtk_shortcut_controller_get_scope)(GtkShortcutController *self);
void (gtk_shortcut_controller_add_shortcut)(GtkShortcutController *self, GtkShortcut *shortcut);
void (gtk_shortcut_controller_remove_shortcut)(GtkShortcutController *self, GtkShortcut *shortcut);
GType (gtk_shortcut_label_get_type)(void);
GtkWidget* (gtk_shortcut_label_new)(const char *accelerator);
const char* (gtk_shortcut_label_get_accelerator)(GtkShortcutLabel *self);
void (gtk_shortcut_label_set_accelerator)(GtkShortcutLabel *self, const char *accelerator);
const char* (gtk_shortcut_label_get_disabled_text)(GtkShortcutLabel *self);
void (gtk_shortcut_label_set_disabled_text)(GtkShortcutLabel *self, const char *disabled_text);
GType (gtk_shortcut_manager_get_type)(void);
GType (gtk_shortcuts_group_get_type)(void);
void (gtk_shortcuts_group_add_shortcut)(GtkShortcutsGroup *self, GtkShortcutsShortcut *shortcut);
GType (gtk_shortcuts_section_get_type)(void);
void (gtk_shortcuts_section_add_group)(GtkShortcutsSection *self, GtkShortcutsGroup *group);
GType (gtk_shortcuts_shortcut_get_type)(void);
GType (gtk_shortcuts_window_get_type)(void);
void (gtk_shortcuts_window_add_section)(GtkShortcutsWindow *self, GtkShortcutsSection *section);
GType (gtk_shortcut_trigger_get_type)(void);
GtkShortcutTrigger * (gtk_shortcut_trigger_parse_string)(const char *string);
char * (gtk_shortcut_trigger_to_string)(GtkShortcutTrigger *self);
void (gtk_shortcut_trigger_print)(GtkShortcutTrigger *self, GString *string);
char * (gtk_shortcut_trigger_to_label)(GtkShortcutTrigger *self, GdkDisplay *display);
gboolean (gtk_shortcut_trigger_print_label)(GtkShortcutTrigger *self, GdkDisplay *display, GString *string);
guint (gtk_shortcut_trigger_hash)(gconstpointer trigger);
gboolean (gtk_shortcut_trigger_equal)(gconstpointer trigger1, gconstpointer trigger2);
int (gtk_shortcut_trigger_compare)(gconstpointer trigger1, gconstpointer trigger2);
GdkKeyMatch (gtk_shortcut_trigger_trigger)(GtkShortcutTrigger *self, GdkEvent *event, gboolean enable_mnemonics);
GType (gtk_never_trigger_get_type)(void);
GtkShortcutTrigger * (gtk_never_trigger_get)(void);
GType (gtk_keyval_trigger_get_type)(void);
GtkShortcutTrigger * (gtk_keyval_trigger_new)(guint keyval, GdkModifierType modifiers);
GdkModifierType (gtk_keyval_trigger_get_modifiers)(GtkKeyvalTrigger *self);
guint (gtk_keyval_trigger_get_keyval)(GtkKeyvalTrigger *self);
GType (gtk_mnemonic_trigger_get_type)(void);
GtkShortcutTrigger * (gtk_mnemonic_trigger_new)(guint keyval);
guint (gtk_mnemonic_trigger_get_keyval)(GtkMnemonicTrigger *self);
GType (gtk_alternative_trigger_get_type)(void);
GtkShortcutTrigger * (gtk_alternative_trigger_new)(GtkShortcutTrigger *first, GtkShortcutTrigger *second);
GtkShortcutTrigger * (gtk_alternative_trigger_get_first)(GtkAlternativeTrigger *self);
GtkShortcutTrigger * (gtk_alternative_trigger_get_second)(GtkAlternativeTrigger *self);
GType (gtk_signal_list_item_factory_get_type)(void);
GtkListItemFactory * (gtk_signal_list_item_factory_new)(void);
GType (gtk_single_selection_get_type)(void);
GtkSingleSelection * (gtk_single_selection_new)(GListModel *model);
GListModel * (gtk_single_selection_get_model)(GtkSingleSelection *self);
void (gtk_single_selection_set_model)(GtkSingleSelection *self, GListModel *model);
guint (gtk_single_selection_get_selected)(GtkSingleSelection *self);
void (gtk_single_selection_set_selected)(GtkSingleSelection *self, guint position);
gpointer (gtk_single_selection_get_selected_item)(GtkSingleSelection *self);
gboolean (gtk_single_selection_get_autoselect)(GtkSingleSelection *self);
void (gtk_single_selection_set_autoselect)(GtkSingleSelection *self, gboolean autoselect);
gboolean (gtk_single_selection_get_can_unselect)(GtkSingleSelection *self);
void (gtk_single_selection_set_can_unselect)(GtkSingleSelection *self, gboolean can_unselect);
GType (gtk_size_group_get_type)(void);
GtkSizeGroup * (gtk_size_group_new)(GtkSizeGroupMode mode);
void (gtk_size_group_set_mode)(GtkSizeGroup *size_group, GtkSizeGroupMode mode);
GtkSizeGroupMode (gtk_size_group_get_mode)(GtkSizeGroup *size_group);
void (gtk_size_group_add_widget)(GtkSizeGroup *size_group, GtkWidget *widget);
void (gtk_size_group_remove_widget)(GtkSizeGroup *size_group, GtkWidget *widget);
GSList * (gtk_size_group_get_widgets)(GtkSizeGroup *size_group);
int (gtk_distribute_natural_allocation)(int extra_space, guint n_requested_sizes, GtkRequestedSize *sizes);
GType (gtk_slice_list_model_get_type)(void);
GtkSliceListModel * (gtk_slice_list_model_new)(GListModel *model, guint offset, guint size);
void (gtk_slice_list_model_set_model)(GtkSliceListModel *self, GListModel *model);
GListModel * (gtk_slice_list_model_get_model)(GtkSliceListModel *self);
void (gtk_slice_list_model_set_offset)(GtkSliceListModel *self, guint offset);
guint (gtk_slice_list_model_get_offset)(GtkSliceListModel *self);
void (gtk_slice_list_model_set_size)(GtkSliceListModel *self, guint size);
guint (gtk_slice_list_model_get_size)(GtkSliceListModel *self);
GType (gtk_snapshot_get_type)(void);
GtkSnapshot * (gtk_snapshot_new)(void);
GskRenderNode * (gtk_snapshot_free_to_node)(GtkSnapshot *snapshot);
GdkPaintable * (gtk_snapshot_free_to_paintable)(GtkSnapshot *snapshot, const graphene_size_t *size);
GskRenderNode * (gtk_snapshot_to_node)(GtkSnapshot *snapshot);
GdkPaintable * (gtk_snapshot_to_paintable)(GtkSnapshot *snapshot, const graphene_size_t *size);
void (gtk_snapshot_push_opacity)(GtkSnapshot *snapshot, double opacity);
void (gtk_snapshot_push_blur)(GtkSnapshot *snapshot, double radius);
void (gtk_snapshot_push_color_matrix)(GtkSnapshot *snapshot, const graphene_matrix_t*color_matrix, const graphene_vec4_t *color_offset);
void (gtk_snapshot_push_repeat)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_rect_t *child_bounds);
void (gtk_snapshot_push_clip)(GtkSnapshot *snapshot, const graphene_rect_t *bounds);
void (gtk_snapshot_push_rounded_clip)(GtkSnapshot *snapshot, const GskRoundedRect *bounds);
void (gtk_snapshot_push_fill)(GtkSnapshot *snapshot, GskPath *path, GskFillRule fill_rule);
void (gtk_snapshot_push_stroke)(GtkSnapshot *snapshot, GskPath *path, const GskStroke *stroke);
void (gtk_snapshot_push_shadow)(GtkSnapshot *snapshot, const GskShadow *shadow, gsize n_shadows);
void (gtk_snapshot_push_blend)(GtkSnapshot *snapshot, GskBlendMode blend_mode);
void (gtk_snapshot_push_mask)(GtkSnapshot *snapshot, GskMaskMode mask_mode);
void (gtk_snapshot_push_cross_fade)(GtkSnapshot *snapshot, double progress);
void (gtk_snapshot_push_gl_shader)(GtkSnapshot *snapshot, GskGLShader *shader, const graphene_rect_t *bounds, GBytes *take_args);
void (gtk_snapshot_gl_shader_pop_texture)(GtkSnapshot *snapshot);
void (gtk_snapshot_pop)(GtkSnapshot *snapshot);
void (gtk_snapshot_save)(GtkSnapshot *snapshot);
void (gtk_snapshot_restore)(GtkSnapshot *snapshot);
void (gtk_snapshot_transform)(GtkSnapshot *snapshot, GskTransform *transform);
void (gtk_snapshot_transform_matrix)(GtkSnapshot *snapshot, const graphene_matrix_t*matrix);
void (gtk_snapshot_translate)(GtkSnapshot *snapshot, const graphene_point_t *point);
void (gtk_snapshot_translate_3d)(GtkSnapshot *snapshot, const graphene_point3d_t*point);
void (gtk_snapshot_rotate)(GtkSnapshot *snapshot, float angle);
void (gtk_snapshot_rotate_3d)(GtkSnapshot *snapshot, float angle, const graphene_vec3_t *axis);
void (gtk_snapshot_scale)(GtkSnapshot *snapshot, float factor_x, float factor_y);
void (gtk_snapshot_scale_3d)(GtkSnapshot *snapshot, float factor_x, float factor_y, float factor_z);
void (gtk_snapshot_perspective)(GtkSnapshot *snapshot, float depth);
void (gtk_snapshot_append_node)(GtkSnapshot *snapshot, GskRenderNode *node);
cairo_t * (gtk_snapshot_append_cairo)(GtkSnapshot *snapshot, const graphene_rect_t *bounds);
void (gtk_snapshot_append_texture)(GtkSnapshot *snapshot, GdkTexture *texture, const graphene_rect_t *bounds);
void (gtk_snapshot_append_scaled_texture)(GtkSnapshot *snapshot, GdkTexture *texture, GskScalingFilter filter, const graphene_rect_t *bounds);
void (gtk_snapshot_append_color)(GtkSnapshot *snapshot, const GdkRGBA *color, const graphene_rect_t *bounds);
void (gtk_snapshot_append_linear_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *start_point, const graphene_point_t *end_point, const GskColorStop *stops, gsize n_stops);
void (gtk_snapshot_append_repeating_linear_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *start_point, const graphene_point_t *end_point, const GskColorStop *stops, gsize n_stops);
void (gtk_snapshot_append_radial_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *stops, gsize n_stops);
void (gtk_snapshot_append_repeating_radial_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *stops, gsize n_stops);
void (gtk_snapshot_append_conic_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *center, float rotation, const GskColorStop *stops, gsize n_stops);
void (gtk_snapshot_append_border)(GtkSnapshot *snapshot, const GskRoundedRect *outline, const float border_width[4], const GdkRGBA border_color[4]);
void (gtk_snapshot_append_inset_shadow)(GtkSnapshot *snapshot, const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
void (gtk_snapshot_append_outset_shadow)(GtkSnapshot *snapshot, const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
void (gtk_snapshot_append_layout)(GtkSnapshot *snapshot, PangoLayout *layout, const GdkRGBA *color);
void (gtk_snapshot_append_fill)(GtkSnapshot *snapshot, GskPath *path, GskFillRule fill_rule, const GdkRGBA *color);
void (gtk_snapshot_append_stroke)(GtkSnapshot *snapshot, GskPath *path, const GskStroke *stroke, const GdkRGBA *color);
GType (gtk_sorter_get_type)(void);
GtkOrdering (gtk_sorter_compare)(GtkSorter *self, gpointer item1, gpointer item2);
GtkSorterOrder (gtk_sorter_get_order)(GtkSorter *self);
void (gtk_sorter_changed)(GtkSorter *self, GtkSorterChange change);
GType (gtk_sort_list_model_get_type)(void);
GtkSortListModel * (gtk_sort_list_model_new)(GListModel *model, GtkSorter *sorter);
void (gtk_sort_list_model_set_sorter)(GtkSortListModel *self, GtkSorter *sorter);
GtkSorter * (gtk_sort_list_model_get_sorter)(GtkSortListModel *self);
void (gtk_sort_list_model_set_section_sorter)(GtkSortListModel *self, GtkSorter *sorter);
GtkSorter * (gtk_sort_list_model_get_section_sorter)(GtkSortListModel *self);
void (gtk_sort_list_model_set_model)(GtkSortListModel *self, GListModel *model);
GListModel * (gtk_sort_list_model_get_model)(GtkSortListModel *self);
void (gtk_sort_list_model_set_incremental)(GtkSortListModel *self, gboolean incremental);
gboolean (gtk_sort_list_model_get_incremental)(GtkSortListModel *self);
guint (gtk_sort_list_model_get_pending)(GtkSortListModel *self);
GType (gtk_spin_button_get_type)(void);
void (gtk_spin_button_configure)(GtkSpinButton *spin_button, GtkAdjustment *adjustment, double climb_rate, guint digits);
GtkWidget* (gtk_spin_button_new)(GtkAdjustment *adjustment, double climb_rate, guint digits);
GtkWidget* (gtk_spin_button_new_with_range)(double min, double max, double step);
void (gtk_spin_button_set_activates_default)(GtkSpinButton *spin_button, gboolean activates_default);
gboolean (gtk_spin_button_get_activates_default)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_adjustment)(GtkSpinButton *spin_button, GtkAdjustment *adjustment);
GtkAdjustment* (gtk_spin_button_get_adjustment)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_digits)(GtkSpinButton *spin_button, guint digits);
guint (gtk_spin_button_get_digits)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_increments)(GtkSpinButton *spin_button, double step, double page);
void (gtk_spin_button_get_increments)(GtkSpinButton *spin_button, double *step, double *page);
void (gtk_spin_button_set_range)(GtkSpinButton *spin_button, double min, double max);
void (gtk_spin_button_get_range)(GtkSpinButton *spin_button, double *min, double *max);
double (gtk_spin_button_get_value)(GtkSpinButton *spin_button);
int (gtk_spin_button_get_value_as_int)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_value)(GtkSpinButton *spin_button, double value);
void (gtk_spin_button_set_update_policy)(GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy);
GtkSpinButtonUpdatePolicy (gtk_spin_button_get_update_policy)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_numeric)(GtkSpinButton *spin_button, gboolean numeric);
gboolean (gtk_spin_button_get_numeric)(GtkSpinButton *spin_button);
void (gtk_spin_button_spin)(GtkSpinButton *spin_button, GtkSpinType direction, double increment);
void (gtk_spin_button_set_wrap)(GtkSpinButton *spin_button, gboolean wrap);
gboolean (gtk_spin_button_get_wrap)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_snap_to_ticks)(GtkSpinButton *spin_button, gboolean snap_to_ticks);
gboolean (gtk_spin_button_get_snap_to_ticks)(GtkSpinButton *spin_button);
void (gtk_spin_button_set_climb_rate)(GtkSpinButton *spin_button, double climb_rate);
double (gtk_spin_button_get_climb_rate)(GtkSpinButton *spin_button);
void (gtk_spin_button_update)(GtkSpinButton *spin_button);
GType (gtk_spinner_get_type)(void);
GtkWidget* (gtk_spinner_new)(void);
void (gtk_spinner_start)(GtkSpinner *spinner);
void (gtk_spinner_stop)(GtkSpinner *spinner);
void (gtk_spinner_set_spinning)(GtkSpinner *spinner, gboolean spinning);
gboolean (gtk_spinner_get_spinning)(GtkSpinner *spinner);
GType (gtk_stack_get_type)(void);
GType (gtk_stack_page_get_type)(void);
GtkWidget * (gtk_stack_page_get_child)(GtkStackPage *self);
gboolean (gtk_stack_page_get_visible)(GtkStackPage *self);
void (gtk_stack_page_set_visible)(GtkStackPage *self, gboolean visible);
gboolean (gtk_stack_page_get_needs_attention)(GtkStackPage *self);
void (gtk_stack_page_set_needs_attention)(GtkStackPage *self, gboolean setting);
gboolean (gtk_stack_page_get_use_underline)(GtkStackPage *self);
void (gtk_stack_page_set_use_underline)(GtkStackPage *self, gboolean setting);
const char * (gtk_stack_page_get_name)(GtkStackPage *self);
void (gtk_stack_page_set_name)(GtkStackPage *self, const char *setting);
const char * (gtk_stack_page_get_title)(GtkStackPage *self);
void (gtk_stack_page_set_title)(GtkStackPage *self, const char *setting);
const char * (gtk_stack_page_get_icon_name)(GtkStackPage *self);
void (gtk_stack_page_set_icon_name)(GtkStackPage *self, const char *setting);
GtkWidget * (gtk_stack_new)(void);
GtkStackPage * (gtk_stack_add_child)(GtkStack *stack, GtkWidget *child);
GtkStackPage * (gtk_stack_add_named)(GtkStack *stack, GtkWidget *child, const char *name);
GtkStackPage * (gtk_stack_add_titled)(GtkStack *stack, GtkWidget *child, const char *name, const char *title);
void (gtk_stack_remove)(GtkStack *stack, GtkWidget *child);
GtkStackPage * (gtk_stack_get_page)(GtkStack *stack, GtkWidget *child);
GtkWidget * (gtk_stack_get_child_by_name)(GtkStack *stack, const char *name);
void (gtk_stack_set_visible_child)(GtkStack *stack, GtkWidget *child);
GtkWidget * (gtk_stack_get_visible_child)(GtkStack *stack);
void (gtk_stack_set_visible_child_name)(GtkStack *stack, const char *name);
const char * (gtk_stack_get_visible_child_name)(GtkStack *stack);
void (gtk_stack_set_visible_child_full)(GtkStack *stack, const char *name, GtkStackTransitionType transition);
void (gtk_stack_set_hhomogeneous)(GtkStack *stack, gboolean hhomogeneous);
gboolean (gtk_stack_get_hhomogeneous)(GtkStack *stack);
void (gtk_stack_set_vhomogeneous)(GtkStack *stack, gboolean vhomogeneous);
gboolean (gtk_stack_get_vhomogeneous)(GtkStack *stack);
void (gtk_stack_set_transition_duration)(GtkStack *stack, guint duration);
guint (gtk_stack_get_transition_duration)(GtkStack *stack);
void (gtk_stack_set_transition_type)(GtkStack *stack, GtkStackTransitionType transition);
GtkStackTransitionType (gtk_stack_get_transition_type)(GtkStack *stack);
gboolean (gtk_stack_get_transition_running)(GtkStack *stack);
void (gtk_stack_set_interpolate_size)(GtkStack *stack, gboolean interpolate_size);
gboolean (gtk_stack_get_interpolate_size)(GtkStack *stack);
GtkSelectionModel * (gtk_stack_get_pages)(GtkStack *stack);
GType (gtk_stack_sidebar_get_type)(void);
GtkWidget * (gtk_stack_sidebar_new)(void);
void (gtk_stack_sidebar_set_stack)(GtkStackSidebar *self, GtkStack *stack);
GtkStack * (gtk_stack_sidebar_get_stack)(GtkStackSidebar *self);
GType (gtk_stack_switcher_get_type)(void);
GtkWidget * (gtk_stack_switcher_new)(void);
void (gtk_stack_switcher_set_stack)(GtkStackSwitcher *switcher, GtkStack *stack);
GtkStack * (gtk_stack_switcher_get_stack)(GtkStackSwitcher *switcher);
GType (gtk_string_filter_get_type)(void);
GtkStringFilter * (gtk_string_filter_new)(GtkExpression *expression);
const char * (gtk_string_filter_get_search)(GtkStringFilter *self);
void (gtk_string_filter_set_search)(GtkStringFilter *self, const char *search);
GtkExpression * (gtk_string_filter_get_expression)(GtkStringFilter *self);
void (gtk_string_filter_set_expression)(GtkStringFilter *self, GtkExpression *expression);
gboolean (gtk_string_filter_get_ignore_case)(GtkStringFilter *self);
void (gtk_string_filter_set_ignore_case)(GtkStringFilter *self, gboolean ignore_case);
GtkStringFilterMatchMode (gtk_string_filter_get_match_mode)(GtkStringFilter *self);
void (gtk_string_filter_set_match_mode)(GtkStringFilter *self, GtkStringFilterMatchMode mode);
GType (gtk_string_object_get_type)(void);
GtkStringObject * (gtk_string_object_new)(const char *string);
const char * (gtk_string_object_get_string)(GtkStringObject *self);
GType (gtk_string_list_get_type)(void);
GtkStringList * (gtk_string_list_new)(const char * const *strings);
void (gtk_string_list_append)(GtkStringList *self, const char *string);
void (gtk_string_list_take)(GtkStringList *self, char *string);
void (gtk_string_list_remove)(GtkStringList *self, guint position);
void (gtk_string_list_splice)(GtkStringList *self, guint position, guint n_removals, const char * const *additions);
const char * (gtk_string_list_get_string)(GtkStringList *self, guint position);
GType (gtk_string_sorter_get_type)(void);
GtkStringSorter * (gtk_string_sorter_new)(GtkExpression *expression);
GtkExpression * (gtk_string_sorter_get_expression)(GtkStringSorter *self);
void (gtk_string_sorter_set_expression)(GtkStringSorter *self, GtkExpression *expression);
gboolean (gtk_string_sorter_get_ignore_case)(GtkStringSorter *self);
void (gtk_string_sorter_set_ignore_case)(GtkStringSorter *self, gboolean ignore_case);
void (gtk_string_sorter_set_collation)(GtkStringSorter *self, GtkCollation collation);
GtkCollation (gtk_string_sorter_get_collation)(GtkStringSorter *self);
GType (gtk_style_provider_get_type)(void);
void (gtk_style_context_remove_provider_for_display)(GdkDisplay *display, GtkStyleProvider *provider);
GType (gtk_switch_get_type)(void);
GtkWidget * (gtk_switch_new)(void);
void (gtk_switch_set_active)(GtkSwitch *self, gboolean is_active);
gboolean (gtk_switch_get_active)(GtkSwitch *self);
void (gtk_switch_set_state)(GtkSwitch *self, gboolean state);
gboolean (gtk_switch_get_state)(GtkSwitch *self);
GType (gtk_symbolic_paintable_get_type)(void);
gboolean (gtk_test_accessible_has_property)(GtkAccessible *accessible, GtkAccessibleProperty property);
gboolean (gtk_test_accessible_has_relation)(GtkAccessible *accessible, GtkAccessibleRelation relation);
gboolean (gtk_test_accessible_has_state)(GtkAccessible *accessible, GtkAccessibleState state);
void (gtk_test_accessible_assertion_message_role)(const char *domain, const char *file, int line, const char *func, const char *expr, GtkAccessible *accessible, GtkAccessibleRole expected_role, GtkAccessibleRole actual_role);
gboolean (gtk_test_accessible_has_role)(GtkAccessible *accessible, GtkAccessibleRole role);
void (gtk_test_register_all_types)(void);
const GType* (gtk_test_list_all_types)(guint *n_types);
void (gtk_test_widget_wait_for_draw)(GtkWidget *widget);
GType (gtk_text_get_type)(void);
GtkWidget * (gtk_text_new)(void);
GtkWidget * (gtk_text_new_with_buffer)(GtkEntryBuffer *buffer);
GtkEntryBuffer* (gtk_text_get_buffer)(GtkText *self);
void (gtk_text_set_buffer)(GtkText *self, GtkEntryBuffer *buffer);
void (gtk_text_set_visibility)(GtkText *self, gboolean visible);
gboolean (gtk_text_get_visibility)(GtkText *self);
void (gtk_text_set_invisible_char)(GtkText *self, gunichar ch);
gunichar (gtk_text_get_invisible_char)(GtkText *self);
void (gtk_text_unset_invisible_char)(GtkText *self);
void (gtk_text_set_overwrite_mode)(GtkText *self, gboolean overwrite);
gboolean (gtk_text_get_overwrite_mode)(GtkText *self);
void (gtk_text_set_max_length)(GtkText *self, int length);
int (gtk_text_get_max_length)(GtkText *self);
guint16 (gtk_text_get_text_length)(GtkText *self);
void (gtk_text_set_activates_default)(GtkText *self, gboolean activates);
gboolean (gtk_text_get_activates_default)(GtkText *self);
const char * (gtk_text_get_placeholder_text)(GtkText *self);
void (gtk_text_set_placeholder_text)(GtkText *self, const char *text);
void (gtk_text_set_input_purpose)(GtkText *self, GtkInputPurpose purpose);
GtkInputPurpose (gtk_text_get_input_purpose)(GtkText *self);
void (gtk_text_set_input_hints)(GtkText *self, GtkInputHints hints);
GtkInputHints (gtk_text_get_input_hints)(GtkText *self);
void (gtk_text_set_attributes)(GtkText *self, PangoAttrList *attrs);
PangoAttrList * (gtk_text_get_attributes)(GtkText *self);
void (gtk_text_set_tabs)(GtkText *self, PangoTabArray *tabs);
PangoTabArray * (gtk_text_get_tabs)(GtkText *self);
gboolean (gtk_text_grab_focus_without_selecting)(GtkText *self);
void (gtk_text_set_extra_menu)(GtkText *self, GMenuModel *model);
GMenuModel * (gtk_text_get_extra_menu)(GtkText *self);
void (gtk_text_set_enable_emoji_completion)(GtkText *self, gboolean enable_emoji_completion);
gboolean (gtk_text_get_enable_emoji_completion)(GtkText *self);
void (gtk_text_set_propagate_text_width)(GtkText *self, gboolean propagate_text_width);
gboolean (gtk_text_get_propagate_text_width)(GtkText *self);
void (gtk_text_set_truncate_multiline)(GtkText *self, gboolean truncate_multiline);
gboolean (gtk_text_get_truncate_multiline)(GtkText *self);
void (gtk_text_compute_cursor_extents)(GtkText *self, gsize position, graphene_rect_t *strong, graphene_rect_t *weak);
GType (gtk_text_buffer_get_type)(void);
GtkTextBuffer* (gtk_text_buffer_new)(GtkTextTagTable *table);
int (gtk_text_buffer_get_line_count)(GtkTextBuffer *buffer);
int (gtk_text_buffer_get_char_count)(GtkTextBuffer *buffer);
GtkTextTagTable* (gtk_text_buffer_get_tag_table)(GtkTextBuffer *buffer);
void (gtk_text_buffer_set_text)(GtkTextBuffer *buffer, const char *text, int len);
void (gtk_text_buffer_insert)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *text, int len);
void (gtk_text_buffer_insert_at_cursor)(GtkTextBuffer *buffer, const char *text, int len);
gboolean (gtk_text_buffer_insert_interactive)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *text, int len, gboolean default_editable);
gboolean (gtk_text_buffer_insert_interactive_at_cursor)(GtkTextBuffer *buffer, const char *text, int len, gboolean default_editable);
void (gtk_text_buffer_insert_range)(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);
gboolean (gtk_text_buffer_insert_range_interactive)(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable);
void (gtk_text_buffer_insert_markup)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *markup, int len);
void (gtk_text_buffer_delete)(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
gboolean (gtk_text_buffer_delete_interactive)(GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable);
gboolean (gtk_text_buffer_backspace)(GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable);
char* (gtk_text_buffer_get_text)(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);
char* (gtk_text_buffer_get_slice)(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);
void (gtk_text_buffer_insert_paintable)(GtkTextBuffer *buffer, GtkTextIter *iter, GdkPaintable *paintable);
void (gtk_text_buffer_insert_child_anchor)(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);
GtkTextChildAnchor* (gtk_text_buffer_create_child_anchor)(GtkTextBuffer *buffer, GtkTextIter *iter);
void (gtk_text_buffer_add_mark)(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);
GtkTextMark* (gtk_text_buffer_create_mark)(GtkTextBuffer *buffer, const char *mark_name, const GtkTextIter *where, gboolean left_gravity);
void (gtk_text_buffer_move_mark)(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);
void (gtk_text_buffer_delete_mark)(GtkTextBuffer *buffer, GtkTextMark *mark);
GtkTextMark* (gtk_text_buffer_get_mark)(GtkTextBuffer *buffer, const char *name);
void (gtk_text_buffer_move_mark_by_name)(GtkTextBuffer *buffer, const char *name, const GtkTextIter *where);
void (gtk_text_buffer_delete_mark_by_name)(GtkTextBuffer *buffer, const char *name);
GtkTextMark* (gtk_text_buffer_get_insert)(GtkTextBuffer *buffer);
GtkTextMark* (gtk_text_buffer_get_selection_bound)(GtkTextBuffer *buffer);
void (gtk_text_buffer_place_cursor)(GtkTextBuffer *buffer, const GtkTextIter *where);
void (gtk_text_buffer_select_range)(GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound);
void (gtk_text_buffer_apply_tag)(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);
void (gtk_text_buffer_remove_tag)(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);
void (gtk_text_buffer_apply_tag_by_name)(GtkTextBuffer *buffer, const char *name, const GtkTextIter *start, const GtkTextIter *end);
void (gtk_text_buffer_remove_tag_by_name)(GtkTextBuffer *buffer, const char *name, const GtkTextIter *start, const GtkTextIter *end);
void (gtk_text_buffer_remove_all_tags)(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end);
gboolean (gtk_text_buffer_get_iter_at_line_offset)(GtkTextBuffer *buffer, GtkTextIter *iter, int line_number, int char_offset);
gboolean (gtk_text_buffer_get_iter_at_line_index)(GtkTextBuffer *buffer, GtkTextIter *iter, int line_number, int byte_index);
void (gtk_text_buffer_get_iter_at_offset)(GtkTextBuffer *buffer, GtkTextIter *iter, int char_offset);
gboolean (gtk_text_buffer_get_iter_at_line)(GtkTextBuffer *buffer, GtkTextIter *iter, int line_number);
void (gtk_text_buffer_get_start_iter)(GtkTextBuffer *buffer, GtkTextIter *iter);
void (gtk_text_buffer_get_end_iter)(GtkTextBuffer *buffer, GtkTextIter *iter);
void (gtk_text_buffer_get_bounds)(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
void (gtk_text_buffer_get_iter_at_mark)(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark);
void (gtk_text_buffer_get_iter_at_child_anchor)(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);
gboolean (gtk_text_buffer_get_modified)(GtkTextBuffer *buffer);
void (gtk_text_buffer_set_modified)(GtkTextBuffer *buffer, gboolean setting);
gboolean (gtk_text_buffer_get_has_selection)(GtkTextBuffer *buffer);
void (gtk_text_buffer_add_selection_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard);
void (gtk_text_buffer_remove_selection_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard);
void (gtk_text_buffer_cut_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard, gboolean default_editable);
void (gtk_text_buffer_copy_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard);
void (gtk_text_buffer_paste_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable);
gboolean (gtk_text_buffer_get_selection_bounds)(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
gboolean (gtk_text_buffer_delete_selection)(GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable);
GdkContentProvider * (gtk_text_buffer_get_selection_content)(GtkTextBuffer *buffer);
gboolean (gtk_text_buffer_get_can_undo)(GtkTextBuffer *buffer);
gboolean (gtk_text_buffer_get_can_redo)(GtkTextBuffer *buffer);
gboolean (gtk_text_buffer_get_enable_undo)(GtkTextBuffer *buffer);
void (gtk_text_buffer_set_enable_undo)(GtkTextBuffer *buffer, gboolean enable_undo);
guint (gtk_text_buffer_get_max_undo_levels)(GtkTextBuffer *buffer);
void (gtk_text_buffer_set_max_undo_levels)(GtkTextBuffer *buffer, guint max_undo_levels);
void (gtk_text_buffer_undo)(GtkTextBuffer *buffer);
void (gtk_text_buffer_redo)(GtkTextBuffer *buffer);
void (gtk_text_buffer_begin_irreversible_action)(GtkTextBuffer *buffer);
void (gtk_text_buffer_end_irreversible_action)(GtkTextBuffer *buffer);
void (gtk_text_buffer_begin_user_action)(GtkTextBuffer *buffer);
void (gtk_text_buffer_end_user_action)(GtkTextBuffer *buffer);
GType (gtk_text_child_anchor_get_type)(void);
GtkTextChildAnchor* (gtk_text_child_anchor_new)(void);
GtkTextChildAnchor* (gtk_text_child_anchor_new_with_replacement)(const char *character);
GtkWidget** (gtk_text_child_anchor_get_widgets)(GtkTextChildAnchor *anchor, guint *out_len);
gboolean (gtk_text_child_anchor_get_deleted)(GtkTextChildAnchor *anchor);
GType (gtk_text_iter_get_type)(void);
GtkTextBuffer* (gtk_text_iter_get_buffer)(const GtkTextIter *iter);
GtkTextIter* (gtk_text_iter_copy)(const GtkTextIter *iter);
void (gtk_text_iter_free)(GtkTextIter *iter);
void (gtk_text_iter_assign)(GtkTextIter *iter, const GtkTextIter *other);
int (gtk_text_iter_get_offset)(const GtkTextIter *iter);
int (gtk_text_iter_get_line)(const GtkTextIter *iter);
int (gtk_text_iter_get_line_offset)(const GtkTextIter *iter);
int (gtk_text_iter_get_line_index)(const GtkTextIter *iter);
int (gtk_text_iter_get_visible_line_offset)(const GtkTextIter *iter);
int (gtk_text_iter_get_visible_line_index)(const GtkTextIter *iter);
gunichar (gtk_text_iter_get_char)(const GtkTextIter *iter);
char* (gtk_text_iter_get_slice)(const GtkTextIter *start, const GtkTextIter *end);
char* (gtk_text_iter_get_text)(const GtkTextIter *start, const GtkTextIter *end);
char* (gtk_text_iter_get_visible_slice)(const GtkTextIter *start, const GtkTextIter *end);
char* (gtk_text_iter_get_visible_text)(const GtkTextIter *start, const GtkTextIter *end);
GdkPaintable* (gtk_text_iter_get_paintable)(const GtkTextIter *iter);
GSList* (gtk_text_iter_get_marks)(const GtkTextIter *iter);
GtkTextChildAnchor* (gtk_text_iter_get_child_anchor)(const GtkTextIter *iter);
GSList* (gtk_text_iter_get_toggled_tags)(const GtkTextIter *iter, gboolean toggled_on);
gboolean (gtk_text_iter_starts_tag)(const GtkTextIter *iter, GtkTextTag *tag);
gboolean (gtk_text_iter_ends_tag)(const GtkTextIter *iter, GtkTextTag *tag);
gboolean (gtk_text_iter_toggles_tag)(const GtkTextIter *iter, GtkTextTag *tag);
gboolean (gtk_text_iter_has_tag)(const GtkTextIter *iter, GtkTextTag *tag);
GSList* (gtk_text_iter_get_tags)(const GtkTextIter *iter);
gboolean (gtk_text_iter_editable)(const GtkTextIter *iter, gboolean default_setting);
gboolean (gtk_text_iter_can_insert)(const GtkTextIter *iter, gboolean default_editability);
gboolean (gtk_text_iter_starts_word)(const GtkTextIter *iter);
gboolean (gtk_text_iter_ends_word)(const GtkTextIter *iter);
gboolean (gtk_text_iter_inside_word)(const GtkTextIter *iter);
gboolean (gtk_text_iter_starts_sentence)(const GtkTextIter *iter);
gboolean (gtk_text_iter_ends_sentence)(const GtkTextIter *iter);
gboolean (gtk_text_iter_inside_sentence)(const GtkTextIter *iter);
gboolean (gtk_text_iter_starts_line)(const GtkTextIter *iter);
gboolean (gtk_text_iter_ends_line)(const GtkTextIter *iter);
gboolean (gtk_text_iter_is_cursor_position)(const GtkTextIter *iter);
int (gtk_text_iter_get_chars_in_line)(const GtkTextIter *iter);
int (gtk_text_iter_get_bytes_in_line)(const GtkTextIter *iter);
PangoLanguage* (gtk_text_iter_get_language)(const GtkTextIter *iter);
gboolean (gtk_text_iter_is_end)(const GtkTextIter *iter);
gboolean (gtk_text_iter_is_start)(const GtkTextIter *iter);
gboolean (gtk_text_iter_forward_char)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_char)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_chars)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_chars)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_line)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_line)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_lines)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_lines)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_word_end)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_word_start)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_word_ends)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_word_starts)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_visible_line)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_visible_line)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_visible_lines)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_visible_lines)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_visible_word_end)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_visible_word_start)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_visible_word_ends)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_visible_word_starts)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_sentence_end)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_sentence_start)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_sentence_ends)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_sentence_starts)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_cursor_position)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_cursor_position)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_cursor_positions)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_cursor_positions)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_forward_visible_cursor_position)(GtkTextIter *iter);
gboolean (gtk_text_iter_backward_visible_cursor_position)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_visible_cursor_positions)(GtkTextIter *iter, int count);
gboolean (gtk_text_iter_backward_visible_cursor_positions)(GtkTextIter *iter, int count);
void (gtk_text_iter_set_offset)(GtkTextIter *iter, int char_offset);
void (gtk_text_iter_set_line)(GtkTextIter *iter, int line_number);
void (gtk_text_iter_set_line_offset)(GtkTextIter *iter, int char_on_line);
void (gtk_text_iter_set_line_index)(GtkTextIter *iter, int byte_on_line);
void (gtk_text_iter_forward_to_end)(GtkTextIter *iter);
gboolean (gtk_text_iter_forward_to_line_end)(GtkTextIter *iter);
void (gtk_text_iter_set_visible_line_offset)(GtkTextIter *iter, int char_on_line);
void (gtk_text_iter_set_visible_line_index)(GtkTextIter *iter, int byte_on_line);
gboolean (gtk_text_iter_forward_to_tag_toggle)(GtkTextIter *iter, GtkTextTag *tag);
gboolean (gtk_text_iter_backward_to_tag_toggle)(GtkTextIter *iter, GtkTextTag *tag);
gboolean (gtk_text_iter_forward_find_char)(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);
gboolean (gtk_text_iter_backward_find_char)(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);
gboolean (gtk_text_iter_forward_search)(const GtkTextIter *iter, const char *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);
gboolean (gtk_text_iter_backward_search)(const GtkTextIter *iter, const char *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);
gboolean (gtk_text_iter_equal)(const GtkTextIter *lhs, const GtkTextIter *rhs);
int (gtk_text_iter_compare)(const GtkTextIter *lhs, const GtkTextIter *rhs);
gboolean (gtk_text_iter_in_range)(const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);
void (gtk_text_iter_order)(GtkTextIter *first, GtkTextIter *second);
GType (gtk_text_mark_get_type)(void);
GtkTextMark* (gtk_text_mark_new)(const char *name, gboolean left_gravity);
void (gtk_text_mark_set_visible)(GtkTextMark *mark, gboolean setting);
gboolean (gtk_text_mark_get_visible)(GtkTextMark *mark);
const char * (gtk_text_mark_get_name)(GtkTextMark *mark);
gboolean (gtk_text_mark_get_deleted)(GtkTextMark *mark);
GtkTextBuffer* (gtk_text_mark_get_buffer)(GtkTextMark *mark);
gboolean (gtk_text_mark_get_left_gravity)(GtkTextMark *mark);
GType (gtk_text_tag_get_type)(void);
GtkTextTag* (gtk_text_tag_new)(const char *name);
int (gtk_text_tag_get_priority)(GtkTextTag *tag);
void (gtk_text_tag_set_priority)(GtkTextTag *tag, int priority);
void (gtk_text_tag_changed)(GtkTextTag *tag, gboolean size_changed);
GType (gtk_text_tag_table_get_type)(void);
GtkTextTagTable* (gtk_text_tag_table_new)(void);
gboolean (gtk_text_tag_table_add)(GtkTextTagTable *table, GtkTextTag *tag);
void (gtk_text_tag_table_remove)(GtkTextTagTable *table, GtkTextTag *tag);
GtkTextTag* (gtk_text_tag_table_lookup)(GtkTextTagTable *table, const char *name);
void (gtk_text_tag_table_foreach)(GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data);
int (gtk_text_tag_table_get_size)(GtkTextTagTable *table);
GType (gtk_text_view_get_type)(void);
GtkWidget * (gtk_text_view_new)(void);
GtkWidget * (gtk_text_view_new_with_buffer)(GtkTextBuffer *buffer);
void (gtk_text_view_set_buffer)(GtkTextView *text_view, GtkTextBuffer *buffer);
GtkTextBuffer* (gtk_text_view_get_buffer)(GtkTextView *text_view);
gboolean (gtk_text_view_scroll_to_iter)(GtkTextView *text_view, GtkTextIter *iter, double within_margin, gboolean use_align, double xalign, double yalign);
void (gtk_text_view_scroll_to_mark)(GtkTextView *text_view, GtkTextMark *mark, double within_margin, gboolean use_align, double xalign, double yalign);
void (gtk_text_view_scroll_mark_onscreen)(GtkTextView *text_view, GtkTextMark *mark);
gboolean (gtk_text_view_move_mark_onscreen)(GtkTextView *text_view, GtkTextMark *mark);
gboolean (gtk_text_view_place_cursor_onscreen)(GtkTextView *text_view);
void (gtk_text_view_get_visible_rect)(GtkTextView *text_view, GdkRectangle *visible_rect);
void (gtk_text_view_set_cursor_visible)(GtkTextView *text_view, gboolean setting);
gboolean (gtk_text_view_get_cursor_visible)(GtkTextView *text_view);
void (gtk_text_view_reset_cursor_blink)(GtkTextView *text_view);
void (gtk_text_view_get_cursor_locations)(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *strong, GdkRectangle *weak);
void (gtk_text_view_get_iter_location)(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location);
gboolean (gtk_text_view_get_iter_at_location)(GtkTextView *text_view, GtkTextIter *iter, int x, int y);
gboolean (gtk_text_view_get_iter_at_position)(GtkTextView *text_view, GtkTextIter *iter, int *trailing, int x, int y);
void (gtk_text_view_get_line_yrange)(GtkTextView *text_view, const GtkTextIter *iter, int *y, int *height);
void (gtk_text_view_get_line_at_y)(GtkTextView *text_view, GtkTextIter *target_iter, int y, int *line_top);
void (gtk_text_view_buffer_to_window_coords)(GtkTextView *text_view, GtkTextWindowType win, int buffer_x, int buffer_y, int *window_x, int *window_y);
void (gtk_text_view_window_to_buffer_coords)(GtkTextView *text_view, GtkTextWindowType win, int window_x, int window_y, int *buffer_x, int *buffer_y);
gboolean (gtk_text_view_forward_display_line)(GtkTextView *text_view, GtkTextIter *iter);
gboolean (gtk_text_view_backward_display_line)(GtkTextView *text_view, GtkTextIter *iter);
gboolean (gtk_text_view_forward_display_line_end)(GtkTextView *text_view, GtkTextIter *iter);
gboolean (gtk_text_view_backward_display_line_start)(GtkTextView *text_view, GtkTextIter *iter);
gboolean (gtk_text_view_starts_display_line)(GtkTextView *text_view, const GtkTextIter *iter);
gboolean (gtk_text_view_move_visually)(GtkTextView *text_view, GtkTextIter *iter, int count);
gboolean (gtk_text_view_im_context_filter_keypress)(GtkTextView *text_view, GdkEvent *event);
void (gtk_text_view_reset_im_context)(GtkTextView *text_view);
GtkWidget* (gtk_text_view_get_gutter)(GtkTextView *text_view, GtkTextWindowType win);
void (gtk_text_view_set_gutter)(GtkTextView *text_view, GtkTextWindowType win, GtkWidget *widget);
void (gtk_text_view_add_child_at_anchor)(GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor);
void (gtk_text_view_add_overlay)(GtkTextView *text_view, GtkWidget *child, int xpos, int ypos);
void (gtk_text_view_move_overlay)(GtkTextView *text_view, GtkWidget *child, int xpos, int ypos);
void (gtk_text_view_remove)(GtkTextView *text_view, GtkWidget *child);
void (gtk_text_view_set_wrap_mode)(GtkTextView *text_view, GtkWrapMode wrap_mode);
GtkWrapMode (gtk_text_view_get_wrap_mode)(GtkTextView *text_view);
void (gtk_text_view_set_editable)(GtkTextView *text_view, gboolean setting);
gboolean (gtk_text_view_get_editable)(GtkTextView *text_view);
void (gtk_text_view_set_overwrite)(GtkTextView *text_view, gboolean overwrite);
gboolean (gtk_text_view_get_overwrite)(GtkTextView *text_view);
void (gtk_text_view_set_accepts_tab)(GtkTextView *text_view, gboolean accepts_tab);
gboolean (gtk_text_view_get_accepts_tab)(GtkTextView *text_view);
void (gtk_text_view_set_pixels_above_lines)(GtkTextView *text_view, int pixels_above_lines);
int (gtk_text_view_get_pixels_above_lines)(GtkTextView *text_view);
void (gtk_text_view_set_pixels_below_lines)(GtkTextView *text_view, int pixels_below_lines);
int (gtk_text_view_get_pixels_below_lines)(GtkTextView *text_view);
void (gtk_text_view_set_pixels_inside_wrap)(GtkTextView *text_view, int pixels_inside_wrap);
int (gtk_text_view_get_pixels_inside_wrap)(GtkTextView *text_view);
void (gtk_text_view_set_justification)(GtkTextView *text_view, GtkJustification justification);
GtkJustification (gtk_text_view_get_justification)(GtkTextView *text_view);
void (gtk_text_view_set_left_margin)(GtkTextView *text_view, int left_margin);
int (gtk_text_view_get_left_margin)(GtkTextView *text_view);
void (gtk_text_view_set_right_margin)(GtkTextView *text_view, int right_margin);
int (gtk_text_view_get_right_margin)(GtkTextView *text_view);
void (gtk_text_view_set_top_margin)(GtkTextView *text_view, int top_margin);
int (gtk_text_view_get_top_margin)(GtkTextView *text_view);
void (gtk_text_view_set_bottom_margin)(GtkTextView *text_view, int bottom_margin);
int (gtk_text_view_get_bottom_margin)(GtkTextView *text_view);
void (gtk_text_view_set_indent)(GtkTextView *text_view, int indent);
int (gtk_text_view_get_indent)(GtkTextView *text_view);
void (gtk_text_view_set_tabs)(GtkTextView *text_view, PangoTabArray *tabs);
PangoTabArray* (gtk_text_view_get_tabs)(GtkTextView *text_view);
void (gtk_text_view_set_input_purpose)(GtkTextView *text_view, GtkInputPurpose purpose);
GtkInputPurpose (gtk_text_view_get_input_purpose)(GtkTextView *text_view);
void (gtk_text_view_set_input_hints)(GtkTextView *text_view, GtkInputHints hints);
GtkInputHints (gtk_text_view_get_input_hints)(GtkTextView *text_view);
void (gtk_text_view_set_monospace)(GtkTextView *text_view, gboolean monospace);
gboolean (gtk_text_view_get_monospace)(GtkTextView *text_view);
void (gtk_text_view_set_extra_menu)(GtkTextView *text_view, GMenuModel *model);
GMenuModel * (gtk_text_view_get_extra_menu)(GtkTextView *text_view);
PangoContext* (gtk_text_view_get_rtl_context)(GtkTextView *text_view);
PangoContext* (gtk_text_view_get_ltr_context)(GtkTextView *text_view);
GType (gtk_toggle_button_get_type)(void);
GtkWidget* (gtk_toggle_button_new)(void);
GtkWidget* (gtk_toggle_button_new_with_label)(const char *label);
GtkWidget* (gtk_toggle_button_new_with_mnemonic)(const char *label);
void (gtk_toggle_button_set_active)(GtkToggleButton *toggle_button, gboolean is_active);
gboolean (gtk_toggle_button_get_active)(GtkToggleButton *toggle_button);
void (gtk_toggle_button_toggled)(GtkToggleButton *toggle_button);
void (gtk_toggle_button_set_group)(GtkToggleButton *toggle_button, GtkToggleButton *group);
GType (gtk_tooltip_get_type)(void);
void (gtk_tooltip_set_markup)(GtkTooltip *tooltip, const char *markup);
void (gtk_tooltip_set_text)(GtkTooltip *tooltip, const char *text);
void (gtk_tooltip_set_icon)(GtkTooltip *tooltip, GdkPaintable *paintable);
void (gtk_tooltip_set_icon_from_icon_name)(GtkTooltip *tooltip, const char *icon_name);
void (gtk_tooltip_set_icon_from_gicon)(GtkTooltip *tooltip, GIcon *gicon);
void (gtk_tooltip_set_custom)(GtkTooltip *tooltip, GtkWidget *custom_widget);
void (gtk_tooltip_set_tip_area)(GtkTooltip *tooltip, const GdkRectangle *rect);
GType (gtk_tree_expander_get_type)(void);
GtkWidget * (gtk_tree_expander_new)(void);
GtkWidget * (gtk_tree_expander_get_child)(GtkTreeExpander *self);
void (gtk_tree_expander_set_child)(GtkTreeExpander *self, GtkWidget *child);
gpointer (gtk_tree_expander_get_item)(GtkTreeExpander *self);
GtkTreeListRow * (gtk_tree_expander_get_list_row)(GtkTreeExpander *self);
void (gtk_tree_expander_set_list_row)(GtkTreeExpander *self, GtkTreeListRow *list_row);
gboolean (gtk_tree_expander_get_indent_for_depth)(GtkTreeExpander *self);
void (gtk_tree_expander_set_indent_for_depth)(GtkTreeExpander *self, gboolean indent_for_depth);
gboolean (gtk_tree_expander_get_indent_for_icon)(GtkTreeExpander *self);
void (gtk_tree_expander_set_indent_for_icon)(GtkTreeExpander *self, gboolean indent_for_icon);
gboolean (gtk_tree_expander_get_hide_expander)(GtkTreeExpander *self);
void (gtk_tree_expander_set_hide_expander)(GtkTreeExpander *self, gboolean hide_expander);
GType (gtk_tree_list_model_get_type)(void);
GType (gtk_tree_list_row_get_type)(void);
GtkTreeListModel * (gtk_tree_list_model_new)(GListModel *root, gboolean passthrough, gboolean autoexpand, GtkTreeListModelCreateModelFunc create_func, gpointer user_data, GDestroyNotify user_destroy);
GListModel * (gtk_tree_list_model_get_model)(GtkTreeListModel *self);
gboolean (gtk_tree_list_model_get_passthrough)(GtkTreeListModel *self);
void (gtk_tree_list_model_set_autoexpand)(GtkTreeListModel *self, gboolean autoexpand);
gboolean (gtk_tree_list_model_get_autoexpand)(GtkTreeListModel *self);
GtkTreeListRow * (gtk_tree_list_model_get_child_row)(GtkTreeListModel *self, guint position);
GtkTreeListRow * (gtk_tree_list_model_get_row)(GtkTreeListModel *self, guint position);
gpointer (gtk_tree_list_row_get_item)(GtkTreeListRow *self);
void (gtk_tree_list_row_set_expanded)(GtkTreeListRow *self, gboolean expanded);
gboolean (gtk_tree_list_row_get_expanded)(GtkTreeListRow *self);
gboolean (gtk_tree_list_row_is_expandable)(GtkTreeListRow *self);
guint (gtk_tree_list_row_get_position)(GtkTreeListRow *self);
guint (gtk_tree_list_row_get_depth)(GtkTreeListRow *self);
GListModel * (gtk_tree_list_row_get_children)(GtkTreeListRow *self);
GtkTreeListRow * (gtk_tree_list_row_get_parent)(GtkTreeListRow *self);
GtkTreeListRow * (gtk_tree_list_row_get_child_row)(GtkTreeListRow *self, guint position);
GType (gtk_tree_list_row_sorter_get_type)(void);
GtkTreeListRowSorter * (gtk_tree_list_row_sorter_new)(GtkSorter *sorter);
GtkSorter * (gtk_tree_list_row_sorter_get_sorter)(GtkTreeListRowSorter *self);
void (gtk_tree_list_row_sorter_set_sorter)(GtkTreeListRowSorter *self, GtkSorter *sorter);
GType (gtk_assistant_page_type_get_type)(void);
GType (gtk_cell_renderer_state_get_type)(void);
GType (gtk_cell_renderer_mode_get_type)(void);
GType (gtk_cell_renderer_accel_mode_get_type)(void);
GType (gtk_dialog_flags_get_type)(void);
GType (gtk_response_type_get_type)(void);
GType (gtk_file_chooser_action_get_type)(void);
GType (gtk_file_chooser_error_get_type)(void);
GType (gtk_font_chooser_level_get_type)(void);
GType (gtk_icon_view_drop_position_get_type)(void);
GType (gtk_buttons_type_get_type)(void);
GType (gtk_style_context_print_flags_get_type)(void);
GType (gtk_tree_model_flags_get_type)(void);
GType (gtk_tree_view_drop_position_get_type)(void);
GType (gtk_tree_view_column_sizing_get_type)(void);
GType (gtk_license_get_type)(void);
GType (gtk_accessible_platform_state_get_type)(void);
GType (gtk_accessible_text_granularity_get_type)(void);
GType (gtk_accessible_text_content_change_get_type)(void);
GType (gtk_application_inhibit_flags_get_type)(void);
GType (gtk_builder_error_get_type)(void);
GType (gtk_builder_closure_flags_get_type)(void);
GType (gtk_debug_flags_get_type)(void);
GType (gtk_dialog_error_get_type)(void);
GType (gtk_editable_properties_get_type)(void);
GType (gtk_entry_icon_position_get_type)(void);
GType (gtk_align_get_type)(void);
GType (gtk_arrow_type_get_type)(void);
GType (gtk_baseline_position_get_type)(void);
GType (gtk_content_fit_get_type)(void);
GType (gtk_delete_type_get_type)(void);
GType (gtk_direction_type_get_type)(void);
GType (gtk_icon_size_get_type)(void);
GType (gtk_sensitivity_type_get_type)(void);
GType (gtk_text_direction_get_type)(void);
GType (gtk_justification_get_type)(void);
GType (gtk_list_tab_behavior_get_type)(void);
GType (gtk_list_scroll_flags_get_type)(void);
GType (gtk_message_type_get_type)(void);
GType (gtk_movement_step_get_type)(void);
GType (gtk_natural_wrap_mode_get_type)(void);
GType (gtk_scroll_step_get_type)(void);
GType (gtk_orientation_get_type)(void);
GType (gtk_overflow_get_type)(void);
GType (gtk_pack_type_get_type)(void);
GType (gtk_position_type_get_type)(void);
GType (gtk_scroll_type_get_type)(void);
GType (gtk_selection_mode_get_type)(void);
GType (gtk_wrap_mode_get_type)(void);
GType (gtk_sort_type_get_type)(void);
GType (gtk_print_pages_get_type)(void);
GType (gtk_page_set_get_type)(void);
GType (gtk_number_up_layout_get_type)(void);
GType (gtk_ordering_get_type)(void);
GType (gtk_page_orientation_get_type)(void);
GType (gtk_print_quality_get_type)(void);
GType (gtk_print_duplex_get_type)(void);
GType (gtk_unit_get_type)(void);
GType (gtk_tree_view_grid_lines_get_type)(void);
GType (gtk_size_group_mode_get_type)(void);
GType (gtk_size_request_mode_get_type)(void);
GType (gtk_scrollable_policy_get_type)(void);
GType (gtk_state_flags_get_type)(void);
GType (gtk_border_style_get_type)(void);
GType (gtk_level_bar_mode_get_type)(void);
GType (gtk_input_purpose_get_type)(void);
GType (gtk_input_hints_get_type)(void);
GType (gtk_propagation_phase_get_type)(void);
GType (gtk_propagation_limit_get_type)(void);
GType (gtk_event_sequence_state_get_type)(void);
GType (gtk_pan_direction_get_type)(void);
GType (gtk_shortcut_scope_get_type)(void);
GType (gtk_pick_flags_get_type)(void);
GType (gtk_constraint_relation_get_type)(void);
GType (gtk_constraint_strength_get_type)(void);
GType (gtk_constraint_attribute_get_type)(void);
GType (gtk_constraint_vfl_parser_error_get_type)(void);
GType (gtk_system_setting_get_type)(void);
GType (gtk_symbolic_color_get_type)(void);
GType (gtk_accessible_role_get_type)(void);
GType (gtk_accessible_state_get_type)(void);
GType (gtk_accessible_property_get_type)(void);
GType (gtk_accessible_relation_get_type)(void);
GType (gtk_accessible_tristate_get_type)(void);
GType (gtk_accessible_invalid_state_get_type)(void);
GType (gtk_accessible_autocomplete_get_type)(void);
GType (gtk_accessible_sort_get_type)(void);
GType (gtk_accessible_announcement_priority_get_type)(void);
GType (gtk_popover_menu_flags_get_type)(void);
GType (gtk_event_controller_scroll_flags_get_type)(void);
GType (gtk_filter_match_get_type)(void);
GType (gtk_filter_change_get_type)(void);
GType (gtk_font_level_get_type)(void);
GType (gtk_graphics_offload_enabled_get_type)(void);
GType (gtk_icon_lookup_flags_get_type)(void);
GType (gtk_icon_theme_error_get_type)(void);
GType (gtk_image_type_get_type)(void);
GType (gtk_inscription_overflow_get_type)(void);
GType (gtk_notebook_tab_get_type)(void);
GType (gtk_pad_action_type_get_type)(void);
GType (gtk_recent_manager_error_get_type)(void);
GType (gtk_revealer_transition_type_get_type)(void);
GType (gtk_corner_type_get_type)(void);
GType (gtk_policy_type_get_type)(void);
GType (gtk_shortcut_action_flags_get_type)(void);
GType (gtk_shortcut_type_get_type)(void);
GType (gtk_sorter_order_get_type)(void);
GType (gtk_sorter_change_get_type)(void);
GType (gtk_spin_button_update_policy_get_type)(void);
GType (gtk_spin_type_get_type)(void);
GType (gtk_stack_transition_type_get_type)(void);
GType (gtk_string_filter_match_mode_get_type)(void);
GType (gtk_collation_get_type)(void);
GType (gtk_text_search_flags_get_type)(void);
GType (gtk_text_window_type_get_type)(void);
GType (gtk_text_view_layer_get_type)(void);
GType (gtk_text_extend_selection_get_type)(void);
GType (gtk_print_status_get_type)(void);
GType (gtk_print_operation_result_get_type)(void);
GType (gtk_print_operation_action_get_type)(void);
GType (gtk_print_error_get_type)(void);
GType (gtk_uri_launcher_get_type)(void);
GtkUriLauncher * (gtk_uri_launcher_new)(const char *uri);
const char * (gtk_uri_launcher_get_uri)(GtkUriLauncher *self);
void (gtk_uri_launcher_set_uri)(GtkUriLauncher *self, const char *uri);
void (gtk_uri_launcher_launch)(GtkUriLauncher *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gtk_uri_launcher_launch_finish)(GtkUriLauncher *self, GAsyncResult *result, GError **error);
guint (gtk_get_minor_version)(void);
guint (gtk_get_micro_version)(void);
guint (gtk_get_binary_age)(void);
guint (gtk_get_interface_age)(void);
const char * (gtk_check_version)(guint required_major, guint required_minor, guint required_micro);
guint (gtk_get_major_version)(void);
GType (gtk_video_get_type)(void);
GtkWidget * (gtk_video_new)(void);
GtkWidget * (gtk_video_new_for_media_stream)(GtkMediaStream *stream);
GtkWidget * (gtk_video_new_for_file)(GFile *file);
GtkWidget * (gtk_video_new_for_filename)(const char *filename);
GtkWidget * (gtk_video_new_for_resource)(const char *resource_path);
GtkMediaStream* (gtk_video_get_media_stream)(GtkVideo *self);
void (gtk_video_set_media_stream)(GtkVideo *self, GtkMediaStream *stream);
GFile * (gtk_video_get_file)(GtkVideo *self);
void (gtk_video_set_file)(GtkVideo *self, GFile *file);
void (gtk_video_set_filename)(GtkVideo *self, const char *filename);
void (gtk_video_set_resource)(GtkVideo *self, const char *resource_path);
gboolean (gtk_video_get_autoplay)(GtkVideo *self);
void (gtk_video_set_autoplay)(GtkVideo *self, gboolean autoplay);
gboolean (gtk_video_get_loop)(GtkVideo *self);
void (gtk_video_set_loop)(GtkVideo *self, gboolean loop);
GtkGraphicsOffloadEnabled (gtk_video_get_graphics_offload)(GtkVideo *self);
void (gtk_video_set_graphics_offload)(GtkVideo *self, GtkGraphicsOffloadEnabled enabled);
GType (gtk_viewport_get_type)(void);
GtkWidget* (gtk_viewport_new)(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);
gboolean (gtk_viewport_get_scroll_to_focus)(GtkViewport *viewport);
void (gtk_viewport_set_scroll_to_focus)(GtkViewport *viewport, gboolean scroll_to_focus);
void (gtk_viewport_set_child)(GtkViewport *viewport, GtkWidget *child);
GtkWidget * (gtk_viewport_get_child)(GtkViewport *viewport);
void (gtk_viewport_scroll_to)(GtkViewport *viewport, GtkWidget *descendant, GtkScrollInfo *scroll);
GType (gtk_widget_get_type)(void);
GType (gtk_requisition_get_type)(void);
void (gtk_widget_unparent)(GtkWidget *widget);
void (gtk_widget_show)(GtkWidget *widget);
void (gtk_widget_hide)(GtkWidget *widget);
void (gtk_widget_map)(GtkWidget *widget);
void (gtk_widget_unmap)(GtkWidget *widget);
void (gtk_widget_realize)(GtkWidget *widget);
void (gtk_widget_unrealize)(GtkWidget *widget);
void (gtk_widget_queue_draw)(GtkWidget *widget);
void (gtk_widget_queue_resize)(GtkWidget *widget);
void (gtk_widget_queue_allocate)(GtkWidget *widget);
GdkFrameClock* (gtk_widget_get_frame_clock)(GtkWidget *widget);
void (gtk_widget_size_allocate)(GtkWidget *widget, const GtkAllocation *allocation, int baseline);
void (gtk_widget_allocate)(GtkWidget *widget, int width, int height, int baseline, GskTransform *transform);
GtkSizeRequestMode (gtk_widget_get_request_mode)(GtkWidget *widget);
void (gtk_widget_measure)(GtkWidget *widget, GtkOrientation orientation, int for_size, int *minimum, int *natural, int *minimum_baseline, int *natural_baseline);
void (gtk_widget_get_preferred_size)(GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size);
void (gtk_widget_set_layout_manager)(GtkWidget *widget, GtkLayoutManager *layout_manager);
GtkLayoutManager * (gtk_widget_get_layout_manager)(GtkWidget *widget);
void (gtk_widget_class_set_layout_manager_type)(GtkWidgetClass *widget_class, GType type);
GType (gtk_widget_class_get_layout_manager_type)(GtkWidgetClass *widget_class);
void (gtk_widget_class_add_shortcut)(GtkWidgetClass *widget_class, GtkShortcut *shortcut);
void (gtk_widget_class_set_activate_signal)(GtkWidgetClass *widget_class, guint signal_id);
void (gtk_widget_class_set_activate_signal_from_name)(GtkWidgetClass *widget_class, const char *signal_name);
guint (gtk_widget_class_get_activate_signal)(GtkWidgetClass *widget_class);
gboolean (gtk_widget_mnemonic_activate)(GtkWidget *widget, gboolean group_cycling);
gboolean (gtk_widget_activate)(GtkWidget *widget);
void (gtk_widget_set_can_focus)(GtkWidget *widget, gboolean can_focus);
gboolean (gtk_widget_get_can_focus)(GtkWidget *widget);
void (gtk_widget_set_focusable)(GtkWidget *widget, gboolean focusable);
gboolean (gtk_widget_get_focusable)(GtkWidget *widget);
gboolean (gtk_widget_has_focus)(GtkWidget *widget);
gboolean (gtk_widget_is_focus)(GtkWidget *widget);
gboolean (gtk_widget_has_visible_focus)(GtkWidget *widget);
gboolean (gtk_widget_grab_focus)(GtkWidget *widget);
void (gtk_widget_set_focus_on_click)(GtkWidget *widget, gboolean focus_on_click);
gboolean (gtk_widget_get_focus_on_click)(GtkWidget *widget);
void (gtk_widget_set_can_target)(GtkWidget *widget, gboolean can_target);
gboolean (gtk_widget_get_can_target)(GtkWidget *widget);
gboolean (gtk_widget_has_default)(GtkWidget *widget);
void (gtk_widget_set_receives_default)(GtkWidget *widget, gboolean receives_default);
gboolean (gtk_widget_get_receives_default)(GtkWidget *widget);
void (gtk_widget_set_name)(GtkWidget *widget, const char *name);
const char * (gtk_widget_get_name)(GtkWidget *widget);
void (gtk_widget_set_state_flags)(GtkWidget *widget, GtkStateFlags flags, gboolean clear);
void (gtk_widget_unset_state_flags)(GtkWidget *widget, GtkStateFlags flags);
GtkStateFlags (gtk_widget_get_state_flags)(GtkWidget *widget);
void (gtk_widget_set_sensitive)(GtkWidget *widget, gboolean sensitive);
gboolean (gtk_widget_get_sensitive)(GtkWidget *widget);
gboolean (gtk_widget_is_sensitive)(GtkWidget *widget);
void (gtk_widget_set_visible)(GtkWidget *widget, gboolean visible);
gboolean (gtk_widget_get_visible)(GtkWidget *widget);
gboolean (gtk_widget_is_visible)(GtkWidget *widget);
gboolean (gtk_widget_is_drawable)(GtkWidget *widget);
gboolean (gtk_widget_get_realized)(GtkWidget *widget);
gboolean (gtk_widget_get_mapped)(GtkWidget *widget);
void (gtk_widget_set_parent)(GtkWidget *widget, GtkWidget *parent);
GtkWidget * (gtk_widget_get_parent)(GtkWidget *widget);
GtkRoot * (gtk_widget_get_root)(GtkWidget *widget);
GtkNative * (gtk_widget_get_native)(GtkWidget *widget);
void (gtk_widget_set_child_visible)(GtkWidget *widget, gboolean child_visible);
gboolean (gtk_widget_get_child_visible)(GtkWidget *widget);
int (gtk_widget_get_allocated_width)(GtkWidget *widget);
int (gtk_widget_get_allocated_height)(GtkWidget *widget);
int (gtk_widget_get_allocated_baseline)(GtkWidget *widget);
void (gtk_widget_get_allocation)(GtkWidget *widget, GtkAllocation *allocation);
gboolean (gtk_widget_compute_transform)(GtkWidget *widget, GtkWidget *target, graphene_matrix_t *out_transform);
gboolean (gtk_widget_compute_bounds)(GtkWidget *widget, GtkWidget *target, graphene_rect_t *out_bounds);
gboolean (gtk_widget_compute_point)(GtkWidget *widget, GtkWidget *target, const graphene_point_t *point, graphene_point_t *out_point);
int (gtk_widget_get_width)(GtkWidget *widget);
int (gtk_widget_get_height)(GtkWidget *widget);
int (gtk_widget_get_baseline)(GtkWidget *widget);
int (gtk_widget_get_size)(GtkWidget *widget, GtkOrientation orientation);
gboolean (gtk_widget_child_focus)(GtkWidget *widget, GtkDirectionType direction);
gboolean (gtk_widget_keynav_failed)(GtkWidget *widget, GtkDirectionType direction);
void (gtk_widget_error_bell)(GtkWidget *widget);
void (gtk_widget_set_size_request)(GtkWidget *widget, int width, int height);
void (gtk_widget_get_size_request)(GtkWidget *widget, int *width, int *height);
void (gtk_widget_set_opacity)(GtkWidget *widget, double opacity);
double (gtk_widget_get_opacity)(GtkWidget *widget);
void (gtk_widget_set_overflow)(GtkWidget *widget, GtkOverflow overflow);
GtkOverflow (gtk_widget_get_overflow)(GtkWidget *widget);
GtkWidget* (gtk_widget_get_ancestor)(GtkWidget *widget, GType widget_type);
int (gtk_widget_get_scale_factor)(GtkWidget *widget);
GdkDisplay * (gtk_widget_get_display)(GtkWidget *widget);
GtkSettings* (gtk_widget_get_settings)(GtkWidget *widget);
GdkClipboard* (gtk_widget_get_clipboard)(GtkWidget *widget);
GdkClipboard* (gtk_widget_get_primary_clipboard)(GtkWidget *widget);
gboolean (gtk_widget_get_hexpand)(GtkWidget *widget);
void (gtk_widget_set_hexpand)(GtkWidget *widget, gboolean expand);
gboolean (gtk_widget_get_hexpand_set)(GtkWidget *widget);
void (gtk_widget_set_hexpand_set)(GtkWidget *widget, gboolean set);
gboolean (gtk_widget_get_vexpand)(GtkWidget *widget);
void (gtk_widget_set_vexpand)(GtkWidget *widget, gboolean expand);
gboolean (gtk_widget_get_vexpand_set)(GtkWidget *widget);
void (gtk_widget_set_vexpand_set)(GtkWidget *widget, gboolean set);
gboolean (gtk_widget_compute_expand)(GtkWidget *widget, GtkOrientation orientation);
GtkAlign (gtk_widget_get_halign)(GtkWidget *widget);
void (gtk_widget_set_halign)(GtkWidget *widget, GtkAlign align);
GtkAlign (gtk_widget_get_valign)(GtkWidget *widget);
void (gtk_widget_set_valign)(GtkWidget *widget, GtkAlign align);
int (gtk_widget_get_margin_start)(GtkWidget *widget);
void (gtk_widget_set_margin_start)(GtkWidget *widget, int margin);
int (gtk_widget_get_margin_end)(GtkWidget *widget);
void (gtk_widget_set_margin_end)(GtkWidget *widget, int margin);
int (gtk_widget_get_margin_top)(GtkWidget *widget);
void (gtk_widget_set_margin_top)(GtkWidget *widget, int margin);
int (gtk_widget_get_margin_bottom)(GtkWidget *widget);
void (gtk_widget_set_margin_bottom)(GtkWidget *widget, int margin);
gboolean (gtk_widget_is_ancestor)(GtkWidget *widget, GtkWidget *ancestor);
gboolean (gtk_widget_translate_coordinates)(GtkWidget *src_widget, GtkWidget *dest_widget, double src_x, double src_y, double *dest_x, double *dest_y);
gboolean (gtk_widget_contains)(GtkWidget *widget, double x, double y);
GtkWidget * (gtk_widget_pick)(GtkWidget *widget, double x, double y, GtkPickFlags flags);
void (gtk_widget_add_controller)(GtkWidget *widget, GtkEventController *controller);
void (gtk_widget_remove_controller)(GtkWidget *widget, GtkEventController *controller);
PangoContext* (gtk_widget_create_pango_context)(GtkWidget *widget);
PangoContext* (gtk_widget_get_pango_context)(GtkWidget *widget);
void (gtk_widget_set_font_options)(GtkWidget *widget, const cairo_font_options_t *options);
const cairo_font_options_t* (gtk_widget_get_font_options)(GtkWidget *widget);
PangoLayout* (gtk_widget_create_pango_layout)(GtkWidget *widget, const char *text);
void (gtk_widget_set_direction)(GtkWidget *widget, GtkTextDirection dir);
GtkTextDirection (gtk_widget_get_direction)(GtkWidget *widget);
void (gtk_widget_set_default_direction)(GtkTextDirection dir);
GtkTextDirection (gtk_widget_get_default_direction)(void);
void (gtk_widget_set_cursor)(GtkWidget *widget, GdkCursor *cursor);
void (gtk_widget_set_cursor_from_name)(GtkWidget *widget, const char *name);
GdkCursor * (gtk_widget_get_cursor)(GtkWidget *widget);
GList* (gtk_widget_list_mnemonic_labels)(GtkWidget *widget);
void (gtk_widget_add_mnemonic_label)(GtkWidget *widget, GtkWidget *label);
void (gtk_widget_remove_mnemonic_label)(GtkWidget *widget, GtkWidget *label);
void (gtk_widget_trigger_tooltip_query)(GtkWidget *widget);
void (gtk_widget_set_tooltip_text)(GtkWidget *widget, const char *text);
const char * (gtk_widget_get_tooltip_text)(GtkWidget *widget);
void (gtk_widget_set_tooltip_markup)(GtkWidget *widget, const char *markup);
const char * (gtk_widget_get_tooltip_markup)(GtkWidget *widget);
void (gtk_widget_set_has_tooltip)(GtkWidget *widget, gboolean has_tooltip);
gboolean (gtk_widget_get_has_tooltip)(GtkWidget *widget);
GtkRequisition* (gtk_requisition_new)(void);
GtkRequisition* (gtk_requisition_copy)(const GtkRequisition *requisition);
void (gtk_requisition_free)(GtkRequisition *requisition);
gboolean (gtk_widget_in_destruction)(GtkWidget *widget);
GtkStyleContext * (gtk_widget_get_style_context)(GtkWidget *widget);
void (gtk_widget_class_set_css_name)(GtkWidgetClass *widget_class, const char *name);
const char * (gtk_widget_class_get_css_name)(GtkWidgetClass *widget_class);
guint (gtk_widget_add_tick_callback)(GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify);
void (gtk_widget_remove_tick_callback)(GtkWidget *widget, guint id);
void (gtk_widget_init_template)(GtkWidget *widget);
GObject* (gtk_widget_get_template_child)(GtkWidget *widget, GType widget_type, const char *name);
void (gtk_widget_dispose_template)(GtkWidget *widget, GType widget_type);
void (gtk_widget_class_set_template)(GtkWidgetClass *widget_class, GBytes *template_bytes);
void (gtk_widget_class_set_template_from_resource)(GtkWidgetClass *widget_class, const char *resource_name);
void (gtk_widget_class_bind_template_callback_full)(GtkWidgetClass *widget_class, const char *callback_name, GCallback callback_symbol);
void (gtk_widget_class_set_template_scope)(GtkWidgetClass *widget_class, GtkBuilderScope *scope);
void (gtk_widget_class_bind_template_child_full)(GtkWidgetClass *widget_class, const char *name, gboolean internal_child, gssize struct_offset);
void (gtk_widget_insert_action_group)(GtkWidget *widget, const char *name, GActionGroup *group);
gboolean (gtk_widget_activate_action_variant)(GtkWidget *widget, const char *name, GVariant *args);
void (gtk_widget_activate_default)(GtkWidget *widget);
void (gtk_widget_set_font_map)(GtkWidget *widget, PangoFontMap *font_map);
PangoFontMap * (gtk_widget_get_font_map)(GtkWidget *widget);
GtkWidget * (gtk_widget_get_first_child)(GtkWidget *widget);
GtkWidget * (gtk_widget_get_last_child)(GtkWidget *widget);
GtkWidget * (gtk_widget_get_next_sibling)(GtkWidget *widget);
GtkWidget * (gtk_widget_get_prev_sibling)(GtkWidget *widget);
GListModel * (gtk_widget_observe_children)(GtkWidget *widget);
GListModel * (gtk_widget_observe_controllers)(GtkWidget *widget);
void (gtk_widget_insert_after)(GtkWidget *widget, GtkWidget *parent, GtkWidget *previous_sibling);
void (gtk_widget_insert_before)(GtkWidget *widget, GtkWidget *parent, GtkWidget *next_sibling);
void (gtk_widget_set_focus_child)(GtkWidget *widget, GtkWidget *child);
GtkWidget * (gtk_widget_get_focus_child)(GtkWidget *widget);
void (gtk_widget_snapshot_child)(GtkWidget *widget, GtkWidget *child, GtkSnapshot *snapshot);
gboolean (gtk_widget_should_layout)(GtkWidget *widget);
const char * (gtk_widget_get_css_name)(GtkWidget *self);
void (gtk_widget_add_css_class)(GtkWidget *widget, const char *css_class);
void (gtk_widget_remove_css_class)(GtkWidget *widget, const char *css_class);
gboolean (gtk_widget_has_css_class)(GtkWidget *widget, const char *css_class);
char ** (gtk_widget_get_css_classes)(GtkWidget *widget);
void (gtk_widget_set_css_classes)(GtkWidget *widget, const char **classes);
void (gtk_widget_get_color)(GtkWidget *widget, GdkRGBA *color);
void (gtk_widget_class_install_action)(GtkWidgetClass *widget_class, const char *action_name, const char *parameter_type, GtkWidgetActionActivateFunc activate);
void (gtk_widget_class_install_property_action)(GtkWidgetClass *widget_class, const char *action_name, const char *property_name);
gboolean (gtk_widget_class_query_action)(GtkWidgetClass *widget_class, guint index_, GType *owner, const char **action_name, const GVariantType **parameter_type, const char **property_name);
void (gtk_widget_action_set_enabled)(GtkWidget *widget, const char *action_name, gboolean enabled);
void (gtk_widget_class_set_accessible_role)(GtkWidgetClass *widget_class, GtkAccessibleRole accessible_role);
GtkAccessibleRole (gtk_widget_class_get_accessible_role)(GtkWidgetClass *widget_class);
GType (gtk_widget_paintable_get_type)(void);
GdkPaintable * (gtk_widget_paintable_new)(GtkWidget *widget);
GtkWidget * (gtk_widget_paintable_get_widget)(GtkWidgetPaintable *self);
void (gtk_widget_paintable_set_widget)(GtkWidgetPaintable *self, GtkWidget *widget);
GType (gtk_window_get_type)(void);
GtkWidget* (gtk_window_new)(void);
void (gtk_window_set_title)(GtkWindow *window, const char *title);
const char * (gtk_window_get_title)(GtkWindow *window);
void (gtk_window_set_startup_id)(GtkWindow *window, const char *startup_id);
void (gtk_window_set_focus)(GtkWindow *window, GtkWidget *focus);
GtkWidget* (gtk_window_get_focus)(GtkWindow *window);
void (gtk_window_set_default_widget)(GtkWindow *window, GtkWidget *default_widget);
GtkWidget* (gtk_window_get_default_widget)(GtkWindow *window);
void (gtk_window_set_transient_for)(GtkWindow *window, GtkWindow *parent);
GtkWindow* (gtk_window_get_transient_for)(GtkWindow *window);
void (gtk_window_set_destroy_with_parent)(GtkWindow *window, gboolean setting);
gboolean (gtk_window_get_destroy_with_parent)(GtkWindow *window);
void (gtk_window_set_hide_on_close)(GtkWindow *window, gboolean setting);
gboolean (gtk_window_get_hide_on_close)(GtkWindow *window);
void (gtk_window_set_mnemonics_visible)(GtkWindow *window, gboolean setting);
gboolean (gtk_window_get_mnemonics_visible)(GtkWindow *window);
void (gtk_window_set_focus_visible)(GtkWindow *window, gboolean setting);
gboolean (gtk_window_get_focus_visible)(GtkWindow *window);
void (gtk_window_set_resizable)(GtkWindow *window, gboolean resizable);
gboolean (gtk_window_get_resizable)(GtkWindow *window);
void (gtk_window_set_display)(GtkWindow *window, GdkDisplay *display);
gboolean (gtk_window_is_active)(GtkWindow *window);
void (gtk_window_set_decorated)(GtkWindow *window, gboolean setting);
gboolean (gtk_window_get_decorated)(GtkWindow *window);
void (gtk_window_set_deletable)(GtkWindow *window, gboolean setting);
gboolean (gtk_window_get_deletable)(GtkWindow *window);
void (gtk_window_set_icon_name)(GtkWindow *window, const char *name);
const char * (gtk_window_get_icon_name)(GtkWindow *window);
void (gtk_window_set_default_icon_name)(const char *name);
const char * (gtk_window_get_default_icon_name)(void);
void (gtk_window_set_auto_startup_notification)(gboolean setting);
void (gtk_window_set_modal)(GtkWindow *window, gboolean modal);
gboolean (gtk_window_get_modal)(GtkWindow *window);
GListModel* (gtk_window_get_toplevels)(void);
GList* (gtk_window_list_toplevels)(void);
void (gtk_window_present)(GtkWindow *window);
void (gtk_window_present_with_time)(GtkWindow *window, guint32 timestamp);
void (gtk_window_minimize)(GtkWindow *window);
void (gtk_window_unminimize)(GtkWindow *window);
void (gtk_window_maximize)(GtkWindow *window);
void (gtk_window_unmaximize)(GtkWindow *window);
void (gtk_window_fullscreen)(GtkWindow *window);
void (gtk_window_unfullscreen)(GtkWindow *window);
void (gtk_window_fullscreen_on_monitor)(GtkWindow *window, GdkMonitor *monitor);
void (gtk_window_close)(GtkWindow *window);
void (gtk_window_set_default_size)(GtkWindow *window, int width, int height);
void (gtk_window_get_default_size)(GtkWindow *window, int *width, int *height);
GtkWindowGroup* (gtk_window_get_group)(GtkWindow *window);
gboolean (gtk_window_has_group)(GtkWindow *window);
GtkApplication* (gtk_window_get_application)(GtkWindow *window);
void (gtk_window_set_application)(GtkWindow *window, GtkApplication *application);
void (gtk_window_set_child)(GtkWindow *window, GtkWidget *child);
GtkWidget* (gtk_window_get_child)(GtkWindow *window);
void (gtk_window_set_titlebar)(GtkWindow *window, GtkWidget *titlebar);
GtkWidget* (gtk_window_get_titlebar)(GtkWindow *window);
gboolean (gtk_window_is_maximized)(GtkWindow *window);
gboolean (gtk_window_is_fullscreen)(GtkWindow *window);
gboolean (gtk_window_is_suspended)(GtkWindow *window);
void (gtk_window_destroy)(GtkWindow *window);
void (gtk_window_set_interactive_debugging)(gboolean enable);
void (gtk_window_set_handle_menubar_accel)(GtkWindow *window, gboolean handle_menubar_accel);
gboolean (gtk_window_get_handle_menubar_accel)(GtkWindow *window);
GType (gtk_window_controls_get_type)(void);
GtkWidget * (gtk_window_controls_new)(GtkPackType side);
GtkPackType (gtk_window_controls_get_side)(GtkWindowControls *self);
void (gtk_window_controls_set_side)(GtkWindowControls *self, GtkPackType side);
const char * (gtk_window_controls_get_decoration_layout)(GtkWindowControls *self);
void (gtk_window_controls_set_decoration_layout)(GtkWindowControls *self, const char *layout);
gboolean (gtk_window_controls_get_empty)(GtkWindowControls *self);
GType (gtk_window_group_get_type)(void);
GtkWindowGroup * (gtk_window_group_new)(void);
void (gtk_window_group_add_window)(GtkWindowGroup *window_group, GtkWindow *window);
void (gtk_window_group_remove_window)(GtkWindowGroup *window_group, GtkWindow *window);
GList * (gtk_window_group_list_windows)(GtkWindowGroup *window_group);
GType (gtk_window_handle_get_type)(void);
GtkWidget * (gtk_window_handle_new)(void);
GtkWidget * (gtk_window_handle_get_child)(GtkWindowHandle *self);
void (gtk_window_handle_set_child)(GtkWindowHandle *self, GtkWidget *child);
GType (gdk_broadway_cursor_get_type)(void);
GType (gdk_broadway_display_get_type)(void);
void (gdk_broadway_display_show_keyboard)(GdkBroadwayDisplay *display);
void (gdk_broadway_display_hide_keyboard)(GdkBroadwayDisplay *display);
int (gdk_broadway_display_get_surface_scale)(GdkDisplay *display);
void (gdk_broadway_display_set_surface_scale)(GdkDisplay *display, int scale);
GType (gdk_broadway_monitor_get_type)(void);
GType (gdk_broadway_surface_get_type)(void);
GType (gdk_wayland_device_get_type)(void);
struct wl_seat* (gdk_wayland_device_get_wl_seat)(GdkDevice *device);
struct wl_pointer* (gdk_wayland_device_get_wl_pointer)(GdkDevice *device);
struct wl_keyboard* (gdk_wayland_device_get_wl_keyboard)(GdkDevice *device);
struct xkb_keymap* (gdk_wayland_device_get_xkb_keymap)(GdkDevice *device);
const char* (gdk_wayland_device_get_node_path)(GdkDevice *device);
GType (gdk_wayland_display_get_type)(void);
struct wl_display* (gdk_wayland_display_get_wl_display)(GdkDisplay *display);
struct wl_compositor* (gdk_wayland_display_get_wl_compositor)(GdkDisplay *display);
void (gdk_wayland_display_set_cursor_theme)(GdkDisplay *display, const char *name, int size);
const char * (gdk_wayland_display_get_startup_notification_id)(GdkDisplay *display);
void (gdk_wayland_display_set_startup_notification_id)(GdkDisplay *display, const char *startup_id);
gboolean (gdk_wayland_display_query_registry)(GdkDisplay *display, const char *global);
gpointer (gdk_wayland_display_get_egl_display)(GdkDisplay *display);
GType (gdk_wayland_gl_context_get_type)(void);
GType (gdk_wayland_monitor_get_type)(void);
struct wl_output* (gdk_wayland_monitor_get_wl_output)(GdkMonitor *monitor);
GType (gdk_wayland_popup_get_type)(void);
GType (gdk_wayland_seat_get_type)(void);
struct wl_seat * (gdk_wayland_seat_get_wl_seat)(GdkSeat *seat);
GType (gdk_wayland_surface_get_type)(void);
struct wl_surface* (gdk_wayland_surface_get_wl_surface)(GdkSurface *surface);
GType (gdk_wayland_toplevel_get_type)(void);
gboolean (gdk_wayland_toplevel_export_handle)(GdkToplevel *toplevel, GdkWaylandToplevelExported callback, gpointer user_data, GDestroyNotify destroy_func);
void (gdk_wayland_toplevel_unexport_handle)(GdkToplevel *toplevel);
void (gdk_wayland_toplevel_drop_exported_handle)(GdkToplevel *toplevel, const char *handle);
gboolean (gdk_wayland_toplevel_set_transient_for_exported)(GdkToplevel *toplevel, const char *parent_handle_str);
void (gdk_wayland_toplevel_set_application_id)(GdkToplevel *toplevel, const char *application_id);
GType (gdk_x11_app_launch_context_get_type)(void);
GType (gdk_x11_device_xi2_get_type)(void);
int (gdk_x11_device_get_id)(GdkDevice *device);
GType (gdk_x11_device_manager_xi2_get_type)(void);
GdkDevice * (gdk_x11_device_manager_lookup)(GdkX11DeviceManagerXI2 *device_manager, int device_id);
GType (gdk_x11_display_get_type)(void);
GdkDisplay * (gdk_x11_display_open)(const char *display_name);
Display * (gdk_x11_display_get_xdisplay)(GdkDisplay *display);
Screen * (gdk_x11_display_get_xscreen)(GdkDisplay *display);
Window (gdk_x11_display_get_xrootwindow)(GdkDisplay *display);
Cursor (gdk_x11_display_get_xcursor)(GdkDisplay *display, GdkCursor *cursor);
guint32 (gdk_x11_display_get_user_time)(GdkDisplay *display);
const char * (gdk_x11_display_get_startup_notification_id)(GdkDisplay *display);
void (gdk_x11_display_set_startup_notification_id)(GdkDisplay *display, const char *startup_id);
void (gdk_x11_display_set_program_class)(GdkDisplay *display, const char *program_class);
void (gdk_x11_display_set_cursor_theme)(GdkDisplay *display, const char *theme, const int size);
GdkDisplay* (gdk_x11_lookup_xdisplay)(Display *xdisplay);
GdkX11Screen* (gdk_x11_display_get_screen)(GdkDisplay *display);
GdkMonitor * (gdk_x11_display_get_primary_monitor)(GdkDisplay *display);
void (gdk_x11_display_grab)(GdkDisplay *display);
void (gdk_x11_display_ungrab)(GdkDisplay *display);
void (gdk_x11_display_set_surface_scale)(GdkDisplay *display, int scale);
void (gdk_x11_display_error_trap_push)(GdkDisplay *display);
int (gdk_x11_display_error_trap_pop)(GdkDisplay *display);
void (gdk_x11_display_error_trap_pop_ignored)(GdkDisplay *display);
void (gdk_x11_set_sm_client_id)(const char *sm_client_id);
GdkSurface * (gdk_x11_display_get_default_group)(GdkDisplay *display);
GType (gdk_x11_drag_get_type)(void);
GType (gdk_x11_gl_context_get_type)(void);
gboolean (gdk_x11_display_get_glx_version)(GdkDisplay *display, int *major, int *minor);
gboolean (gdk_x11_display_get_egl_version)(GdkDisplay *display, int *major, int *minor);
gpointer (gdk_x11_display_get_egl_display)(GdkDisplay *display);
GType (gdk_x11_monitor_get_type)(void);
XID (gdk_x11_monitor_get_output)(GdkMonitor *monitor);
void (gdk_x11_monitor_get_workarea)(GdkMonitor *monitor, GdkRectangle *workarea);
const char * (gdk_x11_get_xatom_name_for_display)(GdkDisplay *display, Atom xatom);
Atom (gdk_x11_get_xatom_by_name_for_display)(GdkDisplay *display, const char *atom_name);
GType (gdk_x11_screen_get_type)(void);
Screen * (gdk_x11_screen_get_xscreen)(GdkX11Screen *screen);
int (gdk_x11_screen_get_screen_number)(GdkX11Screen *screen);
const char* (gdk_x11_screen_get_window_manager_name)(GdkX11Screen *screen);
gboolean (gdk_x11_screen_supports_net_wm_hint)(GdkX11Screen *screen, const char *property_name);
XID (gdk_x11_screen_get_monitor_output)(GdkX11Screen *screen, int monitor_num);
guint32 (gdk_x11_screen_get_number_of_desktops)(GdkX11Screen *screen);
guint32 (gdk_x11_screen_get_current_desktop)(GdkX11Screen *screen);
void (gdk_x11_free_text_list)(char **list);
int (gdk_x11_display_string_to_compound_text)(GdkDisplay *display, const char *str, const char **encoding, int *format, guchar **ctext, int *length);
gboolean (gdk_x11_display_utf8_to_compound_text)(GdkDisplay *display, const char *str, const char **encoding, int *format, guchar **ctext, int *length);
void (gdk_x11_free_compound_text)(guchar *ctext);
int (gdk_x11_display_text_property_to_text_list)(GdkDisplay *display, const char *encoding, int format, const guchar *text, int length, char ***list);
GType (gdk_x11_surface_get_type)(void);
Window (gdk_x11_surface_get_xid)(GdkSurface *surface);
void (gdk_x11_surface_set_user_time)(GdkSurface *surface, guint32 timestamp);
void (gdk_x11_surface_set_utf8_property)(GdkSurface *surface, const char *name, const char *value);
void (gdk_x11_surface_set_theme_variant)(GdkSurface *surface, const char *variant);
void (gdk_x11_surface_move_to_current_desktop)(GdkSurface *surface);
guint32 (gdk_x11_surface_get_desktop)(GdkSurface *surface);
void (gdk_x11_surface_move_to_desktop)(GdkSurface *surface, guint32 desktop);
void (gdk_x11_surface_set_frame_sync_enabled)(GdkSurface *surface, gboolean frame_sync_enabled);
guint32 (gdk_x11_get_server_time)(GdkSurface *surface);
GdkSurface* (gdk_x11_surface_lookup_for_display)(GdkDisplay *display, Window window);
void (gdk_x11_surface_set_skip_taskbar_hint)(GdkSurface *surface, gboolean skips_taskbar);
void (gdk_x11_surface_set_skip_pager_hint)(GdkSurface *surface, gboolean skips_pager);
void (gdk_x11_surface_set_urgency_hint)(GdkSurface *surface, gboolean urgent);
void (gdk_x11_surface_set_group)(GdkSurface *surface, GdkSurface *leader);
GdkSurface * (gdk_x11_surface_get_group)(GdkSurface *surface);
GdkPixbuf* (gdk_pixbuf_get_from_texture)(GdkTexture *texture);
GdkPixbuf* (gdk_pixbuf_get_from_surface)(cairo_surface_t *surface, int src_x, int src_y, int width, int height);
GType (gdk_app_launch_context_get_type)(void);
GdkDisplay * (gdk_app_launch_context_get_display)(GdkAppLaunchContext *context);
void (gdk_app_launch_context_set_desktop)(GdkAppLaunchContext *context, int desktop);
void (gdk_app_launch_context_set_timestamp)(GdkAppLaunchContext *context, guint32 timestamp);
void (gdk_app_launch_context_set_icon)(GdkAppLaunchContext *context, GIcon *icon);
void (gdk_app_launch_context_set_icon_name)(GdkAppLaunchContext *context, const char *icon_name);
void (gdk_cairo_set_source_pixbuf)(cairo_t *cr, const GdkPixbuf *pixbuf, double pixbuf_x, double pixbuf_y);
void (gdk_cairo_rectangle)(cairo_t *cr, const GdkRectangle *rectangle);
void (gdk_cairo_region)(cairo_t *cr, const cairo_region_t *region);
cairo_region_t * (gdk_cairo_region_create_from_surface)(cairo_surface_t *surface);
void (gdk_cairo_draw_from_gl)(cairo_t *cr, GdkSurface *surface, int source, int source_type, int buffer_scale, int x, int y, int width, int height);
void (gdk_cairo_set_source_rgba)(cairo_t *cr, const GdkRGBA *rgba);
GType (gdk_cairo_context_get_type)(void);
cairo_t * (gdk_cairo_context_cairo_create)(GdkCairoContext *self);
GType (gdk_clipboard_get_type)(void);
GdkDisplay * (gdk_clipboard_get_display)(GdkClipboard *clipboard);
GdkContentFormats * (gdk_clipboard_get_formats)(GdkClipboard *clipboard);
gboolean (gdk_clipboard_is_local)(GdkClipboard *clipboard);
GdkContentProvider * (gdk_clipboard_get_content)(GdkClipboard *clipboard);
void (gdk_clipboard_store_async)(GdkClipboard *clipboard, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gdk_clipboard_store_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
void (gdk_clipboard_read_async)(GdkClipboard *clipboard, const char **mime_types, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GInputStream * (gdk_clipboard_read_finish)(GdkClipboard *clipboard, GAsyncResult *result, const char **out_mime_type, GError **error);
void (gdk_clipboard_read_value_async)(GdkClipboard *clipboard, GType type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
const GValue * (gdk_clipboard_read_value_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
void (gdk_clipboard_read_texture_async)(GdkClipboard *clipboard, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GdkTexture * (gdk_clipboard_read_texture_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
void (gdk_clipboard_read_text_async)(GdkClipboard *clipboard, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (gdk_clipboard_read_text_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
gboolean (gdk_clipboard_set_content)(GdkClipboard *clipboard, GdkContentProvider *provider);
void (gdk_clipboard_set_valist)(GdkClipboard *clipboard, GType type, va_list args);
void (gdk_clipboard_set_value)(GdkClipboard *clipboard, const GValue *value);
void (gdk_clipboard_set_text)(GdkClipboard *clipboard, const char *text);
void (gdk_clipboard_set_texture)(GdkClipboard *clipboard, GdkTexture *texture);
GType (gdk_content_deserializer_get_type)(void);
const char * (gdk_content_deserializer_get_mime_type)(GdkContentDeserializer *deserializer);
GType (gdk_content_deserializer_get_gtype)(GdkContentDeserializer *deserializer);
GValue * (gdk_content_deserializer_get_value)(GdkContentDeserializer *deserializer);
GInputStream * (gdk_content_deserializer_get_input_stream)(GdkContentDeserializer *deserializer);
int (gdk_content_deserializer_get_priority)(GdkContentDeserializer *deserializer);
GCancellable * (gdk_content_deserializer_get_cancellable)(GdkContentDeserializer *deserializer);
gpointer (gdk_content_deserializer_get_user_data)(GdkContentDeserializer *deserializer);
void (gdk_content_deserializer_set_task_data)(GdkContentDeserializer *deserializer, gpointer data, GDestroyNotify notify);
gpointer (gdk_content_deserializer_get_task_data)(GdkContentDeserializer *deserializer);
void (gdk_content_deserializer_return_success)(GdkContentDeserializer *deserializer);
void (gdk_content_deserializer_return_error)(GdkContentDeserializer *deserializer, GError *error);
GdkContentFormats * (gdk_content_formats_union_deserialize_gtypes)(GdkContentFormats *formats);
GdkContentFormats * (gdk_content_formats_union_deserialize_mime_types)(GdkContentFormats *formats);
void (gdk_content_register_deserializer)(const char *mime_type, GType type, GdkContentDeserializeFunc deserialize, gpointer data, GDestroyNotify notify);
void (gdk_content_deserialize_async)(GInputStream *stream, const char *mime_type, GType type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gdk_content_deserialize_finish)(GAsyncResult *result, GValue *value, GError **error);
GType (gdk_content_formats_get_type)(void);
const char * (gdk_intern_mime_type)(const char *string);
GdkContentFormats * (gdk_content_formats_new)(const char **mime_types, guint n_mime_types);
GdkContentFormats * (gdk_content_formats_new_for_gtype)(GType type);
GdkContentFormats * (gdk_content_formats_parse)(const char *string);
GdkContentFormats * (gdk_content_formats_ref)(GdkContentFormats *formats);
void (gdk_content_formats_unref)(GdkContentFormats *formats);
void (gdk_content_formats_print)(GdkContentFormats *formats, GString *string);
char * (gdk_content_formats_to_string)(GdkContentFormats *formats);
const GType * (gdk_content_formats_get_gtypes)(const GdkContentFormats *formats, gsize *n_gtypes);
const char * const * (gdk_content_formats_get_mime_types)(const GdkContentFormats *formats, gsize *n_mime_types);
GdkContentFormats * (gdk_content_formats_union)(GdkContentFormats *first, const GdkContentFormats *second);
gboolean (gdk_content_formats_match)(const GdkContentFormats *first, const GdkContentFormats *second);
GType (gdk_content_formats_match_gtype)(const GdkContentFormats *first, const GdkContentFormats *second);
const char * (gdk_content_formats_match_mime_type)(const GdkContentFormats *first, const GdkContentFormats *second);
gboolean (gdk_content_formats_contain_gtype)(const GdkContentFormats *formats, GType type);
gboolean (gdk_content_formats_contain_mime_type)(const GdkContentFormats *formats, const char *mime_type);
GType (gdk_content_formats_builder_get_type)(void);
GdkContentFormatsBuilder* (gdk_content_formats_builder_new)(void);
GdkContentFormatsBuilder* (gdk_content_formats_builder_ref)(GdkContentFormatsBuilder *builder);
void (gdk_content_formats_builder_unref)(GdkContentFormatsBuilder *builder);
GdkContentFormats * (gdk_content_formats_builder_free_to_formats)(GdkContentFormatsBuilder *builder);
GdkContentFormats * (gdk_content_formats_builder_to_formats)(GdkContentFormatsBuilder *builder);
void (gdk_content_formats_builder_add_formats)(GdkContentFormatsBuilder *builder, const GdkContentFormats *formats);
void (gdk_content_formats_builder_add_mime_type)(GdkContentFormatsBuilder *builder, const char *mime_type);
void (gdk_content_formats_builder_add_gtype)(GdkContentFormatsBuilder *builder, GType type);
GType (gdk_file_list_get_type)(void);
GSList * (gdk_file_list_get_files)(GdkFileList *file_list);
GdkFileList * (gdk_file_list_new_from_list)(GSList *files);
GdkFileList * (gdk_file_list_new_from_array)(GFile **files, gsize n_files);
GType (gdk_content_provider_get_type)(void);
GdkContentFormats * (gdk_content_provider_ref_formats)(GdkContentProvider *provider);
GdkContentFormats * (gdk_content_provider_ref_storable_formats)(GdkContentProvider *provider);
void (gdk_content_provider_content_changed)(GdkContentProvider *provider);
void (gdk_content_provider_write_mime_type_async)(GdkContentProvider *provider, const char *mime_type, GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gdk_content_provider_write_mime_type_finish)(GdkContentProvider *provider, GAsyncResult *result, GError **error);
gboolean (gdk_content_provider_get_value)(GdkContentProvider *provider, GValue *value, GError **error);
GdkContentProvider * (gdk_content_provider_new_union)(GdkContentProvider **providers, gsize n_providers);
GdkContentProvider * (gdk_content_provider_new_for_bytes)(const char *mime_type, GBytes *bytes);
GdkContentProvider * (gdk_content_provider_new_for_value)(const GValue *value);
GType (gdk_content_serializer_get_type)(void);
const char * (gdk_content_serializer_get_mime_type)(GdkContentSerializer *serializer);
GType (gdk_content_serializer_get_gtype)(GdkContentSerializer *serializer);
const GValue * (gdk_content_serializer_get_value)(GdkContentSerializer *serializer);
GOutputStream * (gdk_content_serializer_get_output_stream)(GdkContentSerializer *serializer);
int (gdk_content_serializer_get_priority)(GdkContentSerializer *serializer);
GCancellable * (gdk_content_serializer_get_cancellable)(GdkContentSerializer *serializer);
gpointer (gdk_content_serializer_get_user_data)(GdkContentSerializer *serializer);
void (gdk_content_serializer_set_task_data)(GdkContentSerializer *serializer, gpointer data, GDestroyNotify notify);
gpointer (gdk_content_serializer_get_task_data)(GdkContentSerializer *serializer);
void (gdk_content_serializer_return_success)(GdkContentSerializer *serializer);
void (gdk_content_serializer_return_error)(GdkContentSerializer *serializer, GError *error);
GdkContentFormats * (gdk_content_formats_union_serialize_gtypes)(GdkContentFormats *formats);
GdkContentFormats * (gdk_content_formats_union_serialize_mime_types)(GdkContentFormats *formats);
void (gdk_content_register_serializer)(GType type, const char *mime_type, GdkContentSerializeFunc serialize, gpointer data, GDestroyNotify notify);
void (gdk_content_serialize_async)(GOutputStream *stream, const char *mime_type, const GValue *value, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (gdk_content_serialize_finish)(GAsyncResult *result, GError **error);
GType (gdk_cursor_get_type)(void);
GdkCursor* (gdk_cursor_new_from_texture)(GdkTexture *texture, int hotspot_x, int hotspot_y, GdkCursor *fallback);
GdkCursor* (gdk_cursor_new_from_name)(const char *name, GdkCursor *fallback);
GdkCursor * (gdk_cursor_get_fallback)(GdkCursor *cursor);
const char* (gdk_cursor_get_name)(GdkCursor *cursor);
GdkTexture* (gdk_cursor_get_texture)(GdkCursor *cursor);
int (gdk_cursor_get_hotspot_x)(GdkCursor *cursor);
int (gdk_cursor_get_hotspot_y)(GdkCursor *cursor);
GType (gdk_device_get_type)(void);
const char * (gdk_device_get_name)(GdkDevice *device);
const char * (gdk_device_get_vendor_id)(GdkDevice *device);
const char * (gdk_device_get_product_id)(GdkDevice *device);
GdkDisplay * (gdk_device_get_display)(GdkDevice *device);
GdkSeat * (gdk_device_get_seat)(GdkDevice *device);
GdkDeviceTool * (gdk_device_get_device_tool)(GdkDevice *device);
GdkInputSource (gdk_device_get_source)(GdkDevice *device);
gboolean (gdk_device_get_has_cursor)(GdkDevice *device);
guint (gdk_device_get_num_touches)(GdkDevice *device);
GdkModifierType (gdk_device_get_modifier_state)(GdkDevice *device);
PangoDirection (gdk_device_get_direction)(GdkDevice *device);
gboolean (gdk_device_has_bidi_layouts)(GdkDevice *device);
gboolean (gdk_device_get_caps_lock_state)(GdkDevice *device);
gboolean (gdk_device_get_num_lock_state)(GdkDevice *device);
gboolean (gdk_device_get_scroll_lock_state)(GdkDevice *device);
GdkSurface * (gdk_device_get_surface_at_position)(GdkDevice *device, double *win_x, double *win_y);
guint32 (gdk_device_get_timestamp)(GdkDevice *device);
GType (gdk_device_pad_get_type)(void);
int (gdk_device_pad_get_n_groups)(GdkDevicePad *pad);
int (gdk_device_pad_get_group_n_modes)(GdkDevicePad *pad, int group_idx);
int (gdk_device_pad_get_n_features)(GdkDevicePad *pad, GdkDevicePadFeature feature);
int (gdk_device_pad_get_feature_group)(GdkDevicePad *pad, GdkDevicePadFeature feature, int feature_idx);
GType (gdk_device_tool_get_type)(void);
guint64 (gdk_device_tool_get_serial)(GdkDeviceTool *tool);
guint64 (gdk_device_tool_get_hardware_id)(GdkDeviceTool *tool);
GdkDeviceToolType (gdk_device_tool_get_tool_type)(GdkDeviceTool *tool);
GdkAxisFlags (gdk_device_tool_get_axes)(GdkDeviceTool *tool);
GType (gdk_display_get_type)(void);
GdkDisplay* (gdk_display_open)(const char *display_name);
const char * (gdk_display_get_name)(GdkDisplay *display);
gboolean (gdk_display_device_is_grabbed)(GdkDisplay *display, GdkDevice *device);
void (gdk_display_beep)(GdkDisplay *display);
void (gdk_display_sync)(GdkDisplay *display);
void (gdk_display_flush)(GdkDisplay *display);
void (gdk_display_close)(GdkDisplay *display);
gboolean (gdk_display_is_closed)(GdkDisplay *display);
gboolean (gdk_display_is_composited)(GdkDisplay *display);
gboolean (gdk_display_is_rgba)(GdkDisplay *display);
gboolean (gdk_display_supports_shadow_width)(GdkDisplay *display);
gboolean (gdk_display_supports_input_shapes)(GdkDisplay *display);
gboolean (gdk_display_prepare_gl)(GdkDisplay *self, GError **error);
GdkGLContext* (gdk_display_create_gl_context)(GdkDisplay *self, GError **error);
GdkDisplay* (gdk_display_get_default)(void);
GdkClipboard * (gdk_display_get_clipboard)(GdkDisplay *display);
GdkClipboard * (gdk_display_get_primary_clipboard)(GdkDisplay *display);
void (gdk_display_notify_startup_complete)(GdkDisplay *display, const char *startup_id);
const char * (gdk_display_get_startup_notification_id)(GdkDisplay *display);
GdkAppLaunchContext* (gdk_display_get_app_launch_context)(GdkDisplay *display);
GdkSeat * (gdk_display_get_default_seat)(GdkDisplay *display);
GList * (gdk_display_list_seats)(GdkDisplay *display);
GListModel * (gdk_display_get_monitors)(GdkDisplay *self);
GdkMonitor * (gdk_display_get_monitor_at_surface)(GdkDisplay *display, GdkSurface *surface);
void (gdk_display_put_event)(GdkDisplay *display, GdkEvent *event);
gboolean (gdk_display_map_keyval)(GdkDisplay *display, guint keyval, GdkKeymapKey **keys, int *n_keys);
gboolean (gdk_display_map_keycode)(GdkDisplay *display, guint keycode, GdkKeymapKey **keys, guint **keyvals, int *n_entries);
gboolean (gdk_display_translate_key)(GdkDisplay *display, guint keycode, GdkModifierType state, int group, guint *keyval, int *effective_group, int *level, GdkModifierType *consumed);
gboolean (gdk_display_get_setting)(GdkDisplay *display, const char *name, GValue *value);
GdkDmabufFormats * (gdk_display_get_dmabuf_formats)(GdkDisplay *display);
GType (gdk_display_manager_get_type)(void);
GdkDisplayManager* (gdk_display_manager_get)(void);
GdkDisplay * (gdk_display_manager_get_default_display)(GdkDisplayManager *manager);
void (gdk_display_manager_set_default_display)(GdkDisplayManager *manager, GdkDisplay *display);
GSList * (gdk_display_manager_list_displays)(GdkDisplayManager *manager);
GdkDisplay * (gdk_display_manager_open_display)(GdkDisplayManager *manager, const char *name);
void (gdk_set_allowed_backends)(const char *backends);
GType (gdk_dmabuf_formats_get_type)(void);
GdkDmabufFormats * (gdk_dmabuf_formats_ref)(GdkDmabufFormats *formats);
void (gdk_dmabuf_formats_unref)(GdkDmabufFormats *formats);
gsize (gdk_dmabuf_formats_get_n_formats)(GdkDmabufFormats *formats);
void (gdk_dmabuf_formats_get_format)(GdkDmabufFormats *formats, gsize idx, guint32 *fourcc, guint64 *modifier);
gboolean (gdk_dmabuf_formats_contains)(GdkDmabufFormats *formats, guint32 fourcc, guint64 modifier);
gboolean (gdk_dmabuf_formats_equal)(const GdkDmabufFormats *formats1, const GdkDmabufFormats *formats2);
GType (gdk_dmabuf_texture_get_type)(void);
GQuark (gdk_dmabuf_error_quark)(void);
GType (gdk_dmabuf_texture_builder_get_type)(void);
GdkDmabufTextureBuilder* (gdk_dmabuf_texture_builder_new)(void);
GdkDisplay * (gdk_dmabuf_texture_builder_get_display)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_display)(GdkDmabufTextureBuilder *self, GdkDisplay *display);
unsigned int (gdk_dmabuf_texture_builder_get_width)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_width)(GdkDmabufTextureBuilder *self, unsigned int width);
unsigned int (gdk_dmabuf_texture_builder_get_height)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_height)(GdkDmabufTextureBuilder *self, unsigned int height);
guint32 (gdk_dmabuf_texture_builder_get_fourcc)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_fourcc)(GdkDmabufTextureBuilder *self, guint32 fourcc);
guint64 (gdk_dmabuf_texture_builder_get_modifier)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_modifier)(GdkDmabufTextureBuilder *self, guint64 modifier);
gboolean (gdk_dmabuf_texture_builder_get_premultiplied)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_premultiplied)(GdkDmabufTextureBuilder *self, gboolean premultiplied);
unsigned int (gdk_dmabuf_texture_builder_get_n_planes)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_n_planes)(GdkDmabufTextureBuilder *self, unsigned int n_planes);
int (gdk_dmabuf_texture_builder_get_fd)(GdkDmabufTextureBuilder *self, unsigned int plane);
void (gdk_dmabuf_texture_builder_set_fd)(GdkDmabufTextureBuilder *self, unsigned int plane, int fd);
unsigned int (gdk_dmabuf_texture_builder_get_stride)(GdkDmabufTextureBuilder *self, unsigned int plane);
void (gdk_dmabuf_texture_builder_set_stride)(GdkDmabufTextureBuilder *self, unsigned int plane, unsigned int stride);
unsigned int (gdk_dmabuf_texture_builder_get_offset)(GdkDmabufTextureBuilder *self, unsigned int plane);
void (gdk_dmabuf_texture_builder_set_offset)(GdkDmabufTextureBuilder *self, unsigned int plane, unsigned int offset);
GdkTexture * (gdk_dmabuf_texture_builder_get_update_texture)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_update_texture)(GdkDmabufTextureBuilder *self, GdkTexture *texture);
cairo_region_t * (gdk_dmabuf_texture_builder_get_update_region)(GdkDmabufTextureBuilder *self);
void (gdk_dmabuf_texture_builder_set_update_region)(GdkDmabufTextureBuilder *self, cairo_region_t *region);
GdkTexture * (gdk_dmabuf_texture_builder_build)(GdkDmabufTextureBuilder *self, GDestroyNotify destroy, gpointer data, GError **error);
GType (gdk_drag_get_type)(void);
GdkDisplay * (gdk_drag_get_display)(GdkDrag *drag);
GdkDevice * (gdk_drag_get_device)(GdkDrag *drag);
GdkContentFormats* (gdk_drag_get_formats)(GdkDrag *drag);
GdkDragAction (gdk_drag_get_actions)(GdkDrag *drag);
GdkDragAction (gdk_drag_get_selected_action)(GdkDrag *drag);
gboolean (gdk_drag_action_is_unique)(GdkDragAction action);
GdkDrag * (gdk_drag_begin)(GdkSurface *surface, GdkDevice *device, GdkContentProvider *content, GdkDragAction actions, double dx, double dy);
void (gdk_drag_drop_done)(GdkDrag *drag, gboolean success);
GdkSurface* (gdk_drag_get_drag_surface)(GdkDrag *drag);
void (gdk_drag_set_hotspot)(GdkDrag *drag, int hot_x, int hot_y);
GdkContentProvider * (gdk_drag_get_content)(GdkDrag *drag);
GdkSurface * (gdk_drag_get_surface)(GdkDrag *drag);
GType (gdk_drag_surface_get_type)(void);
GType (gdk_drag_surface_size_get_type)(void);
void (gdk_drag_surface_size_set_size)(GdkDragSurfaceSize *size, int width, int height);
GType (gdk_draw_context_get_type)(void);
GdkDisplay * (gdk_draw_context_get_display)(GdkDrawContext *context);
GdkSurface * (gdk_draw_context_get_surface)(GdkDrawContext *context);
void (gdk_draw_context_begin_frame)(GdkDrawContext *context, const cairo_region_t *region);
void (gdk_draw_context_end_frame)(GdkDrawContext *context);
gboolean (gdk_draw_context_is_in_frame)(GdkDrawContext *context);
const cairo_region_t * (gdk_draw_context_get_frame_region)(GdkDrawContext *context);
GType (gdk_drop_get_type)(void);
GdkDisplay * (gdk_drop_get_display)(GdkDrop *self);
GdkDevice * (gdk_drop_get_device)(GdkDrop *self);
GdkSurface * (gdk_drop_get_surface)(GdkDrop *self);
GdkContentFormats * (gdk_drop_get_formats)(GdkDrop *self);
GdkDragAction (gdk_drop_get_actions)(GdkDrop *self);
GdkDrag * (gdk_drop_get_drag)(GdkDrop *self);
void (gdk_drop_status)(GdkDrop *self, GdkDragAction actions, GdkDragAction preferred);
void (gdk_drop_finish)(GdkDrop *self, GdkDragAction action);
void (gdk_drop_read_async)(GdkDrop *self, const char **mime_types, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GInputStream * (gdk_drop_read_finish)(GdkDrop *self, GAsyncResult *result, const char **out_mime_type, GError **error);
void (gdk_drop_read_value_async)(GdkDrop *self, GType type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
const GValue * (gdk_drop_read_value_finish)(GdkDrop *self, GAsyncResult *result, GError **error);
GType (gdk_input_source_get_type)(void);
GType (gdk_device_pad_feature_get_type)(void);
GType (gdk_device_tool_type_get_type)(void);
GType (gdk_drag_cancel_reason_get_type)(void);
GType (gdk_gl_api_get_type)(void);
GType (gdk_gravity_get_type)(void);
GType (gdk_modifier_type_get_type)(void);
GType (gdk_dmabuf_error_get_type)(void);
GType (gdk_gl_error_get_type)(void);
GType (gdk_vulkan_error_get_type)(void);
GType (gdk_axis_use_get_type)(void);
GType (gdk_axis_flags_get_type)(void);
GType (gdk_drag_action_get_type)(void);
GType (gdk_memory_format_get_type)(void);
GType (gdk_event_type_get_type)(void);
GType (gdk_touchpad_gesture_phase_get_type)(void);
GType (gdk_scroll_direction_get_type)(void);
GType (gdk_scroll_unit_get_type)(void);
GType (gdk_notify_type_get_type)(void);
GType (gdk_crossing_mode_get_type)(void);
GType (gdk_key_match_get_type)(void);
GType (gdk_frame_clock_phase_get_type)(void);
GType (gdk_subpixel_layout_get_type)(void);
GType (gdk_paintable_flags_get_type)(void);
GType (gdk_anchor_hints_get_type)(void);
GType (gdk_seat_capabilities_get_type)(void);
GType (gdk_texture_error_get_type)(void);
GType (gdk_surface_edge_get_type)(void);
GType (gdk_fullscreen_mode_get_type)(void);
GType (gdk_toplevel_state_get_type)(void);
GType (gdk_titlebar_gesture_get_type)(void);
GType (gdk_event_get_type)(void);
GType (gdk_event_sequence_get_type)(void);
GType (gdk_button_event_get_type)(void);
GType (gdk_crossing_event_get_type)(void);
GType (gdk_delete_event_get_type)(void);
GType (gdk_dnd_event_get_type)(void);
GType (gdk_focus_event_get_type)(void);
GType (gdk_grab_broken_event_get_type)(void);
GType (gdk_key_event_get_type)(void);
GType (gdk_motion_event_get_type)(void);
GType (gdk_pad_event_get_type)(void);
GType (gdk_proximity_event_get_type)(void);
GType (gdk_scroll_event_get_type)(void);
GType (gdk_touch_event_get_type)(void);
GType (gdk_touchpad_event_get_type)(void);
GdkEvent * (gdk_event_ref)(GdkEvent *event);
void (gdk_event_unref)(GdkEvent *event);
GdkEventType (gdk_event_get_event_type)(GdkEvent *event);
GdkSurface * (gdk_event_get_surface)(GdkEvent *event);
GdkSeat * (gdk_event_get_seat)(GdkEvent *event);
GdkDevice * (gdk_event_get_device)(GdkEvent *event);
GdkDeviceTool * (gdk_event_get_device_tool)(GdkEvent *event);
guint32 (gdk_event_get_time)(GdkEvent *event);
GdkDisplay * (gdk_event_get_display)(GdkEvent *event);
GdkEventSequence * (gdk_event_get_event_sequence)(GdkEvent *event);
GdkModifierType (gdk_event_get_modifier_state)(GdkEvent *event);
gboolean (gdk_event_get_position)(GdkEvent *event, double *x, double *y);
gboolean (gdk_event_get_axes)(GdkEvent *event, double **axes, guint *n_axes);
gboolean (gdk_event_get_axis)(GdkEvent *event, GdkAxisUse axis_use, double *value);
GdkTimeCoord * (gdk_event_get_history)(GdkEvent *event, guint *out_n_coords);
gboolean (gdk_event_get_pointer_emulated)(GdkEvent *event);
guint (gdk_button_event_get_button)(GdkEvent *event);
GdkScrollDirection (gdk_scroll_event_get_direction)(GdkEvent *event);
void (gdk_scroll_event_get_deltas)(GdkEvent *event, double *delta_x, double *delta_y);
GdkScrollUnit (gdk_scroll_event_get_unit)(GdkEvent *event);
gboolean (gdk_scroll_event_is_stop)(GdkEvent *event);
guint (gdk_key_event_get_keyval)(GdkEvent *event);
guint (gdk_key_event_get_keycode)(GdkEvent *event);
GdkModifierType (gdk_key_event_get_consumed_modifiers)(GdkEvent *event);
guint (gdk_key_event_get_layout)(GdkEvent *event);
guint (gdk_key_event_get_level)(GdkEvent *event);
gboolean (gdk_key_event_is_modifier)(GdkEvent *event);
gboolean (gdk_focus_event_get_in)(GdkEvent *event);
gboolean (gdk_touch_event_get_emulating_pointer)(GdkEvent *event);
GdkCrossingMode (gdk_crossing_event_get_mode)(GdkEvent *event);
GdkNotifyType (gdk_crossing_event_get_detail)(GdkEvent *event);
gboolean (gdk_crossing_event_get_focus)(GdkEvent *event);
GdkTouchpadGesturePhase (gdk_touchpad_event_get_gesture_phase)(GdkEvent *event);
guint (gdk_touchpad_event_get_n_fingers)(GdkEvent *event);
void (gdk_touchpad_event_get_deltas)(GdkEvent *event, double *dx, double *dy);
double (gdk_touchpad_event_get_pinch_angle_delta)(GdkEvent *event);
double (gdk_touchpad_event_get_pinch_scale)(GdkEvent *event);
guint (gdk_pad_event_get_button)(GdkEvent *event);
void (gdk_pad_event_get_axis_value)(GdkEvent *event, guint *index, double *value);
void (gdk_pad_event_get_group_mode)(GdkEvent *event, guint *group, guint *mode);
GdkDrop * (gdk_dnd_event_get_drop)(GdkEvent *event);
GdkSurface * (gdk_grab_broken_event_get_grab_surface)(GdkEvent *event);
gboolean (gdk_grab_broken_event_get_implicit)(GdkEvent *event);
gboolean (gdk_event_triggers_context_menu)(GdkEvent *event);
gboolean (gdk_events_get_distance)(GdkEvent *event1, GdkEvent *event2, double *distance);
gboolean (gdk_events_get_angle)(GdkEvent *event1, GdkEvent *event2, double *angle);
gboolean (gdk_events_get_center)(GdkEvent *event1, GdkEvent *event2, double *x, double *y);
GdkKeyMatch (gdk_key_event_matches)(GdkEvent *event, guint keyval, GdkModifierType modifiers);
gboolean (gdk_key_event_get_match)(GdkEvent *event, guint *keyval, GdkModifierType *modifiers);
GType (gdk_frame_clock_get_type)(void);
gint64 (gdk_frame_clock_get_frame_time)(GdkFrameClock *frame_clock);
void (gdk_frame_clock_request_phase)(GdkFrameClock *frame_clock, GdkFrameClockPhase phase);
void (gdk_frame_clock_begin_updating)(GdkFrameClock *frame_clock);
void (gdk_frame_clock_end_updating)(GdkFrameClock *frame_clock);
gint64 (gdk_frame_clock_get_frame_counter)(GdkFrameClock *frame_clock);
gint64 (gdk_frame_clock_get_history_start)(GdkFrameClock *frame_clock);
GdkFrameTimings* (gdk_frame_clock_get_timings)(GdkFrameClock *frame_clock, gint64 frame_counter);
GdkFrameTimings* (gdk_frame_clock_get_current_timings)(GdkFrameClock *frame_clock);
void (gdk_frame_clock_get_refresh_info)(GdkFrameClock *frame_clock, gint64 base_time, gint64 *refresh_interval_return, gint64 *presentation_time_return);
double (gdk_frame_clock_get_fps)(GdkFrameClock *frame_clock);
GdkFrameTimings* (gdk_frame_timings_ref)(GdkFrameTimings *timings);
void (gdk_frame_timings_unref)(GdkFrameTimings *timings);
gint64 (gdk_frame_timings_get_frame_counter)(GdkFrameTimings *timings);
gboolean (gdk_frame_timings_get_complete)(GdkFrameTimings *timings);
gint64 (gdk_frame_timings_get_frame_time)(GdkFrameTimings *timings);
gint64 (gdk_frame_timings_get_presentation_time)(GdkFrameTimings *timings);
gint64 (gdk_frame_timings_get_refresh_interval)(GdkFrameTimings *timings);
gint64 (gdk_frame_timings_get_predicted_presentation_time)(GdkFrameTimings *timings);
GType (gdk_frame_timings_get_type)(void);
GType (gdk_gl_context_get_type)(void);
GQuark (gdk_gl_error_quark)(void);
GdkDisplay * (gdk_gl_context_get_display)(GdkGLContext *context);
GdkSurface * (gdk_gl_context_get_surface)(GdkGLContext *context);
GdkGLContext * (gdk_gl_context_get_shared_context)(GdkGLContext *context);
void (gdk_gl_context_get_version)(GdkGLContext *context, int *major, int *minor);
gboolean (gdk_gl_context_is_legacy)(GdkGLContext *context);
gboolean (gdk_gl_context_is_shared)(GdkGLContext *self, GdkGLContext *other);
void (gdk_gl_context_set_required_version)(GdkGLContext *context, int major, int minor);
void (gdk_gl_context_get_required_version)(GdkGLContext *context, int *major, int *minor);
void (gdk_gl_context_set_debug_enabled)(GdkGLContext *context, gboolean enabled);
gboolean (gdk_gl_context_get_debug_enabled)(GdkGLContext *context);
void (gdk_gl_context_set_forward_compatible)(GdkGLContext *context, gboolean compatible);
gboolean (gdk_gl_context_get_forward_compatible)(GdkGLContext *context);
void (gdk_gl_context_set_allowed_apis)(GdkGLContext *self, GdkGLAPI apis);
GdkGLAPI (gdk_gl_context_get_allowed_apis)(GdkGLContext *self);
GdkGLAPI (gdk_gl_context_get_api)(GdkGLContext *self);
void (gdk_gl_context_set_use_es)(GdkGLContext *context, int use_es);
gboolean (gdk_gl_context_get_use_es)(GdkGLContext *context);
gboolean (gdk_gl_context_realize)(GdkGLContext *context, GError **error);
void (gdk_gl_context_make_current)(GdkGLContext *context);
GdkGLContext * (gdk_gl_context_get_current)(void);
void (gdk_gl_context_clear_current)(void);
GType (gdk_gl_texture_get_type)(void);
GdkTexture * (gdk_gl_texture_new)(GdkGLContext *context, guint id, int width, int height, GDestroyNotify destroy, gpointer data);
void (gdk_gl_texture_release)(GdkGLTexture *self);
GType (gdk_gl_texture_builder_get_type)(void);
GdkGLTextureBuilder * (gdk_gl_texture_builder_new)(void);
GdkGLContext * (gdk_gl_texture_builder_get_context)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_context)(GdkGLTextureBuilder *self, GdkGLContext *context);
guint (gdk_gl_texture_builder_get_id)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_id)(GdkGLTextureBuilder *self, guint id);
int (gdk_gl_texture_builder_get_width)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_width)(GdkGLTextureBuilder *self, int width);
int (gdk_gl_texture_builder_get_height)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_height)(GdkGLTextureBuilder *self, int height);
GdkMemoryFormat (gdk_gl_texture_builder_get_format)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_format)(GdkGLTextureBuilder *self, GdkMemoryFormat format);
gboolean (gdk_gl_texture_builder_get_has_mipmap)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_has_mipmap)(GdkGLTextureBuilder *self, gboolean has_mipmap);
gpointer (gdk_gl_texture_builder_get_sync)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_sync)(GdkGLTextureBuilder *self, gpointer sync);
GdkTexture * (gdk_gl_texture_builder_get_update_texture)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_update_texture)(GdkGLTextureBuilder *self, GdkTexture *texture);
cairo_region_t * (gdk_gl_texture_builder_get_update_region)(GdkGLTextureBuilder *self);
void (gdk_gl_texture_builder_set_update_region)(GdkGLTextureBuilder *self, cairo_region_t *region);
GdkTexture * (gdk_gl_texture_builder_build)(GdkGLTextureBuilder *self, GDestroyNotify destroy, gpointer data);
guint (gdk_keyval_from_name)(const char *keyval_name);
void (gdk_keyval_convert_case)(guint symbol, guint *lower, guint *upper);
guint (gdk_keyval_to_upper)(guint keyval);
guint (gdk_keyval_to_lower)(guint keyval);
gboolean (gdk_keyval_is_upper)(guint keyval);
gboolean (gdk_keyval_is_lower)(guint keyval);
guint32 (gdk_keyval_to_unicode)(guint keyval);
guint (gdk_unicode_to_keyval)(guint32 wc);
const char* (gdk_keyval_name)(guint keyval);
GType (gdk_memory_texture_get_type)(void);
GdkTexture * (gdk_memory_texture_new)(int width, int height, GdkMemoryFormat format, GBytes *bytes, gsize stride);
GType (gdk_monitor_get_type)(void);
GdkDisplay * (gdk_monitor_get_display)(GdkMonitor *monitor);
void (gdk_monitor_get_geometry)(GdkMonitor *monitor, GdkRectangle *geometry);
int (gdk_monitor_get_width_mm)(GdkMonitor *monitor);
int (gdk_monitor_get_height_mm)(GdkMonitor *monitor);
const char * (gdk_monitor_get_manufacturer)(GdkMonitor *monitor);
const char * (gdk_monitor_get_model)(GdkMonitor *monitor);
const char * (gdk_monitor_get_connector)(GdkMonitor *monitor);
int (gdk_monitor_get_scale_factor)(GdkMonitor *monitor);
double (gdk_monitor_get_scale)(GdkMonitor *monitor);
int (gdk_monitor_get_refresh_rate)(GdkMonitor *monitor);
GdkSubpixelLayout (gdk_monitor_get_subpixel_layout)(GdkMonitor *monitor);
gboolean (gdk_monitor_is_valid)(GdkMonitor *monitor);
const char * (gdk_monitor_get_description)(GdkMonitor *monitor);
GType (gdk_paintable_get_type)(void);
GdkPaintable * (gdk_paintable_get_current_image)(GdkPaintable *paintable);
GdkPaintableFlags (gdk_paintable_get_flags)(GdkPaintable *paintable);
int (gdk_paintable_get_intrinsic_width)(GdkPaintable *paintable);
int (gdk_paintable_get_intrinsic_height)(GdkPaintable *paintable);
double (gdk_paintable_get_intrinsic_aspect_ratio)(GdkPaintable *paintable);
void (gdk_paintable_compute_concrete_size)(GdkPaintable *paintable, double specified_width, double specified_height, double default_width, double default_height, double *concrete_width, double *concrete_height);
void (gdk_paintable_invalidate_contents)(GdkPaintable *paintable);
void (gdk_paintable_invalidate_size)(GdkPaintable *paintable);
GdkPaintable * (gdk_paintable_new_empty)(int intrinsic_width, int intrinsic_height);
cairo_region_t* (gdk_pango_layout_get_clip_region)(PangoLayout *layout, int x_origin, int y_origin, const int *index_ranges, int n_ranges);
cairo_region_t* (gdk_pango_layout_line_get_clip_region)(PangoLayoutLine *line, int x_origin, int y_origin, const int *index_ranges, int n_ranges);
GType (gdk_popup_get_type)(void);
GdkGravity (gdk_popup_get_surface_anchor)(GdkPopup *popup);
GdkGravity (gdk_popup_get_rect_anchor)(GdkPopup *popup);
GdkSurface * (gdk_popup_get_parent)(GdkPopup *popup);
int (gdk_popup_get_position_x)(GdkPopup *popup);
int (gdk_popup_get_position_y)(GdkPopup *popup);
gboolean (gdk_popup_get_autohide)(GdkPopup *popup);
GType (gdk_popup_layout_get_type)(void);
GdkPopupLayout * (gdk_popup_layout_new)(const GdkRectangle *anchor_rect, GdkGravity rect_anchor, GdkGravity surface_anchor);
GdkPopupLayout * (gdk_popup_layout_ref)(GdkPopupLayout *layout);
void (gdk_popup_layout_unref)(GdkPopupLayout *layout);
GdkPopupLayout * (gdk_popup_layout_copy)(GdkPopupLayout *layout);
gboolean (gdk_popup_layout_equal)(GdkPopupLayout *layout, GdkPopupLayout *other);
void (gdk_popup_layout_set_anchor_rect)(GdkPopupLayout *layout, const GdkRectangle *anchor_rect);
const GdkRectangle * (gdk_popup_layout_get_anchor_rect)(GdkPopupLayout *layout);
void (gdk_popup_layout_set_rect_anchor)(GdkPopupLayout *layout, GdkGravity anchor);
GdkGravity (gdk_popup_layout_get_rect_anchor)(GdkPopupLayout *layout);
void (gdk_popup_layout_set_surface_anchor)(GdkPopupLayout *layout, GdkGravity anchor);
GdkGravity (gdk_popup_layout_get_surface_anchor)(GdkPopupLayout *layout);
void (gdk_popup_layout_set_anchor_hints)(GdkPopupLayout *layout, GdkAnchorHints anchor_hints);
GdkAnchorHints (gdk_popup_layout_get_anchor_hints)(GdkPopupLayout *layout);
void (gdk_popup_layout_set_offset)(GdkPopupLayout *layout, int dx, int dy);
void (gdk_popup_layout_get_offset)(GdkPopupLayout *layout, int *dx, int *dy);
void (gdk_popup_layout_set_shadow_width)(GdkPopupLayout *layout, int left, int right, int top, int bottom);
void (gdk_popup_layout_get_shadow_width)(GdkPopupLayout *layout, int *left, int *right, int *top, int *bottom);
void (gdk_rectangle_union)(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);
gboolean (gdk_rectangle_equal)(const GdkRectangle *rect1, const GdkRectangle *rect2);
gboolean (gdk_rectangle_contains_point)(const GdkRectangle *rect, int x, int y);
GType (gdk_rectangle_get_type)(void);
gboolean (gdk_rectangle_intersect)(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);
GType (gdk_rgba_get_type)(void);
GdkRGBA * (gdk_rgba_copy)(const GdkRGBA *rgba);
void (gdk_rgba_free)(GdkRGBA *rgba);
gboolean (gdk_rgba_is_clear)(const GdkRGBA *rgba);
gboolean (gdk_rgba_is_opaque)(const GdkRGBA *rgba);
guint (gdk_rgba_hash)(gconstpointer p);
gboolean (gdk_rgba_equal)(gconstpointer p1, gconstpointer p2);
gboolean (gdk_rgba_parse)(GdkRGBA *rgba, const char *spec);
char * (gdk_rgba_to_string)(const GdkRGBA *rgba);
GType (gdk_seat_get_type)(void);
GdkDisplay * (gdk_seat_get_display)(GdkSeat *seat);
GdkSeatCapabilities (gdk_seat_get_capabilities)(GdkSeat *seat);
GList * (gdk_seat_get_devices)(GdkSeat *seat, GdkSeatCapabilities capabilities);
GList * (gdk_seat_get_tools)(GdkSeat *seat);
GdkDevice * (gdk_seat_get_pointer)(GdkSeat *seat);
GdkDevice * (gdk_seat_get_keyboard)(GdkSeat *seat);
GType (gdk_snapshot_get_type)(void);
GType (gdk_surface_get_type)(void);
GdkSurface * (gdk_surface_new_toplevel)(GdkDisplay *display);
GdkSurface * (gdk_surface_new_popup)(GdkSurface *parent, gboolean autohide);
void (gdk_surface_destroy)(GdkSurface *surface);
gboolean (gdk_surface_is_destroyed)(GdkSurface *surface);
GdkDisplay * (gdk_surface_get_display)(GdkSurface *surface);
void (gdk_surface_hide)(GdkSurface *surface);
void (gdk_surface_set_input_region)(GdkSurface *surface, cairo_region_t *region);
gboolean (gdk_surface_get_mapped)(GdkSurface *surface);
void (gdk_surface_set_cursor)(GdkSurface *surface, GdkCursor *cursor);
GdkCursor* (gdk_surface_get_cursor)(GdkSurface *surface);
void (gdk_surface_set_device_cursor)(GdkSurface *surface, GdkDevice *device, GdkCursor *cursor);
GdkCursor* (gdk_surface_get_device_cursor)(GdkSurface *surface, GdkDevice *device);
int (gdk_surface_get_width)(GdkSurface *surface);
int (gdk_surface_get_height)(GdkSurface *surface);
gboolean (gdk_surface_translate_coordinates)(GdkSurface *from, GdkSurface *to, double *x, double *y);
int (gdk_surface_get_scale_factor)(GdkSurface *surface);
double (gdk_surface_get_scale)(GdkSurface *surface);
gboolean (gdk_surface_get_device_position)(GdkSurface *surface, GdkDevice *device, double *x, double *y, GdkModifierType *mask);
cairo_surface_t * (gdk_surface_create_similar_surface)(GdkSurface *surface, cairo_content_t content, int width, int height);
void (gdk_surface_beep)(GdkSurface *surface);
void (gdk_surface_queue_render)(GdkSurface *surface);
void (gdk_surface_request_layout)(GdkSurface *surface);
GdkFrameClock* (gdk_surface_get_frame_clock)(GdkSurface *surface);
void (gdk_surface_set_opaque_region)(GdkSurface *surface, cairo_region_t *region);
GdkCairoContext* (gdk_surface_create_cairo_context)(GdkSurface *surface);
GdkGLContext * (gdk_surface_create_gl_context)(GdkSurface *surface, GError **error);
GdkVulkanContext * (gdk_surface_create_vulkan_context)(GdkSurface *surface, GError **error);
GType (gdk_texture_get_type)(void);
GQuark (gdk_texture_error_quark)(void);
GdkTexture * (gdk_texture_new_for_pixbuf)(GdkPixbuf *pixbuf);
GdkTexture * (gdk_texture_new_from_resource)(const char *resource_path);
GdkTexture * (gdk_texture_new_from_file)(GFile *file, GError **error);
GdkTexture * (gdk_texture_new_from_filename)(const char *path, GError **error);
GdkTexture * (gdk_texture_new_from_bytes)(GBytes *bytes, GError **error);
int (gdk_texture_get_width)(GdkTexture *texture);
int (gdk_texture_get_height)(GdkTexture *texture);
GdkMemoryFormat (gdk_texture_get_format)(GdkTexture *self);
void (gdk_texture_download)(GdkTexture *texture, guchar *data, gsize stride);
gboolean (gdk_texture_save_to_png)(GdkTexture *texture, const char *filename);
GBytes * (gdk_texture_save_to_png_bytes)(GdkTexture *texture);
gboolean (gdk_texture_save_to_tiff)(GdkTexture *texture, const char *filename);
GBytes * (gdk_texture_save_to_tiff_bytes)(GdkTexture *texture);
GType (gdk_texture_downloader_get_type)(void);
GdkTextureDownloader * (gdk_texture_downloader_new)(GdkTexture *texture);
GdkTextureDownloader * (gdk_texture_downloader_copy)(const GdkTextureDownloader *self);
void (gdk_texture_downloader_free)(GdkTextureDownloader *self);
void (gdk_texture_downloader_set_texture)(GdkTextureDownloader *self, GdkTexture *texture);
GdkTexture * (gdk_texture_downloader_get_texture)(const GdkTextureDownloader *self);
void (gdk_texture_downloader_set_format)(GdkTextureDownloader *self, GdkMemoryFormat format);
GdkMemoryFormat (gdk_texture_downloader_get_format)(const GdkTextureDownloader *self);
void (gdk_texture_downloader_download_into)(const GdkTextureDownloader *self, guchar *data, gsize stride);
GBytes * (gdk_texture_downloader_download_bytes)(const GdkTextureDownloader *self, gsize *out_stride);
GType (gdk_toplevel_get_type)(void);
gboolean (gdk_toplevel_minimize)(GdkToplevel *toplevel);
gboolean (gdk_toplevel_lower)(GdkToplevel *toplevel);
void (gdk_toplevel_focus)(GdkToplevel *toplevel, guint32 timestamp);
GdkToplevelState (gdk_toplevel_get_state)(GdkToplevel *toplevel);
void (gdk_toplevel_set_title)(GdkToplevel *toplevel, const char *title);
void (gdk_toplevel_set_startup_id)(GdkToplevel *toplevel, const char *startup_id);
void (gdk_toplevel_set_transient_for)(GdkToplevel *toplevel, GdkSurface *parent);
void (gdk_toplevel_set_modal)(GdkToplevel *toplevel, gboolean modal);
void (gdk_toplevel_set_icon_list)(GdkToplevel *toplevel, GList *surfaces);
gboolean (gdk_toplevel_show_window_menu)(GdkToplevel *toplevel, GdkEvent *event);
void (gdk_toplevel_set_decorated)(GdkToplevel *toplevel, gboolean decorated);
void (gdk_toplevel_set_deletable)(GdkToplevel *toplevel, gboolean deletable);
gboolean (gdk_toplevel_supports_edge_constraints)(GdkToplevel *toplevel);
void (gdk_toplevel_inhibit_system_shortcuts)(GdkToplevel *toplevel, GdkEvent *event);
void (gdk_toplevel_restore_system_shortcuts)(GdkToplevel *toplevel);
void (gdk_toplevel_begin_resize)(GdkToplevel *toplevel, GdkSurfaceEdge edge, GdkDevice *device, int button, double x, double y, guint32 timestamp);
void (gdk_toplevel_begin_move)(GdkToplevel *toplevel, GdkDevice *device, int button, double x, double y, guint32 timestamp);
gboolean (gdk_toplevel_titlebar_gesture)(GdkToplevel *toplevel, GdkTitlebarGesture gesture);
GType (gdk_toplevel_layout_get_type)(void);
GdkToplevelLayout * (gdk_toplevel_layout_new)(void);
GdkToplevelLayout * (gdk_toplevel_layout_ref)(GdkToplevelLayout *layout);
void (gdk_toplevel_layout_unref)(GdkToplevelLayout *layout);
GdkToplevelLayout * (gdk_toplevel_layout_copy)(GdkToplevelLayout *layout);
gboolean (gdk_toplevel_layout_equal)(GdkToplevelLayout *layout, GdkToplevelLayout *other);
void (gdk_toplevel_layout_set_maximized)(GdkToplevelLayout *layout, gboolean maximized);
void (gdk_toplevel_layout_set_fullscreen)(GdkToplevelLayout *layout, gboolean fullscreen, GdkMonitor *monitor);
gboolean (gdk_toplevel_layout_get_maximized)(GdkToplevelLayout *layout, gboolean *maximized);
gboolean (gdk_toplevel_layout_get_fullscreen)(GdkToplevelLayout *layout, gboolean *fullscreen);
GdkMonitor * (gdk_toplevel_layout_get_fullscreen_monitor)(GdkToplevelLayout *layout);
void (gdk_toplevel_layout_set_resizable)(GdkToplevelLayout *layout, gboolean resizable);
gboolean (gdk_toplevel_layout_get_resizable)(GdkToplevelLayout *layout);
GType (gdk_toplevel_size_get_type)(void);
void (gdk_toplevel_size_get_bounds)(GdkToplevelSize *size, int *bounds_width, int *bounds_height);
void (gdk_toplevel_size_set_size)(GdkToplevelSize *size, int width, int height);
void (gdk_toplevel_size_set_min_size)(GdkToplevelSize *size, int min_width, int min_height);
void (gdk_toplevel_size_set_shadow_width)(GdkToplevelSize *size, int left, int right, int top, int bottom);
GType (gdk_vulkan_context_get_type)(void);
GQuark (gdk_vulkan_error_quark)(void);
GType (gsk_broadway_renderer_get_type)(void);
GskRenderer * (gsk_broadway_renderer_new)(void);
GType (gsk_gl_renderer_get_type)(void);
GskRenderer* (gsk_gl_renderer_new)(void);
GType (gsk_ngl_renderer_get_type)(void);
GskRenderer* (gsk_ngl_renderer_new)(void);
GType (gsk_vulkan_renderer_get_type)(void);
GskRenderer * (gsk_vulkan_renderer_new)(void);
GType (gsk_cairo_renderer_get_type)(void);
GskRenderer * (gsk_cairo_renderer_new)(void);
GType (gsk_render_node_type_get_type)(void);
GType (gsk_scaling_filter_get_type)(void);
GType (gsk_blend_mode_get_type)(void);
GType (gsk_corner_get_type)(void);
GType (gsk_fill_rule_get_type)(void);
GType (gsk_line_cap_get_type)(void);
GType (gsk_line_join_get_type)(void);
GType (gsk_path_operation_get_type)(void);
GType (gsk_path_direction_get_type)(void);
GType (gsk_serialization_error_get_type)(void);
GType (gsk_transform_category_get_type)(void);
GType (gsk_gl_uniform_type_get_type)(void);
GType (gsk_mask_mode_get_type)(void);
GType (gsk_path_foreach_flags_get_type)(void);
GType (gsk_shader_args_builder_get_type)(void);
GType (gsk_gl_shader_get_type)(void);
GskGLShader * (gsk_gl_shader_new_from_bytes)(GBytes *sourcecode);
GskGLShader * (gsk_gl_shader_new_from_resource)(const char *resource_path);
gboolean (gsk_gl_shader_compile)(GskGLShader *shader, GskRenderer *renderer, GError **error);
GBytes * (gsk_gl_shader_get_source)(GskGLShader *shader);
const char * (gsk_gl_shader_get_resource)(GskGLShader *shader);
int (gsk_gl_shader_get_n_textures)(GskGLShader *shader);
int (gsk_gl_shader_get_n_uniforms)(GskGLShader *shader);
const char * (gsk_gl_shader_get_uniform_name)(GskGLShader *shader, int idx);
int (gsk_gl_shader_find_uniform_by_name)(GskGLShader *shader, const char *name);
GskGLUniformType (gsk_gl_shader_get_uniform_type)(GskGLShader *shader, int idx);
int (gsk_gl_shader_get_uniform_offset)(GskGLShader *shader, int idx);
gsize (gsk_gl_shader_get_args_size)(GskGLShader *shader);
GBytes * (gsk_gl_shader_format_args_va)(GskGLShader *shader, va_list uniforms);
float (gsk_gl_shader_get_arg_float)(GskGLShader *shader, GBytes *args, int idx);
gint32 (gsk_gl_shader_get_arg_int)(GskGLShader *shader, GBytes *args, int idx);
guint32 (gsk_gl_shader_get_arg_uint)(GskGLShader *shader, GBytes *args, int idx);
gboolean (gsk_gl_shader_get_arg_bool)(GskGLShader *shader, GBytes *args, int idx);
void (gsk_gl_shader_get_arg_vec2)(GskGLShader *shader, GBytes *args, int idx, graphene_vec2_t *out_value);
void (gsk_gl_shader_get_arg_vec3)(GskGLShader *shader, GBytes *args, int idx, graphene_vec3_t *out_value);
void (gsk_gl_shader_get_arg_vec4)(GskGLShader *shader, GBytes *args, int idx, graphene_vec4_t *out_value);
GskShaderArgsBuilder* (gsk_shader_args_builder_new)(GskGLShader *shader, GBytes *initial_values);
GBytes * (gsk_shader_args_builder_to_args)(GskShaderArgsBuilder *builder);
GBytes * (gsk_shader_args_builder_free_to_args)(GskShaderArgsBuilder *builder);
GskShaderArgsBuilder* (gsk_shader_args_builder_ref)(GskShaderArgsBuilder *builder);
void (gsk_shader_args_builder_unref)(GskShaderArgsBuilder *builder);
void (gsk_shader_args_builder_set_float)(GskShaderArgsBuilder *builder, int idx, float value);
void (gsk_shader_args_builder_set_int)(GskShaderArgsBuilder *builder, int idx, gint32 value);
void (gsk_shader_args_builder_set_uint)(GskShaderArgsBuilder *builder, int idx, guint32 value);
void (gsk_shader_args_builder_set_bool)(GskShaderArgsBuilder *builder, int idx, gboolean value);
void (gsk_shader_args_builder_set_vec2)(GskShaderArgsBuilder *builder, int idx, const graphene_vec2_t *value);
void (gsk_shader_args_builder_set_vec3)(GskShaderArgsBuilder *builder, int idx, const graphene_vec3_t *value);
void (gsk_shader_args_builder_set_vec4)(GskShaderArgsBuilder *builder, int idx, const graphene_vec4_t *value);
GType (gsk_path_get_type)(void);
GskPath * (gsk_path_ref)(GskPath *self);
void (gsk_path_unref)(GskPath *self);
void (gsk_path_print)(GskPath *self, GString *string);
char * (gsk_path_to_string)(GskPath *self);
GskPath * (gsk_path_parse)(const char *string);
void (gsk_path_to_cairo)(GskPath *self, cairo_t *cr);
gboolean (gsk_path_is_empty)(GskPath *self);
gboolean (gsk_path_is_closed)(GskPath *self);
gboolean (gsk_path_get_bounds)(GskPath *self, graphene_rect_t *bounds);
gboolean (gsk_path_get_stroke_bounds)(GskPath *self, const GskStroke *stroke, graphene_rect_t *bounds);
gboolean (gsk_path_in_fill)(GskPath *self, const graphene_point_t *point, GskFillRule fill_rule);
gboolean (gsk_path_get_start_point)(GskPath *self, GskPathPoint *result);
gboolean (gsk_path_get_end_point)(GskPath *self, GskPathPoint *result);
gboolean (gsk_path_get_closest_point)(GskPath *self, const graphene_point_t *point, float threshold, GskPathPoint *result, float *distance);
gboolean (gsk_path_foreach)(GskPath *self, GskPathForeachFlags flags, GskPathForeachFunc func, gpointer user_data);
GType (gsk_path_builder_get_type)(void);
GskPathBuilder * (gsk_path_builder_new)(void);
GskPathBuilder * (gsk_path_builder_ref)(GskPathBuilder *self);
void (gsk_path_builder_unref)(GskPathBuilder *self);
GskPath * (gsk_path_builder_free_to_path)(GskPathBuilder *self);
GskPath * (gsk_path_builder_to_path)(GskPathBuilder *self);
const graphene_point_t* (gsk_path_builder_get_current_point)(GskPathBuilder *self);
void (gsk_path_builder_add_path)(GskPathBuilder *self, GskPath *path);
void (gsk_path_builder_add_reverse_path)(GskPathBuilder *self, GskPath *path);
void (gsk_path_builder_add_cairo_path)(GskPathBuilder *self, const cairo_path_t *path);
void (gsk_path_builder_add_layout)(GskPathBuilder *self, PangoLayout *layout);
void (gsk_path_builder_add_rect)(GskPathBuilder *self, const graphene_rect_t *rect);
void (gsk_path_builder_add_rounded_rect)(GskPathBuilder *self, const GskRoundedRect *rect);
void (gsk_path_builder_add_circle)(GskPathBuilder *self, const graphene_point_t *center, float radius);
void (gsk_path_builder_add_segment)(GskPathBuilder *self, GskPath *path, const GskPathPoint *start, const GskPathPoint *end);
void (gsk_path_builder_move_to)(GskPathBuilder *self, float x, float y);
void (gsk_path_builder_rel_move_to)(GskPathBuilder *self, float x, float y);
void (gsk_path_builder_line_to)(GskPathBuilder *self, float x, float y);
void (gsk_path_builder_rel_line_to)(GskPathBuilder *self, float x, float y);
void (gsk_path_builder_quad_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
void (gsk_path_builder_rel_quad_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
void (gsk_path_builder_cubic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float x3, float y3);
void (gsk_path_builder_rel_cubic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float x3, float y3);
void (gsk_path_builder_conic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float weight);
void (gsk_path_builder_rel_conic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float weight);
void (gsk_path_builder_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
void (gsk_path_builder_rel_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
void (gsk_path_builder_svg_arc_to)(GskPathBuilder *self, float rx, float ry, float x_axis_rotation, gboolean large_arc, gboolean positive_sweep, float x, float y);
void (gsk_path_builder_rel_svg_arc_to)(GskPathBuilder *self, float rx, float ry, float x_axis_rotation, gboolean large_arc, gboolean positive_sweep, float x, float y);
void (gsk_path_builder_html_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float radius);
void (gsk_path_builder_rel_html_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float radius);
void (gsk_path_builder_close)(GskPathBuilder *self);
GType (gsk_path_measure_get_type)(void);
GskPathMeasure * (gsk_path_measure_new)(GskPath *path);
GskPathMeasure * (gsk_path_measure_new_with_tolerance)(GskPath *path, float tolerance);
GskPathMeasure * (gsk_path_measure_ref)(GskPathMeasure *self);
void (gsk_path_measure_unref)(GskPathMeasure *self);
GskPath * (gsk_path_measure_get_path)(GskPathMeasure *self);
float (gsk_path_measure_get_tolerance)(GskPathMeasure *self);
float (gsk_path_measure_get_length)(GskPathMeasure *self);
gboolean (gsk_path_measure_get_point)(GskPathMeasure *self, float distance, GskPathPoint *result);
GType (gsk_path_point_get_type)(void);
GskPathPoint * (gsk_path_point_copy)(GskPathPoint *point);
void (gsk_path_point_free)(GskPathPoint *point);
gboolean (gsk_path_point_equal)(const GskPathPoint *point1, const GskPathPoint *point2);
int (gsk_path_point_compare)(const GskPathPoint *point1, const GskPathPoint *point2);
void (gsk_path_point_get_position)(const GskPathPoint *point, GskPath *path, graphene_point_t *position);
void (gsk_path_point_get_tangent)(const GskPathPoint *point, GskPath *path, GskPathDirection direction, graphene_vec2_t *tangent);
float (gsk_path_point_get_rotation)(const GskPathPoint *point, GskPath *path, GskPathDirection direction);
float (gsk_path_point_get_curvature)(const GskPathPoint *point, GskPath *path, GskPathDirection direction, graphene_point_t *center);
float (gsk_path_point_get_distance)(const GskPathPoint *point, GskPathMeasure *measure);
GType (gsk_renderer_get_type)(void);
GskRenderer * (gsk_renderer_new_for_surface)(GdkSurface *surface);
GdkSurface * (gsk_renderer_get_surface)(GskRenderer *renderer);
gboolean (gsk_renderer_realize)(GskRenderer *renderer, GdkSurface *surface, GError **error);
gboolean (gsk_renderer_realize_for_display)(GskRenderer *renderer, GdkDisplay *display, GError **error);
void (gsk_renderer_unrealize)(GskRenderer *renderer);
gboolean (gsk_renderer_is_realized)(GskRenderer *renderer);
GdkTexture * (gsk_renderer_render_texture)(GskRenderer *renderer, GskRenderNode *root, const graphene_rect_t *viewport);
void (gsk_renderer_render)(GskRenderer *renderer, GskRenderNode *root, const cairo_region_t *region);
GType (gsk_render_node_get_type)(void);
GQuark (gsk_serialization_error_quark)(void);
GskRenderNode * (gsk_render_node_ref)(GskRenderNode *node);
void (gsk_render_node_unref)(GskRenderNode *node);
GskRenderNodeType (gsk_render_node_get_node_type)(const GskRenderNode *node);
void (gsk_render_node_get_bounds)(GskRenderNode *node, graphene_rect_t *bounds);
void (gsk_render_node_draw)(GskRenderNode *node, cairo_t *cr);
GBytes * (gsk_render_node_serialize)(GskRenderNode *node);
gboolean (gsk_render_node_write_to_file)(GskRenderNode *node, const char *filename, GError **error);
GskRenderNode * (gsk_render_node_deserialize)(GBytes *bytes, GskParseErrorFunc error_func, gpointer user_data);
GType (gsk_debug_node_get_type)(void);
GType (gsk_color_node_get_type)(void);
GType (gsk_texture_node_get_type)(void);
GType (gsk_texture_scale_node_get_type)(void);
GType (gsk_linear_gradient_node_get_type)(void);
GType (gsk_repeating_linear_gradient_node_get_type)(void);
GType (gsk_radial_gradient_node_get_type)(void);
GType (gsk_repeating_radial_gradient_node_get_type)(void);
GType (gsk_conic_gradient_node_get_type)(void);
GType (gsk_border_node_get_type)(void);
GType (gsk_inset_shadow_node_get_type)(void);
GType (gsk_outset_shadow_node_get_type)(void);
GType (gsk_cairo_node_get_type)(void);
GType (gsk_container_node_get_type)(void);
GType (gsk_transform_node_get_type)(void);
GType (gsk_opacity_node_get_type)(void);
GType (gsk_color_matrix_node_get_type)(void);
GType (gsk_repeat_node_get_type)(void);
GType (gsk_clip_node_get_type)(void);
GType (gsk_rounded_clip_node_get_type)(void);
GType (gsk_fill_node_get_type)(void);
GType (gsk_stroke_node_get_type)(void);
GType (gsk_shadow_node_get_type)(void);
GType (gsk_blend_node_get_type)(void);
GType (gsk_cross_fade_node_get_type)(void);
GType (gsk_text_node_get_type)(void);
GType (gsk_blur_node_get_type)(void);
GType (gsk_mask_node_get_type)(void);
GType (gsk_gl_shader_node_get_type)(void);
GType (gsk_subsurface_node_get_type)(void);
GskRenderNode * (gsk_debug_node_new)(GskRenderNode *child, char *message);
GskRenderNode * (gsk_debug_node_get_child)(const GskRenderNode *node);
const char * (gsk_debug_node_get_message)(const GskRenderNode *node);
GskRenderNode * (gsk_color_node_new)(const GdkRGBA *rgba, const graphene_rect_t *bounds);
const GdkRGBA * (gsk_color_node_get_color)(const GskRenderNode *node);
GskRenderNode * (gsk_texture_node_new)(GdkTexture *texture, const graphene_rect_t *bounds);
GdkTexture * (gsk_texture_node_get_texture)(const GskRenderNode *node);
GskRenderNode * (gsk_texture_scale_node_new)(GdkTexture *texture, const graphene_rect_t *bounds, GskScalingFilter filter);
GdkTexture * (gsk_texture_scale_node_get_texture)(const GskRenderNode *node);
GskScalingFilter (gsk_texture_scale_node_get_filter)(const GskRenderNode *node);
GskRenderNode * (gsk_linear_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);
const graphene_point_t * (gsk_linear_gradient_node_get_start)(const GskRenderNode *node);
const graphene_point_t * (gsk_linear_gradient_node_get_end)(const GskRenderNode *node);
gsize (gsk_linear_gradient_node_get_n_color_stops)(const GskRenderNode *node);
const GskColorStop * (gsk_linear_gradient_node_get_color_stops)(const GskRenderNode *node, gsize *n_stops);
GskRenderNode * (gsk_repeating_linear_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);
GskRenderNode * (gsk_conic_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *center, float rotation, const GskColorStop *color_stops, gsize n_color_stops);
const graphene_point_t * (gsk_conic_gradient_node_get_center)(const GskRenderNode *node);
float (gsk_conic_gradient_node_get_rotation)(const GskRenderNode *node);
float (gsk_conic_gradient_node_get_angle)(const GskRenderNode *node);
gsize (gsk_conic_gradient_node_get_n_color_stops)(const GskRenderNode *node);
const GskColorStop * (gsk_conic_gradient_node_get_color_stops)(const GskRenderNode *node, gsize *n_stops);
GskRenderNode * (gsk_radial_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *color_stops, gsize n_color_stops);
gsize (gsk_radial_gradient_node_get_n_color_stops)(const GskRenderNode *node);
const GskColorStop * (gsk_radial_gradient_node_get_color_stops)(const GskRenderNode *node, gsize *n_stops);
const graphene_point_t* (gsk_radial_gradient_node_get_center)(const GskRenderNode *node);
float (gsk_radial_gradient_node_get_hradius)(const GskRenderNode *node);
float (gsk_radial_gradient_node_get_vradius)(const GskRenderNode *node);
float (gsk_radial_gradient_node_get_start)(const GskRenderNode *node);
float (gsk_radial_gradient_node_get_end)(const GskRenderNode *node);
GskRenderNode * (gsk_repeating_radial_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *color_stops, gsize n_color_stops);
GskRenderNode * (gsk_border_node_new)(const GskRoundedRect *outline, const float border_width[4], const GdkRGBA border_color[4]);
const GskRoundedRect * (gsk_border_node_get_outline)(const GskRenderNode *node);
const float * (gsk_border_node_get_widths)(const GskRenderNode *node);
const GdkRGBA * (gsk_border_node_get_colors)(const GskRenderNode *node);
GskRenderNode * (gsk_inset_shadow_node_new)(const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
const GskRoundedRect * (gsk_inset_shadow_node_get_outline)(const GskRenderNode *node);
const GdkRGBA * (gsk_inset_shadow_node_get_color)(const GskRenderNode *node);
float (gsk_inset_shadow_node_get_dx)(const GskRenderNode *node);
float (gsk_inset_shadow_node_get_dy)(const GskRenderNode *node);
float (gsk_inset_shadow_node_get_spread)(const GskRenderNode *node);
float (gsk_inset_shadow_node_get_blur_radius)(const GskRenderNode *node);
GskRenderNode * (gsk_outset_shadow_node_new)(const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
const GskRoundedRect * (gsk_outset_shadow_node_get_outline)(const GskRenderNode *node);
const GdkRGBA * (gsk_outset_shadow_node_get_color)(const GskRenderNode *node);
float (gsk_outset_shadow_node_get_dx)(const GskRenderNode *node);
float (gsk_outset_shadow_node_get_dy)(const GskRenderNode *node);
float (gsk_outset_shadow_node_get_spread)(const GskRenderNode *node);
float (gsk_outset_shadow_node_get_blur_radius)(const GskRenderNode *node);
GskRenderNode * (gsk_cairo_node_new)(const graphene_rect_t *bounds);
cairo_t * (gsk_cairo_node_get_draw_context)(GskRenderNode *node);
cairo_surface_t * (gsk_cairo_node_get_surface)(GskRenderNode *node);
GskRenderNode * (gsk_container_node_new)(GskRenderNode **children, guint n_children);
guint (gsk_container_node_get_n_children)(const GskRenderNode *node);
GskRenderNode * (gsk_container_node_get_child)(const GskRenderNode *node, guint idx);
GskRenderNode * (gsk_transform_node_new)(GskRenderNode *child, GskTransform *transform);
GskRenderNode * (gsk_transform_node_get_child)(const GskRenderNode *node);
GskTransform * (gsk_transform_node_get_transform)(const GskRenderNode *node);
GskRenderNode * (gsk_opacity_node_new)(GskRenderNode *child, float opacity);
GskRenderNode * (gsk_opacity_node_get_child)(const GskRenderNode *node);
float (gsk_opacity_node_get_opacity)(const GskRenderNode *node);
GskRenderNode * (gsk_color_matrix_node_new)(GskRenderNode *child, const graphene_matrix_t *color_matrix, const graphene_vec4_t *color_offset);
GskRenderNode * (gsk_color_matrix_node_get_child)(const GskRenderNode *node);
const graphene_matrix_t * (gsk_color_matrix_node_get_color_matrix)(const GskRenderNode *node);
const graphene_vec4_t * (gsk_color_matrix_node_get_color_offset)(const GskRenderNode *node);
GskRenderNode * (gsk_repeat_node_new)(const graphene_rect_t *bounds, GskRenderNode *child, const graphene_rect_t *child_bounds);
GskRenderNode * (gsk_repeat_node_get_child)(const GskRenderNode *node);
const graphene_rect_t * (gsk_repeat_node_get_child_bounds)(const GskRenderNode *node);
GskRenderNode * (gsk_clip_node_new)(GskRenderNode *child, const graphene_rect_t *clip);
GskRenderNode * (gsk_clip_node_get_child)(const GskRenderNode *node);
const graphene_rect_t * (gsk_clip_node_get_clip)(const GskRenderNode *node);
GskRenderNode * (gsk_rounded_clip_node_new)(GskRenderNode *child, const GskRoundedRect *clip);
GskRenderNode * (gsk_rounded_clip_node_get_child)(const GskRenderNode *node);
const GskRoundedRect * (gsk_rounded_clip_node_get_clip)(const GskRenderNode *node);
GskRenderNode * (gsk_fill_node_new)(GskRenderNode *child, GskPath *path, GskFillRule fill_rule);
GskRenderNode * (gsk_fill_node_get_child)(const GskRenderNode *node);
GskPath * (gsk_fill_node_get_path)(const GskRenderNode *node);
GskFillRule (gsk_fill_node_get_fill_rule)(const GskRenderNode *node);
GskRenderNode * (gsk_stroke_node_new)(GskRenderNode *child, GskPath *path, const GskStroke *stroke);
GskRenderNode * (gsk_stroke_node_get_child)(const GskRenderNode *node);
GskPath * (gsk_stroke_node_get_path)(const GskRenderNode *node);
const GskStroke * (gsk_stroke_node_get_stroke)(const GskRenderNode *node);
GskRenderNode * (gsk_shadow_node_new)(GskRenderNode *child, const GskShadow *shadows, gsize n_shadows);
GskRenderNode * (gsk_shadow_node_get_child)(const GskRenderNode *node);
const GskShadow * (gsk_shadow_node_get_shadow)(const GskRenderNode *node, gsize i);
gsize (gsk_shadow_node_get_n_shadows)(const GskRenderNode *node);
GskRenderNode * (gsk_blend_node_new)(GskRenderNode *bottom, GskRenderNode *top, GskBlendMode blend_mode);
GskRenderNode * (gsk_blend_node_get_bottom_child)(const GskRenderNode *node);
GskRenderNode * (gsk_blend_node_get_top_child)(const GskRenderNode *node);
GskBlendMode (gsk_blend_node_get_blend_mode)(const GskRenderNode *node);
GskRenderNode * (gsk_cross_fade_node_new)(GskRenderNode *start, GskRenderNode *end, float progress);
GskRenderNode * (gsk_cross_fade_node_get_start_child)(const GskRenderNode *node);
GskRenderNode * (gsk_cross_fade_node_get_end_child)(const GskRenderNode *node);
float (gsk_cross_fade_node_get_progress)(const GskRenderNode *node);
GskRenderNode * (gsk_text_node_new)(PangoFont *font, PangoGlyphString *glyphs, const GdkRGBA *color, const graphene_point_t *offset);
PangoFont * (gsk_text_node_get_font)(const GskRenderNode *node);
gboolean (gsk_text_node_has_color_glyphs)(const GskRenderNode *node);
guint (gsk_text_node_get_num_glyphs)(const GskRenderNode *node);
const PangoGlyphInfo* (gsk_text_node_get_glyphs)(const GskRenderNode *node, guint *n_glyphs);
const GdkRGBA * (gsk_text_node_get_color)(const GskRenderNode *node);
const graphene_point_t* (gsk_text_node_get_offset)(const GskRenderNode *node);
GskRenderNode * (gsk_blur_node_new)(GskRenderNode *child, float radius);
GskRenderNode * (gsk_blur_node_get_child)(const GskRenderNode *node);
float (gsk_blur_node_get_radius)(const GskRenderNode *node);
GskRenderNode * (gsk_mask_node_new)(GskRenderNode *source, GskRenderNode *mask, GskMaskMode mask_mode);
GskRenderNode * (gsk_mask_node_get_source)(const GskRenderNode *node);
GskRenderNode * (gsk_mask_node_get_mask)(const GskRenderNode *node);
GskMaskMode (gsk_mask_node_get_mask_mode)(const GskRenderNode *node);
GskRenderNode * (gsk_gl_shader_node_new)(GskGLShader *shader, const graphene_rect_t *bounds, GBytes *args, GskRenderNode **children, guint n_children);
guint (gsk_gl_shader_node_get_n_children)(const GskRenderNode *node);
GskRenderNode * (gsk_gl_shader_node_get_child)(const GskRenderNode *node, guint idx);
GBytes * (gsk_gl_shader_node_get_args)(const GskRenderNode *node);
GskGLShader * (gsk_gl_shader_node_get_shader)(const GskRenderNode *node);
GskRenderNode * (gsk_subsurface_node_new)(GskRenderNode *child, gpointer subsurface);
GskRenderNode * (gsk_subsurface_node_get_child)(const GskRenderNode *node);
gpointer (gsk_subsurface_node_get_subsurface)(const GskRenderNode *node);
void (gsk_value_set_render_node)(GValue *value, GskRenderNode *node);
void (gsk_value_take_render_node)(GValue *value, GskRenderNode *node);
GskRenderNode * (gsk_value_get_render_node)(const GValue *value);
GskRenderNode * (gsk_value_dup_render_node)(const GValue *value);
GskRoundedRect * (gsk_rounded_rect_init_copy)(GskRoundedRect *self, const GskRoundedRect *src);
GskRoundedRect * (gsk_rounded_rect_init_from_rect)(GskRoundedRect *self, const graphene_rect_t *bounds, float radius);
GskRoundedRect * (gsk_rounded_rect_normalize)(GskRoundedRect *self);
GskRoundedRect * (gsk_rounded_rect_offset)(GskRoundedRect *self, float dx, float dy);
GskRoundedRect * (gsk_rounded_rect_shrink)(GskRoundedRect *self, float top, float right, float bottom, float left);
gboolean (gsk_rounded_rect_is_rectilinear)(const GskRoundedRect *self);
gboolean (gsk_rounded_rect_contains_point)(const GskRoundedRect *self, const graphene_point_t *point);
gboolean (gsk_rounded_rect_contains_rect)(const GskRoundedRect *self, const graphene_rect_t *rect);
gboolean (gsk_rounded_rect_intersects_rect)(const GskRoundedRect *self, const graphene_rect_t *rect);
GskRoundedRect * (gsk_rounded_rect_init)(GskRoundedRect *self, const graphene_rect_t *bounds, const graphene_size_t *top_left, const graphene_size_t *top_right, const graphene_size_t *bottom_right, const graphene_size_t *bottom_left);
GType (gsk_stroke_get_type)(void);
GskStroke * (gsk_stroke_new)(float line_width);
GskStroke * (gsk_stroke_copy)(const GskStroke *other);
void (gsk_stroke_free)(GskStroke *self);
gboolean (gsk_stroke_equal)(gconstpointer stroke1, gconstpointer stroke2);
void (gsk_stroke_set_line_width)(GskStroke *self, float line_width);
float (gsk_stroke_get_line_width)(const GskStroke *self);
void (gsk_stroke_set_line_cap)(GskStroke *self, GskLineCap line_cap);
GskLineCap (gsk_stroke_get_line_cap)(const GskStroke *self);
void (gsk_stroke_set_line_join)(GskStroke *self, GskLineJoin line_join);
GskLineJoin (gsk_stroke_get_line_join)(const GskStroke *self);
void (gsk_stroke_set_miter_limit)(GskStroke *self, float limit);
float (gsk_stroke_get_miter_limit)(const GskStroke *self);
void (gsk_stroke_set_dash)(GskStroke *self, const float *dash, gsize n_dash);
const float * (gsk_stroke_get_dash)(const GskStroke *self, gsize *n_dash);
void (gsk_stroke_set_dash_offset)(GskStroke *self, float offset);
float (gsk_stroke_get_dash_offset)(const GskStroke *self);
void (gsk_stroke_to_cairo)(const GskStroke *self, cairo_t *cr);
GType (gsk_transform_get_type)(void);
GskTransform * (gsk_transform_ref)(GskTransform *self);
void (gsk_transform_unref)(GskTransform *self);
void (gsk_transform_print)(GskTransform *self, GString *string);
char * (gsk_transform_to_string)(GskTransform *self);
gboolean (gsk_transform_parse)(const char *string, GskTransform **out_transform);
void (gsk_transform_to_matrix)(GskTransform *self, graphene_matrix_t *out_matrix);
void (gsk_transform_to_2d)(GskTransform *self, float *out_xx, float *out_yx, float *out_xy, float *out_yy, float *out_dx, float *out_dy);
void (gsk_transform_to_2d_components)(GskTransform *self, float *out_skew_x, float *out_skew_y, float *out_scale_x, float *out_scale_y, float *out_angle, float *out_dx, float *out_dy);
void (gsk_transform_to_affine)(GskTransform *self, float *out_scale_x, float *out_scale_y, float *out_dx, float *out_dy);
void (gsk_transform_to_translate)(GskTransform *self, float *out_dx, float *out_dy);
GskTransformCategory (gsk_transform_get_category)(GskTransform *self);
gboolean (gsk_transform_equal)(GskTransform *first, GskTransform *second);
GskTransform * (gsk_transform_new)(void);
GskTransform * (gsk_transform_transform)(GskTransform *next, GskTransform *other);
GskTransform * (gsk_transform_invert)(GskTransform *self);
GskTransform * (gsk_transform_matrix)(GskTransform *next, const graphene_matrix_t *matrix);
GskTransform * (gsk_transform_translate)(GskTransform *next, const graphene_point_t *point);
GskTransform * (gsk_transform_translate_3d)(GskTransform *next, const graphene_point3d_t *point);
GskTransform * (gsk_transform_skew)(GskTransform *next, float skew_x, float skew_y);
GskTransform * (gsk_transform_rotate)(GskTransform *next, float angle);
GskTransform * (gsk_transform_rotate_3d)(GskTransform *next, float angle, const graphene_vec3_t *axis);
GskTransform * (gsk_transform_scale)(GskTransform *next, float factor_x, float factor_y);
GskTransform * (gsk_transform_scale_3d)(GskTransform *next, float factor_x, float factor_y, float factor_z);
GskTransform * (gsk_transform_perspective)(GskTransform *next, float depth);
void (gsk_transform_transform_bounds)(GskTransform *self, const graphene_rect_t *rect, graphene_rect_t *out_rect);
void (gsk_transform_transform_point)(GskTransform *self, const graphene_point_t *point, graphene_point_t *out_point);