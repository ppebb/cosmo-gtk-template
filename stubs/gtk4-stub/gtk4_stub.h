#include "GTK/gtk.h"
#include "GDK/x11/gdkx.h"
#include "GDK/wayland/gdkwayland.h"
#include "GDK/broadway/gdkbroadway.h"

#ifndef SYMS_GTK4_H
#define SYMS_GTK4_H

struct gtk_syms {
    void *lib;
    // SYMS_gtk_HERE
    GType (*css_parser_warning_get_type)(void);
    GType (*css_parser_error_get_type)(void);
    GQuark (*css_parser_warning_quark)(void);
    GQuark (*css_parser_error_quark)(void);
    GtkCssSection * (*css_section_new)(GFile *file, const GtkCssLocation *start, const GtkCssLocation *end);
    GtkCssSection * (*css_section_ref)(GtkCssSection *section);
    void (*css_section_unref)(GtkCssSection *section);
    void (*css_section_print)(const GtkCssSection *section, GString *string);
    char * (*css_section_to_string)(const GtkCssSection *section);
    GtkCssSection * (*css_section_get_parent)(const GtkCssSection *section);
    GFile * (*css_section_get_file)(const GtkCssSection *section);
    const GtkCssLocation * (*css_section_get_start_location)(const GtkCssSection *section);
    const GtkCssLocation * (*css_section_get_end_location)(const GtkCssSection *section);
    GType (*css_section_get_type)(void);
    GtkWidget* (*about_dialog_new)(void);
    void (*show_about_dialog)(GtkWindow *parent, const char *first_property_name, ...);
    const char * (*about_dialog_get_program_name)(GtkAboutDialog *about);
    void (*about_dialog_set_program_name)(GtkAboutDialog *about, const char *name);
    const char * (*about_dialog_get_version)(GtkAboutDialog *about);
    void (*about_dialog_set_version)(GtkAboutDialog *about, const char *version);
    const char * (*about_dialog_get_copyright)(GtkAboutDialog *about);
    void (*about_dialog_set_copyright)(GtkAboutDialog *about, const char *copyright);
    const char * (*about_dialog_get_comments)(GtkAboutDialog *about);
    void (*about_dialog_set_comments)(GtkAboutDialog *about, const char *comments);
    const char * (*about_dialog_get_license)(GtkAboutDialog *about);
    void (*about_dialog_set_license)(GtkAboutDialog *about, const char *license);
    void (*about_dialog_set_license_type)(GtkAboutDialog *about, GtkLicense license_type);
    GtkLicense (*about_dialog_get_license_type)(GtkAboutDialog *about);
    gboolean (*about_dialog_get_wrap_license)(GtkAboutDialog *about);
    void (*about_dialog_set_wrap_license)(GtkAboutDialog *about, gboolean wrap_license);
    const char * (*about_dialog_get_system_information)(GtkAboutDialog *about);
    void (*about_dialog_set_system_information)(GtkAboutDialog *about, const char *system_information);
    const char * (*about_dialog_get_website)(GtkAboutDialog *about);
    void (*about_dialog_set_website)(GtkAboutDialog *about, const char *website);
    const char * (*about_dialog_get_website_label)(GtkAboutDialog *about);
    void (*about_dialog_set_website_label)(GtkAboutDialog *about, const char *website_label);
    const char * const * (*about_dialog_get_authors)(GtkAboutDialog *about);
    void (*about_dialog_set_authors)(GtkAboutDialog *about, const char **authors);
    const char * const * (*about_dialog_get_documenters)(GtkAboutDialog *about);
    void (*about_dialog_set_documenters)(GtkAboutDialog *about, const char **documenters);
    const char * const * (*about_dialog_get_artists)(GtkAboutDialog *about);
    void (*about_dialog_set_artists)(GtkAboutDialog *about, const char **artists);
    const char * (*about_dialog_get_translator_credits)(GtkAboutDialog *about);
    void (*about_dialog_set_translator_credits)(GtkAboutDialog *about, const char *translator_credits);
    GdkPaintable* (*about_dialog_get_logo)(GtkAboutDialog *about);
    void (*about_dialog_set_logo)(GtkAboutDialog *about, GdkPaintable *logo);
    const char * (*about_dialog_get_logo_icon_name)(GtkAboutDialog *about);
    void (*about_dialog_set_logo_icon_name)(GtkAboutDialog *about, const char *icon_name);
    void (*about_dialog_add_credit_section)(GtkAboutDialog *about, const char *section_name, const char **people);
    GType (*about_dialog_get_type)(void);
    gboolean (*accelerator_parse)(const char *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods);
    gboolean (*accelerator_parse_with_keycode)(const char *accelerator, GdkDisplay *display, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods);
    char * (*accelerator_name)(guint accelerator_key, GdkModifierType accelerator_mods);
    char * (*accelerator_name_with_keycode)(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);
    char * (*accelerator_get_label)(guint accelerator_key, GdkModifierType accelerator_mods);
    char * (*accelerator_get_label_with_keycode)(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);
    GdkModifierType (*accelerator_get_default_mod_mask)(void);
    gboolean (*accelerator_valid)(guint keyval, GdkModifierType modifiers);
    gboolean (*accessible_get_platform_state)(GtkAccessible *self, GtkAccessiblePlatformState state);
    GtkAccessible * (*accessible_get_accessible_parent)(GtkAccessible *self);
    void (*accessible_set_accessible_parent)(GtkAccessible *self, GtkAccessible *parent, GtkAccessible *next_sibling);
    GtkAccessible * (*accessible_get_first_accessible_child)(GtkAccessible *self);
    GtkAccessible * (*accessible_get_next_accessible_sibling)(GtkAccessible *self);
    void (*accessible_update_next_accessible_sibling)(GtkAccessible *self, GtkAccessible *new_sibling);
    gboolean (*accessible_get_bounds)(GtkAccessible *self, int *x, int *y, int *width, int *height);
    GtkAccessibleRole (*accessible_get_accessible_role)(GtkAccessible *self);
    void (*accessible_update_state)(GtkAccessible *self, GtkAccessibleState first_state, ...);
    void (*accessible_update_property)(GtkAccessible *self, GtkAccessibleProperty first_property, ...);
    void (*accessible_update_relation)(GtkAccessible *self, GtkAccessibleRelation first_relation, ...);
    void (*accessible_update_state_value)(GtkAccessible *self, int n_states, GtkAccessibleState states[], const GValue values[]);
    void (*accessible_update_property_value)(GtkAccessible *self, int n_properties, GtkAccessibleProperty properties[], const GValue values[]);
    void (*accessible_update_relation_value)(GtkAccessible *self, int n_relations, GtkAccessibleRelation relations[], const GValue values[]);
    void (*accessible_reset_state)(GtkAccessible *self, GtkAccessibleState state);
    void (*accessible_reset_property)(GtkAccessible *self, GtkAccessibleProperty property);
    void (*accessible_reset_relation)(GtkAccessible *self, GtkAccessibleRelation relation);
    void (*accessible_state_init_value)(GtkAccessibleState state, GValue *value);
    void (*accessible_property_init_value)(GtkAccessibleProperty property, GValue *value);
    void (*accessible_relation_init_value)(GtkAccessibleRelation relation, GValue *value);
    GType (*accessible_list_get_type)(void);
    GList * (*accessible_list_get_objects)(GtkAccessibleList *accessible_list);
    GtkAccessibleList * (*accessible_list_new_from_list)(GList *list);
    GtkAccessibleList * (*accessible_list_new_from_array)(GtkAccessible **accessibles, gsize n_accessibles);
    void (*accessible_announce)(GtkAccessible *self, const char *message, GtkAccessibleAnnouncementPriority priority);
    void (*accessible_text_update_selection_bound)(GtkAccessibleText *self);
    void (*accessible_text_update_contents)(GtkAccessibleText *self, GtkAccessibleTextContentChange change, unsigned int start, unsigned int end);
    const char * (*actionable_get_action_name)(GtkActionable *actionable);
    void (*actionable_set_action_name)(GtkActionable *actionable, const char *action_name);
    GVariant * (*actionable_get_action_target_value)(GtkActionable *actionable);
    void (*actionable_set_action_target_value)(GtkActionable *actionable, GVariant *target_value);
    void (*actionable_set_action_target)(GtkActionable *actionable, const char *format_string, ...);
    void (*actionable_set_detailed_action_name)(GtkActionable *actionable, const char *detailed_action_name);
    GType (*actionable_get_type)(void);
    GtkWidget* (*action_bar_new)(void);
    GtkWidget* (*action_bar_get_center_widget)(GtkActionBar *action_bar);
    void (*action_bar_set_center_widget)(GtkActionBar *action_bar, GtkWidget *center_widget);
    void (*action_bar_pack_start)(GtkActionBar *action_bar, GtkWidget *child);
    void (*action_bar_pack_end)(GtkActionBar *action_bar, GtkWidget *child);
    void (*action_bar_remove)(GtkActionBar *action_bar, GtkWidget *child);
    void (*action_bar_set_revealed)(GtkActionBar *action_bar, gboolean revealed);
    gboolean (*action_bar_get_revealed)(GtkActionBar *action_bar);
    GType (*action_bar_get_type)(void);
    GtkAdjustment* (*adjustment_new)(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
    void (*adjustment_clamp_page)(GtkAdjustment *adjustment, double lower, double upper);
    double (*adjustment_get_value)(GtkAdjustment *adjustment);
    void (*adjustment_set_value)(GtkAdjustment *adjustment, double value);
    double (*adjustment_get_lower)(GtkAdjustment *adjustment);
    void (*adjustment_set_lower)(GtkAdjustment *adjustment, double lower);
    double (*adjustment_get_upper)(GtkAdjustment *adjustment);
    void (*adjustment_set_upper)(GtkAdjustment *adjustment, double upper);
    double (*adjustment_get_step_increment)(GtkAdjustment *adjustment);
    void (*adjustment_set_step_increment)(GtkAdjustment *adjustment, double step_increment);
    double (*adjustment_get_page_increment)(GtkAdjustment *adjustment);
    void (*adjustment_set_page_increment)(GtkAdjustment *adjustment, double page_increment);
    double (*adjustment_get_page_size)(GtkAdjustment *adjustment);
    void (*adjustment_set_page_size)(GtkAdjustment *adjustment, double page_size);
    void (*adjustment_configure)(GtkAdjustment *adjustment, double value, double lower, double upper, double step_increment, double page_increment, double page_size);
    double (*adjustment_get_minimum_increment)(GtkAdjustment *adjustment);
    GType (*adjustment_get_type)(void);
    gboolean (*alert_dialog_get_modal)(GtkAlertDialog *self);
    void (*alert_dialog_set_modal)(GtkAlertDialog *self, gboolean modal);
    const char * (*alert_dialog_get_message)(GtkAlertDialog *self);
    void (*alert_dialog_set_message)(GtkAlertDialog *self, const char *message);
    const char * (*alert_dialog_get_detail)(GtkAlertDialog *self);
    void (*alert_dialog_set_detail)(GtkAlertDialog *self, const char *detail);
    const char * const * (*alert_dialog_get_buttons)(GtkAlertDialog *self);
    void (*alert_dialog_set_buttons)(GtkAlertDialog *self, const char * const *labels);
    int (*alert_dialog_get_cancel_button)(GtkAlertDialog *self);
    void (*alert_dialog_set_cancel_button)(GtkAlertDialog *self, int button);
    int (*alert_dialog_get_default_button)(GtkAlertDialog *self);
    void (*alert_dialog_set_default_button)(GtkAlertDialog *self, int button);
    void (*alert_dialog_choose)(GtkAlertDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    int (*alert_dialog_choose_finish)(GtkAlertDialog *self, GAsyncResult *result, GError **error);
    void (*alert_dialog_show)(GtkAlertDialog *self, GtkWindow *parent);
    GtkAlertDialog* (*alert_dialog_new)(const char *format, ...);
    GtkApplication * (*application_new)(const char *application_id, GApplicationFlags flags);
    void (*application_add_window)(GtkApplication *application, GtkWindow *window);
    void (*application_remove_window)(GtkApplication *application, GtkWindow *window);
    GList * (*application_get_windows)(GtkApplication *application);
    GMenuModel * (*application_get_menubar)(GtkApplication *application);
    void (*application_set_menubar)(GtkApplication *application, GMenuModel *menubar);
    guint (*application_inhibit)(GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const char *reason);
    void (*application_uninhibit)(GtkApplication *application, guint cookie);
    GtkWindow * (*application_get_window_by_id)(GtkApplication *application, guint id);
    GtkWindow * (*application_get_active_window)(GtkApplication *application);
    char ** (*application_list_action_descriptions)(GtkApplication *application);
    char ** (*application_get_accels_for_action)(GtkApplication *application, const char *detailed_action_name);
    char ** (*application_get_actions_for_accel)(GtkApplication *application, const char *accel);
    void (*application_set_accels_for_action)(GtkApplication *application, const char *detailed_action_name, const char * const *accels);
    GMenu * (*application_get_menu_by_id)(GtkApplication *application, const char *id);
    GType (*application_get_type)(void);
    GtkWidget * (*application_window_new)(GtkApplication *application);
    void (*application_window_set_show_menubar)(GtkApplicationWindow *window, gboolean show_menubar);
    gboolean (*application_window_get_show_menubar)(GtkApplicationWindow *window);
    guint (*application_window_get_id)(GtkApplicationWindow *window);
    void (*application_window_set_help_overlay)(GtkApplicationWindow *window, GtkShortcutsWindow *help_overlay);
    GtkShortcutsWindow * (*application_window_get_help_overlay)(GtkApplicationWindow *window);
    GType (*application_window_get_type)(void);
    GtkWidget* (*aspect_frame_new)(float xalign, float yalign, float ratio, gboolean obey_child);
    void (*aspect_frame_set_xalign)(GtkAspectFrame *self, float xalign);
    float (*aspect_frame_get_xalign)(GtkAspectFrame *self);
    void (*aspect_frame_set_yalign)(GtkAspectFrame *self, float yalign);
    float (*aspect_frame_get_yalign)(GtkAspectFrame *self);
    void (*aspect_frame_set_ratio)(GtkAspectFrame *self, float ratio);
    float (*aspect_frame_get_ratio)(GtkAspectFrame *self);
    void (*aspect_frame_set_obey_child)(GtkAspectFrame *self, gboolean obey_child);
    gboolean (*aspect_frame_get_obey_child)(GtkAspectFrame *self);
    void (*aspect_frame_set_child)(GtkAspectFrame *self, GtkWidget *child);
    GtkWidget* (*aspect_frame_get_child)(GtkAspectFrame *self);
    GType (*aspect_frame_get_type)(void);
    GtkAccessibleRole (*at_context_get_accessible_role)(GtkATContext *self);
    GtkATContext * (*at_context_create)(GtkAccessibleRole accessible_role, GtkAccessible *accessible, GdkDisplay *display);
    GtkAccessible * (*at_context_get_accessible)(GtkATContext *self);
    GtkLayoutManager * (*bin_layout_new)(void);
    GtkBitset * (*bitset_ref)(GtkBitset *self);
    void (*bitset_unref)(GtkBitset *self);
    gboolean (*bitset_is_empty)(const GtkBitset *self);
    gboolean (*bitset_equals)(const GtkBitset *self, const GtkBitset *other);
    guint64 (*bitset_get_size)(const GtkBitset *self);
    guint64 (*bitset_get_size_in_range)(const GtkBitset *self, guint first, guint last);
    guint (*bitset_get_nth)(const GtkBitset *self, guint nth);
    guint (*bitset_get_minimum)(const GtkBitset *self);
    guint (*bitset_get_maximum)(const GtkBitset *self);
    GtkBitset * (*bitset_new_empty)(void);
    GtkBitset * (*bitset_copy)(const GtkBitset *self);
    GtkBitset * (*bitset_new_range)(guint start, guint n_items);
    void (*bitset_remove_all)(GtkBitset *self);
    gboolean (*bitset_add)(GtkBitset *self, guint value);
    gboolean (*bitset_remove)(GtkBitset *self, guint value);
    void (*bitset_add_range)(GtkBitset *self, guint start, guint n_items);
    void (*bitset_remove_range)(GtkBitset *self, guint start, guint n_items);
    void (*bitset_add_range_closed)(GtkBitset *self, guint first, guint last);
    void (*bitset_remove_range_closed)(GtkBitset *self, guint first, guint last);
    void (*bitset_add_rectangle)(GtkBitset *self, guint start, guint width, guint height, guint stride);
    void (*bitset_remove_rectangle)(GtkBitset *self, guint start, guint width, guint height, guint stride);
    void (*bitset_union)(GtkBitset *self, const GtkBitset *other);
    void (*bitset_intersect)(GtkBitset *self, const GtkBitset *other);
    void (*bitset_subtract)(GtkBitset *self, const GtkBitset *other);
    void (*bitset_difference)(GtkBitset *self, const GtkBitset *other);
    void (*bitset_shift_left)(GtkBitset *self, guint amount);
    void (*bitset_shift_right)(GtkBitset *self, guint amount);
    void (*bitset_splice)(GtkBitset *self, guint position, guint removed, guint added);
    GType (*bitset_iter_get_type)(void);
    gboolean (*bitset_iter_init_first)(GtkBitsetIter *iter, const GtkBitset *set, guint *value);
    gboolean (*bitset_iter_init_last)(GtkBitsetIter *iter, const GtkBitset *set, guint *value);
    gboolean (*bitset_iter_init_at)(GtkBitsetIter *iter, const GtkBitset *set, guint target, guint *value);
    gboolean (*bitset_iter_next)(GtkBitsetIter *iter, guint *value);
    gboolean (*bitset_iter_previous)(GtkBitsetIter *iter, guint *value);
    guint (*bitset_iter_get_value)(const GtkBitsetIter *iter);
    gboolean (*bitset_iter_is_valid)(const GtkBitsetIter *iter);
    GType (*bitset_get_type)(void);
    const char * (*bookmark_list_get_filename)(GtkBookmarkList *self);
    void (*bookmark_list_set_attributes)(GtkBookmarkList *self, const char *attributes);
    const char * (*bookmark_list_get_attributes)(GtkBookmarkList *self);
    void (*bookmark_list_set_io_priority)(GtkBookmarkList *self, int io_priority);
    int (*bookmark_list_get_io_priority)(GtkBookmarkList *self);
    gboolean (*bookmark_list_is_loading)(GtkBookmarkList *self);
    GtkBookmarkList * (*bookmark_list_new)(const char *filename, const char *attributes);
    GtkExpression * (*bool_filter_get_expression)(GtkBoolFilter *self);
    void (*bool_filter_set_expression)(GtkBoolFilter *self, GtkExpression *expression);
    gboolean (*bool_filter_get_invert)(GtkBoolFilter *self);
    void (*bool_filter_set_invert)(GtkBoolFilter *self, gboolean invert);
    GtkBoolFilter * (*bool_filter_new)(GtkExpression *expression);
    GtkBorder* (*border_new)(void);
    GtkBorder* (*border_copy)(const GtkBorder *border_);
    void (*border_free)(GtkBorder *border_);
    GType (*border_get_type)(void);
    GtkWidget* (*box_new)(GtkOrientation orientation, int spacing);
    void (*box_set_homogeneous)(GtkBox *box, gboolean homogeneous);
    gboolean (*box_get_homogeneous)(GtkBox *box);
    void (*box_set_spacing)(GtkBox *box, int spacing);
    int (*box_get_spacing)(GtkBox *box);
    void (*box_set_baseline_position)(GtkBox *box, GtkBaselinePosition position);
    GtkBaselinePosition (*box_get_baseline_position)(GtkBox *box);
    void (*box_set_baseline_child)(GtkBox *box, int child);
    int (*box_get_baseline_child)(GtkBox *box);
    void (*box_append)(GtkBox *box, GtkWidget *child);
    void (*box_prepend)(GtkBox *box, GtkWidget *child);
    void (*box_remove)(GtkBox *box, GtkWidget *child);
    void (*box_insert_child_after)(GtkBox *box, GtkWidget *child, GtkWidget *sibling);
    void (*box_reorder_child_after)(GtkBox *box, GtkWidget *child, GtkWidget *sibling);
    GType (*box_get_type)(void);
    void (*box_layout_set_homogeneous)(GtkBoxLayout *box_layout, gboolean homogeneous);
    gboolean (*box_layout_get_homogeneous)(GtkBoxLayout *box_layout);
    void (*box_layout_set_spacing)(GtkBoxLayout *box_layout, guint spacing);
    guint (*box_layout_get_spacing)(GtkBoxLayout *box_layout);
    void (*box_layout_set_baseline_position)(GtkBoxLayout *box_layout, GtkBaselinePosition position);
    GtkBaselinePosition (*box_layout_get_baseline_position)(GtkBoxLayout *box_layout);
    void (*box_layout_set_baseline_child)(GtkBoxLayout *box_layout, int child);
    int (*box_layout_get_baseline_child)(GtkBoxLayout *box_layout);
    GtkLayoutManager * (*box_layout_new)(GtkOrientation orientation);
    const char * (*buildable_get_buildable_id)(GtkBuildable *buildable);
    void (*buildable_parse_context_push)(GtkBuildableParseContext *context, const GtkBuildableParser *parser, gpointer user_data);
    gpointer (*buildable_parse_context_pop)(GtkBuildableParseContext *context);
    const char * (*buildable_parse_context_get_element)(GtkBuildableParseContext *context);
    GPtrArray* (*buildable_parse_context_get_element_stack)(GtkBuildableParseContext *context);
    void (*buildable_parse_context_get_position)(GtkBuildableParseContext *context, int *line_number, int *char_number);
    GType (*buildable_get_type)(void);
    GType (*builder_get_type)(void);
    GtkBuilder* (*builder_new)(void);
    gboolean (*builder_add_from_file)(GtkBuilder *builder, const char *filename, GError **error);
    gboolean (*builder_add_from_resource)(GtkBuilder *builder, const char *resource_path, GError **error);
    gboolean (*builder_add_from_string)(GtkBuilder *builder, const char *buffer, gssize length, GError **error);
    gboolean (*builder_add_objects_from_file)(GtkBuilder *builder, const char *filename, const char **object_ids, GError **error);
    gboolean (*builder_add_objects_from_resource)(GtkBuilder *builder, const char *resource_path, const char **object_ids, GError **error);
    gboolean (*builder_add_objects_from_string)(GtkBuilder *builder, const char *buffer, gssize length, const char **object_ids, GError **error);
    GObject* (*builder_get_object)(GtkBuilder *builder, const char *name);
    GSList* (*builder_get_objects)(GtkBuilder *builder);
    void (*builder_expose_object)(GtkBuilder *builder, const char *name, GObject *object);
    GObject * (*builder_get_current_object)(GtkBuilder *builder);
    void (*builder_set_current_object)(GtkBuilder *builder, GObject *current_object);
    void (*builder_set_translation_domain)(GtkBuilder *builder, const char *domain);
    const char * (*builder_get_translation_domain)(GtkBuilder *builder);
    GtkBuilderScope* (*builder_get_scope)(GtkBuilder *builder);
    void (*builder_set_scope)(GtkBuilder *builder, GtkBuilderScope *scope);
    GType (*builder_get_type_from_name)(GtkBuilder *builder, const char *type_name);
    gboolean (*builder_value_from_string)(GtkBuilder *builder, GParamSpec *pspec, const char *string, GValue *value, GError **error);
    gboolean (*builder_value_from_string_type)(GtkBuilder *builder, GType type, const char *string, GValue *value, GError **error);
    GtkBuilder * (*builder_new_from_file)(const char *filename);
    GtkBuilder * (*builder_new_from_resource)(const char *resource_path);
    GtkBuilder * (*builder_new_from_string)(const char *string, gssize length);
    GClosure * (*builder_create_closure)(GtkBuilder *builder, const char *function_name, GtkBuilderClosureFlags flags, GObject *object, GError **error);
    gboolean (*builder_extend_with_template)(GtkBuilder *builder, GObject *object, GType template_type, const char *buffer, gssize length, GError **error);
    GQuark (*builder_error_quark)(void);
    GtkListItemFactory * (*builder_list_item_factory_new_from_bytes)(GtkBuilderScope *scope, GBytes *bytes);
    GtkListItemFactory * (*builder_list_item_factory_new_from_resource)(GtkBuilderScope *scope, const char *resource_path);
    GBytes * (*builder_list_item_factory_get_bytes)(GtkBuilderListItemFactory *sel);
    const char * (*builder_list_item_factory_get_resource)(GtkBuilderListItemFactory *sel);
    GtkBuilderScope * (*builder_list_item_factory_get_scope)(GtkBuilderListItemFactory *sel);
    GType (*builder_list_item_factory_get_type)(void);
    void (*builder_cscope_add_callback_symbol)(GtkBuilderCScope *self, const char *callback_name, GCallback callback_symbol);
    void (*builder_cscope_add_callback_symbols)(GtkBuilderCScope *self, const char *first_callback_name, GCallback first_callback_symbol, ...);
    GCallback (*builder_cscope_lookup_callback_symbol)(GtkBuilderCScope *self, const char *callback_name);
    GtkWidget* (*button_new)(void);
    GtkWidget* (*button_new_with_label)(const char *label);
    GtkWidget* (*button_new_from_icon_name)(const char *icon_name);
    GtkWidget* (*button_new_with_mnemonic)(const char *label);
    void (*button_set_has_frame)(GtkButton *button, gboolean has_frame);
    gboolean (*button_get_has_frame)(GtkButton *button);
    void (*button_set_label)(GtkButton *button, const char *label);
    const char * (*button_get_label)(GtkButton *button);
    void (*button_set_use_underline)(GtkButton *button, gboolean use_underline);
    gboolean (*button_get_use_underline)(GtkButton *button);
    void (*button_set_icon_name)(GtkButton *button, const char *icon_name);
    const char * (*button_get_icon_name)(GtkButton *button);
    void (*button_set_child)(GtkButton *button, GtkWidget *child);
    GtkWidget * (*button_get_child)(GtkButton *button);
    void (*button_set_can_shrink)(GtkButton *button, gboolean can_shrink);
    gboolean (*button_get_can_shrink)(GtkButton *button);
    GType (*button_get_type)(void);
    GtkWidget* (*calendar_new)(void);
    void (*calendar_select_day)(GtkCalendar *self, GDateTime *date);
    void (*calendar_mark_day)(GtkCalendar *calendar, guint day);
    void (*calendar_unmark_day)(GtkCalendar *calendar, guint day);
    void (*calendar_clear_marks)(GtkCalendar *calendar);
    void (*calendar_set_show_week_numbers)(GtkCalendar *self, gboolean value);
    gboolean (*calendar_get_show_week_numbers)(GtkCalendar *self);
    void (*calendar_set_show_heading)(GtkCalendar *self, gboolean value);
    gboolean (*calendar_get_show_heading)(GtkCalendar *self);
    void (*calendar_set_show_day_names)(GtkCalendar *self, gboolean value);
    gboolean (*calendar_get_show_day_names)(GtkCalendar *self);
    void (*calendar_set_day)(GtkCalendar *self, int day);
    int (*calendar_get_day)(GtkCalendar *self);
    void (*calendar_set_month)(GtkCalendar *self, int month);
    int (*calendar_get_month)(GtkCalendar *self);
    void (*calendar_set_year)(GtkCalendar *self, int year);
    int (*calendar_get_year)(GtkCalendar *self);
    GDateTime * (*calendar_get_date)(GtkCalendar *self);
    gboolean (*calendar_get_day_is_marked)(GtkCalendar *calendar, guint day);
    GType (*calendar_get_type)(void);
    GtkWidget* (*center_box_new)(void);
    void (*center_box_set_start_widget)(GtkCenterBox *self, GtkWidget *child);
    void (*center_box_set_center_widget)(GtkCenterBox *self, GtkWidget *child);
    void (*center_box_set_end_widget)(GtkCenterBox *self, GtkWidget *child);
    GtkWidget * (*center_box_get_start_widget)(GtkCenterBox *self);
    GtkWidget * (*center_box_get_center_widget)(GtkCenterBox *self);
    GtkWidget * (*center_box_get_end_widget)(GtkCenterBox *self);
    void (*center_box_set_baseline_position)(GtkCenterBox *self, GtkBaselinePosition position);
    GtkBaselinePosition (*center_box_get_baseline_position)(GtkCenterBox *self);
    void (*center_box_set_shrink_center_last)(GtkCenterBox *self, gboolean shrink_center_last);
    gboolean (*center_box_get_shrink_center_last)(GtkCenterBox *self);
    GType (*center_box_get_type)(void);
    void (*center_layout_set_orientation)(GtkCenterLayout *self, GtkOrientation orientation);
    GtkOrientation (*center_layout_get_orientation)(GtkCenterLayout *self);
    void (*center_layout_set_baseline_position)(GtkCenterLayout *self, GtkBaselinePosition baseline_position);
    GtkBaselinePosition (*center_layout_get_baseline_position)(GtkCenterLayout *self);
    void (*center_layout_set_start_widget)(GtkCenterLayout *self, GtkWidget *widget);
    GtkWidget * (*center_layout_get_start_widget)(GtkCenterLayout *self);
    void (*center_layout_set_center_widget)(GtkCenterLayout *self, GtkWidget *widget);
    GtkWidget * (*center_layout_get_center_widget)(GtkCenterLayout *self);
    void (*center_layout_set_end_widget)(GtkCenterLayout *self, GtkWidget *widget);
    GtkWidget * (*center_layout_get_end_widget)(GtkCenterLayout *self);
    void (*center_layout_set_shrink_center_last)(GtkCenterLayout *self, gboolean shrink_center_last);
    gboolean (*center_layout_get_shrink_center_last)(GtkCenterLayout *self);
    GtkLayoutManager * (*center_layout_new)(void);
    GtkWidget * (*check_button_new)(void);
    GtkWidget * (*check_button_new_with_label)(const char *label);
    GtkWidget * (*check_button_new_with_mnemonic)(const char *label);
    void (*check_button_set_inconsistent)(GtkCheckButton *check_button, gboolean inconsistent);
    gboolean (*check_button_get_inconsistent)(GtkCheckButton *check_button);
    gboolean (*check_button_get_active)(GtkCheckButton *self);
    void (*check_button_set_active)(GtkCheckButton *self, gboolean setting);
    const char * (*check_button_get_label)(GtkCheckButton *self);
    void (*check_button_set_label)(GtkCheckButton *self, const char *label);
    void (*check_button_set_group)(GtkCheckButton *self, GtkCheckButton *group);
    gboolean (*check_button_get_use_underline)(GtkCheckButton *self);
    void (*check_button_set_use_underline)(GtkCheckButton *self, gboolean setting);
    GtkWidget * (*check_button_get_child)(GtkCheckButton *button);
    void (*check_button_set_child)(GtkCheckButton *button, GtkWidget *child);
    GType (*check_button_get_type)(void);
    GtkColorDialog* (*color_dialog_button_get_dialog)(GtkColorDialogButton *self);
    void (*color_dialog_button_set_dialog)(GtkColorDialogButton *self, GtkColorDialog *dialog);
    const GdkRGBA * (*color_dialog_button_get_rgba)(GtkColorDialogButton *self);
    void (*color_dialog_button_set_rgba)(GtkColorDialogButton *self, const GdkRGBA *color);
    GtkWidget * (*color_dialog_button_new)(GtkColorDialog *dialog);
    const char * (*color_dialog_get_title)(GtkColorDialog *self);
    void (*color_dialog_set_title)(GtkColorDialog *self, const char *title);
    gboolean (*color_dialog_get_modal)(GtkColorDialog *self);
    void (*color_dialog_set_modal)(GtkColorDialog *self, gboolean modal);
    gboolean (*color_dialog_get_with_alpha)(GtkColorDialog *self);
    void (*color_dialog_set_with_alpha)(GtkColorDialog *self, gboolean with_alpha);
    void (*color_dialog_choose_rgba)(GtkColorDialog *self, GtkWindow *parent, const GdkRGBA *initial_color, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GdkRGBA * (*color_dialog_choose_rgba_finish)(GtkColorDialog *self, GAsyncResult *result, GError **error);
    GtkColorDialog* (*color_dialog_new)(void);
    void (*rgb_to_hsv)(float r, float g, float b, float *h, float *s, float *v);
    void (*hsv_to_rgb)(float h, float s, float v, float *r, float *g, float *b);
    guint (*column_view_cell_get_position)(GtkColumnViewCell *sel);
    gboolean (*column_view_cell_get_selected)(GtkColumnViewCell *sel);
    gboolean (*column_view_cell_get_focusable)(GtkColumnViewCell *sel);
    void (*column_view_cell_set_focusable)(GtkColumnViewCell *self, gboolean focusable);
    void (*column_view_cell_set_child)(GtkColumnViewCell *self, GtkWidget *child);
    GtkWidget * (*column_view_cell_get_child)(GtkColumnViewCell *self);
    gpointer (*column_view_cell_get_item)(GtkColumnViewCell *self);
    GtkColumnViewColumn * (*column_view_column_new)(const char *title, GtkListItemFactory *factory);
    GtkColumnView * (*column_view_column_get_column_view)(GtkColumnViewColumn *self);
    void (*column_view_column_set_factory)(GtkColumnViewColumn *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*column_view_column_get_factory)(GtkColumnViewColumn *self);
    void (*column_view_column_set_title)(GtkColumnViewColumn *self, const char *title);
    const char * (*column_view_column_get_title)(GtkColumnViewColumn *self);
    void (*column_view_column_set_sorter)(GtkColumnViewColumn *self, GtkSorter *sorter);
    GtkSorter * (*column_view_column_get_sorter)(GtkColumnViewColumn *self);
    void (*column_view_column_set_visible)(GtkColumnViewColumn *self, gboolean visible);
    gboolean (*column_view_column_get_visible)(GtkColumnViewColumn *self);
    void (*column_view_column_set_header_menu)(GtkColumnViewColumn *self, GMenuModel *menu);
    GMenuModel * (*column_view_column_get_header_menu)(GtkColumnViewColumn *self);
    void (*column_view_column_set_fixed_width)(GtkColumnViewColumn *self, int fixed_width);
    int (*column_view_column_get_fixed_width)(GtkColumnViewColumn *self);
    void (*column_view_column_set_resizable)(GtkColumnViewColumn *self, gboolean resizable);
    gboolean (*column_view_column_get_resizable)(GtkColumnViewColumn *self);
    void (*column_view_column_set_expand)(GtkColumnViewColumn *self, gboolean expand);
    gboolean (*column_view_column_get_expand)(GtkColumnViewColumn *self);
    void (*column_view_column_set_id)(GtkColumnViewColumn *self, const char *id);
    const char * (*column_view_column_get_id)(GtkColumnViewColumn *self);
    GtkWidget * (*column_view_new)(GtkSelectionModel *model);
    GListModel * (*column_view_get_columns)(GtkColumnView *self);
    void (*column_view_append_column)(GtkColumnView *self, GtkColumnViewColumn *column);
    void (*column_view_remove_column)(GtkColumnView *self, GtkColumnViewColumn *column);
    void (*column_view_insert_column)(GtkColumnView *self, guint position, GtkColumnViewColumn *column);
    GtkSelectionModel * (*column_view_get_model)(GtkColumnView *self);
    void (*column_view_set_model)(GtkColumnView *self, GtkSelectionModel *model);
    gboolean (*column_view_get_show_row_separators)(GtkColumnView *self);
    void (*column_view_set_show_row_separators)(GtkColumnView *self, gboolean show_row_separators);
    gboolean (*column_view_get_show_column_separators)(GtkColumnView *self);
    void (*column_view_set_show_column_separators)(GtkColumnView *self, gboolean show_column_separators);
    GtkSorter * (*column_view_get_sorter)(GtkColumnView *self);
    void (*column_view_sort_by_column)(GtkColumnView *self, GtkColumnViewColumn *column, GtkSortType direction);
    void (*column_view_set_single_click_activate)(GtkColumnView *self, gboolean single_click_activate);
    gboolean (*column_view_get_single_click_activate)(GtkColumnView *self);
    void (*column_view_set_reorderable)(GtkColumnView *self, gboolean reorderable);
    gboolean (*column_view_get_reorderable)(GtkColumnView *self);
    void (*column_view_set_enable_rubberband)(GtkColumnView *self, gboolean enable_rubberband);
    gboolean (*column_view_get_enable_rubberband)(GtkColumnView *self);
    void (*column_view_set_tab_behavior)(GtkColumnView *self, GtkListTabBehavior tab_behavior);
    GtkListTabBehavior (*column_view_get_tab_behavior)(GtkColumnView *self);
    void (*column_view_set_row_factory)(GtkColumnView *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*column_view_get_row_factory)(GtkColumnView *self);
    void (*column_view_set_header_factory)(GtkColumnView *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*column_view_get_header_factory)(GtkColumnView *self);
    void (*column_view_scroll_to)(GtkColumnView *self, guint pos, GtkColumnViewColumn *column, GtkListScrollFlags flags, GtkScrollInfo *scroll);
    GType (*column_view_get_type)(void);
    guint (*column_view_row_get_position)(GtkColumnViewRow *sel);
    gboolean (*column_view_row_get_selected)(GtkColumnViewRow *sel);
    gboolean (*column_view_row_get_selectable)(GtkColumnViewRow *sel);
    void (*column_view_row_set_selectable)(GtkColumnViewRow *self, gboolean selectable);
    gboolean (*column_view_row_get_activatable)(GtkColumnViewRow *sel);
    void (*column_view_row_set_activatable)(GtkColumnViewRow *self, gboolean activatable);
    gboolean (*column_view_row_get_focusable)(GtkColumnViewRow *sel);
    void (*column_view_row_set_focusable)(GtkColumnViewRow *self, gboolean focusable);
    const char * (*column_view_row_get_accessible_description)(GtkColumnViewRow *self);
    void (*column_view_row_set_accessible_description)(GtkColumnViewRow *self, const char *description);
    const char * (*column_view_row_get_accessible_label)(GtkColumnViewRow *self);
    void (*column_view_row_set_accessible_label)(GtkColumnViewRow *self, const char *label);
    gpointer (*column_view_row_get_item)(GtkColumnViewRow *self);
    GtkSortType (*column_view_sorter_get_primary_sort_order)(GtkColumnViewSorter *self);
    guint (*column_view_sorter_get_n_sort_columns)(GtkColumnViewSorter *self);
    GtkColumnViewColumn * (*column_view_sorter_get_nth_sort_column)(GtkColumnViewSorter *self, guint position, GtkSortType *sort_order);
    GtkColumnViewColumn * (*column_view_sorter_get_primary_sort_column)(GtkColumnViewSorter *self);
    void (*constraint_guide_set_min_size)(GtkConstraintGuide *guide, int width, int height);
    void (*constraint_guide_get_min_size)(GtkConstraintGuide *guide, int *width, int *height);
    void (*constraint_guide_set_nat_size)(GtkConstraintGuide *guide, int width, int height);
    void (*constraint_guide_get_nat_size)(GtkConstraintGuide *guide, int *width, int *height);
    void (*constraint_guide_set_max_size)(GtkConstraintGuide *guide, int width, int height);
    void (*constraint_guide_get_max_size)(GtkConstraintGuide *guide, int *width, int *height);
    GtkConstraintStrength (*constraint_guide_get_strength)(GtkConstraintGuide *guide);
    void (*constraint_guide_set_strength)(GtkConstraintGuide *guide, GtkConstraintStrength strength);
    void (*constraint_guide_set_name)(GtkConstraintGuide *guide, const char *name);
    const char * (*constraint_guide_get_name)(GtkConstraintGuide *guide);
    GtkConstraintGuide * (*constraint_guide_new)(void);
    GtkConstraint * (*constraint_new_constant)(gpointer target, GtkConstraintAttribute target_attribute, GtkConstraintRelation relation, double constant, int strength);
    GtkConstraintTarget * (*constraint_get_target)(GtkConstraint *constraint);
    GtkConstraintAttribute (*constraint_get_target_attribute)(GtkConstraint *constraint);
    GtkConstraintTarget * (*constraint_get_source)(GtkConstraint *constraint);
    GtkConstraintAttribute (*constraint_get_source_attribute)(GtkConstraint *constraint);
    GtkConstraintRelation (*constraint_get_relation)(GtkConstraint *constraint);
    double (*constraint_get_multiplier)(GtkConstraint *constraint);
    double (*constraint_get_constant)(GtkConstraint *constraint);
    int (*constraint_get_strength)(GtkConstraint *constraint);
    gboolean (*constraint_is_required)(GtkConstraint *constraint);
    gboolean (*constraint_is_attached)(GtkConstraint *constraint);
    gboolean (*constraint_is_constant)(GtkConstraint *constraint);
    GtkLayoutManager * (*constraint_layout_new)(void);
    void (*constraint_layout_add_constraint)(GtkConstraintLayout *layout, GtkConstraint *constraint);
    void (*constraint_layout_remove_constraint)(GtkConstraintLayout *layout, GtkConstraint *constraint);
    void (*constraint_layout_add_guide)(GtkConstraintLayout *layout, GtkConstraintGuide *guide);
    void (*constraint_layout_remove_guide)(GtkConstraintLayout *layout, GtkConstraintGuide *guide);
    void (*constraint_layout_remove_all_constraints)(GtkConstraintLayout *layout);
    GList * (*constraint_layout_add_constraints_from_description)(GtkConstraintLayout *layout, const char * const lines[], gsize n_lines, int hspacing, int vspacing, GError **error, const char *first_view, ...);
    GList * (*constraint_layout_add_constraints_from_descriptionv)(GtkConstraintLayout *layout, const char * const lines[], gsize n_lines, int hspacing, int vspacing, GHashTable *views, GError **error);
    GListModel * (*constraint_layout_observe_constraints)(GtkConstraintLayout *layout);
    GListModel * (*constraint_layout_observe_guides)(GtkConstraintLayout *layout);
    GQuark (*constraint_vfl_parser_error_quark)(void);
    GtkCssProvider * (*css_provider_new)(void);
    char * (*css_provider_to_string)(GtkCssProvider *provider);
    void (*css_provider_load_from_data)(GtkCssProvider *css_provider, const char *data, gssize length);
    void (*css_provider_load_from_string)(GtkCssProvider *css_provider, const char *string);
    void (*css_provider_load_from_bytes)(GtkCssProvider *css_provider, GBytes *data);
    void (*css_provider_load_from_file)(GtkCssProvider *css_provider, GFile *file);
    void (*css_provider_load_from_path)(GtkCssProvider *css_provider, const char *path);
    void (*css_provider_load_from_resource)(GtkCssProvider *css_provider, const char *resource_path);
    void (*css_provider_load_named)(GtkCssProvider *provider, const char *name, const char *variant);
    GType (*css_provider_get_type)(void);
    void (*custom_filter_set_filter_func)(GtkCustomFilter *self, GtkCustomFilterFunc match_func, gpointer user_data, GDestroyNotify user_destroy);
    GtkCustomFilter * (*custom_filter_new)(GtkCustomFilterFunc match_func, gpointer user_data, GDestroyNotify user_destroy);
    GtkLayoutManager * (*custom_layout_new)(GtkCustomRequestModeFunc request_mode, GtkCustomMeasureFunc measure, GtkCustomAllocateFunc allocate);
    void (*custom_sorter_set_sort_func)(GtkCustomSorter *self, GCompareDataFunc sort_func, gpointer user_data, GDestroyNotify user_destroy);
    GtkCustomSorter * (*custom_sorter_new)(GCompareDataFunc sort_func, gpointer user_data, GDestroyNotify user_destroy);
    void (*set_debug_flags)(GtkDebugFlags flags);
    GtkDebugFlags (*get_debug_flags)(void);
    GQuark (*dialog_error_quark)(void);
    void (*directory_list_set_file)(GtkDirectoryList *self, GFile *file);
    GFile * (*directory_list_get_file)(GtkDirectoryList *self);
    void (*directory_list_set_attributes)(GtkDirectoryList *self, const char *attributes);
    const char * (*directory_list_get_attributes)(GtkDirectoryList *self);
    void (*directory_list_set_io_priority)(GtkDirectoryList *self, int io_priority);
    int (*directory_list_get_io_priority)(GtkDirectoryList *self);
    gboolean (*directory_list_is_loading)(GtkDirectoryList *self);
    const GError * (*directory_list_get_error)(GtkDirectoryList *self);
    void (*directory_list_set_monitored)(GtkDirectoryList *self, gboolean monitored);
    gboolean (*directory_list_get_monitored)(GtkDirectoryList *self);
    GtkDirectoryList * (*directory_list_new)(const char *attributes, GFile *file);
    void (*drag_icon_set_child)(GtkDragIcon *self, GtkWidget *child);
    GtkWidget * (*drag_icon_get_child)(GtkDragIcon *self);
    void (*drag_icon_set_from_paintable)(GdkDrag *drag, GdkPaintable *paintable, int hot_x, int hot_y);
    GtkWidget * (*drag_icon_create_widget_for_value)(const GValue *value);
    GtkWidget * (*drag_icon_get_for_drag)(GdkDrag *drag);
    GtkDragSource* (*drag_source_new)(void);
    void (*drag_source_set_content)(GtkDragSource *source, GdkContentProvider *content);
    GdkContentProvider* (*drag_source_get_content)(GtkDragSource *source);
    void (*drag_source_set_actions)(GtkDragSource *source, GdkDragAction actions);
    GdkDragAction (*drag_source_get_actions)(GtkDragSource *source);
    void (*drag_source_set_icon)(GtkDragSource *source, GdkPaintable *paintable, int hot_x, int hot_y);
    void (*drag_source_drag_cancel)(GtkDragSource *source);
    GdkDrag * (*drag_source_get_drag)(GtkDragSource *source);
    gboolean (*drag_check_threshold)(GtkWidget *widget, int start_x, int start_y, int current_x, int current_y);
    GType (*drag_source_get_type)(void);
    GtkWidget* (*drawing_area_new)(void);
    void (*drawing_area_set_content_width)(GtkDrawingArea *self, int width);
    int (*drawing_area_get_content_width)(GtkDrawingArea *self);
    void (*drawing_area_set_content_height)(GtkDrawingArea *self, int height);
    int (*drawing_area_get_content_height)(GtkDrawingArea *self);
    void (*drawing_area_set_draw_func)(GtkDrawingArea *self, GtkDrawingAreaDrawFunc draw_func, gpointer user_data, GDestroyNotify destroy);
    GType (*drawing_area_get_type)(void);
    GtkEventController * (*drop_controller_motion_new)(void);
    gboolean (*drop_controller_motion_contains_pointer)(GtkDropControllerMotion *self);
    GdkDrop * (*drop_controller_motion_get_drop)(GtkDropControllerMotion *self);
    gboolean (*drop_controller_motion_is_pointer)(GtkDropControllerMotion *self);
    GType (*drop_controller_motion_get_type)(void);
    GtkWidget * (*drop_down_new_from_strings)(const char * const * strings);
    void (*drop_down_set_model)(GtkDropDown *self, GListModel *model);
    GListModel * (*drop_down_get_model)(GtkDropDown *self);
    void (*drop_down_set_selected)(GtkDropDown *self, guint position);
    guint (*drop_down_get_selected)(GtkDropDown *self);
    gpointer (*drop_down_get_selected_item)(GtkDropDown *self);
    void (*drop_down_set_factory)(GtkDropDown *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*drop_down_get_factory)(GtkDropDown *self);
    void (*drop_down_set_list_factory)(GtkDropDown *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*drop_down_get_list_factory)(GtkDropDown *self);
    void (*drop_down_set_header_factory)(GtkDropDown *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*drop_down_get_header_factory)(GtkDropDown *self);
    void (*drop_down_set_expression)(GtkDropDown *self, GtkExpression *expression);
    GtkExpression * (*drop_down_get_expression)(GtkDropDown *self);
    void (*drop_down_set_enable_search)(GtkDropDown *self, gboolean enable_search);
    gboolean (*drop_down_get_enable_search)(GtkDropDown *self);
    void (*drop_down_set_show_arrow)(GtkDropDown *self, gboolean show_arrow);
    gboolean (*drop_down_get_show_arrow)(GtkDropDown *self);
    void (*drop_down_set_search_match_mode)(GtkDropDown *self, GtkStringFilterMatchMode search_match_mode);
    GtkStringFilterMatchMode (*drop_down_get_search_match_mode)(GtkDropDown *self);
    GtkWidget * (*drop_down_new)(GListModel *model, GtkExpression *expression);
    GtkDropTargetAsync * (*drop_target_async_new)(GdkContentFormats *formats, GdkDragAction actions);
    void (*drop_target_async_set_formats)(GtkDropTargetAsync *self, GdkContentFormats *formats);
    GdkContentFormats * (*drop_target_async_get_formats)(GtkDropTargetAsync *self);
    void (*drop_target_async_set_actions)(GtkDropTargetAsync *self, GdkDragAction actions);
    GdkDragAction (*drop_target_async_get_actions)(GtkDropTargetAsync *self);
    void (*drop_target_async_reject_drop)(GtkDropTargetAsync *self, GdkDrop *drop);
    GType (*drop_target_async_get_type)(void);
    GtkDropTarget * (*drop_target_new)(GType type, GdkDragAction actions);
    void (*drop_target_set_gtypes)(GtkDropTarget *self, GType *types, gsize n_types);
    const GType * (*drop_target_get_gtypes)(GtkDropTarget *self, gsize *n_types);
    GdkContentFormats * (*drop_target_get_formats)(GtkDropTarget *self);
    void (*drop_target_set_actions)(GtkDropTarget *self, GdkDragAction actions);
    GdkDragAction (*drop_target_get_actions)(GtkDropTarget *self);
    void (*drop_target_set_preload)(GtkDropTarget *self, gboolean preload);
    gboolean (*drop_target_get_preload)(GtkDropTarget *self);
    GdkDrop * (*drop_target_get_drop)(GtkDropTarget *self);
    GdkDrop * (*drop_target_get_current_drop)(GtkDropTarget *self);
    const GValue * (*drop_target_get_value)(GtkDropTarget *self);
    void (*drop_target_reject)(GtkDropTarget *self);
    GType (*drop_target_get_type)(void);
    const char * (*editable_get_text)(GtkEditable *editable);
    void (*editable_set_text)(GtkEditable *editable, const char *text);
    char * (*editable_get_chars)(GtkEditable *editable, int start_pos, int end_pos);
    void (*editable_insert_text)(GtkEditable *editable, const char *text, int length, int *position);
    void (*editable_delete_text)(GtkEditable *editable, int start_pos, int end_pos);
    gboolean (*editable_get_selection_bounds)(GtkEditable *editable, int *start_pos, int *end_pos);
    void (*editable_delete_selection)(GtkEditable *editable);
    void (*editable_select_region)(GtkEditable *editable, int start_pos, int end_pos);
    void (*editable_set_position)(GtkEditable *editable, int position);
    int (*editable_get_position)(GtkEditable *editable);
    gboolean (*editable_get_editable)(GtkEditable *editable);
    void (*editable_set_editable)(GtkEditable *editable, gboolean is_editable);
    float (*editable_get_alignment)(GtkEditable *editable);
    void (*editable_set_alignment)(GtkEditable *editable, float xalign);
    int (*editable_get_width_chars)(GtkEditable *editable);
    void (*editable_set_width_chars)(GtkEditable *editable, int n_chars);
    int (*editable_get_max_width_chars)(GtkEditable *editable);
    void (*editable_set_max_width_chars)(GtkEditable *editable, int n_chars);
    gboolean (*editable_get_enable_undo)(GtkEditable *editable);
    void (*editable_set_enable_undo)(GtkEditable *editable, gboolean enable_undo);
    guint (*editable_install_properties)(GObjectClass *object_class, guint first_prop);
    GtkEditable* (*editable_get_delegate)(GtkEditable *editable);
    void (*editable_init_delegate)(GtkEditable *editable);
    void (*editable_finish_delegate)(GtkEditable *editable);
    gboolean (*editable_delegate_set_property)(GObject *object, guint prop_id, const GValue *value, GParamSpec *pspec);
    gboolean (*editable_delegate_get_property)(GObject *object, guint prop_id, GValue *value, GParamSpec *pspec);
    gboolean (*editable_delegate_get_accessible_platform_state)(GtkEditable *editable, GtkAccessiblePlatformState state);
    GType (*editable_get_type)(void);
    gboolean (*editable_label_get_editing)(GtkEditableLabel *self);
    void (*editable_label_start_editing)(GtkEditableLabel *self);
    void (*editable_label_stop_editing)(GtkEditableLabel *self, gboolean commit);
    GtkWidget * (*editable_label_new)(const char *str);
    GtkWidget* (*emoji_chooser_new)(void);
    GType (*emoji_chooser_get_type)(void);
    GtkEntryBuffer* (*entry_buffer_new)(const char *initial_chars, int n_initial_chars);
    gsize (*entry_buffer_get_bytes)(GtkEntryBuffer *buffer);
    guint (*entry_buffer_get_length)(GtkEntryBuffer *buffer);
    const char * (*entry_buffer_get_text)(GtkEntryBuffer *buffer);
    void (*entry_buffer_set_text)(GtkEntryBuffer *buffer, const char *chars, int n_chars);
    void (*entry_buffer_set_max_length)(GtkEntryBuffer *buffer, int max_length);
    int (*entry_buffer_get_max_length)(GtkEntryBuffer *buffer);
    guint (*entry_buffer_insert_text)(GtkEntryBuffer *buffer, guint position, const char *chars, int n_chars);
    guint (*entry_buffer_delete_text)(GtkEntryBuffer *buffer, guint position, int n_chars);
    void (*entry_buffer_emit_inserted_text)(GtkEntryBuffer *buffer, guint position, const char *chars, guint n_chars);
    void (*entry_buffer_emit_deleted_text)(GtkEntryBuffer *buffer, guint position, guint n_chars);
    GType (*entry_buffer_get_type)(void);
    GtkWidget* (*entry_new)(void);
    GtkWidget* (*entry_new_with_buffer)(GtkEntryBuffer *buffer);
    GtkEntryBuffer* (*entry_get_buffer)(GtkEntry *entry);
    void (*entry_set_buffer)(GtkEntry *entry, GtkEntryBuffer *buffer);
    void (*entry_set_visibility)(GtkEntry *entry, gboolean visible);
    gboolean (*entry_get_visibility)(GtkEntry *entry);
    void (*entry_set_invisible_char)(GtkEntry *entry, gunichar ch);
    gunichar (*entry_get_invisible_char)(GtkEntry *entry);
    void (*entry_unset_invisible_char)(GtkEntry *entry);
    void (*entry_set_has_frame)(GtkEntry *entry, gboolean setting);
    gboolean (*entry_get_has_frame)(GtkEntry *entry);
    void (*entry_set_overwrite_mode)(GtkEntry *entry, gboolean overwrite);
    gboolean (*entry_get_overwrite_mode)(GtkEntry *entry);
    void (*entry_set_max_length)(GtkEntry *entry, int max);
    int (*entry_get_max_length)(GtkEntry *entry);
    guint16 (*entry_get_text_length)(GtkEntry *entry);
    void (*entry_set_activates_default)(GtkEntry *entry, gboolean setting);
    gboolean (*entry_get_activates_default)(GtkEntry *entry);
    void (*entry_set_alignment)(GtkEntry *entry, float xalign);
    float (*entry_get_alignment)(GtkEntry *entry);
    void (*entry_set_completion)(GtkEntry *entry, GtkEntryCompletion *completion);
    GtkEntryCompletion* (*entry_get_completion)(GtkEntry *entry);
    void (*entry_set_progress_fraction)(GtkEntry *entry, double fraction);
    double (*entry_get_progress_fraction)(GtkEntry *entry);
    void (*entry_set_progress_pulse_step)(GtkEntry *entry, double fraction);
    double (*entry_get_progress_pulse_step)(GtkEntry *entry);
    void (*entry_progress_pulse)(GtkEntry *entry);
    const char * (*entry_get_placeholder_text)(GtkEntry *entry);
    void (*entry_set_placeholder_text)(GtkEntry *entry, const char *text);
    void (*entry_set_icon_from_paintable)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPaintable *paintable);
    void (*entry_set_icon_from_icon_name)(GtkEntry *entry, GtkEntryIconPosition icon_pos, const char *icon_name);
    void (*entry_set_icon_from_gicon)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon);
    GtkImageType (*entry_get_icon_storage_type)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    GdkPaintable * (*entry_get_icon_paintable)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    const char * (*entry_get_icon_name)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    GIcon* (*entry_get_icon_gicon)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    void (*entry_set_icon_activatable)(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable);
    gboolean (*entry_get_icon_activatable)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    void (*entry_set_icon_sensitive)(GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive);
    gboolean (*entry_get_icon_sensitive)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    int (*entry_get_icon_at_pos)(GtkEntry *entry, int x, int y);
    void (*entry_set_icon_tooltip_text)(GtkEntry *entry, GtkEntryIconPosition icon_pos, const char *tooltip);
    char * (*entry_get_icon_tooltip_text)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    void (*entry_set_icon_tooltip_markup)(GtkEntry *entry, GtkEntryIconPosition icon_pos, const char *tooltip);
    char * (*entry_get_icon_tooltip_markup)(GtkEntry *entry, GtkEntryIconPosition icon_pos);
    void (*entry_set_icon_drag_source)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkContentProvider *provider, GdkDragAction actions);
    int (*entry_get_current_icon_drag_source)(GtkEntry *entry);
    void (*entry_get_icon_area)(GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkRectangle *icon_area);
    void (*entry_reset_im_context)(GtkEntry *entry);
    void (*entry_set_input_purpose)(GtkEntry *entry, GtkInputPurpose purpose);
    GtkInputPurpose (*entry_get_input_purpose)(GtkEntry *entry);
    void (*entry_set_input_hints)(GtkEntry *entry, GtkInputHints hints);
    GtkInputHints (*entry_get_input_hints)(GtkEntry *entry);
    void (*entry_set_attributes)(GtkEntry *entry, PangoAttrList *attrs);
    PangoAttrList* (*entry_get_attributes)(GtkEntry *entry);
    void (*entry_set_tabs)(GtkEntry *entry, PangoTabArray *tabs);
    PangoTabArray* (*entry_get_tabs)(GtkEntry *entry);
    gboolean (*entry_grab_focus_without_selecting)(GtkEntry *entry);
    void (*entry_set_extra_menu)(GtkEntry *entry, GMenuModel *model);
    GMenuModel * (*entry_get_extra_menu)(GtkEntry *entry);
    GType (*entry_get_type)(void);
    GtkEventController* (*event_controller_focus_new)(void);
    gboolean (*event_controller_focus_contains_focus)(GtkEventControllerFocus *self);
    gboolean (*event_controller_focus_is_focus)(GtkEventControllerFocus *self);
    GType (*event_controller_focus_get_type)(void);
    GtkWidget * (*event_controller_get_widget)(GtkEventController *controller);
    void (*event_controller_reset)(GtkEventController *controller);
    GtkPropagationPhase (*event_controller_get_propagation_phase)(GtkEventController *controller);
    void (*event_controller_set_propagation_phase)(GtkEventController *controller, GtkPropagationPhase phase);
    GtkPropagationLimit (*event_controller_get_propagation_limit)(GtkEventController *controller);
    void (*event_controller_set_propagation_limit)(GtkEventController *controller, GtkPropagationLimit limit);
    const char * (*event_controller_get_name)(GtkEventController *controller);
    void (*event_controller_set_name)(GtkEventController *controller, const char *name);
    void (*event_controller_set_static_name)(GtkEventController *controller, const char *name);
    GdkEvent * (*event_controller_get_current_event)(GtkEventController *controller);
    guint32 (*event_controller_get_current_event_time)(GtkEventController *controller);
    GdkDevice * (*event_controller_get_current_event_device)(GtkEventController *controller);
    GdkModifierType (*event_controller_get_current_event_state)(GtkEventController *controller);
    GType (*event_controller_get_type)(void);
    GtkEventController* (*event_controller_key_new)(void);
    void (*event_controller_key_set_im_context)(GtkEventControllerKey *controller, GtkIMContext *im_context);
    GtkIMContext * (*event_controller_key_get_im_context)(GtkEventControllerKey *controller);
    gboolean (*event_controller_key_forward)(GtkEventControllerKey *controller, GtkWidget *widget);
    guint (*event_controller_key_get_group)(GtkEventControllerKey *controller);
    GType (*event_controller_key_get_type)(void);
    GtkEventController* (*event_controller_legacy_new)(void);
    GType (*event_controller_legacy_get_type)(void);
    GtkEventController* (*event_controller_motion_new)(void);
    gboolean (*event_controller_motion_contains_pointer)(GtkEventControllerMotion *self);
    gboolean (*event_controller_motion_is_pointer)(GtkEventControllerMotion *self);
    GType (*event_controller_motion_get_type)(void);
    GtkEventController* (*event_controller_scroll_new)(GtkEventControllerScrollFlags flags);
    void (*event_controller_scroll_set_flags)(GtkEventControllerScroll *scroll, GtkEventControllerScrollFlags flags);
    GtkEventControllerScrollFlags (*event_controller_scroll_get_flags)(GtkEventControllerScroll *scroll);
    GdkScrollUnit (*event_controller_scroll_get_unit)(GtkEventControllerScroll *scroll);
    GType (*event_controller_scroll_get_type)(void);
    GtkWidget* (*expander_new)(const char *label);
    GtkWidget* (*expander_new_with_mnemonic)(const char *label);
    void (*expander_set_expanded)(GtkExpander *expander, gboolean expanded);
    gboolean (*expander_get_expanded)(GtkExpander *expander);
    void (*expander_set_label)(GtkExpander *expander, const char *label);
    const char * (*expander_get_label)(GtkExpander *expander);
    void (*expander_set_use_underline)(GtkExpander *expander, gboolean use_underline);
    gboolean (*expander_get_use_underline)(GtkExpander *expander);
    void (*expander_set_use_markup)(GtkExpander *expander, gboolean use_markup);
    gboolean (*expander_get_use_markup)(GtkExpander *expander);
    void (*expander_set_label_widget)(GtkExpander *expander, GtkWidget *label_widget);
    GtkWidget* (*expander_get_label_widget)(GtkExpander *expander);
    void (*expander_set_resize_toplevel)(GtkExpander *expander, gboolean resize_toplevel);
    gboolean (*expander_get_resize_toplevel)(GtkExpander *expander);
    void (*expander_set_child)(GtkExpander *expander, GtkWidget *child);
    GtkWidget * (*expander_get_child)(GtkExpander *expander);
    GType (*expander_get_type)(void);
    GtkExpression * (*expression_ref)(GtkExpression *self);
    void (*expression_unref)(GtkExpression *self);
    gboolean (*expression_is_static)(GtkExpression *self);
    gboolean (*expression_evaluate)(GtkExpression *self, gpointer this_, GValue *value);
    GtkExpressionWatch * (*expression_watch)(GtkExpression *self, gpointer this_, GtkExpressionNotify notify, gpointer user_data, GDestroyNotify user_destroy);
    GtkExpressionWatch * (*expression_bind)(GtkExpression *self, gpointer target, const char * property, gpointer this_);
    GType (*expression_watch_get_type)(void);
    GtkExpressionWatch * (*expression_watch_ref)(GtkExpressionWatch *watch);
    void (*expression_watch_unref)(GtkExpressionWatch *watch);
    gboolean (*expression_watch_evaluate)(GtkExpressionWatch *watch, GValue *value);
    void (*expression_watch_unwatch)(GtkExpressionWatch *watch);
    GType (*property_expression_get_type)(void);
    GtkExpression * (*property_expression_new)(GType this_type, GtkExpression *expression, const char *property_name);
    GtkExpression * (*property_expression_new_for_pspec)(GtkExpression *expression, GParamSpec *pspec);
    GtkExpression * (*property_expression_get_expression)(GtkExpression *expression);
    GParamSpec * (*property_expression_get_pspec)(GtkExpression *expression);
    GType (*constant_expression_get_type)(void);
    GtkExpression * (*constant_expression_new)(GType value_type, ...);
    GtkExpression * (*constant_expression_new_for_value)(const GValue *value);
    const GValue * (*constant_expression_get_value)(GtkExpression *expression);
    GType (*object_expression_get_type)(void);
    GtkExpression * (*object_expression_new)(GObject *object);
    GObject * (*object_expression_get_object)(GtkExpression *expression);
    GType (*closure_expression_get_type)(void);
    GtkExpression * (*closure_expression_new)(GType value_type, GClosure *closure, guint n_params, GtkExpression **params);
    GType (*cclosure_expression_get_type)(void);
    GtkExpression * (*cclosure_expression_new)(GType value_type, GClosureMarshal marshal, guint n_params, GtkExpression **params, GCallback callback_func, gpointer user_data, GClosureNotify user_destroy);
    void (*value_set_expression)(GValue *value, GtkExpression *expression);
    void (*value_take_expression)(GValue *value, GtkExpression *expression);
    GtkExpression * (*value_get_expression)(const GValue *value);
    GtkExpression * (*value_dup_expression)(const GValue *value);
    GType (*param_expression_get_type)(void);
    GParamSpec * (*param_spec_expression)(const char *name, const char *nick, const char *blurb, GParamFlags flags);
    GType (*expression_get_type)(void);
    const char * (*file_dialog_get_title)(GtkFileDialog *self);
    void (*file_dialog_set_title)(GtkFileDialog *self, const char *title);
    gboolean (*file_dialog_get_modal)(GtkFileDialog *self);
    void (*file_dialog_set_modal)(GtkFileDialog *self, gboolean modal);
    GListModel * (*file_dialog_get_filters)(GtkFileDialog *self);
    void (*file_dialog_set_filters)(GtkFileDialog *self, GListModel *filters);
    GtkFileFilter * (*file_dialog_get_default_filter)(GtkFileDialog *self);
    void (*file_dialog_set_default_filter)(GtkFileDialog *self, GtkFileFilter *filter);
    GFile * (*file_dialog_get_initial_folder)(GtkFileDialog *self);
    void (*file_dialog_set_initial_folder)(GtkFileDialog *self, GFile *folder);
    const char * (*file_dialog_get_initial_name)(GtkFileDialog *self);
    void (*file_dialog_set_initial_name)(GtkFileDialog *self, const char *name);
    GFile * (*file_dialog_get_initial_file)(GtkFileDialog *self);
    void (*file_dialog_set_initial_file)(GtkFileDialog *self, GFile *file);
    const char * (*file_dialog_get_accept_label)(GtkFileDialog *self);
    void (*file_dialog_set_accept_label)(GtkFileDialog *self, const char *accept_label);
    void (*file_dialog_open)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GFile * (*file_dialog_open_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
    void (*file_dialog_select_folder)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GFile * (*file_dialog_select_folder_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
    void (*file_dialog_save)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GFile * (*file_dialog_save_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
    void (*file_dialog_open_multiple)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GListModel * (*file_dialog_open_multiple_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
    void (*file_dialog_select_multiple_folders)(GtkFileDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GListModel * (*file_dialog_select_multiple_folders_finish)(GtkFileDialog *self, GAsyncResult *result, GError **error);
    GtkFileDialog * (*file_dialog_new)(void);
    GtkFileFilter * (*file_filter_new)(void);
    void (*file_filter_set_name)(GtkFileFilter *filter, const char *name);
    const char * (*file_filter_get_name)(GtkFileFilter *filter);
    void (*file_filter_add_mime_type)(GtkFileFilter *filter, const char *mime_type);
    void (*file_filter_add_pattern)(GtkFileFilter *filter, const char *pattern);
    void (*file_filter_add_suffix)(GtkFileFilter *filter, const char *suffix);
    void (*file_filter_add_pixbuf_formats)(GtkFileFilter *filter);
    const char ** (*file_filter_get_attributes)(GtkFileFilter *filter);
    GVariant * (*file_filter_to_gvariant)(GtkFileFilter *filter);
    GtkFileFilter * (*file_filter_new_from_gvariant)(GVariant *variant);
    GType (*file_filter_get_type)(void);
    GFile * (*file_launcher_get_file)(GtkFileLauncher *self);
    void (*file_launcher_set_file)(GtkFileLauncher *self, GFile *file);
    gboolean (*file_launcher_get_always_ask)(GtkFileLauncher *self);
    void (*file_launcher_set_always_ask)(GtkFileLauncher *self, gboolean always_ask);
    gboolean (*file_launcher_get_writable)(GtkFileLauncher *self);
    void (*file_launcher_set_writable)(GtkFileLauncher *self, gboolean writable);
    void (*file_launcher_launch)(GtkFileLauncher *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*file_launcher_launch_finish)(GtkFileLauncher *self, GAsyncResult *result, GError **error);
    void (*file_launcher_open_containing_folder)(GtkFileLauncher *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*file_launcher_open_containing_folder_finish)(GtkFileLauncher *self, GAsyncResult *result, GError **error);
    GtkFileLauncher * (*file_launcher_new)(GFile *file);
    GtkFilterMatch (*filter_get_strictness)(GtkFilter *self);
    void (*filter_changed)(GtkFilter *self, GtkFilterChange change);
    gboolean (*filter_match)(GtkFilter *self, gpointer item);
    void (*filter_list_model_set_filter)(GtkFilterListModel *self, GtkFilter *filter);
    GtkFilter * (*filter_list_model_get_filter)(GtkFilterListModel *self);
    void (*filter_list_model_set_model)(GtkFilterListModel *self, GListModel *model);
    GListModel * (*filter_list_model_get_model)(GtkFilterListModel *self);
    void (*filter_list_model_set_incremental)(GtkFilterListModel *self, gboolean incremental);
    gboolean (*filter_list_model_get_incremental)(GtkFilterListModel *self);
    guint (*filter_list_model_get_pending)(GtkFilterListModel *self);
    GtkFilterListModel * (*filter_list_model_new)(GListModel *model, GtkFilter *filter);
    GtkWidget * (*fixed_new)(void);
    void (*fixed_put)(GtkFixed *fixed, GtkWidget *widget, double x, double y);
    void (*fixed_remove)(GtkFixed *fixed, GtkWidget *widget);
    void (*fixed_move)(GtkFixed *fixed, GtkWidget *widget, double x, double y);
    void (*fixed_get_child_position)(GtkFixed *fixed, GtkWidget *widget, double *x, double *y);
    void (*fixed_set_child_transform)(GtkFixed *fixed, GtkWidget *widget, GskTransform *transform);
    GskTransform * (*fixed_get_child_transform)(GtkFixed *fixed, GtkWidget *widget);
    GType (*fixed_get_type)(void);
    void (*fixed_layout_child_set_transform)(GtkFixedLayoutChild *child, GskTransform *transform);
    GskTransform * (*fixed_layout_child_get_transform)(GtkFixedLayoutChild *child);
    GtkLayoutManager * (*fixed_layout_new)(void);
    void (*flatten_list_model_set_model)(GtkFlattenListModel *self, GListModel *model);
    GListModel * (*flatten_list_model_get_model)(GtkFlattenListModel *self);
    GListModel * (*flatten_list_model_get_model_for_item)(GtkFlattenListModel *self, guint position);
    GtkFlattenListModel * (*flatten_list_model_new)(GListModel *model);
    GtkWidget* (*flow_box_child_new)(void);
    void (*flow_box_child_set_child)(GtkFlowBoxChild *self, GtkWidget *child);
    GtkWidget * (*flow_box_child_get_child)(GtkFlowBoxChild *self);
    int (*flow_box_child_get_index)(GtkFlowBoxChild *child);
    gboolean (*flow_box_child_is_selected)(GtkFlowBoxChild *child);
    void (*flow_box_child_changed)(GtkFlowBoxChild *child);
    GType (*flow_box_get_type)(void);
    GtkWidget* (*flow_box_new)(void);
    void (*flow_box_bind_model)(GtkFlowBox *box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func);
    void (*flow_box_set_homogeneous)(GtkFlowBox *box, gboolean homogeneous);
    gboolean (*flow_box_get_homogeneous)(GtkFlowBox *box);
    void (*flow_box_set_row_spacing)(GtkFlowBox *box, guint spacing);
    guint (*flow_box_get_row_spacing)(GtkFlowBox *box);
    void (*flow_box_set_column_spacing)(GtkFlowBox *box, guint spacing);
    guint (*flow_box_get_column_spacing)(GtkFlowBox *box);
    void (*flow_box_set_min_children_per_line)(GtkFlowBox *box, guint n_children);
    guint (*flow_box_get_min_children_per_line)(GtkFlowBox *box);
    void (*flow_box_set_max_children_per_line)(GtkFlowBox *box, guint n_children);
    guint (*flow_box_get_max_children_per_line)(GtkFlowBox *box);
    void (*flow_box_set_activate_on_single_click)(GtkFlowBox *box, gboolean single);
    gboolean (*flow_box_get_activate_on_single_click)(GtkFlowBox *box);
    void (*flow_box_prepend)(GtkFlowBox *self, GtkWidget *child);
    void (*flow_box_append)(GtkFlowBox *self, GtkWidget *child);
    void (*flow_box_insert)(GtkFlowBox *box, GtkWidget *widget, int position);
    void (*flow_box_remove)(GtkFlowBox *box, GtkWidget *widget);
    void (*flow_box_remove_all)(GtkFlowBox *box);
    GtkFlowBoxChild* (*flow_box_get_child_at_index)(GtkFlowBox *box, int idx);
    GtkFlowBoxChild* (*flow_box_get_child_at_pos)(GtkFlowBox *box, int x, int y);
    void (*flow_box_selected_foreach)(GtkFlowBox *box, GtkFlowBoxForeachFunc func, gpointer data);
    GList* (*flow_box_get_selected_children)(GtkFlowBox *box);
    void (*flow_box_select_child)(GtkFlowBox *box, GtkFlowBoxChild *child);
    void (*flow_box_unselect_child)(GtkFlowBox *box, GtkFlowBoxChild *child);
    void (*flow_box_select_all)(GtkFlowBox *box);
    void (*flow_box_unselect_all)(GtkFlowBox *box);
    void (*flow_box_set_selection_mode)(GtkFlowBox *box, GtkSelectionMode mode);
    GtkSelectionMode (*flow_box_get_selection_mode)(GtkFlowBox *box);
    void (*flow_box_set_hadjustment)(GtkFlowBox *box, GtkAdjustment *adjustment);
    void (*flow_box_set_vadjustment)(GtkFlowBox *box, GtkAdjustment *adjustment);
    void (*flow_box_set_filter_func)(GtkFlowBox *box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy);
    void (*flow_box_invalidate_filter)(GtkFlowBox *box);
    void (*flow_box_set_sort_func)(GtkFlowBox *box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy);
    void (*flow_box_invalidate_sort)(GtkFlowBox *box);
    GType (*flow_box_child_get_type)(void);
    GtkFontDialog * (*font_dialog_button_get_dialog)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_dialog)(GtkFontDialogButton *self, GtkFontDialog *dialog);
    GtkFontLevel (*font_dialog_button_get_level)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_level)(GtkFontDialogButton *self, GtkFontLevel level);
    PangoFontDescription * (*font_dialog_button_get_font_desc)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_font_desc)(GtkFontDialogButton *self, const PangoFontDescription *font_desc);
    const char * (*font_dialog_button_get_font_features)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_font_features)(GtkFontDialogButton *self, const char *font_features);
    PangoLanguage * (*font_dialog_button_get_language)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_language)(GtkFontDialogButton *self, PangoLanguage *language);
    gboolean (*font_dialog_button_get_use_font)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_use_font)(GtkFontDialogButton *self, gboolean use_font);
    gboolean (*font_dialog_button_get_use_size)(GtkFontDialogButton *self);
    void (*font_dialog_button_set_use_size)(GtkFontDialogButton *self, gboolean use_size);
    GtkWidget * (*font_dialog_button_new)(GtkFontDialog *dialog);
    const char * (*font_dialog_get_title)(GtkFontDialog *self);
    void (*font_dialog_set_title)(GtkFontDialog *self, const char *title);
    gboolean (*font_dialog_get_modal)(GtkFontDialog *self);
    void (*font_dialog_set_modal)(GtkFontDialog *self, gboolean modal);
    PangoLanguage * (*font_dialog_get_language)(GtkFontDialog *self);
    void (*font_dialog_set_language)(GtkFontDialog *self, PangoLanguage *language);
    PangoFontMap * (*font_dialog_get_font_map)(GtkFontDialog *self);
    void (*font_dialog_set_font_map)(GtkFontDialog *self, PangoFontMap *fontmap);
    GtkFilter * (*font_dialog_get_filter)(GtkFontDialog *self);
    void (*font_dialog_set_filter)(GtkFontDialog *self, GtkFilter *filter);
    void (*font_dialog_choose_family)(GtkFontDialog *self, GtkWindow *parent, PangoFontFamily *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    PangoFontFamily * (*font_dialog_choose_family_finish)(GtkFontDialog *self, GAsyncResult *result, GError **error);
    void (*font_dialog_choose_face)(GtkFontDialog *self, GtkWindow *parent, PangoFontFace *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    PangoFontFace * (*font_dialog_choose_face_finish)(GtkFontDialog *self, GAsyncResult *result, GError **error);
    void (*font_dialog_choose_font)(GtkFontDialog *self, GtkWindow *parent, PangoFontDescription *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    PangoFontDescription * (*font_dialog_choose_font_finish)(GtkFontDialog *self, GAsyncResult *result, GError **error);
    void (*font_dialog_choose_font_and_features)(GtkFontDialog *self, GtkWindow *parent, PangoFontDescription *initial_value, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*font_dialog_choose_font_and_features_finish)(GtkFontDialog *self, GAsyncResult *result, PangoFontDescription **font_desc, char **font_features, PangoLanguage **language, GError **error);
    GtkFontDialog * (*font_dialog_new)(void);
    GtkWidget* (*frame_new)(const char *label);
    void (*frame_set_label)(GtkFrame *frame, const char *label);
    const char * (*frame_get_label)(GtkFrame *frame);
    void (*frame_set_label_widget)(GtkFrame *frame, GtkWidget *label_widget);
    GtkWidget* (*frame_get_label_widget)(GtkFrame *frame);
    void (*frame_set_label_align)(GtkFrame *frame, float xalign);
    float (*frame_get_label_align)(GtkFrame *frame);
    void (*frame_set_child)(GtkFrame *frame, GtkWidget *child);
    GtkWidget* (*frame_get_child)(GtkFrame *frame);
    GType (*frame_get_type)(void);
    GtkGesture * (*gesture_click_new)(void);
    GType (*gesture_click_get_type)(void);
    GtkGesture * (*gesture_drag_new)(void);
    gboolean (*gesture_drag_get_start_point)(GtkGestureDrag *gesture, double *x, double *y);
    gboolean (*gesture_drag_get_offset)(GtkGestureDrag *gesture, double *x, double *y);
    GType (*gesture_drag_get_type)(void);
    GdkDevice * (*gesture_get_device)(GtkGesture *gesture);
    gboolean (*gesture_set_state)(GtkGesture *gesture, GtkEventSequenceState state);
    GtkEventSequenceState (*gesture_get_sequence_state)(GtkGesture *gesture, GdkEventSequence *sequence);
    gboolean (*gesture_set_sequence_state)(GtkGesture *gesture, GdkEventSequence *sequence, GtkEventSequenceState state);
    GList * (*gesture_get_sequences)(GtkGesture *gesture);
    GdkEventSequence * (*gesture_get_last_updated_sequence)(GtkGesture *gesture);
    gboolean (*gesture_handles_sequence)(GtkGesture *gesture, GdkEventSequence *sequence);
    GdkEvent * (*gesture_get_last_event)(GtkGesture *gesture, GdkEventSequence *sequence);
    gboolean (*gesture_get_point)(GtkGesture *gesture, GdkEventSequence *sequence, double *x, double *y);
    gboolean (*gesture_get_bounding_box)(GtkGesture *gesture, GdkRectangle *rect);
    gboolean (*gesture_get_bounding_box_center)(GtkGesture *gesture, double *x, double *y);
    gboolean (*gesture_is_active)(GtkGesture *gesture);
    gboolean (*gesture_is_recognized)(GtkGesture *gesture);
    void (*gesture_group)(GtkGesture *group_gesture, GtkGesture *gesture);
    void (*gesture_ungroup)(GtkGesture *gesture);
    GList * (*gesture_get_group)(GtkGesture *gesture);
    gboolean (*gesture_is_grouped_with)(GtkGesture *gesture, GtkGesture *other);
    GType (*gesture_get_type)(void);
    GtkGesture * (*gesture_long_press_new)(void);
    void (*gesture_long_press_set_delay_factor)(GtkGestureLongPress *gesture, double delay_factor);
    double (*gesture_long_press_get_delay_factor)(GtkGestureLongPress *gesture);
    GType (*gesture_long_press_get_type)(void);
    GtkGesture * (*gesture_pan_new)(GtkOrientation orientation);
    GtkOrientation (*gesture_pan_get_orientation)(GtkGesturePan *gesture);
    void (*gesture_pan_set_orientation)(GtkGesturePan *gesture, GtkOrientation orientation);
    GType (*gesture_pan_get_type)(void);
    GtkGesture * (*gesture_rotate_new)(void);
    double (*gesture_rotate_get_angle_delta)(GtkGestureRotate *gesture);
    GType (*gesture_rotate_get_type)(void);
    gboolean (*gesture_single_get_touch_only)(GtkGestureSingle *gesture);
    void (*gesture_single_set_touch_only)(GtkGestureSingle *gesture, gboolean touch_only);
    gboolean (*gesture_single_get_exclusive)(GtkGestureSingle *gesture);
    void (*gesture_single_set_exclusive)(GtkGestureSingle *gesture, gboolean exclusive);
    guint (*gesture_single_get_button)(GtkGestureSingle *gesture);
    void (*gesture_single_set_button)(GtkGestureSingle *gesture, guint button);
    guint (*gesture_single_get_current_button)(GtkGestureSingle *gesture);
    GdkEventSequence * (*gesture_single_get_current_sequence)(GtkGestureSingle *gesture);
    GType (*gesture_single_get_type)(void);
    GtkGesture * (*gesture_stylus_new)(void);
    gboolean (*gesture_stylus_get_stylus_only)(GtkGestureStylus *gesture);
    void (*gesture_stylus_set_stylus_only)(GtkGestureStylus *gesture, gboolean stylus_only);
    gboolean (*gesture_stylus_get_axis)(GtkGestureStylus *gesture, GdkAxisUse axis, double *value);
    gboolean (*gesture_stylus_get_axes)(GtkGestureStylus *gesture, GdkAxisUse axes[], double **values);
    gboolean (*gesture_stylus_get_backlog)(GtkGestureStylus *gesture, GdkTimeCoord **backlog, guint *n_elems);
    GdkDeviceTool * (*gesture_stylus_get_device_tool)(GtkGestureStylus *gesture);
    GType (*gesture_stylus_get_type)(void);
    GtkGesture * (*gesture_swipe_new)(void);
    gboolean (*gesture_swipe_get_velocity)(GtkGestureSwipe *gesture, double *velocity_x, double *velocity_y);
    GType (*gesture_swipe_get_type)(void);
    GtkGesture * (*gesture_zoom_new)(void);
    double (*gesture_zoom_get_scale_delta)(GtkGestureZoom *gesture);
    GType (*gesture_zoom_get_type)(void);
    GtkWidget * (*gl_area_new)(void);
    void (*gl_area_set_allowed_apis)(GtkGLArea *area, GdkGLAPI apis);
    GdkGLAPI (*gl_area_get_allowed_apis)(GtkGLArea *area);
    GdkGLAPI (*gl_area_get_api)(GtkGLArea *area);
    void (*gl_area_set_use_es)(GtkGLArea *area, gboolean use_es);
    gboolean (*gl_area_get_use_es)(GtkGLArea *area);
    void (*gl_area_set_required_version)(GtkGLArea *area, int major, int minor);
    void (*gl_area_get_required_version)(GtkGLArea *area, int *major, int *minor);
    gboolean (*gl_area_get_has_depth_buffer)(GtkGLArea *area);
    void (*gl_area_set_has_depth_buffer)(GtkGLArea *area, gboolean has_depth_buffer);
    gboolean (*gl_area_get_has_stencil_buffer)(GtkGLArea *area);
    void (*gl_area_set_has_stencil_buffer)(GtkGLArea *area, gboolean has_stencil_buffer);
    gboolean (*gl_area_get_auto_render)(GtkGLArea *area);
    void (*gl_area_set_auto_render)(GtkGLArea *area, gboolean auto_render);
    void (*gl_area_queue_render)(GtkGLArea *area);
    GdkGLContext * (*gl_area_get_context)(GtkGLArea *area);
    void (*gl_area_make_current)(GtkGLArea *area);
    void (*gl_area_attach_buffers)(GtkGLArea *area);
    void (*gl_area_set_error)(GtkGLArea *area, const GError *error);
    GError * (*gl_area_get_error)(GtkGLArea *area);
    GType (*gl_area_get_type)(void);
    void (*graphics_offload_set_child)(GtkGraphicsOffload *self, GtkWidget *child);
    GtkWidget * (*graphics_offload_get_child)(GtkGraphicsOffload *self);
    void (*graphics_offload_set_enabled)(GtkGraphicsOffload *self, GtkGraphicsOffloadEnabled enabled);
    GtkGraphicsOffloadEnabled (*graphics_offload_get_enabled)(GtkGraphicsOffload *self);
    GtkWidget * (*graphics_offload_new)(GtkWidget *child);
    GtkWidget* (*grid_new)(void);
    void (*grid_attach)(GtkGrid *grid, GtkWidget *child, int column, int row, int width, int height);
    void (*grid_attach_next_to)(GtkGrid *grid, GtkWidget *child, GtkWidget *sibling, GtkPositionType side, int width, int height);
    GtkWidget* (*grid_get_child_at)(GtkGrid *grid, int column, int row);
    void (*grid_remove)(GtkGrid *grid, GtkWidget *child);
    void (*grid_insert_row)(GtkGrid *grid, int position);
    void (*grid_insert_column)(GtkGrid *grid, int position);
    void (*grid_remove_row)(GtkGrid *grid, int position);
    void (*grid_remove_column)(GtkGrid *grid, int position);
    void (*grid_insert_next_to)(GtkGrid *grid, GtkWidget *sibling, GtkPositionType side);
    void (*grid_set_row_homogeneous)(GtkGrid *grid, gboolean homogeneous);
    gboolean (*grid_get_row_homogeneous)(GtkGrid *grid);
    void (*grid_set_row_spacing)(GtkGrid *grid, guint spacing);
    guint (*grid_get_row_spacing)(GtkGrid *grid);
    void (*grid_set_column_homogeneous)(GtkGrid *grid, gboolean homogeneous);
    gboolean (*grid_get_column_homogeneous)(GtkGrid *grid);
    void (*grid_set_column_spacing)(GtkGrid *grid, guint spacing);
    guint (*grid_get_column_spacing)(GtkGrid *grid);
    void (*grid_set_row_baseline_position)(GtkGrid *grid, int row, GtkBaselinePosition pos);
    GtkBaselinePosition (*grid_get_row_baseline_position)(GtkGrid *grid, int row);
    void (*grid_set_baseline_row)(GtkGrid *grid, int row);
    int (*grid_get_baseline_row)(GtkGrid *grid);
    void (*grid_query_child)(GtkGrid *grid, GtkWidget *child, int *column, int *row, int *width, int *height);
    GType (*grid_get_type)(void);
    void (*grid_layout_set_row_homogeneous)(GtkGridLayout *grid, gboolean homogeneous);
    gboolean (*grid_layout_get_row_homogeneous)(GtkGridLayout *grid);
    void (*grid_layout_set_row_spacing)(GtkGridLayout *grid, guint spacing);
    guint (*grid_layout_get_row_spacing)(GtkGridLayout *grid);
    void (*grid_layout_set_column_homogeneous)(GtkGridLayout *grid, gboolean homogeneous);
    gboolean (*grid_layout_get_column_homogeneous)(GtkGridLayout *grid);
    void (*grid_layout_set_column_spacing)(GtkGridLayout *grid, guint spacing);
    guint (*grid_layout_get_column_spacing)(GtkGridLayout *grid);
    void (*grid_layout_set_row_baseline_position)(GtkGridLayout *grid, int row, GtkBaselinePosition pos);
    GtkBaselinePosition (*grid_layout_get_row_baseline_position)(GtkGridLayout *grid, int row);
    void (*grid_layout_set_baseline_row)(GtkGridLayout *grid, int row);
    int (*grid_layout_get_baseline_row)(GtkGridLayout *grid);
    void (*grid_layout_child_set_row)(GtkGridLayoutChild *child, int row);
    int (*grid_layout_child_get_row)(GtkGridLayoutChild *child);
    void (*grid_layout_child_set_column)(GtkGridLayoutChild *child, int column);
    int (*grid_layout_child_get_column)(GtkGridLayoutChild *child);
    void (*grid_layout_child_set_column_span)(GtkGridLayoutChild *child, int span);
    int (*grid_layout_child_get_column_span)(GtkGridLayoutChild *child);
    void (*grid_layout_child_set_row_span)(GtkGridLayoutChild *child, int span);
    int (*grid_layout_child_get_row_span)(GtkGridLayoutChild *child);
    GtkLayoutManager * (*grid_layout_new)(void);
    GtkWidget * (*grid_view_new)(GtkSelectionModel *model, GtkListItemFactory *factory);
    GtkSelectionModel * (*grid_view_get_model)(GtkGridView *self);
    void (*grid_view_set_model)(GtkGridView *self, GtkSelectionModel *model);
    void (*grid_view_set_factory)(GtkGridView *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*grid_view_get_factory)(GtkGridView *self);
    guint (*grid_view_get_min_columns)(GtkGridView *self);
    void (*grid_view_set_min_columns)(GtkGridView *self, guint min_columns);
    guint (*grid_view_get_max_columns)(GtkGridView *self);
    void (*grid_view_set_max_columns)(GtkGridView *self, guint max_columns);
    void (*grid_view_set_enable_rubberband)(GtkGridView *self, gboolean enable_rubberband);
    gboolean (*grid_view_get_enable_rubberband)(GtkGridView *self);
    void (*grid_view_set_tab_behavior)(GtkGridView *self, GtkListTabBehavior tab_behavior);
    GtkListTabBehavior (*grid_view_get_tab_behavior)(GtkGridView *self);
    void (*grid_view_set_single_click_activate)(GtkGridView *self, gboolean single_click_activate);
    gboolean (*grid_view_get_single_click_activate)(GtkGridView *self);
    void (*grid_view_scroll_to)(GtkGridView *self, guint pos, GtkListScrollFlags flags, GtkScrollInfo *scroll);
    GType (*grid_view_get_type)(void);
    GtkWidget* (*header_bar_new)(void);
    void (*header_bar_set_title_widget)(GtkHeaderBar *bar, GtkWidget *title_widget);
    GtkWidget* (*header_bar_get_title_widget)(GtkHeaderBar *bar);
    void (*header_bar_pack_start)(GtkHeaderBar *bar, GtkWidget *child);
    void (*header_bar_pack_end)(GtkHeaderBar *bar, GtkWidget *child);
    void (*header_bar_remove)(GtkHeaderBar *bar, GtkWidget *child);
    gboolean (*header_bar_get_show_title_buttons)(GtkHeaderBar *bar);
    void (*header_bar_set_show_title_buttons)(GtkHeaderBar *bar, gboolean setting);
    void (*header_bar_set_decoration_layout)(GtkHeaderBar *bar, const char *layout);
    const char* (*header_bar_get_decoration_layout)(GtkHeaderBar *bar);
    GType (*header_bar_get_type)(void);
    GType (*icon_theme_get_type)(void);
    GtkIconTheme* (*icon_theme_new)(void);
    GtkIconTheme* (*icon_theme_get_for_display)(GdkDisplay *display);
    GdkDisplay * (*icon_theme_get_display)(GtkIconTheme *self);
    void (*icon_theme_set_search_path)(GtkIconTheme *self, const char * const *path);
    char ** (*icon_theme_get_search_path)(GtkIconTheme *self);
    void (*icon_theme_add_search_path)(GtkIconTheme *self, const char *path);
    void (*icon_theme_set_resource_path)(GtkIconTheme *self, const char * const *path);
    char ** (*icon_theme_get_resource_path)(GtkIconTheme *self);
    void (*icon_theme_add_resource_path)(GtkIconTheme *self, const char *path);
    void (*icon_theme_set_theme_name)(GtkIconTheme *self, const char *theme_name);
    char * (*icon_theme_get_theme_name)(GtkIconTheme *self);
    gboolean (*icon_theme_has_icon)(GtkIconTheme *self, const char *icon_name);
    gboolean (*icon_theme_has_gicon)(GtkIconTheme *self, GIcon *gicon);
    int* (*icon_theme_get_icon_sizes)(GtkIconTheme *self, const char *icon_name);
    GtkIconPaintable* (*icon_theme_lookup_icon)(GtkIconTheme *self, const char *icon_name, const char *fallbacks[], int size, int scale, GtkTextDirection direction, GtkIconLookupFlags flags);
    GtkIconPaintable* (*icon_theme_lookup_by_gicon)(GtkIconTheme *self, GIcon *icon, int size, int scale, GtkTextDirection direction, GtkIconLookupFlags flags);
    GtkIconPaintable* (*icon_paintable_new_for_file)(GFile *file, int size, int scale);
    char ** (*icon_theme_get_icon_names)(GtkIconTheme *self);
    GType (*icon_paintable_get_type)(void);
    GFile * (*icon_paintable_get_file)(GtkIconPaintable *self);
    const char * (*icon_paintable_get_icon_name)(GtkIconPaintable *self);
    gboolean (*icon_paintable_is_symbolic)(GtkIconPaintable *self);
    GQuark (*icon_theme_error_quark)(void);
    GtkWidget* (*image_new)(void);
    GtkWidget* (*image_new_from_file)(const char *filename);
    GtkWidget* (*image_new_from_resource)(const char *resource_path);
    GtkWidget* (*image_new_from_pixbuf)(GdkPixbuf *pixbuf);
    GtkWidget* (*image_new_from_paintable)(GdkPaintable *paintable);
    GtkWidget* (*image_new_from_icon_name)(const char *icon_name);
    GtkWidget* (*image_new_from_gicon)(GIcon *icon);
    void (*image_clear)(GtkImage *image);
    void (*image_set_from_file)(GtkImage *image, const char *filename);
    void (*image_set_from_resource)(GtkImage *image, const char *resource_path);
    void (*image_set_from_pixbuf)(GtkImage *image, GdkPixbuf *pixbuf);
    void (*image_set_from_paintable)(GtkImage *image, GdkPaintable *paintable);
    void (*image_set_from_icon_name)(GtkImage *image, const char *icon_name);
    void (*image_set_from_gicon)(GtkImage *image, GIcon *icon);
    void (*image_set_pixel_size)(GtkImage *image, int pixel_size);
    void (*image_set_icon_size)(GtkImage *image, GtkIconSize icon_size);
    GtkImageType (*image_get_storage_type)(GtkImage *image);
    GdkPaintable* (*image_get_paintable)(GtkImage *image);
    const char* (*image_get_icon_name)(GtkImage *image);
    GIcon * (*image_get_gicon)(GtkImage *image);
    int (*image_get_pixel_size)(GtkImage *image);
    GtkIconSize (*image_get_icon_size)(GtkImage *image);
    GType (*image_get_type)(void);
    void (*im_context_set_client_widget)(GtkIMContext *context, GtkWidget *widget);
    void (*im_context_get_preedit_string)(GtkIMContext *context, char **str, PangoAttrList **attrs, int *cursor_pos);
    gboolean (*im_context_filter_keypress)(GtkIMContext *context, GdkEvent *event);
    gboolean (*im_context_filter_key)(GtkIMContext *context, gboolean press, GdkSurface *surface, GdkDevice *device, guint32 time, guint keycode, GdkModifierType state, int group);
    void (*im_context_focus_in)(GtkIMContext *context);
    void (*im_context_focus_out)(GtkIMContext *context);
    void (*im_context_reset)(GtkIMContext *context);
    void (*im_context_set_cursor_location)(GtkIMContext *context, const GdkRectangle *area);
    void (*im_context_set_use_preedit)(GtkIMContext *context, gboolean use_preedit);
    void (*im_context_set_surrounding)(GtkIMContext *context, const char *text, int len, int cursor_index);
    gboolean (*im_context_get_surrounding)(GtkIMContext *context, char **text, int *cursor_index);
    void (*im_context_set_surrounding_with_selection)(GtkIMContext *context, const char *text, int len, int cursor_index, int anchor_index);
    gboolean (*im_context_get_surrounding_with_selection)(GtkIMContext *context, char **text, int *cursor_index, int *anchor_index);
    gboolean (*im_context_delete_surrounding)(GtkIMContext *context, int offset, int n_chars);
    gboolean (*im_context_activate_osk)(GtkIMContext *context, GdkEvent *event);
    GType (*im_context_get_type)(void);
    GtkIMContext* (*im_context_simple_new)(void);
    void (*im_context_simple_add_table)(GtkIMContextSimple *context_simple, guint16 *data, int max_seq_len, int n_seqs);
    void (*im_context_simple_add_compose_file)(GtkIMContextSimple *context_simple, const char *compose_file);
    GType (*im_context_simple_get_type)(void);
    GtkIMContext* (*im_multicontext_new)(void);
    const char * (*im_multicontext_get_context_id)(GtkIMMulticontext *context);
    void (*im_multicontext_set_context_id)(GtkIMMulticontext *context, const char *context_id);
    GType (*im_multicontext_get_type)(void);
    const char * (*inscription_get_text)(GtkInscription *self);
    void (*inscription_set_text)(GtkInscription *self, const char *text);
    PangoAttrList * (*inscription_get_attributes)(GtkInscription *self);
    void (*inscription_set_attributes)(GtkInscription *self, PangoAttrList *attrs);
    void (*inscription_set_markup)(GtkInscription *self, const char *markup);
    GtkInscriptionOverflow (*inscription_get_text_overflow)(GtkInscription *self);
    void (*inscription_set_text_overflow)(GtkInscription *self, GtkInscriptionOverflow overflow);
    PangoWrapMode (*inscription_get_wrap_mode)(GtkInscription *self);
    void (*inscription_set_wrap_mode)(GtkInscription *self, PangoWrapMode wrap_mode);
    guint (*inscription_get_min_chars)(GtkInscription *self);
    void (*inscription_set_min_chars)(GtkInscription *self, guint min_chars);
    guint (*inscription_get_nat_chars)(GtkInscription *self);
    void (*inscription_set_nat_chars)(GtkInscription *self, guint nat_chars);
    guint (*inscription_get_min_lines)(GtkInscription *self);
    void (*inscription_set_min_lines)(GtkInscription *self, guint min_lines);
    guint (*inscription_get_nat_lines)(GtkInscription *self);
    void (*inscription_set_nat_lines)(GtkInscription *self, guint nat_lines);
    float (*inscription_get_xalign)(GtkInscription *self);
    void (*inscription_set_xalign)(GtkInscription *self, float xalign);
    float (*inscription_get_yalign)(GtkInscription *self);
    void (*inscription_set_yalign)(GtkInscription *self, float yalign);
    GtkWidget * (*inscription_new)(const char *text);
    GtkWidget* (*label_new)(const char *str);
    GtkWidget* (*label_new_with_mnemonic)(const char *str);
    void (*label_set_text)(GtkLabel *self, const char *str);
    const char * (*label_get_text)(GtkLabel *self);
    void (*label_set_attributes)(GtkLabel *self, PangoAttrList *attrs);
    PangoAttrList* (*label_get_attributes)(GtkLabel *self);
    void (*label_set_label)(GtkLabel *self, const char *str);
    const char * (*label_get_label)(GtkLabel *self);
    void (*label_set_markup)(GtkLabel *self, const char *str);
    void (*label_set_use_markup)(GtkLabel *self, gboolean setting);
    gboolean (*label_get_use_markup)(GtkLabel *self);
    void (*label_set_use_underline)(GtkLabel *self, gboolean setting);
    gboolean (*label_get_use_underline)(GtkLabel *self);
    void (*label_set_markup_with_mnemonic)(GtkLabel *self, const char *str);
    guint (*label_get_mnemonic_keyval)(GtkLabel *self);
    void (*label_set_mnemonic_widget)(GtkLabel *self, GtkWidget *widget);
    GtkWidget* (*label_get_mnemonic_widget)(GtkLabel *self);
    void (*label_set_text_with_mnemonic)(GtkLabel *self, const char *str);
    void (*label_set_justify)(GtkLabel *self, GtkJustification jtype);
    GtkJustification (*label_get_justify)(GtkLabel *self);
    void (*label_set_ellipsize)(GtkLabel *self, PangoEllipsizeMode mode);
    PangoEllipsizeMode (*label_get_ellipsize)(GtkLabel *self);
    void (*label_set_width_chars)(GtkLabel *self, int n_chars);
    int (*label_get_width_chars)(GtkLabel *self);
    void (*label_set_max_width_chars)(GtkLabel *self, int n_chars);
    int (*label_get_max_width_chars)(GtkLabel *self);
    void (*label_set_lines)(GtkLabel *self, int lines);
    int (*label_get_lines)(GtkLabel *self);
    void (*label_set_wrap)(GtkLabel *self, gboolean wrap);
    gboolean (*label_get_wrap)(GtkLabel *self);
    void (*label_set_wrap_mode)(GtkLabel *self, PangoWrapMode wrap_mode);
    PangoWrapMode (*label_get_wrap_mode)(GtkLabel *self);
    void (*label_set_natural_wrap_mode)(GtkLabel *self, GtkNaturalWrapMode wrap_mode);
    GtkNaturalWrapMode (*label_get_natural_wrap_mode)(GtkLabel *self);
    void (*label_set_selectable)(GtkLabel *self, gboolean setting);
    gboolean (*label_get_selectable)(GtkLabel *self);
    void (*label_select_region)(GtkLabel *self, int start_offset, int end_offset);
    gboolean (*label_get_selection_bounds)(GtkLabel *self, int *start, int *end);
    PangoLayout* (*label_get_layout)(GtkLabel *self);
    void (*label_get_layout_offsets)(GtkLabel *self, int *x, int *y);
    void (*label_set_single_line_mode)(GtkLabel *self, gboolean single_line_mode);
    gboolean (*label_get_single_line_mode)(GtkLabel *self);
    const char* (*label_get_current_uri)(GtkLabel *self);
    void (*label_set_xalign)(GtkLabel *self, float xalign);
    float (*label_get_xalign)(GtkLabel *self);
    void (*label_set_yalign)(GtkLabel *self, float yalign);
    float (*label_get_yalign)(GtkLabel *self);
    void (*label_set_extra_menu)(GtkLabel *self, GMenuModel *model);
    GMenuModel * (*label_get_extra_menu)(GtkLabel *self);
    void (*label_set_tabs)(GtkLabel *self, PangoTabArray *tabs);
    PangoTabArray * (*label_get_tabs)(GtkLabel *self);
    GType (*label_get_type)(void);
    GtkWidget * (*layout_child_get_child_widget)(GtkLayoutChild *layout_child);
    GtkLayoutManager * (*layout_child_get_layout_manager)(GtkLayoutChild *layout_child);
    void (*layout_manager_allocate)(GtkLayoutManager *manager, GtkWidget *widget, int width, int height, int baseline);
    GtkSizeRequestMode (*layout_manager_get_request_mode)(GtkLayoutManager *manager);
    GtkWidget * (*layout_manager_get_widget)(GtkLayoutManager *manager);
    void (*layout_manager_layout_changed)(GtkLayoutManager *manager);
    GtkLayoutChild * (*layout_manager_get_layout_child)(GtkLayoutManager *manager, GtkWidget *child);
    void (*layout_manager_measure)(GtkLayoutManager *manager, GtkWidget *widget, GtkOrientation orientation, int for_size, int *minimum, int *natural, int *minimum_baseline, int *natural_baseline);
    GtkWidget* (*level_bar_new)(void);
    GtkWidget* (*level_bar_new_for_interval)(double min_value, double max_value);
    void (*level_bar_set_mode)(GtkLevelBar *self, GtkLevelBarMode mode);
    GtkLevelBarMode (*level_bar_get_mode)(GtkLevelBar *self);
    void (*level_bar_set_value)(GtkLevelBar *self, double value);
    double (*level_bar_get_value)(GtkLevelBar *self);
    void (*level_bar_set_min_value)(GtkLevelBar *self, double value);
    double (*level_bar_get_min_value)(GtkLevelBar *self);
    void (*level_bar_set_max_value)(GtkLevelBar *self, double value);
    double (*level_bar_get_max_value)(GtkLevelBar *self);
    void (*level_bar_set_inverted)(GtkLevelBar *self, gboolean inverted);
    gboolean (*level_bar_get_inverted)(GtkLevelBar *self);
    void (*level_bar_add_offset_value)(GtkLevelBar *self, const char *name, double value);
    void (*level_bar_remove_offset_value)(GtkLevelBar *self, const char *name);
    gboolean (*level_bar_get_offset_value)(GtkLevelBar *self, const char *name, double *value);
    GType (*level_bar_get_type)(void);
    GtkWidget * (*link_button_new)(const char *uri);
    GtkWidget * (*link_button_new_with_label)(const char *uri, const char *label);
    const char * (*link_button_get_uri)(GtkLinkButton *link_button);
    void (*link_button_set_uri)(GtkLinkButton *link_button, const char *uri);
    gboolean (*link_button_get_visited)(GtkLinkButton *link_button);
    void (*link_button_set_visited)(GtkLinkButton *link_button, gboolean visited);
    GType (*link_button_get_type)(void);
    GType (*list_base_get_type)(void);
    GtkWidget* (*list_box_row_new)(void);
    void (*list_box_row_set_child)(GtkListBoxRow *row, GtkWidget *child);
    GtkWidget* (*list_box_row_get_child)(GtkListBoxRow *row);
    GtkWidget* (*list_box_row_get_header)(GtkListBoxRow *row);
    void (*list_box_row_set_header)(GtkListBoxRow *row, GtkWidget *header);
    int (*list_box_row_get_index)(GtkListBoxRow *row);
    void (*list_box_row_changed)(GtkListBoxRow *row);
    gboolean (*list_box_row_is_selected)(GtkListBoxRow *row);
    void (*list_box_row_set_selectable)(GtkListBoxRow *row, gboolean selectable);
    gboolean (*list_box_row_get_selectable)(GtkListBoxRow *row);
    void (*list_box_row_set_activatable)(GtkListBoxRow *row, gboolean activatable);
    gboolean (*list_box_row_get_activatable)(GtkListBoxRow *row);
    GType (*list_box_get_type)(void);
    void (*list_box_prepend)(GtkListBox *box, GtkWidget *child);
    void (*list_box_append)(GtkListBox *box, GtkWidget *child);
    void (*list_box_insert)(GtkListBox *box, GtkWidget *child, int position);
    void (*list_box_remove)(GtkListBox *box, GtkWidget *child);
    void (*list_box_remove_all)(GtkListBox *box);
    GtkListBoxRow* (*list_box_get_selected_row)(GtkListBox *box);
    GtkListBoxRow* (*list_box_get_row_at_index)(GtkListBox *box, int index_);
    GtkListBoxRow* (*list_box_get_row_at_y)(GtkListBox *box, int y);
    void (*list_box_select_row)(GtkListBox *box, GtkListBoxRow *row);
    void (*list_box_set_placeholder)(GtkListBox *box, GtkWidget *placeholder);
    void (*list_box_set_adjustment)(GtkListBox *box, GtkAdjustment *adjustment);
    GtkAdjustment* (*list_box_get_adjustment)(GtkListBox *box);
    void (*list_box_selected_foreach)(GtkListBox *box, GtkListBoxForeachFunc func, gpointer data);
    GList* (*list_box_get_selected_rows)(GtkListBox *box);
    void (*list_box_unselect_row)(GtkListBox *box, GtkListBoxRow *row);
    void (*list_box_select_all)(GtkListBox *box);
    void (*list_box_unselect_all)(GtkListBox *box);
    void (*list_box_set_selection_mode)(GtkListBox *box, GtkSelectionMode mode);
    GtkSelectionMode (*list_box_get_selection_mode)(GtkListBox *box);
    void (*list_box_set_filter_func)(GtkListBox *box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy);
    void (*list_box_set_header_func)(GtkListBox *box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy);
    void (*list_box_invalidate_filter)(GtkListBox *box);
    void (*list_box_invalidate_sort)(GtkListBox *box);
    void (*list_box_invalidate_headers)(GtkListBox *box);
    void (*list_box_set_sort_func)(GtkListBox *box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy);
    void (*list_box_set_activate_on_single_click)(GtkListBox *box, gboolean single);
    gboolean (*list_box_get_activate_on_single_click)(GtkListBox *box);
    void (*list_box_drag_unhighlight_row)(GtkListBox *box);
    void (*list_box_drag_highlight_row)(GtkListBox *box, GtkListBoxRow *row);
    GtkWidget* (*list_box_new)(void);
    void (*list_box_bind_model)(GtkListBox *box, GListModel *model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func);
    void (*list_box_set_show_separators)(GtkListBox *box, gboolean show_separators);
    gboolean (*list_box_get_show_separators)(GtkListBox *box);
    GType (*list_box_row_get_type)(void);
    guint (*list_header_get_start)(GtkListHeader *sel);
    guint (*list_header_get_end)(GtkListHeader *sel);
    guint (*list_header_get_n_items)(GtkListHeader *sel);
    void (*list_header_set_child)(GtkListHeader *self, GtkWidget *child);
    GtkWidget * (*list_header_get_child)(GtkListHeader *self);
    gpointer (*list_header_get_item)(GtkListHeader *self);
    GType (*list_item_factory_get_type)(void);
    guint (*list_item_get_position)(GtkListItem *sel);
    gboolean (*list_item_get_selected)(GtkListItem *sel);
    gboolean (*list_item_get_selectable)(GtkListItem *sel);
    void (*list_item_set_selectable)(GtkListItem *self, gboolean selectable);
    gboolean (*list_item_get_activatable)(GtkListItem *sel);
    void (*list_item_set_activatable)(GtkListItem *self, gboolean activatable);
    gboolean (*list_item_get_focusable)(GtkListItem *sel);
    void (*list_item_set_focusable)(GtkListItem *self, gboolean focusable);
    void (*list_item_set_child)(GtkListItem *self, GtkWidget *child);
    GtkWidget * (*list_item_get_child)(GtkListItem *self);
    void (*list_item_set_accessible_description)(GtkListItem *self, const char *description);
    const char * (*list_item_get_accessible_description)(GtkListItem *self);
    void (*list_item_set_accessible_label)(GtkListItem *self, const char *label);
    const char * (*list_item_get_accessible_label)(GtkListItem *self);
    gpointer (*list_item_get_item)(GtkListItem *self);
    GtkWidget * (*list_view_new)(GtkSelectionModel *model, GtkListItemFactory *factory);
    GtkSelectionModel * (*list_view_get_model)(GtkListView *self);
    void (*list_view_set_model)(GtkListView *self, GtkSelectionModel *model);
    void (*list_view_set_factory)(GtkListView *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*list_view_get_factory)(GtkListView *self);
    void (*list_view_set_header_factory)(GtkListView *self, GtkListItemFactory *factory);
    GtkListItemFactory * (*list_view_get_header_factory)(GtkListView *self);
    void (*list_view_set_show_separators)(GtkListView *self, gboolean show_separators);
    gboolean (*list_view_get_show_separators)(GtkListView *self);
    void (*list_view_set_single_click_activate)(GtkListView *self, gboolean single_click_activate);
    gboolean (*list_view_get_single_click_activate)(GtkListView *self);
    void (*list_view_set_enable_rubberband)(GtkListView *self, gboolean enable_rubberband);
    gboolean (*list_view_get_enable_rubberband)(GtkListView *self);
    void (*list_view_set_tab_behavior)(GtkListView *self, GtkListTabBehavior tab_behavior);
    GtkListTabBehavior (*list_view_get_tab_behavior)(GtkListView *self);
    void (*list_view_scroll_to)(GtkListView *self, guint pos, GtkListScrollFlags flags, GtkScrollInfo *scroll);
    GType (*list_view_get_type)(void);
    gboolean (*init_check)(void);
    gboolean (*is_initialized)(void);
    void (*init_abi_check)(int num_checks, size_t sizeof_GtkWindow, size_t sizeof_GtkBox);
    gboolean (*init_check_abi_check)(int num_checks, size_t sizeof_GtkWindow, size_t sizeof_GtkBox);
    void (*disable_setlocale)(void);
    PangoLanguage * (*get_default_language)(void);
    GtkTextDirection (*get_locale_direction)(void);
    void (*init)(void);
    void (*map_list_model_set_map_func)(GtkMapListModel *self, GtkMapListModelMapFunc map_func, gpointer user_data, GDestroyNotify user_destroy);
    void (*map_list_model_set_model)(GtkMapListModel *self, GListModel *model);
    GListModel * (*map_list_model_get_model)(GtkMapListModel *self);
    gboolean (*map_list_model_has_map)(GtkMapListModel *self);
    GtkMapListModel * (*map_list_model_new)(GListModel *model, GtkMapListModelMapFunc map_func, gpointer user_data, GDestroyNotify user_destroy);
    GtkMediaStream* (*media_controls_get_media_stream)(GtkMediaControls *controls);
    void (*media_controls_set_media_stream)(GtkMediaControls *controls, GtkMediaStream *stream);
    GtkWidget* (*media_controls_new)(GtkMediaStream *stream);
    GtkMediaStream * (*media_file_new_for_filename)(const char *filename);
    GtkMediaStream * (*media_file_new_for_resource)(const char *resource_path);
    GtkMediaStream * (*media_file_new_for_file)(GFile *file);
    GtkMediaStream * (*media_file_new_for_input_stream)(GInputStream *stream);
    void (*media_file_clear)(GtkMediaFile *self);
    void (*media_file_set_filename)(GtkMediaFile *self, const char *filename);
    void (*media_file_set_resource)(GtkMediaFile *self, const char *resource_path);
    void (*media_file_set_file)(GtkMediaFile *self, GFile *file);
    GFile * (*media_file_get_file)(GtkMediaFile *self);
    void (*media_file_set_input_stream)(GtkMediaFile *self, GInputStream *stream);
    GInputStream * (*media_file_get_input_stream)(GtkMediaFile *self);
    GtkMediaStream * (*media_file_new)(void);
    const GError * (*media_stream_get_error)(GtkMediaStream *self);
    gboolean (*media_stream_has_audio)(GtkMediaStream *self);
    gboolean (*media_stream_has_video)(GtkMediaStream *self);
    void (*media_stream_play)(GtkMediaStream *self);
    void (*media_stream_pause)(GtkMediaStream *self);
    gboolean (*media_stream_get_playing)(GtkMediaStream *self);
    void (*media_stream_set_playing)(GtkMediaStream *self, gboolean playing);
    gboolean (*media_stream_get_ended)(GtkMediaStream *self);
    gint64 (*media_stream_get_timestamp)(GtkMediaStream *self);
    gint64 (*media_stream_get_duration)(GtkMediaStream *self);
    gboolean (*media_stream_is_seekable)(GtkMediaStream *self);
    gboolean (*media_stream_is_seeking)(GtkMediaStream *self);
    void (*media_stream_seek)(GtkMediaStream *self, gint64 timestamp);
    gboolean (*media_stream_get_loop)(GtkMediaStream *self);
    void (*media_stream_set_loop)(GtkMediaStream *self, gboolean loop);
    gboolean (*media_stream_get_muted)(GtkMediaStream *self);
    void (*media_stream_set_muted)(GtkMediaStream *self, gboolean muted);
    double (*media_stream_get_volume)(GtkMediaStream *self);
    void (*media_stream_set_volume)(GtkMediaStream *self, double volume);
    void (*media_stream_realize)(GtkMediaStream *self, GdkSurface *surface);
    void (*media_stream_unrealize)(GtkMediaStream *self, GdkSurface *surface);
    void (*media_stream_prepared)(GtkMediaStream *self, gboolean has_audio, gboolean has_video, gboolean seekable, gint64 duration);
    void (*media_stream_unprepared)(GtkMediaStream *self);
    void (*media_stream_stream_prepared)(GtkMediaStream *self, gboolean has_audio, gboolean has_video, gboolean seekable, gint64 duration);
    void (*media_stream_stream_unprepared)(GtkMediaStream *self);
    void (*media_stream_update)(GtkMediaStream *self, gint64 timestamp);
    void (*media_stream_ended)(GtkMediaStream *self);
    void (*media_stream_stream_ended)(GtkMediaStream *self);
    void (*media_stream_seek_success)(GtkMediaStream *self);
    void (*media_stream_seek_failed)(GtkMediaStream *self);
    void (*media_stream_gerror)(GtkMediaStream *self, GError *error);
    void (*media_stream_error)(GtkMediaStream *self, GQuark domain, int code, const char *format, ...);
    void (*media_stream_error_valist)(GtkMediaStream *self, GQuark domain, int code, const char *format, va_list args);
    gboolean (*media_stream_is_prepared)(GtkMediaStream *self);
    GtkWidget* (*menu_button_new)(void);
    void (*menu_button_set_popover)(GtkMenuButton *menu_button, GtkWidget *popover);
    GtkPopover* (*menu_button_get_popover)(GtkMenuButton *menu_button);
    void (*menu_button_set_direction)(GtkMenuButton *menu_button, GtkArrowType direction);
    GtkArrowType (*menu_button_get_direction)(GtkMenuButton *menu_button);
    void (*menu_button_set_menu_model)(GtkMenuButton *menu_button, GMenuModel *menu_model);
    GMenuModel* (*menu_button_get_menu_model)(GtkMenuButton *menu_button);
    void (*menu_button_set_icon_name)(GtkMenuButton *menu_button, const char *icon_name);
    const char * (*menu_button_get_icon_name)(GtkMenuButton *menu_button);
    void (*menu_button_set_always_show_arrow)(GtkMenuButton *menu_button, gboolean always_show_arrow);
    gboolean (*menu_button_get_always_show_arrow)(GtkMenuButton *menu_button);
    void (*menu_button_set_label)(GtkMenuButton *menu_button, const char *label);
    const char * (*menu_button_get_label)(GtkMenuButton *menu_button);
    void (*menu_button_set_use_underline)(GtkMenuButton *menu_button, gboolean use_underline);
    gboolean (*menu_button_get_use_underline)(GtkMenuButton *menu_button);
    void (*menu_button_set_has_frame)(GtkMenuButton *menu_button, gboolean has_frame);
    gboolean (*menu_button_get_has_frame)(GtkMenuButton *menu_button);
    void (*menu_button_popup)(GtkMenuButton *menu_button);
    void (*menu_button_popdown)(GtkMenuButton *menu_button);
    void (*menu_button_set_create_popup_func)(GtkMenuButton *menu_button, GtkMenuButtonCreatePopupFunc func, gpointer user_data, GDestroyNotify destroy_notify);
    void (*menu_button_set_primary)(GtkMenuButton *menu_button, gboolean primary);
    gboolean (*menu_button_get_primary)(GtkMenuButton *menu_button);
    void (*menu_button_set_child)(GtkMenuButton *menu_button, GtkWidget *child);
    GtkWidget * (*menu_button_get_child)(GtkMenuButton *menu_button);
    void (*menu_button_set_active)(GtkMenuButton *menu_button, gboolean active);
    gboolean (*menu_button_get_active)(GtkMenuButton *menu_button);
    void (*menu_button_set_can_shrink)(GtkMenuButton *menu_button, gboolean can_shrink);
    gboolean (*menu_button_get_can_shrink)(GtkMenuButton *menu_button);
    GType (*menu_button_get_type)(void);
    GMountOperation* (*mount_operation_new)(GtkWindow *parent);
    gboolean (*mount_operation_is_showing)(GtkMountOperation *op);
    void (*mount_operation_set_parent)(GtkMountOperation *op, GtkWindow *parent);
    GtkWindow * (*mount_operation_get_parent)(GtkMountOperation *op);
    void (*mount_operation_set_display)(GtkMountOperation *op, GdkDisplay *display);
    GdkDisplay * (*mount_operation_get_display)(GtkMountOperation *op);
    GType (*mount_operation_get_type)(void);
    void (*multi_filter_remove)(GtkMultiFilter *self, guint position);
    GtkAnyFilter * (*any_filter_new)(void);
    GtkEveryFilter * (*every_filter_new)(void);
    void (*multi_filter_append)(GtkMultiFilter *self, GtkFilter *filter);
    GListModel * (*multi_selection_get_model)(GtkMultiSelection *self);
    void (*multi_selection_set_model)(GtkMultiSelection *self, GListModel *model);
    GtkMultiSelection * (*multi_selection_new)(GListModel *model);
    void (*multi_sorter_append)(GtkMultiSorter *self, GtkSorter *sorter);
    void (*multi_sorter_remove)(GtkMultiSorter *self, guint position);
    GtkMultiSorter * (*multi_sorter_new)(void);
    void (*native_dialog_hide)(GtkNativeDialog *self);
    void (*native_dialog_destroy)(GtkNativeDialog *self);
    gboolean (*native_dialog_get_visible)(GtkNativeDialog *self);
    void (*native_dialog_set_modal)(GtkNativeDialog *self, gboolean modal);
    gboolean (*native_dialog_get_modal)(GtkNativeDialog *self);
    void (*native_dialog_set_title)(GtkNativeDialog *self, const char *title);
    const char * (*native_dialog_get_title)(GtkNativeDialog *self);
    void (*native_dialog_set_transient_for)(GtkNativeDialog *self, GtkWindow *parent);
    GtkWindow * (*native_dialog_get_transient_for)(GtkNativeDialog *self);
    void (*native_dialog_show)(GtkNativeDialog *self);
    void (*native_unrealize)(GtkNative *self);
    GtkNative * (*native_get_for_surface)(GdkSurface *surface);
    GdkSurface* (*native_get_surface)(GtkNative *self);
    GskRenderer* (*native_get_renderer)(GtkNative *self);
    void (*native_get_surface_transform)(GtkNative *self, double *x, double *y);
    GListModel * (*no_selection_get_model)(GtkNoSelection *self);
    void (*no_selection_set_model)(GtkNoSelection *self, GListModel *model);
    GtkNoSelection * (*no_selection_new)(GListModel *model);
    GtkWidget * (*notebook_new)(void);
    int (*notebook_append_page)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);
    int (*notebook_append_page_menu)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);
    int (*notebook_prepend_page)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);
    int (*notebook_prepend_page_menu)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);
    int (*notebook_insert_page)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, int position);
    int (*notebook_insert_page_menu)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, int position);
    void (*notebook_remove_page)(GtkNotebook *notebook, int page_num);
    void (*notebook_set_group_name)(GtkNotebook *notebook, const char *group_name);
    const char* (*notebook_get_group_name)(GtkNotebook *notebook);
    int (*notebook_get_current_page)(GtkNotebook *notebook);
    GtkWidget* (*notebook_get_nth_page)(GtkNotebook *notebook, int page_num);
    int (*notebook_get_n_pages)(GtkNotebook *notebook);
    int (*notebook_page_num)(GtkNotebook *notebook, GtkWidget *child);
    void (*notebook_set_current_page)(GtkNotebook *notebook, int page_num);
    void (*notebook_next_page)(GtkNotebook *notebook);
    void (*notebook_prev_page)(GtkNotebook *notebook);
    void (*notebook_set_show_border)(GtkNotebook *notebook, gboolean show_border);
    gboolean (*notebook_get_show_border)(GtkNotebook *notebook);
    void (*notebook_set_show_tabs)(GtkNotebook *notebook, gboolean show_tabs);
    gboolean (*notebook_get_show_tabs)(GtkNotebook *notebook);
    void (*notebook_set_tab_pos)(GtkNotebook *notebook, GtkPositionType pos);
    GtkPositionType (*notebook_get_tab_pos)(GtkNotebook *notebook);
    void (*notebook_set_scrollable)(GtkNotebook *notebook, gboolean scrollable);
    gboolean (*notebook_get_scrollable)(GtkNotebook *notebook);
    void (*notebook_popup_enable)(GtkNotebook *notebook);
    void (*notebook_popup_disable)(GtkNotebook *notebook);
    GtkWidget * (*notebook_get_tab_label)(GtkNotebook *notebook, GtkWidget *child);
    void (*notebook_set_tab_label)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);
    void (*notebook_set_tab_label_text)(GtkNotebook *notebook, GtkWidget *child, const char *tab_text);
    const char * (*notebook_get_tab_label_text)(GtkNotebook *notebook, GtkWidget *child);
    GtkWidget * (*notebook_get_menu_label)(GtkNotebook *notebook, GtkWidget *child);
    void (*notebook_set_menu_label)(GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label);
    void (*notebook_set_menu_label_text)(GtkNotebook *notebook, GtkWidget *child, const char *menu_text);
    const char * (*notebook_get_menu_label_text)(GtkNotebook *notebook, GtkWidget *child);
    void (*notebook_reorder_child)(GtkNotebook *notebook, GtkWidget *child, int position);
    gboolean (*notebook_get_tab_reorderable)(GtkNotebook *notebook, GtkWidget *child);
    void (*notebook_set_tab_reorderable)(GtkNotebook *notebook, GtkWidget *child, gboolean reorderable);
    gboolean (*notebook_get_tab_detachable)(GtkNotebook *notebook, GtkWidget *child);
    void (*notebook_set_tab_detachable)(GtkNotebook *notebook, GtkWidget *child, gboolean detachable);
    void (*notebook_detach_tab)(GtkNotebook *notebook, GtkWidget *child);
    GtkWidget* (*notebook_get_action_widget)(GtkNotebook *notebook, GtkPackType pack_type);
    void (*notebook_set_action_widget)(GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type);
    GType (*notebook_page_get_type)(void);
    GtkNotebookPage* (*notebook_get_page)(GtkNotebook *notebook, GtkWidget *child);
    GtkWidget* (*notebook_page_get_child)(GtkNotebookPage *page);
    GListModel* (*notebook_get_pages)(GtkNotebook *notebook);
    GType (*notebook_get_type)(void);
    GtkExpression * (*numeric_sorter_get_expression)(GtkNumericSorter *self);
    void (*numeric_sorter_set_expression)(GtkNumericSorter *self, GtkExpression *expression);
    GtkSortType (*numeric_sorter_get_sort_order)(GtkNumericSorter *self);
    void (*numeric_sorter_set_sort_order)(GtkNumericSorter *self, GtkSortType sort_order);
    GtkNumericSorter * (*numeric_sorter_new)(GtkExpression *expression);
    void (*orientable_set_orientation)(GtkOrientable *orientable, GtkOrientation orientation);
    GtkOrientation (*orientable_get_orientation)(GtkOrientable *orientable);
    GType (*orientable_get_type)(void);
    GtkWidget* (*overlay_new)(void);
    void (*overlay_add_overlay)(GtkOverlay *overlay, GtkWidget *widget);
    void (*overlay_remove_overlay)(GtkOverlay *overlay, GtkWidget *widget);
    void (*overlay_set_child)(GtkOverlay *overlay, GtkWidget *child);
    GtkWidget * (*overlay_get_child)(GtkOverlay *overlay);
    gboolean (*overlay_get_measure_overlay)(GtkOverlay *overlay, GtkWidget *widget);
    void (*overlay_set_measure_overlay)(GtkOverlay *overlay, GtkWidget *widget, gboolean measure);
    gboolean (*overlay_get_clip_overlay)(GtkOverlay *overlay, GtkWidget *widget);
    void (*overlay_set_clip_overlay)(GtkOverlay *overlay, GtkWidget *widget, gboolean clip_overlay);
    GType (*overlay_get_type)(void);
    void (*overlay_layout_child_set_measure)(GtkOverlayLayoutChild *child, gboolean measure);
    gboolean (*overlay_layout_child_get_measure)(GtkOverlayLayoutChild *child);
    void (*overlay_layout_child_set_clip_overlay)(GtkOverlayLayoutChild *child, gboolean clip_overlay);
    gboolean (*overlay_layout_child_get_clip_overlay)(GtkOverlayLayoutChild *child);
    GtkLayoutManager * (*overlay_layout_new)(void);
    GtkPadController* (*pad_controller_new)(GActionGroup *group, GdkDevice *pad);
    void (*pad_controller_set_action_entries)(GtkPadController *controller, const GtkPadActionEntry *entries, int n_entries);
    void (*pad_controller_set_action)(GtkPadController *controller, GtkPadActionType type, int index, int mode, const char *label, const char *action_name);
    GType (*pad_controller_get_type)(void);
    GtkWidget * (*paned_new)(GtkOrientation orientation);
    void (*paned_set_start_child)(GtkPaned *paned, GtkWidget *child);
    GtkWidget * (*paned_get_start_child)(GtkPaned *paned);
    void (*paned_set_resize_start_child)(GtkPaned *paned, gboolean resize);
    gboolean (*paned_get_resize_start_child)(GtkPaned *paned);
    void (*paned_set_end_child)(GtkPaned *paned, GtkWidget *child);
    GtkWidget * (*paned_get_end_child)(GtkPaned *paned);
    void (*paned_set_shrink_start_child)(GtkPaned *paned, gboolean resize);
    gboolean (*paned_get_shrink_start_child)(GtkPaned *paned);
    void (*paned_set_resize_end_child)(GtkPaned *paned, gboolean resize);
    gboolean (*paned_get_resize_end_child)(GtkPaned *paned);
    void (*paned_set_shrink_end_child)(GtkPaned *paned, gboolean resize);
    gboolean (*paned_get_shrink_end_child)(GtkPaned *paned);
    int (*paned_get_position)(GtkPaned *paned);
    void (*paned_set_position)(GtkPaned *paned, int position);
    void (*paned_set_wide_handle)(GtkPaned *paned, gboolean wide);
    gboolean (*paned_get_wide_handle)(GtkPaned *paned);
    GType (*paned_get_type)(void);
    GtkEntryBuffer * (*password_entry_buffer_new)(void);
    GtkWidget * (*password_entry_new)(void);
    void (*password_entry_set_show_peek_icon)(GtkPasswordEntry *entry, gboolean show_peek_icon);
    gboolean (*password_entry_get_show_peek_icon)(GtkPasswordEntry *entry);
    void (*password_entry_set_extra_menu)(GtkPasswordEntry *entry, GMenuModel *model);
    GMenuModel * (*password_entry_get_extra_menu)(GtkPasswordEntry *entry);
    GType (*password_entry_get_type)(void);
    GtkWidget* (*picture_new_for_paintable)(GdkPaintable *paintable);
    GtkWidget* (*picture_new_for_pixbuf)(GdkPixbuf *pixbuf);
    GtkWidget* (*picture_new_for_file)(GFile *file);
    GtkWidget* (*picture_new_for_filename)(const char *filename);
    GtkWidget* (*picture_new_for_resource)(const char *resource_path);
    void (*picture_set_paintable)(GtkPicture *self, GdkPaintable *paintable);
    GdkPaintable * (*picture_get_paintable)(GtkPicture *self);
    void (*picture_set_file)(GtkPicture *self, GFile *file);
    GFile * (*picture_get_file)(GtkPicture *self);
    void (*picture_set_filename)(GtkPicture *self, const char *filename);
    void (*picture_set_resource)(GtkPicture *self, const char *resource_path);
    void (*picture_set_pixbuf)(GtkPicture *self, GdkPixbuf *pixbuf);
    void (*picture_set_keep_aspect_ratio)(GtkPicture *self, gboolean keep_aspect_ratio);
    gboolean (*picture_get_keep_aspect_ratio)(GtkPicture *self);
    void (*picture_set_can_shrink)(GtkPicture *self, gboolean can_shrink);
    gboolean (*picture_get_can_shrink)(GtkPicture *self);
    void (*picture_set_content_fit)(GtkPicture *self, GtkContentFit content_fit);
    GtkContentFit (*picture_get_content_fit)(GtkPicture *self);
    void (*picture_set_alternative_text)(GtkPicture *self, const char *alternative_text);
    const char * (*picture_get_alternative_text)(GtkPicture *self);
    GtkWidget* (*picture_new)(void);
    GtkWidget * (*popover_new)(void);
    void (*popover_set_child)(GtkPopover *popover, GtkWidget *child);
    GtkWidget * (*popover_get_child)(GtkPopover *popover);
    void (*popover_set_pointing_to)(GtkPopover *popover, const GdkRectangle *rect);
    gboolean (*popover_get_pointing_to)(GtkPopover *popover, GdkRectangle *rect);
    void (*popover_set_position)(GtkPopover *popover, GtkPositionType position);
    GtkPositionType (*popover_get_position)(GtkPopover *popover);
    void (*popover_set_autohide)(GtkPopover *popover, gboolean autohide);
    gboolean (*popover_get_autohide)(GtkPopover *popover);
    void (*popover_set_has_arrow)(GtkPopover *popover, gboolean has_arrow);
    gboolean (*popover_get_has_arrow)(GtkPopover *popover);
    void (*popover_set_mnemonics_visible)(GtkPopover *popover, gboolean mnemonics_visible);
    gboolean (*popover_get_mnemonics_visible)(GtkPopover *popover);
    void (*popover_popup)(GtkPopover *popover);
    void (*popover_popdown)(GtkPopover *popover);
    void (*popover_set_offset)(GtkPopover *popover, int x_offset, int y_offset);
    void (*popover_get_offset)(GtkPopover *popover, int *x_offset, int *y_offset);
    void (*popover_set_cascade_popdown)(GtkPopover *popover, gboolean cascade_popdown);
    gboolean (*popover_get_cascade_popdown)(GtkPopover *popover);
    void (*popover_set_default_widget)(GtkPopover *popover, GtkWidget *widget);
    void (*popover_present)(GtkPopover *popover);
    GType (*popover_get_type)(void);
    GtkWidget * (*popover_menu_bar_new_from_model)(GMenuModel *model);
    void (*popover_menu_bar_set_menu_model)(GtkPopoverMenuBar *bar, GMenuModel *model);
    GMenuModel * (*popover_menu_bar_get_menu_model)(GtkPopoverMenuBar *bar);
    gboolean (*popover_menu_bar_add_child)(GtkPopoverMenuBar *bar, GtkWidget *child, const char *id);
    gboolean (*popover_menu_bar_remove_child)(GtkPopoverMenuBar *bar, GtkWidget *child);
    GType (*popover_menu_bar_get_type)(void);
    GtkWidget * (*popover_menu_new_from_model)(GMenuModel *model);
    GtkWidget * (*popover_menu_new_from_model_full)(GMenuModel *model, GtkPopoverMenuFlags flags);
    void (*popover_menu_set_menu_model)(GtkPopoverMenu *popover, GMenuModel *model);
    GMenuModel* (*popover_menu_get_menu_model)(GtkPopoverMenu *popover);
    void (*popover_menu_set_flags)(GtkPopoverMenu *popover, GtkPopoverMenuFlags flags);
    GtkPopoverMenuFlags (*popover_menu_get_flags)(GtkPopoverMenu *popover);
    gboolean (*popover_menu_add_child)(GtkPopoverMenu *popover, GtkWidget *child, const char *id);
    gboolean (*popover_menu_remove_child)(GtkPopoverMenu *popover, GtkWidget *child);
    GType (*popover_menu_get_type)(void);
    GtkPrintSetup* (*print_setup_ref)(GtkPrintSetup *setup);
    void (*print_setup_unref)(GtkPrintSetup *setup);
    GtkPrintSettings * (*print_setup_get_print_settings)(GtkPrintSetup *setup);
    GtkPageSetup * (*print_setup_get_page_setup)(GtkPrintSetup *setup);
    GtkPrintDialog* (*print_dialog_new)(void);
    const char * (*print_dialog_get_title)(GtkPrintDialog *self);
    void (*print_dialog_set_title)(GtkPrintDialog *self, const char *title);
    const char * (*print_dialog_get_accept_label)(GtkPrintDialog *self);
    void (*print_dialog_set_accept_label)(GtkPrintDialog *self, const char *accept_label);
    gboolean (*print_dialog_get_modal)(GtkPrintDialog *self);
    void (*print_dialog_set_modal)(GtkPrintDialog *self, gboolean modal);
    GtkPageSetup * (*print_dialog_get_page_setup)(GtkPrintDialog *self);
    void (*print_dialog_set_page_setup)(GtkPrintDialog *self, GtkPageSetup *page_setup);
    GtkPrintSettings * (*print_dialog_get_print_settings)(GtkPrintDialog *self);
    void (*print_dialog_set_print_settings)(GtkPrintDialog *self, GtkPrintSettings *print_settings);
    void (*print_dialog_setup)(GtkPrintDialog *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GtkPrintSetup* (*print_dialog_setup_finish)(GtkPrintDialog *self, GAsyncResult *result, GError **error);
    void (*print_dialog_print)(GtkPrintDialog *self, GtkWindow *parent, GtkPrintSetup *setup, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GOutputStream * (*print_dialog_print_finish)(GtkPrintDialog *self, GAsyncResult *result, GError **error);
    void (*print_dialog_print_file)(GtkPrintDialog *self, GtkWindow *parent, GtkPrintSetup *setup, GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*print_dialog_print_file_finish)(GtkPrintDialog *self, GAsyncResult *result, GError **error);
    GType (*print_setup_get_type)(void);
    GtkWidget* (*progress_bar_new)(void);
    void (*progress_bar_pulse)(GtkProgressBar *pbar);
    void (*progress_bar_set_text)(GtkProgressBar *pbar, const char *text);
    void (*progress_bar_set_fraction)(GtkProgressBar *pbar, double fraction);
    void (*progress_bar_set_pulse_step)(GtkProgressBar *pbar, double fraction);
    void (*progress_bar_set_inverted)(GtkProgressBar *pbar, gboolean inverted);
    const char * (*progress_bar_get_text)(GtkProgressBar *pbar);
    double (*progress_bar_get_fraction)(GtkProgressBar *pbar);
    double (*progress_bar_get_pulse_step)(GtkProgressBar *pbar);
    gboolean (*progress_bar_get_inverted)(GtkProgressBar *pbar);
    void (*progress_bar_set_ellipsize)(GtkProgressBar *pbar, PangoEllipsizeMode mode);
    PangoEllipsizeMode (*progress_bar_get_ellipsize)(GtkProgressBar *pbar);
    void (*progress_bar_set_show_text)(GtkProgressBar *pbar, gboolean show_text);
    gboolean (*progress_bar_get_show_text)(GtkProgressBar *pbar);
    GType (*progress_bar_get_type)(void);
    void (*range_set_adjustment)(GtkRange *range, GtkAdjustment *adjustment);
    GtkAdjustment* (*range_get_adjustment)(GtkRange *range);
    void (*range_set_inverted)(GtkRange *range, gboolean setting);
    gboolean (*range_get_inverted)(GtkRange *range);
    void (*range_set_flippable)(GtkRange *range, gboolean flippable);
    gboolean (*range_get_flippable)(GtkRange *range);
    void (*range_set_slider_size_fixed)(GtkRange *range, gboolean size_fixed);
    gboolean (*range_get_slider_size_fixed)(GtkRange *range);
    void (*range_get_range_rect)(GtkRange *range, GdkRectangle *range_rect);
    void (*range_get_slider_range)(GtkRange *range, int *slider_start, int *slider_end);
    void (*range_set_increments)(GtkRange *range, double step, double page);
    void (*range_set_range)(GtkRange *range, double min, double max);
    void (*range_set_value)(GtkRange *range, double value);
    double (*range_get_value)(GtkRange *range);
    void (*range_set_show_fill_level)(GtkRange *range, gboolean show_fill_level);
    gboolean (*range_get_show_fill_level)(GtkRange *range);
    void (*range_set_restrict_to_fill_level)(GtkRange *range, gboolean restrict_to_fill_level);
    gboolean (*range_get_restrict_to_fill_level)(GtkRange *range);
    void (*range_set_fill_level)(GtkRange *range, double fill_level);
    double (*range_get_fill_level)(GtkRange *range);
    void (*range_set_round_digits)(GtkRange *range, int round_digits);
    int (*range_get_round_digits)(GtkRange *range);
    GType (*range_get_type)(void);
    GType (*recent_manager_get_type)(void);
    GtkRecentManager* (*recent_manager_new)(void);
    GtkRecentManager* (*recent_manager_get_default)(void);
    gboolean (*recent_manager_add_item)(GtkRecentManager *manager, const char *uri);
    gboolean (*recent_manager_add_full)(GtkRecentManager *manager, const char *uri, const GtkRecentData *recent_data);
    gboolean (*recent_manager_remove_item)(GtkRecentManager *manager, const char *uri, GError **error);
    GtkRecentInfo * (*recent_manager_lookup_item)(GtkRecentManager *manager, const char *uri, GError **error);
    gboolean (*recent_manager_has_item)(GtkRecentManager *manager, const char *uri);
    gboolean (*recent_manager_move_item)(GtkRecentManager *manager, const char *uri, const char *new_uri, GError **error);
    GList * (*recent_manager_get_items)(GtkRecentManager *manager);
    int (*recent_manager_purge_items)(GtkRecentManager *manager, GError **error);
    GType (*recent_info_get_type)(void);
    GtkRecentInfo * (*recent_info_ref)(GtkRecentInfo *info);
    void (*recent_info_unref)(GtkRecentInfo *info);
    const char * (*recent_info_get_uri)(GtkRecentInfo *info);
    const char * (*recent_info_get_display_name)(GtkRecentInfo *info);
    const char * (*recent_info_get_description)(GtkRecentInfo *info);
    const char * (*recent_info_get_mime_type)(GtkRecentInfo *info);
    GDateTime * (*recent_info_get_added)(GtkRecentInfo *info);
    GDateTime * (*recent_info_get_modified)(GtkRecentInfo *info);
    GDateTime * (*recent_info_get_visited)(GtkRecentInfo *info);
    gboolean (*recent_info_get_private_hint)(GtkRecentInfo *info);
    gboolean (*recent_info_get_application_info)(GtkRecentInfo *info, const char *app_name, const char **app_exec, guint *count, GDateTime **stamp);
    GAppInfo * (*recent_info_create_app_info)(GtkRecentInfo *info, const char *app_name, GError **error);
    char ** (*recent_info_get_applications)(GtkRecentInfo *info, gsize *length);
    char * (*recent_info_last_application)(GtkRecentInfo *info);
    gboolean (*recent_info_has_application)(GtkRecentInfo *info, const char *app_name);
    char ** (*recent_info_get_groups)(GtkRecentInfo *info, gsize *length);
    gboolean (*recent_info_has_group)(GtkRecentInfo *info, const char *group_name);
    GIcon * (*recent_info_get_gicon)(GtkRecentInfo *info);
    char * (*recent_info_get_short_name)(GtkRecentInfo *info);
    char * (*recent_info_get_uri_display)(GtkRecentInfo *info);
    int (*recent_info_get_age)(GtkRecentInfo *info);
    gboolean (*recent_info_is_local)(GtkRecentInfo *info);
    gboolean (*recent_info_exists)(GtkRecentInfo *info);
    gboolean (*recent_info_match)(GtkRecentInfo *info_a, GtkRecentInfo *info_b);
    void (*_gtk_recent_manager_sync)(void);
    GQuark (*recent_manager_error_quark)(void);
    GtkWidget* (*revealer_new)(void);
    gboolean (*revealer_get_reveal_child)(GtkRevealer *revealer);
    void (*revealer_set_reveal_child)(GtkRevealer *revealer, gboolean reveal_child);
    gboolean (*revealer_get_child_revealed)(GtkRevealer *revealer);
    guint (*revealer_get_transition_duration)(GtkRevealer *revealer);
    void (*revealer_set_transition_duration)(GtkRevealer *revealer, guint duration);
    void (*revealer_set_transition_type)(GtkRevealer *revealer, GtkRevealerTransitionType transition);
    GtkRevealerTransitionType (*revealer_get_transition_type)(GtkRevealer *revealer);
    void (*revealer_set_child)(GtkRevealer *revealer, GtkWidget *child);
    GtkWidget * (*revealer_get_child)(GtkRevealer *revealer);
    GType (*revealer_get_type)(void);
    void (*root_set_focus)(GtkRoot *self, GtkWidget *focus);
    GtkWidget * (*root_get_focus)(GtkRoot *self);
    GtkWidget * (*scale_button_new)(double min, double max, double step, const char **icons);
    void (*scale_button_set_icons)(GtkScaleButton *button, const char **icons);
    double (*scale_button_get_value)(GtkScaleButton *button);
    void (*scale_button_set_value)(GtkScaleButton *button, double value);
    GtkAdjustment * (*scale_button_get_adjustment)(GtkScaleButton *button);
    void (*scale_button_set_adjustment)(GtkScaleButton *button, GtkAdjustment *adjustment);
    GtkWidget * (*scale_button_get_plus_button)(GtkScaleButton *button);
    GtkWidget * (*scale_button_get_minus_button)(GtkScaleButton *button);
    GtkWidget * (*scale_button_get_popup)(GtkScaleButton *button);
    gboolean (*scale_button_get_active)(GtkScaleButton *button);
    gboolean (*scale_button_get_has_frame)(GtkScaleButton *button);
    void (*scale_button_set_has_frame)(GtkScaleButton *button, gboolean has_frame);
    GType (*scale_button_get_type)(void);
    GtkWidget * (*scale_new)(GtkOrientation orientation, GtkAdjustment *adjustment);
    GtkWidget * (*scale_new_with_range)(GtkOrientation orientation, double min, double max, double step);
    void (*scale_set_digits)(GtkScale *scale, int digits);
    int (*scale_get_digits)(GtkScale *scale);
    void (*scale_set_draw_value)(GtkScale *scale, gboolean draw_value);
    gboolean (*scale_get_draw_value)(GtkScale *scale);
    void (*scale_set_has_origin)(GtkScale *scale, gboolean has_origin);
    gboolean (*scale_get_has_origin)(GtkScale *scale);
    void (*scale_set_value_pos)(GtkScale *scale, GtkPositionType pos);
    GtkPositionType (*scale_get_value_pos)(GtkScale *scale);
    PangoLayout * (*scale_get_layout)(GtkScale *scale);
    void (*scale_get_layout_offsets)(GtkScale *scale, int *x, int *y);
    void (*scale_add_mark)(GtkScale *scale, double value, GtkPositionType position, const char *markup);
    void (*scale_clear_marks)(GtkScale *scale);
    void (*scale_set_format_value_func)(GtkScale *scale, GtkScaleFormatValueFunc func, gpointer user_data, GDestroyNotify destroy_notify);
    GType (*scale_get_type)(void);
    GtkAdjustment* (*scrollable_get_hadjustment)(GtkScrollable *scrollable);
    void (*scrollable_set_hadjustment)(GtkScrollable *scrollable, GtkAdjustment *hadjustment);
    GtkAdjustment* (*scrollable_get_vadjustment)(GtkScrollable *scrollable);
    void (*scrollable_set_vadjustment)(GtkScrollable *scrollable, GtkAdjustment *vadjustment);
    GtkScrollablePolicy (*scrollable_get_hscroll_policy)(GtkScrollable *scrollable);
    void (*scrollable_set_hscroll_policy)(GtkScrollable *scrollable, GtkScrollablePolicy policy);
    GtkScrollablePolicy (*scrollable_get_vscroll_policy)(GtkScrollable *scrollable);
    void (*scrollable_set_vscroll_policy)(GtkScrollable *scrollable, GtkScrollablePolicy policy);
    gboolean (*scrollable_get_border)(GtkScrollable *scrollable, GtkBorder *border);
    GType (*scrollable_get_type)(void);
    GtkWidget * (*scrollbar_new)(GtkOrientation orientation, GtkAdjustment *adjustment);
    void (*scrollbar_set_adjustment)(GtkScrollbar *self, GtkAdjustment *adjustment);
    GtkAdjustment* (*scrollbar_get_adjustment)(GtkScrollbar *self);
    GType (*scrollbar_get_type)(void);
    GtkWidget* (*scrolled_window_new)(void);
    void (*scrolled_window_set_hadjustment)(GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment);
    void (*scrolled_window_set_vadjustment)(GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment);
    GtkAdjustment* (*scrolled_window_get_hadjustment)(GtkScrolledWindow *scrolled_window);
    GtkAdjustment* (*scrolled_window_get_vadjustment)(GtkScrolledWindow *scrolled_window);
    GtkWidget* (*scrolled_window_get_hscrollbar)(GtkScrolledWindow *scrolled_window);
    GtkWidget* (*scrolled_window_get_vscrollbar)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_policy)(GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy);
    void (*scrolled_window_get_policy)(GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy);
    void (*scrolled_window_set_placement)(GtkScrolledWindow *scrolled_window, GtkCornerType window_placement);
    void (*scrolled_window_unset_placement)(GtkScrolledWindow *scrolled_window);
    GtkCornerType (*scrolled_window_get_placement)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_has_frame)(GtkScrolledWindow *scrolled_window, gboolean has_frame);
    gboolean (*scrolled_window_get_has_frame)(GtkScrolledWindow *scrolled_window);
    int (*scrolled_window_get_min_content_width)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_min_content_width)(GtkScrolledWindow *scrolled_window, int width);
    int (*scrolled_window_get_min_content_height)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_min_content_height)(GtkScrolledWindow *scrolled_window, int height);
    void (*scrolled_window_set_kinetic_scrolling)(GtkScrolledWindow *scrolled_window, gboolean kinetic_scrolling);
    gboolean (*scrolled_window_get_kinetic_scrolling)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_overlay_scrolling)(GtkScrolledWindow *scrolled_window, gboolean overlay_scrolling);
    gboolean (*scrolled_window_get_overlay_scrolling)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_max_content_width)(GtkScrolledWindow *scrolled_window, int width);
    int (*scrolled_window_get_max_content_width)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_max_content_height)(GtkScrolledWindow *scrolled_window, int height);
    int (*scrolled_window_get_max_content_height)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_propagate_natural_width)(GtkScrolledWindow *scrolled_window, gboolean propagate);
    gboolean (*scrolled_window_get_propagate_natural_width)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_propagate_natural_height)(GtkScrolledWindow *scrolled_window, gboolean propagate);
    gboolean (*scrolled_window_get_propagate_natural_height)(GtkScrolledWindow *scrolled_window);
    void (*scrolled_window_set_child)(GtkScrolledWindow *scrolled_window, GtkWidget *child);
    GtkWidget* (*scrolled_window_get_child)(GtkScrolledWindow *scrolled_window);
    GType (*scrolled_window_get_type)(void);
    GtkScrollInfo * (*scroll_info_new)(void);
    GtkScrollInfo * (*scroll_info_ref)(GtkScrollInfo *self);
    void (*scroll_info_unref)(GtkScrollInfo *self);
    void (*scroll_info_set_enable_horizontal)(GtkScrollInfo *self, gboolean horizontal);
    gboolean (*scroll_info_get_enable_horizontal)(GtkScrollInfo *self);
    void (*scroll_info_set_enable_vertical)(GtkScrollInfo *self, gboolean vertical);
    gboolean (*scroll_info_get_enable_vertical)(GtkScrollInfo *self);
    GType (*scroll_info_get_type)(void);
    GtkWidget* (*search_bar_new)(void);
    void (*search_bar_connect_entry)(GtkSearchBar *bar, GtkEditable *entry);
    gboolean (*search_bar_get_search_mode)(GtkSearchBar *bar);
    void (*search_bar_set_search_mode)(GtkSearchBar *bar, gboolean search_mode);
    gboolean (*search_bar_get_show_close_button)(GtkSearchBar *bar);
    void (*search_bar_set_show_close_button)(GtkSearchBar *bar, gboolean visible);
    void (*search_bar_set_key_capture_widget)(GtkSearchBar *bar, GtkWidget *widget);
    GtkWidget * (*search_bar_get_key_capture_widget)(GtkSearchBar *bar);
    void (*search_bar_set_child)(GtkSearchBar *bar, GtkWidget *child);
    GtkWidget * (*search_bar_get_child)(GtkSearchBar *bar);
    GType (*search_bar_get_type)(void);
    GtkWidget* (*search_entry_new)(void);
    void (*search_entry_set_key_capture_widget)(GtkSearchEntry *entry, GtkWidget *widget);
    GtkWidget* (*search_entry_get_key_capture_widget)(GtkSearchEntry *entry);
    void (*search_entry_set_search_delay)(GtkSearchEntry *entry, guint delay);
    guint (*search_entry_get_search_delay)(GtkSearchEntry *entry);
    void (*search_entry_set_placeholder_text)(GtkSearchEntry *entry, const char *text);
    const char * (*search_entry_get_placeholder_text)(GtkSearchEntry *entry);
    void (*search_entry_set_input_purpose)(GtkSearchEntry *entry, GtkInputPurpose purpose);
    GtkInputPurpose (*search_entry_get_input_purpose)(GtkSearchEntry *entry);
    void (*search_entry_set_input_hints)(GtkSearchEntry *entry, GtkInputHints hints);
    GtkInputHints (*search_entry_get_input_hints)(GtkSearchEntry *entry);
    GType (*search_entry_get_type)(void);
    void (*section_model_sections_changed)(GtkSectionModel *self, guint position, guint n_items);
    void (*selection_filter_model_set_model)(GtkSelectionFilterModel *self, GtkSelectionModel *model);
    GtkSelectionModel * (*selection_filter_model_get_model)(GtkSelectionFilterModel *self);
    GtkSelectionFilterModel * (*selection_filter_model_new)(GtkSelectionModel *model);
    GtkBitset * (*selection_model_get_selection)(GtkSelectionModel *model);
    GtkBitset * (*selection_model_get_selection_in_range)(GtkSelectionModel *model, guint position, guint n_items);
    gboolean (*selection_model_select_item)(GtkSelectionModel *model, guint position, gboolean unselect_rest);
    gboolean (*selection_model_unselect_item)(GtkSelectionModel *model, guint position);
    gboolean (*selection_model_select_range)(GtkSelectionModel *model, guint position, guint n_items, gboolean unselect_rest);
    gboolean (*selection_model_unselect_range)(GtkSelectionModel *model, guint position, guint n_items);
    gboolean (*selection_model_select_all)(GtkSelectionModel *model);
    gboolean (*selection_model_unselect_all)(GtkSelectionModel *model);
    gboolean (*selection_model_set_selection)(GtkSelectionModel *model, GtkBitset *selected, GtkBitset *mask);
    void (*selection_model_selection_changed)(GtkSelectionModel *model, guint position, guint n_items);
    GtkWidget * (*separator_new)(GtkOrientation orientation);
    GType (*separator_get_type)(void);
    GtkSettings* (*settings_get_default)(void);
    GtkSettings* (*settings_get_for_display)(GdkDisplay *display);
    void (*settings_reset_property)(GtkSettings *settings, const char *name);
    GType (*settings_get_type)(void);
    GtkShortcutAction * (*shortcut_action_parse_string)(const char * string);
    void (*shortcut_action_print)(GtkShortcutAction *self, GString *string);
    gboolean (*shortcut_action_activate)(GtkShortcutAction *self, GtkShortcutActionFlags flags, GtkWidget *widget, GVariant *args);
    GtkShortcutAction * (*nothing_action_get)(void);
    GtkShortcutAction * (*callback_action_new)(GtkShortcutFunc callback, gpointer data, GDestroyNotify destroy);
    GtkShortcutAction * (*mnemonic_action_get)(void);
    GtkShortcutAction * (*activate_action_get)(void);
    GtkShortcutAction * (*signal_action_new)(const char *signal_name);
    const char * (*signal_action_get_signal_name)(GtkSignalAction *self);
    GtkShortcutAction * (*named_action_new)(const char *name);
    const char * (*named_action_get_action_name)(GtkNamedAction *self);
    char * (*shortcut_action_to_string)(GtkShortcutAction *self);
    GtkEventController * (*shortcut_controller_new)(void);
    GtkEventController * (*shortcut_controller_new_for_model)(GListModel *model);
    void (*shortcut_controller_set_mnemonics_modifiers)(GtkShortcutController *self, GdkModifierType modifiers);
    GdkModifierType (*shortcut_controller_get_mnemonics_modifiers)(GtkShortcutController *self);
    void (*shortcut_controller_set_scope)(GtkShortcutController *self, GtkShortcutScope scope);
    GtkShortcutScope (*shortcut_controller_get_scope)(GtkShortcutController *self);
    void (*shortcut_controller_add_shortcut)(GtkShortcutController *self, GtkShortcut *shortcut);
    void (*shortcut_controller_remove_shortcut)(GtkShortcutController *self, GtkShortcut *shortcut);
    GType (*shortcut_controller_get_type)(void);
    GtkShortcut * (*shortcut_new_with_arguments)(GtkShortcutTrigger *trigger, GtkShortcutAction *action, const char *format_string, ...);
    GtkShortcutTrigger * (*shortcut_get_trigger)(GtkShortcut *self);
    void (*shortcut_set_trigger)(GtkShortcut *self, GtkShortcutTrigger *trigger);
    GtkShortcutAction * (*shortcut_get_action)(GtkShortcut *self);
    void (*shortcut_set_action)(GtkShortcut *self, GtkShortcutAction *action);
    GVariant * (*shortcut_get_arguments)(GtkShortcut *self);
    void (*shortcut_set_arguments)(GtkShortcut *self, GVariant *args);
    GtkShortcut * (*shortcut_new)(GtkShortcutTrigger *trigger, GtkShortcutAction *action);
    GtkWidget* (*shortcut_label_new)(const char *accelerator);
    const char* (*shortcut_label_get_accelerator)(GtkShortcutLabel *self);
    void (*shortcut_label_set_accelerator)(GtkShortcutLabel *self, const char *accelerator);
    const char* (*shortcut_label_get_disabled_text)(GtkShortcutLabel *self);
    void (*shortcut_label_set_disabled_text)(GtkShortcutLabel *self, const char *disabled_text);
    GType (*shortcut_label_get_type)(void);
    void (*shortcuts_group_add_shortcut)(GtkShortcutsGroup *self, GtkShortcutsShortcut *shortcut);
    GType (*shortcuts_group_get_type)(void);
    void (*shortcuts_section_add_group)(GtkShortcutsSection *self, GtkShortcutsGroup *group);
    GType (*shortcuts_section_get_type)(void);
    GType (*shortcuts_shortcut_get_type)(void);
    void (*shortcuts_window_add_section)(GtkShortcutsWindow *self, GtkShortcutsSection *section);
    GType (*shortcuts_window_get_type)(void);
    char * (*shortcut_trigger_to_string)(GtkShortcutTrigger *self);
    void (*shortcut_trigger_print)(GtkShortcutTrigger *self, GString *string);
    char * (*shortcut_trigger_to_label)(GtkShortcutTrigger *self, GdkDisplay *display);
    gboolean (*shortcut_trigger_print_label)(GtkShortcutTrigger *self, GdkDisplay *display, GString *string);
    guint (*shortcut_trigger_hash)(gconstpointer trigger);
    gboolean (*shortcut_trigger_equal)(gconstpointer trigger1, gconstpointer trigger2);
    int (*shortcut_trigger_compare)(gconstpointer trigger1, gconstpointer trigger2);
    GdkKeyMatch (*shortcut_trigger_trigger)(GtkShortcutTrigger *self, GdkEvent *event, gboolean enable_mnemonics);
    GtkShortcutTrigger * (*never_trigger_get)(void);
    GtkShortcutTrigger * (*keyval_trigger_new)(guint keyval, GdkModifierType modifiers);
    GdkModifierType (*keyval_trigger_get_modifiers)(GtkKeyvalTrigger *self);
    guint (*keyval_trigger_get_keyval)(GtkKeyvalTrigger *self);
    GtkShortcutTrigger * (*mnemonic_trigger_new)(guint keyval);
    guint (*mnemonic_trigger_get_keyval)(GtkMnemonicTrigger *self);
    GtkShortcutTrigger * (*alternative_trigger_new)(GtkShortcutTrigger *first, GtkShortcutTrigger *second);
    GtkShortcutTrigger * (*alternative_trigger_get_first)(GtkAlternativeTrigger *self);
    GtkShortcutTrigger * (*alternative_trigger_get_second)(GtkAlternativeTrigger *self);
    GtkShortcutTrigger * (*shortcut_trigger_parse_string)(const char *string);
    GtkListItemFactory * (*signal_list_item_factory_new)(void);
    GType (*signal_list_item_factory_get_type)(void);
    GListModel * (*single_selection_get_model)(GtkSingleSelection *self);
    void (*single_selection_set_model)(GtkSingleSelection *self, GListModel *model);
    guint (*single_selection_get_selected)(GtkSingleSelection *self);
    void (*single_selection_set_selected)(GtkSingleSelection *self, guint position);
    gpointer (*single_selection_get_selected_item)(GtkSingleSelection *self);
    gboolean (*single_selection_get_autoselect)(GtkSingleSelection *self);
    void (*single_selection_set_autoselect)(GtkSingleSelection *self, gboolean autoselect);
    gboolean (*single_selection_get_can_unselect)(GtkSingleSelection *self);
    void (*single_selection_set_can_unselect)(GtkSingleSelection *self, gboolean can_unselect);
    GtkSingleSelection * (*single_selection_new)(GListModel *model);
    GtkSizeGroup * (*size_group_new)(GtkSizeGroupMode mode);
    void (*size_group_set_mode)(GtkSizeGroup *size_group, GtkSizeGroupMode mode);
    GtkSizeGroupMode (*size_group_get_mode)(GtkSizeGroup *size_group);
    void (*size_group_add_widget)(GtkSizeGroup *size_group, GtkWidget *widget);
    void (*size_group_remove_widget)(GtkSizeGroup *size_group, GtkWidget *widget);
    GSList * (*size_group_get_widgets)(GtkSizeGroup *size_group);
    GType (*size_group_get_type)(void);
    int (*distribute_natural_allocation)(int extra_space, guint n_requested_sizes, GtkRequestedSize *sizes);
    void (*slice_list_model_set_model)(GtkSliceListModel *self, GListModel *model);
    GListModel * (*slice_list_model_get_model)(GtkSliceListModel *self);
    void (*slice_list_model_set_offset)(GtkSliceListModel *self, guint offset);
    guint (*slice_list_model_get_offset)(GtkSliceListModel *self);
    void (*slice_list_model_set_size)(GtkSliceListModel *self, guint size);
    guint (*slice_list_model_get_size)(GtkSliceListModel *self);
    GtkSliceListModel * (*slice_list_model_new)(GListModel *model, guint offset, guint size);
    GtkSnapshot * (*snapshot_new)(void);
    GskRenderNode * (*snapshot_free_to_node)(GtkSnapshot *snapshot);
    GdkPaintable * (*snapshot_free_to_paintable)(GtkSnapshot *snapshot, const graphene_size_t *size);
    GskRenderNode * (*snapshot_to_node)(GtkSnapshot *snapshot);
    GdkPaintable * (*snapshot_to_paintable)(GtkSnapshot *snapshot, const graphene_size_t *size);
    void (*snapshot_push_debug)(GtkSnapshot *snapshot, const char *message, ...);
    void (*snapshot_push_opacity)(GtkSnapshot *snapshot, double opacity);
    void (*snapshot_push_blur)(GtkSnapshot *snapshot, double radius);
    void (*snapshot_push_color_matrix)(GtkSnapshot *snapshot, const graphene_matrix_t*color_matrix, const graphene_vec4_t *color_offset);
    void (*snapshot_push_repeat)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_rect_t *child_bounds);
    void (*snapshot_push_clip)(GtkSnapshot *snapshot, const graphene_rect_t *bounds);
    void (*snapshot_push_rounded_clip)(GtkSnapshot *snapshot, const GskRoundedRect *bounds);
    void (*snapshot_push_fill)(GtkSnapshot *snapshot, GskPath *path, GskFillRule fill_rule);
    void (*snapshot_push_stroke)(GtkSnapshot *snapshot, GskPath *path, const GskStroke *stroke);
    void (*snapshot_push_shadow)(GtkSnapshot *snapshot, const GskShadow *shadow, gsize n_shadows);
    void (*snapshot_push_blend)(GtkSnapshot *snapshot, GskBlendMode blend_mode);
    void (*snapshot_push_mask)(GtkSnapshot *snapshot, GskMaskMode mask_mode);
    void (*snapshot_push_cross_fade)(GtkSnapshot *snapshot, double progress);
    void (*snapshot_push_gl_shader)(GtkSnapshot *snapshot, GskGLShader *shader, const graphene_rect_t *bounds, GBytes *take_args);
    void (*snapshot_gl_shader_pop_texture)(GtkSnapshot *snapshot);
    void (*snapshot_pop)(GtkSnapshot *snapshot);
    void (*snapshot_save)(GtkSnapshot *snapshot);
    void (*snapshot_restore)(GtkSnapshot *snapshot);
    void (*snapshot_transform)(GtkSnapshot *snapshot, GskTransform *transform);
    void (*snapshot_transform_matrix)(GtkSnapshot *snapshot, const graphene_matrix_t*matrix);
    void (*snapshot_translate)(GtkSnapshot *snapshot, const graphene_point_t *point);
    void (*snapshot_translate_3d)(GtkSnapshot *snapshot, const graphene_point3d_t*point);
    void (*snapshot_rotate)(GtkSnapshot *snapshot, float angle);
    void (*snapshot_rotate_3d)(GtkSnapshot *snapshot, float angle, const graphene_vec3_t *axis);
    void (*snapshot_scale)(GtkSnapshot *snapshot, float factor_x, float factor_y);
    void (*snapshot_scale_3d)(GtkSnapshot *snapshot, float factor_x, float factor_y, float factor_z);
    void (*snapshot_perspective)(GtkSnapshot *snapshot, float depth);
    void (*snapshot_append_node)(GtkSnapshot *snapshot, GskRenderNode *node);
    cairo_t * (*snapshot_append_cairo)(GtkSnapshot *snapshot, const graphene_rect_t *bounds);
    void (*snapshot_append_texture)(GtkSnapshot *snapshot, GdkTexture *texture, const graphene_rect_t *bounds);
    void (*snapshot_append_scaled_texture)(GtkSnapshot *snapshot, GdkTexture *texture, GskScalingFilter filter, const graphene_rect_t *bounds);
    void (*snapshot_append_color)(GtkSnapshot *snapshot, const GdkRGBA *color, const graphene_rect_t *bounds);
    void (*snapshot_append_linear_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *start_point, const graphene_point_t *end_point, const GskColorStop *stops, gsize n_stops);
    void (*snapshot_append_repeating_linear_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *start_point, const graphene_point_t *end_point, const GskColorStop *stops, gsize n_stops);
    void (*snapshot_append_radial_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *stops, gsize n_stops);
    void (*snapshot_append_repeating_radial_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *stops, gsize n_stops);
    void (*snapshot_append_conic_gradient)(GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_point_t *center, float rotation, const GskColorStop *stops, gsize n_stops);
    void (*snapshot_append_border)(GtkSnapshot *snapshot, const GskRoundedRect *outline, const float border_width[4], const GdkRGBA border_color[4]);
    void (*snapshot_append_inset_shadow)(GtkSnapshot *snapshot, const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
    void (*snapshot_append_outset_shadow)(GtkSnapshot *snapshot, const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
    void (*snapshot_append_layout)(GtkSnapshot *snapshot, PangoLayout *layout, const GdkRGBA *color);
    void (*snapshot_append_fill)(GtkSnapshot *snapshot, GskPath *path, GskFillRule fill_rule, const GdkRGBA *color);
    void (*snapshot_append_stroke)(GtkSnapshot *snapshot, GskPath *path, const GskStroke *stroke, const GdkRGBA *color);
    GtkSorterOrder (*sorter_get_order)(GtkSorter *self);
    void (*sorter_changed)(GtkSorter *self, GtkSorterChange change);
    GtkOrdering (*sorter_compare)(GtkSorter *self, gpointer item1, gpointer item2);
    void (*sort_list_model_set_sorter)(GtkSortListModel *self, GtkSorter *sorter);
    GtkSorter * (*sort_list_model_get_sorter)(GtkSortListModel *self);
    void (*sort_list_model_set_section_sorter)(GtkSortListModel *self, GtkSorter *sorter);
    GtkSorter * (*sort_list_model_get_section_sorter)(GtkSortListModel *self);
    void (*sort_list_model_set_model)(GtkSortListModel *self, GListModel *model);
    GListModel * (*sort_list_model_get_model)(GtkSortListModel *self);
    void (*sort_list_model_set_incremental)(GtkSortListModel *self, gboolean incremental);
    gboolean (*sort_list_model_get_incremental)(GtkSortListModel *self);
    guint (*sort_list_model_get_pending)(GtkSortListModel *self);
    GtkSortListModel * (*sort_list_model_new)(GListModel *model, GtkSorter *sorter);
    void (*spin_button_configure)(GtkSpinButton *spin_button, GtkAdjustment *adjustment, double climb_rate, guint digits);
    GtkWidget* (*spin_button_new)(GtkAdjustment *adjustment, double climb_rate, guint digits);
    GtkWidget* (*spin_button_new_with_range)(double min, double max, double step);
    void (*spin_button_set_activates_default)(GtkSpinButton *spin_button, gboolean activates_default);
    gboolean (*spin_button_get_activates_default)(GtkSpinButton *spin_button);
    void (*spin_button_set_adjustment)(GtkSpinButton *spin_button, GtkAdjustment *adjustment);
    GtkAdjustment* (*spin_button_get_adjustment)(GtkSpinButton *spin_button);
    void (*spin_button_set_digits)(GtkSpinButton *spin_button, guint digits);
    guint (*spin_button_get_digits)(GtkSpinButton *spin_button);
    void (*spin_button_set_increments)(GtkSpinButton *spin_button, double step, double page);
    void (*spin_button_get_increments)(GtkSpinButton *spin_button, double *step, double *page);
    void (*spin_button_set_range)(GtkSpinButton *spin_button, double min, double max);
    void (*spin_button_get_range)(GtkSpinButton *spin_button, double *min, double *max);
    double (*spin_button_get_value)(GtkSpinButton *spin_button);
    int (*spin_button_get_value_as_int)(GtkSpinButton *spin_button);
    void (*spin_button_set_value)(GtkSpinButton *spin_button, double value);
    void (*spin_button_set_update_policy)(GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy);
    GtkSpinButtonUpdatePolicy (*spin_button_get_update_policy)(GtkSpinButton *spin_button);
    void (*spin_button_set_numeric)(GtkSpinButton *spin_button, gboolean numeric);
    gboolean (*spin_button_get_numeric)(GtkSpinButton *spin_button);
    void (*spin_button_spin)(GtkSpinButton *spin_button, GtkSpinType direction, double increment);
    void (*spin_button_set_wrap)(GtkSpinButton *spin_button, gboolean wrap);
    gboolean (*spin_button_get_wrap)(GtkSpinButton *spin_button);
    void (*spin_button_set_snap_to_ticks)(GtkSpinButton *spin_button, gboolean snap_to_ticks);
    gboolean (*spin_button_get_snap_to_ticks)(GtkSpinButton *spin_button);
    void (*spin_button_set_climb_rate)(GtkSpinButton *spin_button, double climb_rate);
    double (*spin_button_get_climb_rate)(GtkSpinButton *spin_button);
    void (*spin_button_update)(GtkSpinButton *spin_button);
    GType (*spin_button_get_type)(void);
    GtkWidget* (*spinner_new)(void);
    void (*spinner_start)(GtkSpinner *spinner);
    void (*spinner_stop)(GtkSpinner *spinner);
    void (*spinner_set_spinning)(GtkSpinner *spinner, gboolean spinning);
    gboolean (*spinner_get_spinning)(GtkSpinner *spinner);
    GType (*spinner_get_type)(void);
    GtkWidget * (*stack_page_get_child)(GtkStackPage *self);
    gboolean (*stack_page_get_visible)(GtkStackPage *self);
    void (*stack_page_set_visible)(GtkStackPage *self, gboolean visible);
    gboolean (*stack_page_get_needs_attention)(GtkStackPage *self);
    void (*stack_page_set_needs_attention)(GtkStackPage *self, gboolean setting);
    gboolean (*stack_page_get_use_underline)(GtkStackPage *self);
    void (*stack_page_set_use_underline)(GtkStackPage *self, gboolean setting);
    const char * (*stack_page_get_name)(GtkStackPage *self);
    void (*stack_page_set_name)(GtkStackPage *self, const char *setting);
    const char * (*stack_page_get_title)(GtkStackPage *self);
    void (*stack_page_set_title)(GtkStackPage *self, const char *setting);
    const char * (*stack_page_get_icon_name)(GtkStackPage *self);
    void (*stack_page_set_icon_name)(GtkStackPage *self, const char *setting);
    GType (*stack_get_type)(void);
    GtkWidget * (*stack_new)(void);
    GtkStackPage * (*stack_add_child)(GtkStack *stack, GtkWidget *child);
    GtkStackPage * (*stack_add_named)(GtkStack *stack, GtkWidget *child, const char *name);
    GtkStackPage * (*stack_add_titled)(GtkStack *stack, GtkWidget *child, const char *name, const char *title);
    void (*stack_remove)(GtkStack *stack, GtkWidget *child);
    GtkStackPage * (*stack_get_page)(GtkStack *stack, GtkWidget *child);
    GtkWidget * (*stack_get_child_by_name)(GtkStack *stack, const char *name);
    void (*stack_set_visible_child)(GtkStack *stack, GtkWidget *child);
    GtkWidget * (*stack_get_visible_child)(GtkStack *stack);
    void (*stack_set_visible_child_name)(GtkStack *stack, const char *name);
    const char * (*stack_get_visible_child_name)(GtkStack *stack);
    void (*stack_set_visible_child_full)(GtkStack *stack, const char *name, GtkStackTransitionType transition);
    void (*stack_set_hhomogeneous)(GtkStack *stack, gboolean hhomogeneous);
    gboolean (*stack_get_hhomogeneous)(GtkStack *stack);
    void (*stack_set_vhomogeneous)(GtkStack *stack, gboolean vhomogeneous);
    gboolean (*stack_get_vhomogeneous)(GtkStack *stack);
    void (*stack_set_transition_duration)(GtkStack *stack, guint duration);
    guint (*stack_get_transition_duration)(GtkStack *stack);
    void (*stack_set_transition_type)(GtkStack *stack, GtkStackTransitionType transition);
    GtkStackTransitionType (*stack_get_transition_type)(GtkStack *stack);
    gboolean (*stack_get_transition_running)(GtkStack *stack);
    void (*stack_set_interpolate_size)(GtkStack *stack, gboolean interpolate_size);
    gboolean (*stack_get_interpolate_size)(GtkStack *stack);
    GtkSelectionModel * (*stack_get_pages)(GtkStack *stack);
    GType (*stack_page_get_type)(void);
    GtkWidget * (*stack_sidebar_new)(void);
    void (*stack_sidebar_set_stack)(GtkStackSidebar *self, GtkStack *stack);
    GtkStack * (*stack_sidebar_get_stack)(GtkStackSidebar *self);
    GType (*stack_sidebar_get_type)(void);
    GtkWidget * (*stack_switcher_new)(void);
    void (*stack_switcher_set_stack)(GtkStackSwitcher *switcher, GtkStack *stack);
    GtkStack * (*stack_switcher_get_stack)(GtkStackSwitcher *switcher);
    GType (*stack_switcher_get_type)(void);
    const char * (*string_filter_get_search)(GtkStringFilter *self);
    void (*string_filter_set_search)(GtkStringFilter *self, const char *search);
    GtkExpression * (*string_filter_get_expression)(GtkStringFilter *self);
    void (*string_filter_set_expression)(GtkStringFilter *self, GtkExpression *expression);
    gboolean (*string_filter_get_ignore_case)(GtkStringFilter *self);
    void (*string_filter_set_ignore_case)(GtkStringFilter *self, gboolean ignore_case);
    GtkStringFilterMatchMode (*string_filter_get_match_mode)(GtkStringFilter *self);
    void (*string_filter_set_match_mode)(GtkStringFilter *self, GtkStringFilterMatchMode mode);
    GtkStringFilter * (*string_filter_new)(GtkExpression *expression);
    const char * (*string_object_get_string)(GtkStringObject *self);
    GtkStringList * (*string_list_new)(const char * const *strings);
    void (*string_list_append)(GtkStringList *self, const char *string);
    void (*string_list_take)(GtkStringList *self, char *string);
    void (*string_list_remove)(GtkStringList *self, guint position);
    void (*string_list_splice)(GtkStringList *self, guint position, guint n_removals, const char * const *additions);
    const char * (*string_list_get_string)(GtkStringList *self, guint position);
    GtkStringObject * (*string_object_new)(const char *string);
    GtkExpression * (*string_sorter_get_expression)(GtkStringSorter *self);
    void (*string_sorter_set_expression)(GtkStringSorter *self, GtkExpression *expression);
    gboolean (*string_sorter_get_ignore_case)(GtkStringSorter *self);
    void (*string_sorter_set_ignore_case)(GtkStringSorter *self, gboolean ignore_case);
    void (*string_sorter_set_collation)(GtkStringSorter *self, GtkCollation collation);
    GtkCollation (*string_sorter_get_collation)(GtkStringSorter *self);
    GtkStringSorter * (*string_sorter_new)(GtkExpression *expression);
    void (*style_context_remove_provider_for_display)(GdkDisplay *display, GtkStyleProvider *provider);
    GType (*style_provider_get_type)(void);
    GtkWidget * (*switch_new)(void);
    void (*switch_set_active)(GtkSwitch *self, gboolean is_active);
    gboolean (*switch_get_active)(GtkSwitch *self);
    void (*switch_set_state)(GtkSwitch *self, gboolean state);
    gboolean (*switch_get_state)(GtkSwitch *self);
    GType (*switch_get_type)(void);
    gboolean (*test_accessible_has_property)(GtkAccessible *accessible, GtkAccessibleProperty property);
    gboolean (*test_accessible_has_relation)(GtkAccessible *accessible, GtkAccessibleRelation relation);
    gboolean (*test_accessible_has_state)(GtkAccessible *accessible, GtkAccessibleState state);
    char * (*test_accessible_check_property)(GtkAccessible *accessible, GtkAccessibleProperty property, ...);
    char * (*test_accessible_check_relation)(GtkAccessible *accessible, GtkAccessibleRelation relation, ...);
    char * (*test_accessible_check_state)(GtkAccessible *accessible, GtkAccessibleState state, ...);
    void (*test_accessible_assertion_message_role)(const char *domain, const char *file, int line, const char *func, const char *expr, GtkAccessible *accessible, GtkAccessibleRole expected_role, GtkAccessibleRole actual_role);
    gboolean (*test_accessible_has_role)(GtkAccessible *accessible, GtkAccessibleRole role);
    void (*test_register_all_types)(void);
    const GType* (*test_list_all_types)(guint *n_types);
    void (*test_widget_wait_for_draw)(GtkWidget *widget);
    void (*test_init)(int *argcp, char ***argvp, ...);
    GtkTextBuffer* (*text_buffer_new)(GtkTextTagTable *table);
    int (*text_buffer_get_line_count)(GtkTextBuffer *buffer);
    int (*text_buffer_get_char_count)(GtkTextBuffer *buffer);
    GtkTextTagTable* (*text_buffer_get_tag_table)(GtkTextBuffer *buffer);
    void (*text_buffer_set_text)(GtkTextBuffer *buffer, const char *text, int len);
    void (*text_buffer_insert)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *text, int len);
    void (*text_buffer_insert_at_cursor)(GtkTextBuffer *buffer, const char *text, int len);
    gboolean (*text_buffer_insert_interactive)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *text, int len, gboolean default_editable);
    gboolean (*text_buffer_insert_interactive_at_cursor)(GtkTextBuffer *buffer, const char *text, int len, gboolean default_editable);
    void (*text_buffer_insert_range)(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);
    gboolean (*text_buffer_insert_range_interactive)(GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable);
    void (*text_buffer_insert_with_tags)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *text, int len, GtkTextTag *first_tag, ...);
    void (*text_buffer_insert_with_tags_by_name)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *text, int len, const char *first_tag_name, ...);
    void (*text_buffer_insert_markup)(GtkTextBuffer *buffer, GtkTextIter *iter, const char *markup, int len);
    void (*text_buffer_delete)(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
    gboolean (*text_buffer_delete_interactive)(GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable);
    gboolean (*text_buffer_backspace)(GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable);
    char* (*text_buffer_get_text)(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);
    char* (*text_buffer_get_slice)(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);
    void (*text_buffer_insert_paintable)(GtkTextBuffer *buffer, GtkTextIter *iter, GdkPaintable *paintable);
    void (*text_buffer_insert_child_anchor)(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);
    GtkTextChildAnchor* (*text_buffer_create_child_anchor)(GtkTextBuffer *buffer, GtkTextIter *iter);
    void (*text_buffer_add_mark)(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);
    GtkTextMark* (*text_buffer_create_mark)(GtkTextBuffer *buffer, const char *mark_name, const GtkTextIter *where, gboolean left_gravity);
    void (*text_buffer_move_mark)(GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);
    void (*text_buffer_delete_mark)(GtkTextBuffer *buffer, GtkTextMark *mark);
    GtkTextMark* (*text_buffer_get_mark)(GtkTextBuffer *buffer, const char *name);
    void (*text_buffer_move_mark_by_name)(GtkTextBuffer *buffer, const char *name, const GtkTextIter *where);
    void (*text_buffer_delete_mark_by_name)(GtkTextBuffer *buffer, const char *name);
    GtkTextMark* (*text_buffer_get_insert)(GtkTextBuffer *buffer);
    GtkTextMark* (*text_buffer_get_selection_bound)(GtkTextBuffer *buffer);
    void (*text_buffer_place_cursor)(GtkTextBuffer *buffer, const GtkTextIter *where);
    void (*text_buffer_select_range)(GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound);
    void (*text_buffer_apply_tag)(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);
    void (*text_buffer_remove_tag)(GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);
    void (*text_buffer_apply_tag_by_name)(GtkTextBuffer *buffer, const char *name, const GtkTextIter *start, const GtkTextIter *end);
    void (*text_buffer_remove_tag_by_name)(GtkTextBuffer *buffer, const char *name, const GtkTextIter *start, const GtkTextIter *end);
    void (*text_buffer_remove_all_tags)(GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end);
    GtkTextTag* (*text_buffer_create_tag)(GtkTextBuffer *buffer, const char *tag_name, const char *first_property_name, ...);
    gboolean (*text_buffer_get_iter_at_line_offset)(GtkTextBuffer *buffer, GtkTextIter *iter, int line_number, int char_offset);
    gboolean (*text_buffer_get_iter_at_line_index)(GtkTextBuffer *buffer, GtkTextIter *iter, int line_number, int byte_index);
    void (*text_buffer_get_iter_at_offset)(GtkTextBuffer *buffer, GtkTextIter *iter, int char_offset);
    gboolean (*text_buffer_get_iter_at_line)(GtkTextBuffer *buffer, GtkTextIter *iter, int line_number);
    void (*text_buffer_get_start_iter)(GtkTextBuffer *buffer, GtkTextIter *iter);
    void (*text_buffer_get_end_iter)(GtkTextBuffer *buffer, GtkTextIter *iter);
    void (*text_buffer_get_bounds)(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
    void (*text_buffer_get_iter_at_mark)(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark);
    void (*text_buffer_get_iter_at_child_anchor)(GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);
    gboolean (*text_buffer_get_modified)(GtkTextBuffer *buffer);
    void (*text_buffer_set_modified)(GtkTextBuffer *buffer, gboolean setting);
    gboolean (*text_buffer_get_has_selection)(GtkTextBuffer *buffer);
    void (*text_buffer_add_selection_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard);
    void (*text_buffer_remove_selection_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard);
    void (*text_buffer_cut_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard, gboolean default_editable);
    void (*text_buffer_copy_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard);
    void (*text_buffer_paste_clipboard)(GtkTextBuffer *buffer, GdkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable);
    gboolean (*text_buffer_get_selection_bounds)(GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
    gboolean (*text_buffer_delete_selection)(GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable);
    GdkContentProvider * (*text_buffer_get_selection_content)(GtkTextBuffer *buffer);
    gboolean (*text_buffer_get_can_undo)(GtkTextBuffer *buffer);
    gboolean (*text_buffer_get_can_redo)(GtkTextBuffer *buffer);
    gboolean (*text_buffer_get_enable_undo)(GtkTextBuffer *buffer);
    void (*text_buffer_set_enable_undo)(GtkTextBuffer *buffer, gboolean enable_undo);
    guint (*text_buffer_get_max_undo_levels)(GtkTextBuffer *buffer);
    void (*text_buffer_set_max_undo_levels)(GtkTextBuffer *buffer, guint max_undo_levels);
    void (*text_buffer_undo)(GtkTextBuffer *buffer);
    void (*text_buffer_redo)(GtkTextBuffer *buffer);
    void (*text_buffer_begin_irreversible_action)(GtkTextBuffer *buffer);
    void (*text_buffer_end_irreversible_action)(GtkTextBuffer *buffer);
    void (*text_buffer_begin_user_action)(GtkTextBuffer *buffer);
    void (*text_buffer_end_user_action)(GtkTextBuffer *buffer);
    GType (*text_buffer_get_type)(void);
    GtkTextChildAnchor* (*text_child_anchor_new)(void);
    GtkTextChildAnchor* (*text_child_anchor_new_with_replacement)(const char *character);
    GtkWidget** (*text_child_anchor_get_widgets)(GtkTextChildAnchor *anchor, guint *out_len);
    gboolean (*text_child_anchor_get_deleted)(GtkTextChildAnchor *anchor);
    GType (*text_child_anchor_get_type)(void);
    GtkWidget * (*text_new)(void);
    GtkWidget * (*text_new_with_buffer)(GtkEntryBuffer *buffer);
    GtkEntryBuffer* (*text_get_buffer)(GtkText *self);
    void (*text_set_buffer)(GtkText *self, GtkEntryBuffer *buffer);
    void (*text_set_visibility)(GtkText *self, gboolean visible);
    gboolean (*text_get_visibility)(GtkText *self);
    void (*text_set_invisible_char)(GtkText *self, gunichar ch);
    gunichar (*text_get_invisible_char)(GtkText *self);
    void (*text_unset_invisible_char)(GtkText *self);
    void (*text_set_overwrite_mode)(GtkText *self, gboolean overwrite);
    gboolean (*text_get_overwrite_mode)(GtkText *self);
    void (*text_set_max_length)(GtkText *self, int length);
    int (*text_get_max_length)(GtkText *self);
    guint16 (*text_get_text_length)(GtkText *self);
    void (*text_set_activates_default)(GtkText *self, gboolean activates);
    gboolean (*text_get_activates_default)(GtkText *self);
    const char * (*text_get_placeholder_text)(GtkText *self);
    void (*text_set_placeholder_text)(GtkText *self, const char *text);
    void (*text_set_input_purpose)(GtkText *self, GtkInputPurpose purpose);
    GtkInputPurpose (*text_get_input_purpose)(GtkText *self);
    void (*text_set_input_hints)(GtkText *self, GtkInputHints hints);
    GtkInputHints (*text_get_input_hints)(GtkText *self);
    void (*text_set_attributes)(GtkText *self, PangoAttrList *attrs);
    PangoAttrList * (*text_get_attributes)(GtkText *self);
    void (*text_set_tabs)(GtkText *self, PangoTabArray *tabs);
    PangoTabArray * (*text_get_tabs)(GtkText *self);
    gboolean (*text_grab_focus_without_selecting)(GtkText *self);
    void (*text_set_extra_menu)(GtkText *self, GMenuModel *model);
    GMenuModel * (*text_get_extra_menu)(GtkText *self);
    void (*text_set_enable_emoji_completion)(GtkText *self, gboolean enable_emoji_completion);
    gboolean (*text_get_enable_emoji_completion)(GtkText *self);
    void (*text_set_propagate_text_width)(GtkText *self, gboolean propagate_text_width);
    gboolean (*text_get_propagate_text_width)(GtkText *self);
    void (*text_set_truncate_multiline)(GtkText *self, gboolean truncate_multiline);
    gboolean (*text_get_truncate_multiline)(GtkText *self);
    void (*text_compute_cursor_extents)(GtkText *self, gsize position, graphene_rect_t *strong, graphene_rect_t *weak);
    GType (*text_get_type)(void);
    GtkTextIter* (*text_iter_copy)(const GtkTextIter *iter);
    void (*text_iter_free)(GtkTextIter *iter);
    void (*text_iter_assign)(GtkTextIter *iter, const GtkTextIter *other);
    GType (*text_iter_get_type)(void);
    int (*text_iter_get_offset)(const GtkTextIter *iter);
    int (*text_iter_get_line)(const GtkTextIter *iter);
    int (*text_iter_get_line_offset)(const GtkTextIter *iter);
    int (*text_iter_get_line_index)(const GtkTextIter *iter);
    int (*text_iter_get_visible_line_offset)(const GtkTextIter *iter);
    int (*text_iter_get_visible_line_index)(const GtkTextIter *iter);
    gunichar (*text_iter_get_char)(const GtkTextIter *iter);
    char* (*text_iter_get_slice)(const GtkTextIter *start, const GtkTextIter *end);
    char* (*text_iter_get_text)(const GtkTextIter *start, const GtkTextIter *end);
    char* (*text_iter_get_visible_slice)(const GtkTextIter *start, const GtkTextIter *end);
    char* (*text_iter_get_visible_text)(const GtkTextIter *start, const GtkTextIter *end);
    GdkPaintable* (*text_iter_get_paintable)(const GtkTextIter *iter);
    GSList* (*text_iter_get_marks)(const GtkTextIter *iter);
    GtkTextChildAnchor* (*text_iter_get_child_anchor)(const GtkTextIter *iter);
    GSList* (*text_iter_get_toggled_tags)(const GtkTextIter *iter, gboolean toggled_on);
    gboolean (*text_iter_starts_tag)(const GtkTextIter *iter, GtkTextTag *tag);
    gboolean (*text_iter_ends_tag)(const GtkTextIter *iter, GtkTextTag *tag);
    gboolean (*text_iter_toggles_tag)(const GtkTextIter *iter, GtkTextTag *tag);
    gboolean (*text_iter_has_tag)(const GtkTextIter *iter, GtkTextTag *tag);
    GSList* (*text_iter_get_tags)(const GtkTextIter *iter);
    gboolean (*text_iter_editable)(const GtkTextIter *iter, gboolean default_setting);
    gboolean (*text_iter_can_insert)(const GtkTextIter *iter, gboolean default_editability);
    gboolean (*text_iter_starts_word)(const GtkTextIter *iter);
    gboolean (*text_iter_ends_word)(const GtkTextIter *iter);
    gboolean (*text_iter_inside_word)(const GtkTextIter *iter);
    gboolean (*text_iter_starts_sentence)(const GtkTextIter *iter);
    gboolean (*text_iter_ends_sentence)(const GtkTextIter *iter);
    gboolean (*text_iter_inside_sentence)(const GtkTextIter *iter);
    gboolean (*text_iter_starts_line)(const GtkTextIter *iter);
    gboolean (*text_iter_ends_line)(const GtkTextIter *iter);
    gboolean (*text_iter_is_cursor_position)(const GtkTextIter *iter);
    int (*text_iter_get_chars_in_line)(const GtkTextIter *iter);
    int (*text_iter_get_bytes_in_line)(const GtkTextIter *iter);
    PangoLanguage* (*text_iter_get_language)(const GtkTextIter *iter);
    gboolean (*text_iter_is_end)(const GtkTextIter *iter);
    gboolean (*text_iter_is_start)(const GtkTextIter *iter);
    gboolean (*text_iter_forward_char)(GtkTextIter *iter);
    gboolean (*text_iter_backward_char)(GtkTextIter *iter);
    gboolean (*text_iter_forward_chars)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_chars)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_line)(GtkTextIter *iter);
    gboolean (*text_iter_backward_line)(GtkTextIter *iter);
    gboolean (*text_iter_forward_lines)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_lines)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_word_end)(GtkTextIter *iter);
    gboolean (*text_iter_backward_word_start)(GtkTextIter *iter);
    gboolean (*text_iter_forward_word_ends)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_word_starts)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_visible_line)(GtkTextIter *iter);
    gboolean (*text_iter_backward_visible_line)(GtkTextIter *iter);
    gboolean (*text_iter_forward_visible_lines)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_visible_lines)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_visible_word_end)(GtkTextIter *iter);
    gboolean (*text_iter_backward_visible_word_start)(GtkTextIter *iter);
    gboolean (*text_iter_forward_visible_word_ends)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_visible_word_starts)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_sentence_end)(GtkTextIter *iter);
    gboolean (*text_iter_backward_sentence_start)(GtkTextIter *iter);
    gboolean (*text_iter_forward_sentence_ends)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_sentence_starts)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_cursor_position)(GtkTextIter *iter);
    gboolean (*text_iter_backward_cursor_position)(GtkTextIter *iter);
    gboolean (*text_iter_forward_cursor_positions)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_cursor_positions)(GtkTextIter *iter, int count);
    gboolean (*text_iter_forward_visible_cursor_position)(GtkTextIter *iter);
    gboolean (*text_iter_backward_visible_cursor_position)(GtkTextIter *iter);
    gboolean (*text_iter_forward_visible_cursor_positions)(GtkTextIter *iter, int count);
    gboolean (*text_iter_backward_visible_cursor_positions)(GtkTextIter *iter, int count);
    void (*text_iter_set_offset)(GtkTextIter *iter, int char_offset);
    void (*text_iter_set_line)(GtkTextIter *iter, int line_number);
    void (*text_iter_set_line_offset)(GtkTextIter *iter, int char_on_line);
    void (*text_iter_set_line_index)(GtkTextIter *iter, int byte_on_line);
    void (*text_iter_forward_to_end)(GtkTextIter *iter);
    gboolean (*text_iter_forward_to_line_end)(GtkTextIter *iter);
    void (*text_iter_set_visible_line_offset)(GtkTextIter *iter, int char_on_line);
    void (*text_iter_set_visible_line_index)(GtkTextIter *iter, int byte_on_line);
    gboolean (*text_iter_forward_to_tag_toggle)(GtkTextIter *iter, GtkTextTag *tag);
    gboolean (*text_iter_backward_to_tag_toggle)(GtkTextIter *iter, GtkTextTag *tag);
    gboolean (*text_iter_forward_find_char)(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);
    gboolean (*text_iter_backward_find_char)(GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);
    gboolean (*text_iter_forward_search)(const GtkTextIter *iter, const char *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);
    gboolean (*text_iter_backward_search)(const GtkTextIter *iter, const char *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);
    gboolean (*text_iter_equal)(const GtkTextIter *lhs, const GtkTextIter *rhs);
    int (*text_iter_compare)(const GtkTextIter *lhs, const GtkTextIter *rhs);
    gboolean (*text_iter_in_range)(const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);
    void (*text_iter_order)(GtkTextIter *first, GtkTextIter *second);
    GtkTextBuffer* (*text_iter_get_buffer)(const GtkTextIter *iter);
    GtkTextMark* (*text_mark_new)(const char *name, gboolean left_gravity);
    void (*text_mark_set_visible)(GtkTextMark *mark, gboolean setting);
    gboolean (*text_mark_get_visible)(GtkTextMark *mark);
    const char * (*text_mark_get_name)(GtkTextMark *mark);
    gboolean (*text_mark_get_deleted)(GtkTextMark *mark);
    GtkTextBuffer* (*text_mark_get_buffer)(GtkTextMark *mark);
    gboolean (*text_mark_get_left_gravity)(GtkTextMark *mark);
    GType (*text_mark_get_type)(void);
    GtkTextTag* (*text_tag_new)(const char *name);
    int (*text_tag_get_priority)(GtkTextTag *tag);
    void (*text_tag_set_priority)(GtkTextTag *tag, int priority);
    void (*text_tag_changed)(GtkTextTag *tag, gboolean size_changed);
    GType (*text_tag_get_type)(void);
    GtkTextTagTable* (*text_tag_table_new)(void);
    gboolean (*text_tag_table_add)(GtkTextTagTable *table, GtkTextTag *tag);
    void (*text_tag_table_remove)(GtkTextTagTable *table, GtkTextTag *tag);
    GtkTextTag* (*text_tag_table_lookup)(GtkTextTagTable *table, const char *name);
    void (*text_tag_table_foreach)(GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data);
    int (*text_tag_table_get_size)(GtkTextTagTable *table);
    GType (*text_tag_table_get_type)(void);
    GtkWidget * (*text_view_new)(void);
    GtkWidget * (*text_view_new_with_buffer)(GtkTextBuffer *buffer);
    void (*text_view_set_buffer)(GtkTextView *text_view, GtkTextBuffer *buffer);
    GtkTextBuffer* (*text_view_get_buffer)(GtkTextView *text_view);
    gboolean (*text_view_scroll_to_iter)(GtkTextView *text_view, GtkTextIter *iter, double within_margin, gboolean use_align, double xalign, double yalign);
    void (*text_view_scroll_to_mark)(GtkTextView *text_view, GtkTextMark *mark, double within_margin, gboolean use_align, double xalign, double yalign);
    void (*text_view_scroll_mark_onscreen)(GtkTextView *text_view, GtkTextMark *mark);
    gboolean (*text_view_move_mark_onscreen)(GtkTextView *text_view, GtkTextMark *mark);
    gboolean (*text_view_place_cursor_onscreen)(GtkTextView *text_view);
    void (*text_view_get_visible_rect)(GtkTextView *text_view, GdkRectangle *visible_rect);
    void (*text_view_set_cursor_visible)(GtkTextView *text_view, gboolean setting);
    gboolean (*text_view_get_cursor_visible)(GtkTextView *text_view);
    void (*text_view_reset_cursor_blink)(GtkTextView *text_view);
    void (*text_view_get_cursor_locations)(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *strong, GdkRectangle *weak);
    void (*text_view_get_iter_location)(GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location);
    gboolean (*text_view_get_iter_at_location)(GtkTextView *text_view, GtkTextIter *iter, int x, int y);
    gboolean (*text_view_get_iter_at_position)(GtkTextView *text_view, GtkTextIter *iter, int *trailing, int x, int y);
    void (*text_view_get_line_yrange)(GtkTextView *text_view, const GtkTextIter *iter, int *y, int *height);
    void (*text_view_get_line_at_y)(GtkTextView *text_view, GtkTextIter *target_iter, int y, int *line_top);
    void (*text_view_buffer_to_window_coords)(GtkTextView *text_view, GtkTextWindowType win, int buffer_x, int buffer_y, int *window_x, int *window_y);
    void (*text_view_window_to_buffer_coords)(GtkTextView *text_view, GtkTextWindowType win, int window_x, int window_y, int *buffer_x, int *buffer_y);
    gboolean (*text_view_forward_display_line)(GtkTextView *text_view, GtkTextIter *iter);
    gboolean (*text_view_backward_display_line)(GtkTextView *text_view, GtkTextIter *iter);
    gboolean (*text_view_forward_display_line_end)(GtkTextView *text_view, GtkTextIter *iter);
    gboolean (*text_view_backward_display_line_start)(GtkTextView *text_view, GtkTextIter *iter);
    gboolean (*text_view_starts_display_line)(GtkTextView *text_view, const GtkTextIter *iter);
    gboolean (*text_view_move_visually)(GtkTextView *text_view, GtkTextIter *iter, int count);
    gboolean (*text_view_im_context_filter_keypress)(GtkTextView *text_view, GdkEvent *event);
    void (*text_view_reset_im_context)(GtkTextView *text_view);
    GtkWidget* (*text_view_get_gutter)(GtkTextView *text_view, GtkTextWindowType win);
    void (*text_view_set_gutter)(GtkTextView *text_view, GtkTextWindowType win, GtkWidget *widget);
    void (*text_view_add_child_at_anchor)(GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor);
    void (*text_view_add_overlay)(GtkTextView *text_view, GtkWidget *child, int xpos, int ypos);
    void (*text_view_move_overlay)(GtkTextView *text_view, GtkWidget *child, int xpos, int ypos);
    void (*text_view_remove)(GtkTextView *text_view, GtkWidget *child);
    void (*text_view_set_wrap_mode)(GtkTextView *text_view, GtkWrapMode wrap_mode);
    GtkWrapMode (*text_view_get_wrap_mode)(GtkTextView *text_view);
    void (*text_view_set_editable)(GtkTextView *text_view, gboolean setting);
    gboolean (*text_view_get_editable)(GtkTextView *text_view);
    void (*text_view_set_overwrite)(GtkTextView *text_view, gboolean overwrite);
    gboolean (*text_view_get_overwrite)(GtkTextView *text_view);
    void (*text_view_set_accepts_tab)(GtkTextView *text_view, gboolean accepts_tab);
    gboolean (*text_view_get_accepts_tab)(GtkTextView *text_view);
    void (*text_view_set_pixels_above_lines)(GtkTextView *text_view, int pixels_above_lines);
    int (*text_view_get_pixels_above_lines)(GtkTextView *text_view);
    void (*text_view_set_pixels_below_lines)(GtkTextView *text_view, int pixels_below_lines);
    int (*text_view_get_pixels_below_lines)(GtkTextView *text_view);
    void (*text_view_set_pixels_inside_wrap)(GtkTextView *text_view, int pixels_inside_wrap);
    int (*text_view_get_pixels_inside_wrap)(GtkTextView *text_view);
    void (*text_view_set_justification)(GtkTextView *text_view, GtkJustification justification);
    GtkJustification (*text_view_get_justification)(GtkTextView *text_view);
    void (*text_view_set_left_margin)(GtkTextView *text_view, int left_margin);
    int (*text_view_get_left_margin)(GtkTextView *text_view);
    void (*text_view_set_right_margin)(GtkTextView *text_view, int right_margin);
    int (*text_view_get_right_margin)(GtkTextView *text_view);
    void (*text_view_set_top_margin)(GtkTextView *text_view, int top_margin);
    int (*text_view_get_top_margin)(GtkTextView *text_view);
    void (*text_view_set_bottom_margin)(GtkTextView *text_view, int bottom_margin);
    int (*text_view_get_bottom_margin)(GtkTextView *text_view);
    void (*text_view_set_indent)(GtkTextView *text_view, int indent);
    int (*text_view_get_indent)(GtkTextView *text_view);
    void (*text_view_set_tabs)(GtkTextView *text_view, PangoTabArray *tabs);
    PangoTabArray* (*text_view_get_tabs)(GtkTextView *text_view);
    void (*text_view_set_input_purpose)(GtkTextView *text_view, GtkInputPurpose purpose);
    GtkInputPurpose (*text_view_get_input_purpose)(GtkTextView *text_view);
    void (*text_view_set_input_hints)(GtkTextView *text_view, GtkInputHints hints);
    GtkInputHints (*text_view_get_input_hints)(GtkTextView *text_view);
    void (*text_view_set_monospace)(GtkTextView *text_view, gboolean monospace);
    gboolean (*text_view_get_monospace)(GtkTextView *text_view);
    void (*text_view_set_extra_menu)(GtkTextView *text_view, GMenuModel *model);
    GMenuModel * (*text_view_get_extra_menu)(GtkTextView *text_view);
    PangoContext* (*text_view_get_rtl_context)(GtkTextView *text_view);
    PangoContext* (*text_view_get_ltr_context)(GtkTextView *text_view);
    GType (*text_view_get_type)(void);
    GtkWidget* (*toggle_button_new)(void);
    GtkWidget* (*toggle_button_new_with_label)(const char *label);
    GtkWidget* (*toggle_button_new_with_mnemonic)(const char *label);
    void (*toggle_button_set_active)(GtkToggleButton *toggle_button, gboolean is_active);
    gboolean (*toggle_button_get_active)(GtkToggleButton *toggle_button);
    void (*toggle_button_toggled)(GtkToggleButton *toggle_button);
    void (*toggle_button_set_group)(GtkToggleButton *toggle_button, GtkToggleButton *group);
    GType (*toggle_button_get_type)(void);
    void (*tooltip_set_markup)(GtkTooltip *tooltip, const char *markup);
    void (*tooltip_set_text)(GtkTooltip *tooltip, const char *text);
    void (*tooltip_set_icon)(GtkTooltip *tooltip, GdkPaintable *paintable);
    void (*tooltip_set_icon_from_icon_name)(GtkTooltip *tooltip, const char *icon_name);
    void (*tooltip_set_icon_from_gicon)(GtkTooltip *tooltip, GIcon *gicon);
    void (*tooltip_set_custom)(GtkTooltip *tooltip, GtkWidget *custom_widget);
    void (*tooltip_set_tip_area)(GtkTooltip *tooltip, const GdkRectangle *rect);
    GType (*tooltip_get_type)(void);
    GtkWidget * (*tree_expander_get_child)(GtkTreeExpander *self);
    void (*tree_expander_set_child)(GtkTreeExpander *self, GtkWidget *child);
    gpointer (*tree_expander_get_item)(GtkTreeExpander *self);
    GtkTreeListRow * (*tree_expander_get_list_row)(GtkTreeExpander *self);
    void (*tree_expander_set_list_row)(GtkTreeExpander *self, GtkTreeListRow *list_row);
    gboolean (*tree_expander_get_indent_for_depth)(GtkTreeExpander *self);
    void (*tree_expander_set_indent_for_depth)(GtkTreeExpander *self, gboolean indent_for_depth);
    gboolean (*tree_expander_get_indent_for_icon)(GtkTreeExpander *self);
    void (*tree_expander_set_indent_for_icon)(GtkTreeExpander *self, gboolean indent_for_icon);
    gboolean (*tree_expander_get_hide_expander)(GtkTreeExpander *self);
    void (*tree_expander_set_hide_expander)(GtkTreeExpander *self, gboolean hide_expander);
    GtkWidget * (*tree_expander_new)(void);
    GListModel * (*tree_list_model_get_model)(GtkTreeListModel *self);
    gboolean (*tree_list_model_get_passthrough)(GtkTreeListModel *self);
    void (*tree_list_model_set_autoexpand)(GtkTreeListModel *self, gboolean autoexpand);
    gboolean (*tree_list_model_get_autoexpand)(GtkTreeListModel *self);
    GtkTreeListRow * (*tree_list_model_get_child_row)(GtkTreeListModel *self, guint position);
    GtkTreeListRow * (*tree_list_model_get_row)(GtkTreeListModel *self, guint position);
    gpointer (*tree_list_row_get_item)(GtkTreeListRow *self);
    void (*tree_list_row_set_expanded)(GtkTreeListRow *self, gboolean expanded);
    gboolean (*tree_list_row_get_expanded)(GtkTreeListRow *self);
    gboolean (*tree_list_row_is_expandable)(GtkTreeListRow *self);
    guint (*tree_list_row_get_position)(GtkTreeListRow *self);
    guint (*tree_list_row_get_depth)(GtkTreeListRow *self);
    GListModel * (*tree_list_row_get_children)(GtkTreeListRow *self);
    GtkTreeListRow * (*tree_list_row_get_parent)(GtkTreeListRow *self);
    GtkTreeListRow * (*tree_list_row_get_child_row)(GtkTreeListRow *self, guint position);
    GtkTreeListModel * (*tree_list_model_new)(GListModel *root, gboolean passthrough, gboolean autoexpand, GtkTreeListModelCreateModelFunc create_func, gpointer user_data, GDestroyNotify user_destroy);
    GtkSorter * (*tree_list_row_sorter_get_sorter)(GtkTreeListRowSorter *self);
    void (*tree_list_row_sorter_set_sorter)(GtkTreeListRowSorter *self, GtkSorter *sorter);
    GtkTreeListRowSorter * (*tree_list_row_sorter_new)(GtkSorter *sorter);
    GType (*cell_renderer_state_get_type)(void);
    GType (*cell_renderer_mode_get_type)(void);
    GType (*cell_renderer_accel_mode_get_type)(void);
    GType (*dialog_flags_get_type)(void);
    GType (*response_type_get_type)(void);
    GType (*file_chooser_action_get_type)(void);
    GType (*file_chooser_error_get_type)(void);
    GType (*font_chooser_level_get_type)(void);
    GType (*icon_view_drop_position_get_type)(void);
    GType (*buttons_type_get_type)(void);
    GType (*style_context_print_flags_get_type)(void);
    GType (*tree_model_flags_get_type)(void);
    GType (*tree_view_drop_position_get_type)(void);
    GType (*tree_view_column_sizing_get_type)(void);
    GType (*license_get_type)(void);
    GType (*accessible_platform_state_get_type)(void);
    GType (*accessible_text_granularity_get_type)(void);
    GType (*accessible_text_content_change_get_type)(void);
    GType (*application_inhibit_flags_get_type)(void);
    GType (*builder_error_get_type)(void);
    GType (*builder_closure_flags_get_type)(void);
    GType (*debug_flags_get_type)(void);
    GType (*dialog_error_get_type)(void);
    GType (*editable_properties_get_type)(void);
    GType (*entry_icon_position_get_type)(void);
    GType (*align_get_type)(void);
    GType (*arrow_type_get_type)(void);
    GType (*baseline_position_get_type)(void);
    GType (*content_fit_get_type)(void);
    GType (*delete_type_get_type)(void);
    GType (*direction_type_get_type)(void);
    GType (*icon_size_get_type)(void);
    GType (*sensitivity_type_get_type)(void);
    GType (*text_direction_get_type)(void);
    GType (*justification_get_type)(void);
    GType (*list_tab_behavior_get_type)(void);
    GType (*list_scroll_flags_get_type)(void);
    GType (*message_type_get_type)(void);
    GType (*movement_step_get_type)(void);
    GType (*natural_wrap_mode_get_type)(void);
    GType (*scroll_step_get_type)(void);
    GType (*orientation_get_type)(void);
    GType (*overflow_get_type)(void);
    GType (*pack_type_get_type)(void);
    GType (*position_type_get_type)(void);
    GType (*scroll_type_get_type)(void);
    GType (*selection_mode_get_type)(void);
    GType (*wrap_mode_get_type)(void);
    GType (*sort_type_get_type)(void);
    GType (*print_pages_get_type)(void);
    GType (*page_set_get_type)(void);
    GType (*number_up_layout_get_type)(void);
    GType (*ordering_get_type)(void);
    GType (*page_orientation_get_type)(void);
    GType (*print_quality_get_type)(void);
    GType (*print_duplex_get_type)(void);
    GType (*unit_get_type)(void);
    GType (*tree_view_grid_lines_get_type)(void);
    GType (*size_group_mode_get_type)(void);
    GType (*size_request_mode_get_type)(void);
    GType (*scrollable_policy_get_type)(void);
    GType (*state_flags_get_type)(void);
    GType (*border_style_get_type)(void);
    GType (*level_bar_mode_get_type)(void);
    GType (*input_purpose_get_type)(void);
    GType (*input_hints_get_type)(void);
    GType (*propagation_phase_get_type)(void);
    GType (*propagation_limit_get_type)(void);
    GType (*event_sequence_state_get_type)(void);
    GType (*pan_direction_get_type)(void);
    GType (*shortcut_scope_get_type)(void);
    GType (*pick_flags_get_type)(void);
    GType (*constraint_relation_get_type)(void);
    GType (*constraint_strength_get_type)(void);
    GType (*constraint_attribute_get_type)(void);
    GType (*constraint_vfl_parser_error_get_type)(void);
    GType (*system_setting_get_type)(void);
    GType (*symbolic_color_get_type)(void);
    GType (*accessible_role_get_type)(void);
    GType (*accessible_state_get_type)(void);
    GType (*accessible_property_get_type)(void);
    GType (*accessible_relation_get_type)(void);
    GType (*accessible_tristate_get_type)(void);
    GType (*accessible_invalid_state_get_type)(void);
    GType (*accessible_autocomplete_get_type)(void);
    GType (*accessible_sort_get_type)(void);
    GType (*accessible_announcement_priority_get_type)(void);
    GType (*popover_menu_flags_get_type)(void);
    GType (*event_controller_scroll_flags_get_type)(void);
    GType (*filter_match_get_type)(void);
    GType (*filter_change_get_type)(void);
    GType (*font_level_get_type)(void);
    GType (*graphics_offload_enabled_get_type)(void);
    GType (*icon_lookup_flags_get_type)(void);
    GType (*icon_theme_error_get_type)(void);
    GType (*image_type_get_type)(void);
    GType (*inscription_overflow_get_type)(void);
    GType (*notebook_tab_get_type)(void);
    GType (*pad_action_type_get_type)(void);
    GType (*recent_manager_error_get_type)(void);
    GType (*revealer_transition_type_get_type)(void);
    GType (*corner_type_get_type)(void);
    GType (*policy_type_get_type)(void);
    GType (*shortcut_action_flags_get_type)(void);
    GType (*shortcut_type_get_type)(void);
    GType (*sorter_order_get_type)(void);
    GType (*sorter_change_get_type)(void);
    GType (*spin_button_update_policy_get_type)(void);
    GType (*spin_type_get_type)(void);
    GType (*stack_transition_type_get_type)(void);
    GType (*string_filter_match_mode_get_type)(void);
    GType (*collation_get_type)(void);
    GType (*text_search_flags_get_type)(void);
    GType (*text_window_type_get_type)(void);
    GType (*text_view_layer_get_type)(void);
    GType (*text_extend_selection_get_type)(void);
    GType (*print_status_get_type)(void);
    GType (*print_operation_result_get_type)(void);
    GType (*print_operation_action_get_type)(void);
    GType (*print_error_get_type)(void);
    GType (*assistant_page_type_get_type)(void);
    const char * (*uri_launcher_get_uri)(GtkUriLauncher *self);
    void (*uri_launcher_set_uri)(GtkUriLauncher *self, const char *uri);
    void (*uri_launcher_launch)(GtkUriLauncher *self, GtkWindow *parent, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*uri_launcher_launch_finish)(GtkUriLauncher *self, GAsyncResult *result, GError **error);
    GtkUriLauncher * (*uri_launcher_new)(const char *uri);
    guint (*get_minor_version)(void);
    guint (*get_micro_version)(void);
    guint (*get_binary_age)(void);
    guint (*get_interface_age)(void);
    const char * (*check_version)(guint required_major, guint required_minor, guint required_micro);
    guint (*get_major_version)(void);
    GtkWidget * (*video_new_for_media_stream)(GtkMediaStream *stream);
    GtkWidget * (*video_new_for_file)(GFile *file);
    GtkWidget * (*video_new_for_filename)(const char *filename);
    GtkWidget * (*video_new_for_resource)(const char *resource_path);
    GtkMediaStream* (*video_get_media_stream)(GtkVideo *self);
    void (*video_set_media_stream)(GtkVideo *self, GtkMediaStream *stream);
    GFile * (*video_get_file)(GtkVideo *self);
    void (*video_set_file)(GtkVideo *self, GFile *file);
    void (*video_set_filename)(GtkVideo *self, const char *filename);
    void (*video_set_resource)(GtkVideo *self, const char *resource_path);
    gboolean (*video_get_autoplay)(GtkVideo *self);
    void (*video_set_autoplay)(GtkVideo *self, gboolean autoplay);
    gboolean (*video_get_loop)(GtkVideo *self);
    void (*video_set_loop)(GtkVideo *self, gboolean loop);
    GtkGraphicsOffloadEnabled (*video_get_graphics_offload)(GtkVideo *self);
    void (*video_set_graphics_offload)(GtkVideo *self, GtkGraphicsOffloadEnabled enabled);
    GtkWidget * (*video_new)(void);
    GtkWidget* (*viewport_new)(GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);
    gboolean (*viewport_get_scroll_to_focus)(GtkViewport *viewport);
    void (*viewport_set_scroll_to_focus)(GtkViewport *viewport, gboolean scroll_to_focus);
    void (*viewport_set_child)(GtkViewport *viewport, GtkWidget *child);
    GtkWidget * (*viewport_get_child)(GtkViewport *viewport);
    void (*viewport_scroll_to)(GtkViewport *viewport, GtkWidget *descendant, GtkScrollInfo *scroll);
    GType (*viewport_get_type)(void);
    void (*widget_unparent)(GtkWidget *widget);
    void (*widget_show)(GtkWidget *widget);
    void (*widget_hide)(GtkWidget *widget);
    void (*widget_map)(GtkWidget *widget);
    void (*widget_unmap)(GtkWidget *widget);
    void (*widget_realize)(GtkWidget *widget);
    void (*widget_unrealize)(GtkWidget *widget);
    void (*widget_queue_draw)(GtkWidget *widget);
    void (*widget_queue_resize)(GtkWidget *widget);
    void (*widget_queue_allocate)(GtkWidget *widget);
    GdkFrameClock* (*widget_get_frame_clock)(GtkWidget *widget);
    void (*widget_size_allocate)(GtkWidget *widget, const GtkAllocation *allocation, int baseline);
    void (*widget_allocate)(GtkWidget *widget, int width, int height, int baseline, GskTransform *transform);
    GtkSizeRequestMode (*widget_get_request_mode)(GtkWidget *widget);
    void (*widget_measure)(GtkWidget *widget, GtkOrientation orientation, int for_size, int *minimum, int *natural, int *minimum_baseline, int *natural_baseline);
    void (*widget_get_preferred_size)(GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size);
    void (*widget_set_layout_manager)(GtkWidget *widget, GtkLayoutManager *layout_manager);
    GtkLayoutManager * (*widget_get_layout_manager)(GtkWidget *widget);
    void (*widget_class_set_layout_manager_type)(GtkWidgetClass *widget_class, GType type);
    GType (*widget_class_get_layout_manager_type)(GtkWidgetClass *widget_class);
    void (*widget_class_add_binding)(GtkWidgetClass *widget_class, guint keyval, GdkModifierType mods, GtkShortcutFunc callback, const char *format_string, ...);
    void (*widget_class_add_binding_signal)(GtkWidgetClass *widget_class, guint keyval, GdkModifierType mods, const char *signal, const char *format_string, ...);
    void (*widget_class_add_binding_action)(GtkWidgetClass *widget_class, guint keyval, GdkModifierType mods, const char *action_name, const char *format_string, ...);
    void (*widget_class_add_shortcut)(GtkWidgetClass *widget_class, GtkShortcut *shortcut);
    void (*widget_class_set_activate_signal)(GtkWidgetClass *widget_class, guint signal_id);
    void (*widget_class_set_activate_signal_from_name)(GtkWidgetClass *widget_class, const char *signal_name);
    guint (*widget_class_get_activate_signal)(GtkWidgetClass *widget_class);
    gboolean (*widget_mnemonic_activate)(GtkWidget *widget, gboolean group_cycling);
    gboolean (*widget_activate)(GtkWidget *widget);
    void (*widget_set_can_focus)(GtkWidget *widget, gboolean can_focus);
    gboolean (*widget_get_can_focus)(GtkWidget *widget);
    void (*widget_set_focusable)(GtkWidget *widget, gboolean focusable);
    gboolean (*widget_get_focusable)(GtkWidget *widget);
    gboolean (*widget_has_focus)(GtkWidget *widget);
    gboolean (*widget_is_focus)(GtkWidget *widget);
    gboolean (*widget_has_visible_focus)(GtkWidget *widget);
    gboolean (*widget_grab_focus)(GtkWidget *widget);
    void (*widget_set_focus_on_click)(GtkWidget *widget, gboolean focus_on_click);
    gboolean (*widget_get_focus_on_click)(GtkWidget *widget);
    void (*widget_set_can_target)(GtkWidget *widget, gboolean can_target);
    gboolean (*widget_get_can_target)(GtkWidget *widget);
    gboolean (*widget_has_default)(GtkWidget *widget);
    void (*widget_set_receives_default)(GtkWidget *widget, gboolean receives_default);
    gboolean (*widget_get_receives_default)(GtkWidget *widget);
    void (*widget_set_name)(GtkWidget *widget, const char *name);
    const char * (*widget_get_name)(GtkWidget *widget);
    void (*widget_set_state_flags)(GtkWidget *widget, GtkStateFlags flags, gboolean clear);
    void (*widget_unset_state_flags)(GtkWidget *widget, GtkStateFlags flags);
    GtkStateFlags (*widget_get_state_flags)(GtkWidget *widget);
    void (*widget_set_sensitive)(GtkWidget *widget, gboolean sensitive);
    gboolean (*widget_get_sensitive)(GtkWidget *widget);
    gboolean (*widget_is_sensitive)(GtkWidget *widget);
    void (*widget_set_visible)(GtkWidget *widget, gboolean visible);
    gboolean (*widget_get_visible)(GtkWidget *widget);
    gboolean (*widget_is_visible)(GtkWidget *widget);
    gboolean (*widget_is_drawable)(GtkWidget *widget);
    gboolean (*widget_get_realized)(GtkWidget *widget);
    gboolean (*widget_get_mapped)(GtkWidget *widget);
    void (*widget_set_parent)(GtkWidget *widget, GtkWidget *parent);
    GtkWidget * (*widget_get_parent)(GtkWidget *widget);
    GtkRoot * (*widget_get_root)(GtkWidget *widget);
    GtkNative * (*widget_get_native)(GtkWidget *widget);
    void (*widget_set_child_visible)(GtkWidget *widget, gboolean child_visible);
    gboolean (*widget_get_child_visible)(GtkWidget *widget);
    int (*widget_get_allocated_width)(GtkWidget *widget);
    int (*widget_get_allocated_height)(GtkWidget *widget);
    int (*widget_get_allocated_baseline)(GtkWidget *widget);
    void (*widget_get_allocation)(GtkWidget *widget, GtkAllocation *allocation);
    gboolean (*widget_compute_transform)(GtkWidget *widget, GtkWidget *target, graphene_matrix_t *out_transform);
    gboolean (*widget_compute_bounds)(GtkWidget *widget, GtkWidget *target, graphene_rect_t *out_bounds);
    gboolean (*widget_compute_point)(GtkWidget *widget, GtkWidget *target, const graphene_point_t *point, graphene_point_t *out_point);
    int (*widget_get_width)(GtkWidget *widget);
    int (*widget_get_height)(GtkWidget *widget);
    int (*widget_get_baseline)(GtkWidget *widget);
    int (*widget_get_size)(GtkWidget *widget, GtkOrientation orientation);
    gboolean (*widget_child_focus)(GtkWidget *widget, GtkDirectionType direction);
    gboolean (*widget_keynav_failed)(GtkWidget *widget, GtkDirectionType direction);
    void (*widget_error_bell)(GtkWidget *widget);
    void (*widget_set_size_request)(GtkWidget *widget, int width, int height);
    void (*widget_get_size_request)(GtkWidget *widget, int *width, int *height);
    void (*widget_set_opacity)(GtkWidget *widget, double opacity);
    double (*widget_get_opacity)(GtkWidget *widget);
    void (*widget_set_overflow)(GtkWidget *widget, GtkOverflow overflow);
    GtkOverflow (*widget_get_overflow)(GtkWidget *widget);
    GtkWidget* (*widget_get_ancestor)(GtkWidget *widget, GType widget_type);
    int (*widget_get_scale_factor)(GtkWidget *widget);
    GdkDisplay * (*widget_get_display)(GtkWidget *widget);
    GtkSettings* (*widget_get_settings)(GtkWidget *widget);
    GdkClipboard* (*widget_get_clipboard)(GtkWidget *widget);
    GdkClipboard* (*widget_get_primary_clipboard)(GtkWidget *widget);
    gboolean (*widget_get_hexpand)(GtkWidget *widget);
    void (*widget_set_hexpand)(GtkWidget *widget, gboolean expand);
    gboolean (*widget_get_hexpand_set)(GtkWidget *widget);
    void (*widget_set_hexpand_set)(GtkWidget *widget, gboolean set);
    gboolean (*widget_get_vexpand)(GtkWidget *widget);
    void (*widget_set_vexpand)(GtkWidget *widget, gboolean expand);
    gboolean (*widget_get_vexpand_set)(GtkWidget *widget);
    void (*widget_set_vexpand_set)(GtkWidget *widget, gboolean set);
    gboolean (*widget_compute_expand)(GtkWidget *widget, GtkOrientation orientation);
    GtkAlign (*widget_get_halign)(GtkWidget *widget);
    void (*widget_set_halign)(GtkWidget *widget, GtkAlign align);
    GtkAlign (*widget_get_valign)(GtkWidget *widget);
    void (*widget_set_valign)(GtkWidget *widget, GtkAlign align);
    int (*widget_get_margin_start)(GtkWidget *widget);
    void (*widget_set_margin_start)(GtkWidget *widget, int margin);
    int (*widget_get_margin_end)(GtkWidget *widget);
    void (*widget_set_margin_end)(GtkWidget *widget, int margin);
    int (*widget_get_margin_top)(GtkWidget *widget);
    void (*widget_set_margin_top)(GtkWidget *widget, int margin);
    int (*widget_get_margin_bottom)(GtkWidget *widget);
    void (*widget_set_margin_bottom)(GtkWidget *widget, int margin);
    gboolean (*widget_is_ancestor)(GtkWidget *widget, GtkWidget *ancestor);
    gboolean (*widget_translate_coordinates)(GtkWidget *src_widget, GtkWidget *dest_widget, double src_x, double src_y, double *dest_x, double *dest_y);
    gboolean (*widget_contains)(GtkWidget *widget, double x, double y);
    GtkWidget * (*widget_pick)(GtkWidget *widget, double x, double y, GtkPickFlags flags);
    void (*widget_add_controller)(GtkWidget *widget, GtkEventController *controller);
    void (*widget_remove_controller)(GtkWidget *widget, GtkEventController *controller);
    PangoContext* (*widget_create_pango_context)(GtkWidget *widget);
    PangoContext* (*widget_get_pango_context)(GtkWidget *widget);
    void (*widget_set_font_options)(GtkWidget *widget, const cairo_font_options_t *options);
    const cairo_font_options_t* (*widget_get_font_options)(GtkWidget *widget);
    PangoLayout* (*widget_create_pango_layout)(GtkWidget *widget, const char *text);
    void (*widget_set_direction)(GtkWidget *widget, GtkTextDirection dir);
    GtkTextDirection (*widget_get_direction)(GtkWidget *widget);
    void (*widget_set_default_direction)(GtkTextDirection dir);
    GtkTextDirection (*widget_get_default_direction)(void);
    void (*widget_set_cursor)(GtkWidget *widget, GdkCursor *cursor);
    void (*widget_set_cursor_from_name)(GtkWidget *widget, const char *name);
    GdkCursor * (*widget_get_cursor)(GtkWidget *widget);
    GList* (*widget_list_mnemonic_labels)(GtkWidget *widget);
    void (*widget_add_mnemonic_label)(GtkWidget *widget, GtkWidget *label);
    void (*widget_remove_mnemonic_label)(GtkWidget *widget, GtkWidget *label);
    void (*widget_trigger_tooltip_query)(GtkWidget *widget);
    void (*widget_set_tooltip_text)(GtkWidget *widget, const char *text);
    const char * (*widget_get_tooltip_text)(GtkWidget *widget);
    void (*widget_set_tooltip_markup)(GtkWidget *widget, const char *markup);
    const char * (*widget_get_tooltip_markup)(GtkWidget *widget);
    void (*widget_set_has_tooltip)(GtkWidget *widget, gboolean has_tooltip);
    gboolean (*widget_get_has_tooltip)(GtkWidget *widget);
    GType (*requisition_get_type)(void);
    GtkRequisition* (*requisition_new)(void);
    GtkRequisition* (*requisition_copy)(const GtkRequisition *requisition);
    void (*requisition_free)(GtkRequisition *requisition);
    gboolean (*widget_in_destruction)(GtkWidget *widget);
    GtkStyleContext * (*widget_get_style_context)(GtkWidget *widget);
    void (*widget_class_set_css_name)(GtkWidgetClass *widget_class, const char *name);
    const char * (*widget_class_get_css_name)(GtkWidgetClass *widget_class);
    guint (*widget_add_tick_callback)(GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify);
    void (*widget_remove_tick_callback)(GtkWidget *widget, guint id);
    void (*widget_init_template)(GtkWidget *widget);
    GObject* (*widget_get_template_child)(GtkWidget *widget, GType widget_type, const char *name);
    void (*widget_dispose_template)(GtkWidget *widget, GType widget_type);
    void (*widget_class_set_template)(GtkWidgetClass *widget_class, GBytes *template_bytes);
    void (*widget_class_set_template_from_resource)(GtkWidgetClass *widget_class, const char *resource_name);
    void (*widget_class_bind_template_callback_full)(GtkWidgetClass *widget_class, const char *callback_name, GCallback callback_symbol);
    void (*widget_class_set_template_scope)(GtkWidgetClass *widget_class, GtkBuilderScope *scope);
    void (*widget_class_bind_template_child_full)(GtkWidgetClass *widget_class, const char *name, gboolean internal_child, gssize struct_offset);
    void (*widget_insert_action_group)(GtkWidget *widget, const char *name, GActionGroup *group);
    gboolean (*widget_activate_action)(GtkWidget *widget, const char *name, const char *format_string, ...);
    gboolean (*widget_activate_action_variant)(GtkWidget *widget, const char *name, GVariant *args);
    void (*widget_activate_default)(GtkWidget *widget);
    void (*widget_set_font_map)(GtkWidget *widget, PangoFontMap *font_map);
    PangoFontMap * (*widget_get_font_map)(GtkWidget *widget);
    GtkWidget * (*widget_get_first_child)(GtkWidget *widget);
    GtkWidget * (*widget_get_last_child)(GtkWidget *widget);
    GtkWidget * (*widget_get_next_sibling)(GtkWidget *widget);
    GtkWidget * (*widget_get_prev_sibling)(GtkWidget *widget);
    GListModel * (*widget_observe_children)(GtkWidget *widget);
    GListModel * (*widget_observe_controllers)(GtkWidget *widget);
    void (*widget_insert_after)(GtkWidget *widget, GtkWidget *parent, GtkWidget *previous_sibling);
    void (*widget_insert_before)(GtkWidget *widget, GtkWidget *parent, GtkWidget *next_sibling);
    void (*widget_set_focus_child)(GtkWidget *widget, GtkWidget *child);
    GtkWidget * (*widget_get_focus_child)(GtkWidget *widget);
    void (*widget_snapshot_child)(GtkWidget *widget, GtkWidget *child, GtkSnapshot *snapshot);
    gboolean (*widget_should_layout)(GtkWidget *widget);
    const char * (*widget_get_css_name)(GtkWidget *sel);
    void (*widget_add_css_class)(GtkWidget *widget, const char *css_class);
    void (*widget_remove_css_class)(GtkWidget *widget, const char *css_class);
    gboolean (*widget_has_css_class)(GtkWidget *widget, const char *css_class);
    char ** (*widget_get_css_classes)(GtkWidget *widget);
    void (*widget_set_css_classes)(GtkWidget *widget, const char **classes);
    void (*widget_get_color)(GtkWidget *widget, GdkRGBA *color);
    void (*widget_class_install_action)(GtkWidgetClass *widget_class, const char *action_name, const char *parameter_type, GtkWidgetActionActivateFunc activate);
    void (*widget_class_install_property_action)(GtkWidgetClass *widget_class, const char *action_name, const char *property_name);
    gboolean (*widget_class_query_action)(GtkWidgetClass *widget_class, guint index_, GType *owner, const char **action_name, const GVariantType **parameter_type, const char **property_name);
    void (*widget_action_set_enabled)(GtkWidget *widget, const char *action_name, gboolean enabled);
    void (*widget_class_set_accessible_role)(GtkWidgetClass *widget_class, GtkAccessibleRole accessible_role);
    GtkAccessibleRole (*widget_class_get_accessible_role)(GtkWidgetClass *widget_class);
    GType (*widget_get_type)(void);
    GtkWidget * (*widget_paintable_get_widget)(GtkWidgetPaintable *self);
    void (*widget_paintable_set_widget)(GtkWidgetPaintable *self, GtkWidget *widget);
    GdkPaintable * (*widget_paintable_new)(GtkWidget *widget);
    GtkPackType (*window_controls_get_side)(GtkWindowControls *self);
    void (*window_controls_set_side)(GtkWindowControls *self, GtkPackType side);
    const char * (*window_controls_get_decoration_layout)(GtkWindowControls *self);
    void (*window_controls_set_decoration_layout)(GtkWindowControls *self, const char *layout);
    gboolean (*window_controls_get_empty)(GtkWindowControls *self);
    GtkWidget * (*window_controls_new)(GtkPackType side);
    GtkWindowGroup * (*window_group_new)(void);
    void (*window_group_add_window)(GtkWindowGroup *window_group, GtkWindow *window);
    void (*window_group_remove_window)(GtkWindowGroup *window_group, GtkWindow *window);
    GList * (*window_group_list_windows)(GtkWindowGroup *window_group);
    GType (*window_group_get_type)(void);
    GtkWidget* (*window_new)(void);
    void (*window_set_title)(GtkWindow *window, const char *title);
    const char * (*window_get_title)(GtkWindow *window);
    void (*window_set_startup_id)(GtkWindow *window, const char *startup_id);
    void (*window_set_focus)(GtkWindow *window, GtkWidget *focus);
    GtkWidget* (*window_get_focus)(GtkWindow *window);
    void (*window_set_default_widget)(GtkWindow *window, GtkWidget *default_widget);
    GtkWidget* (*window_get_default_widget)(GtkWindow *window);
    void (*window_set_transient_for)(GtkWindow *window, GtkWindow *parent);
    GtkWindow* (*window_get_transient_for)(GtkWindow *window);
    void (*window_set_destroy_with_parent)(GtkWindow *window, gboolean setting);
    gboolean (*window_get_destroy_with_parent)(GtkWindow *window);
    void (*window_set_hide_on_close)(GtkWindow *window, gboolean setting);
    gboolean (*window_get_hide_on_close)(GtkWindow *window);
    void (*window_set_mnemonics_visible)(GtkWindow *window, gboolean setting);
    gboolean (*window_get_mnemonics_visible)(GtkWindow *window);
    void (*window_set_focus_visible)(GtkWindow *window, gboolean setting);
    gboolean (*window_get_focus_visible)(GtkWindow *window);
    void (*window_set_resizable)(GtkWindow *window, gboolean resizable);
    gboolean (*window_get_resizable)(GtkWindow *window);
    void (*window_set_display)(GtkWindow *window, GdkDisplay *display);
    gboolean (*window_is_active)(GtkWindow *window);
    void (*window_set_decorated)(GtkWindow *window, gboolean setting);
    gboolean (*window_get_decorated)(GtkWindow *window);
    void (*window_set_deletable)(GtkWindow *window, gboolean setting);
    gboolean (*window_get_deletable)(GtkWindow *window);
    void (*window_set_icon_name)(GtkWindow *window, const char *name);
    const char * (*window_get_icon_name)(GtkWindow *window);
    void (*window_set_default_icon_name)(const char *name);
    const char * (*window_get_default_icon_name)(void);
    void (*window_set_auto_startup_notification)(gboolean setting);
    void (*window_set_modal)(GtkWindow *window, gboolean modal);
    gboolean (*window_get_modal)(GtkWindow *window);
    GListModel* (*window_get_toplevels)(void);
    GList* (*window_list_toplevels)(void);
    void (*window_present)(GtkWindow *window);
    void (*window_present_with_time)(GtkWindow *window, guint32 timestamp);
    void (*window_minimize)(GtkWindow *window);
    void (*window_unminimize)(GtkWindow *window);
    void (*window_maximize)(GtkWindow *window);
    void (*window_unmaximize)(GtkWindow *window);
    void (*window_fullscreen)(GtkWindow *window);
    void (*window_unfullscreen)(GtkWindow *window);
    void (*window_fullscreen_on_monitor)(GtkWindow *window, GdkMonitor *monitor);
    void (*window_close)(GtkWindow *window);
    void (*window_set_default_size)(GtkWindow *window, int width, int height);
    void (*window_get_default_size)(GtkWindow *window, int *width, int *height);
    GtkWindowGroup* (*window_get_group)(GtkWindow *window);
    gboolean (*window_has_group)(GtkWindow *window);
    GtkApplication* (*window_get_application)(GtkWindow *window);
    void (*window_set_application)(GtkWindow *window, GtkApplication *application);
    void (*window_set_child)(GtkWindow *window, GtkWidget *child);
    GtkWidget* (*window_get_child)(GtkWindow *window);
    void (*window_set_titlebar)(GtkWindow *window, GtkWidget *titlebar);
    GtkWidget* (*window_get_titlebar)(GtkWindow *window);
    gboolean (*window_is_maximized)(GtkWindow *window);
    gboolean (*window_is_fullscreen)(GtkWindow *window);
    gboolean (*window_is_suspended)(GtkWindow *window);
    void (*window_destroy)(GtkWindow *window);
    void (*window_set_interactive_debugging)(gboolean enable);
    void (*window_set_handle_menubar_accel)(GtkWindow *window, gboolean handle_menubar_accel);
    gboolean (*window_get_handle_menubar_accel)(GtkWindow *window);
    GType (*window_get_type)(void);
    GtkWidget * (*window_handle_get_child)(GtkWindowHandle *self);
    void (*window_handle_set_child)(GtkWindowHandle *self, GtkWidget *child);
    GtkWidget * (*window_handle_new)(void);
};

struct gdk_syms {
    // STORE_LIB_IF_NEEDED
    // SYMS_gdk_HERE
    GType (*broadway_cursor_get_type)(void);
    void (*broadway_display_show_keyboard)(GdkBroadwayDisplay *display);
    void (*broadway_display_hide_keyboard)(GdkBroadwayDisplay *display);
    int (*broadway_display_get_surface_scale)(GdkDisplay *display);
    void (*broadway_display_set_surface_scale)(GdkDisplay *display, int scale);
    GType (*broadway_display_get_type)(void);
    GType (*broadway_monitor_get_type)(void);
    GType (*broadway_surface_get_type)(void);
    GdkPixbuf* (*pixbuf_get_from_texture)(GdkTexture *texture);
    GdkPixbuf* (*pixbuf_get_from_surface)(cairo_surface_t *surface, int src_x, int src_y, int width, int height);
    GdkDisplay * (*app_launch_context_get_display)(GdkAppLaunchContext *context);
    void (*app_launch_context_set_desktop)(GdkAppLaunchContext *context, int desktop);
    void (*app_launch_context_set_timestamp)(GdkAppLaunchContext *context, guint32 timestamp);
    void (*app_launch_context_set_icon)(GdkAppLaunchContext *context, GIcon *icon);
    void (*app_launch_context_set_icon_name)(GdkAppLaunchContext *context, const char *icon_name);
    GType (*app_launch_context_get_type)(void);
    cairo_t * (*cairo_context_cairo_create)(GdkCairoContext *self);
    GType (*cairo_context_get_type)(void);
    void (*cairo_set_source_pixbuf)(cairo_t *cr, const GdkPixbuf *pixbuf, double pixbuf_x, double pixbuf_y);
    void (*cairo_rectangle)(cairo_t *cr, const GdkRectangle *rectangle);
    void (*cairo_region)(cairo_t *cr, const cairo_region_t *region);
    cairo_region_t * (*cairo_region_create_from_surface)(cairo_surface_t *surface);
    void (*cairo_draw_from_gl)(cairo_t *cr, GdkSurface *surface, int source, int source_type, int buffer_scale, int x, int y, int width, int height);
    void (*cairo_set_source_rgba)(cairo_t *cr, const GdkRGBA *rgba);
    GdkDisplay * (*clipboard_get_display)(GdkClipboard *clipboard);
    GdkContentFormats * (*clipboard_get_formats)(GdkClipboard *clipboard);
    gboolean (*clipboard_is_local)(GdkClipboard *clipboard);
    GdkContentProvider * (*clipboard_get_content)(GdkClipboard *clipboard);
    void (*clipboard_store_async)(GdkClipboard *clipboard, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*clipboard_store_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
    void (*clipboard_read_async)(GdkClipboard *clipboard, const char **mime_types, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GInputStream * (*clipboard_read_finish)(GdkClipboard *clipboard, GAsyncResult *result, const char **out_mime_type, GError **error);
    void (*clipboard_read_value_async)(GdkClipboard *clipboard, GType type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    const GValue * (*clipboard_read_value_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
    void (*clipboard_read_texture_async)(GdkClipboard *clipboard, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GdkTexture * (*clipboard_read_texture_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
    void (*clipboard_read_text_async)(GdkClipboard *clipboard, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    char * (*clipboard_read_text_finish)(GdkClipboard *clipboard, GAsyncResult *result, GError **error);
    gboolean (*clipboard_set_content)(GdkClipboard *clipboard, GdkContentProvider *provider);
    void (*clipboard_set)(GdkClipboard *clipboard, GType type, ...);
    void (*clipboard_set_valist)(GdkClipboard *clipboard, GType type, va_list args);
    void (*clipboard_set_value)(GdkClipboard *clipboard, const GValue *value);
    void (*clipboard_set_text)(GdkClipboard *clipboard, const char *text);
    void (*clipboard_set_texture)(GdkClipboard *clipboard, GdkTexture *texture);
    GType (*clipboard_get_type)(void);
    const char * (*content_deserializer_get_mime_type)(GdkContentDeserializer *deserializer);
    GType (*content_deserializer_get_gtype)(GdkContentDeserializer *deserializer);
    GValue * (*content_deserializer_get_value)(GdkContentDeserializer *deserializer);
    GInputStream * (*content_deserializer_get_input_stream)(GdkContentDeserializer *deserializer);
    int (*content_deserializer_get_priority)(GdkContentDeserializer *deserializer);
    GCancellable * (*content_deserializer_get_cancellable)(GdkContentDeserializer *deserializer);
    gpointer (*content_deserializer_get_user_data)(GdkContentDeserializer *deserializer);
    void (*content_deserializer_set_task_data)(GdkContentDeserializer *deserializer, gpointer data, GDestroyNotify notify);
    gpointer (*content_deserializer_get_task_data)(GdkContentDeserializer *deserializer);
    void (*content_deserializer_return_success)(GdkContentDeserializer *deserializer);
    void (*content_deserializer_return_error)(GdkContentDeserializer *deserializer, GError *error);
    GdkContentFormats * (*content_formats_union_deserialize_gtypes)(GdkContentFormats *formats);
    GdkContentFormats * (*content_formats_union_deserialize_mime_types)(GdkContentFormats *formats);
    void (*content_register_deserializer)(const char *mime_type, GType type, GdkContentDeserializeFunc deserialize, gpointer data, GDestroyNotify notify);
    void (*content_deserialize_async)(GInputStream *stream, const char *mime_type, GType type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*content_deserialize_finish)(GAsyncResult *result, GValue *value, GError **error);
    GType (*content_deserializer_get_type)(void);
    GType (*content_formats_get_type)(void);
    GdkContentFormats * (*content_formats_new)(const char **mime_types, guint n_mime_types);
    GdkContentFormats * (*content_formats_new_for_gtype)(GType type);
    GdkContentFormats * (*content_formats_parse)(const char *string);
    GdkContentFormats * (*content_formats_ref)(GdkContentFormats *formats);
    void (*content_formats_unref)(GdkContentFormats *formats);
    void (*content_formats_print)(GdkContentFormats *formats, GString *string);
    char * (*content_formats_to_string)(GdkContentFormats *formats);
    const GType * (*content_formats_get_gtypes)(const GdkContentFormats *formats, gsize *n_gtypes);
    const char * const * (*content_formats_get_mime_types)(const GdkContentFormats *formats, gsize *n_mime_types);
    GdkContentFormats * (*content_formats_union)(GdkContentFormats *first, const GdkContentFormats *second);
    gboolean (*content_formats_match)(const GdkContentFormats *first, const GdkContentFormats *second);
    GType (*content_formats_match_gtype)(const GdkContentFormats *first, const GdkContentFormats *second);
    const char * (*content_formats_match_mime_type)(const GdkContentFormats *first, const GdkContentFormats *second);
    gboolean (*content_formats_contain_gtype)(const GdkContentFormats *formats, GType type);
    gboolean (*content_formats_contain_mime_type)(const GdkContentFormats *formats, const char *mime_type);
    GType (*content_formats_builder_get_type)(void);
    GdkContentFormatsBuilder* (*content_formats_builder_new)(void);
    GdkContentFormatsBuilder* (*content_formats_builder_ref)(GdkContentFormatsBuilder *builder);
    void (*content_formats_builder_unref)(GdkContentFormatsBuilder *builder);
    GdkContentFormats * (*content_formats_builder_free_to_formats)(GdkContentFormatsBuilder *builder);
    GdkContentFormats * (*content_formats_builder_to_formats)(GdkContentFormatsBuilder *builder);
    void (*content_formats_builder_add_formats)(GdkContentFormatsBuilder *builder, const GdkContentFormats *formats);
    void (*content_formats_builder_add_mime_type)(GdkContentFormatsBuilder *builder, const char *mime_type);
    void (*content_formats_builder_add_gtype)(GdkContentFormatsBuilder *builder, GType type);
    GSList * (*file_list_get_files)(GdkFileList *file_list);
    GdkFileList * (*file_list_new_from_list)(GSList *files);
    GdkFileList * (*file_list_new_from_array)(GFile **files, gsize n_files);
    const char * (*intern_mime_type)(const char *string);
    GdkContentFormats * (*content_provider_ref_formats)(GdkContentProvider *provider);
    GdkContentFormats * (*content_provider_ref_storable_formats)(GdkContentProvider *provider);
    void (*content_provider_content_changed)(GdkContentProvider *provider);
    void (*content_provider_write_mime_type_async)(GdkContentProvider *provider, const char *mime_type, GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*content_provider_write_mime_type_finish)(GdkContentProvider *provider, GAsyncResult *result, GError **error);
    gboolean (*content_provider_get_value)(GdkContentProvider *provider, GValue *value, GError **error);
    GType (*content_provider_get_type)(void);
    GdkContentProvider * (*content_provider_new_typed)(GType type, ...);
    GdkContentProvider * (*content_provider_new_union)(GdkContentProvider **providers, gsize n_providers);
    GdkContentProvider * (*content_provider_new_for_bytes)(const char *mime_type, GBytes *bytes);
    GdkContentProvider * (*content_provider_new_for_value)(const GValue *value);
    const char * (*content_serializer_get_mime_type)(GdkContentSerializer *serializer);
    GType (*content_serializer_get_gtype)(GdkContentSerializer *serializer);
    const GValue * (*content_serializer_get_value)(GdkContentSerializer *serializer);
    GOutputStream * (*content_serializer_get_output_stream)(GdkContentSerializer *serializer);
    int (*content_serializer_get_priority)(GdkContentSerializer *serializer);
    GCancellable * (*content_serializer_get_cancellable)(GdkContentSerializer *serializer);
    gpointer (*content_serializer_get_user_data)(GdkContentSerializer *serializer);
    void (*content_serializer_set_task_data)(GdkContentSerializer *serializer, gpointer data, GDestroyNotify notify);
    gpointer (*content_serializer_get_task_data)(GdkContentSerializer *serializer);
    void (*content_serializer_return_success)(GdkContentSerializer *serializer);
    void (*content_serializer_return_error)(GdkContentSerializer *serializer, GError *error);
    GdkContentFormats * (*content_formats_union_serialize_gtypes)(GdkContentFormats *formats);
    GdkContentFormats * (*content_formats_union_serialize_mime_types)(GdkContentFormats *formats);
    void (*content_register_serializer)(GType type, const char *mime_type, GdkContentSerializeFunc serialize, gpointer data, GDestroyNotify notify);
    void (*content_serialize_async)(GOutputStream *stream, const char *mime_type, const GValue *value, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    gboolean (*content_serialize_finish)(GAsyncResult *result, GError **error);
    GType (*content_serializer_get_type)(void);
    GdkCursor* (*cursor_new_from_texture)(GdkTexture *texture, int hotspot_x, int hotspot_y, GdkCursor *fallback);
    GdkCursor* (*cursor_new_from_name)(const char *name, GdkCursor *fallback);
    GdkCursor * (*cursor_get_fallback)(GdkCursor *cursor);
    const char* (*cursor_get_name)(GdkCursor *cursor);
    GdkTexture* (*cursor_get_texture)(GdkCursor *cursor);
    int (*cursor_get_hotspot_x)(GdkCursor *cursor);
    int (*cursor_get_hotspot_y)(GdkCursor *cursor);
    GType (*cursor_get_type)(void);
    const char * (*device_get_name)(GdkDevice *device);
    const char * (*device_get_vendor_id)(GdkDevice *device);
    const char * (*device_get_product_id)(GdkDevice *device);
    GdkDisplay * (*device_get_display)(GdkDevice *device);
    GdkSeat * (*device_get_seat)(GdkDevice *device);
    GdkDeviceTool * (*device_get_device_tool)(GdkDevice *device);
    GdkInputSource (*device_get_source)(GdkDevice *device);
    gboolean (*device_get_has_cursor)(GdkDevice *device);
    guint (*device_get_num_touches)(GdkDevice *device);
    GdkModifierType (*device_get_modifier_state)(GdkDevice *device);
    PangoDirection (*device_get_direction)(GdkDevice *device);
    gboolean (*device_has_bidi_layouts)(GdkDevice *device);
    gboolean (*device_get_caps_lock_state)(GdkDevice *device);
    gboolean (*device_get_num_lock_state)(GdkDevice *device);
    gboolean (*device_get_scroll_lock_state)(GdkDevice *device);
    GdkSurface * (*device_get_surface_at_position)(GdkDevice *device, double *win_x, double *win_y);
    guint32 (*device_get_timestamp)(GdkDevice *device);
    GType (*device_get_type)(void);
    int (*device_pad_get_n_groups)(GdkDevicePad *pad);
    int (*device_pad_get_group_n_modes)(GdkDevicePad *pad, int group_idx);
    int (*device_pad_get_n_features)(GdkDevicePad *pad, GdkDevicePadFeature feature);
    int (*device_pad_get_feature_group)(GdkDevicePad *pad, GdkDevicePadFeature feature, int feature_idx);
    GType (*device_pad_get_type)(void);
    guint64 (*device_tool_get_serial)(GdkDeviceTool *tool);
    guint64 (*device_tool_get_hardware_id)(GdkDeviceTool *tool);
    GdkDeviceToolType (*device_tool_get_tool_type)(GdkDeviceTool *tool);
    GdkAxisFlags (*device_tool_get_axes)(GdkDeviceTool *tool);
    GType (*device_tool_get_type)(void);
    GdkDisplay* (*display_open)(const char *display_name);
    const char * (*display_get_name)(GdkDisplay *display);
    gboolean (*display_device_is_grabbed)(GdkDisplay *display, GdkDevice *device);
    void (*display_beep)(GdkDisplay *display);
    void (*display_sync)(GdkDisplay *display);
    void (*display_flush)(GdkDisplay *display);
    void (*display_close)(GdkDisplay *display);
    gboolean (*display_is_closed)(GdkDisplay *display);
    gboolean (*display_is_composited)(GdkDisplay *display);
    gboolean (*display_is_rgba)(GdkDisplay *display);
    gboolean (*display_supports_shadow_width)(GdkDisplay *display);
    gboolean (*display_supports_input_shapes)(GdkDisplay *display);
    gboolean (*display_prepare_gl)(GdkDisplay *self, GError **error);
    GdkGLContext* (*display_create_gl_context)(GdkDisplay *self, GError **error);
    GdkDisplay* (*display_get_default)(void);
    GdkClipboard * (*display_get_clipboard)(GdkDisplay *display);
    GdkClipboard * (*display_get_primary_clipboard)(GdkDisplay *display);
    void (*display_notify_startup_complete)(GdkDisplay *display, const char *startup_id);
    const char * (*display_get_startup_notification_id)(GdkDisplay *display);
    GdkAppLaunchContext* (*display_get_app_launch_context)(GdkDisplay *display);
    GdkSeat * (*display_get_default_seat)(GdkDisplay *display);
    GList * (*display_list_seats)(GdkDisplay *display);
    GListModel * (*display_get_monitors)(GdkDisplay *sel);
    GdkMonitor * (*display_get_monitor_at_surface)(GdkDisplay *display, GdkSurface *surface);
    void (*display_put_event)(GdkDisplay *display, GdkEvent *event);
    gboolean (*display_map_keyval)(GdkDisplay *display, guint keyval, GdkKeymapKey **keys, int *n_keys);
    gboolean (*display_map_keycode)(GdkDisplay *display, guint keycode, GdkKeymapKey **keys, guint **keyvals, int *n_entries);
    gboolean (*display_translate_key)(GdkDisplay *display, guint keycode, GdkModifierType state, int group, guint *keyval, int *effective_group, int *level, GdkModifierType *consumed);
    gboolean (*display_get_setting)(GdkDisplay *display, const char *name, GValue *value);
    GdkDmabufFormats * (*display_get_dmabuf_formats)(GdkDisplay *display);
    GType (*display_get_type)(void);
    GdkDisplayManager* (*display_manager_get)(void);
    GdkDisplay * (*display_manager_get_default_display)(GdkDisplayManager *manager);
    void (*display_manager_set_default_display)(GdkDisplayManager *manager, GdkDisplay *display);
    GSList * (*display_manager_list_displays)(GdkDisplayManager *manager);
    GdkDisplay * (*display_manager_open_display)(GdkDisplayManager *manager, const char *name);
    void (*set_allowed_backends)(const char *backends);
    GType (*display_manager_get_type)(void);
    GdkDmabufFormats * (*dmabuf_formats_ref)(GdkDmabufFormats *formats);
    void (*dmabuf_formats_unref)(GdkDmabufFormats *formats);
    gsize (*dmabuf_formats_get_n_formats)(GdkDmabufFormats *format);
    void (*dmabuf_formats_get_format)(GdkDmabufFormats *formats, gsize idx, guint32 *fourcc, guint64 *modifier);
    gboolean (*dmabuf_formats_contains)(GdkDmabufFormats *formats, guint32 fourcc, guint64 modifie);
    gboolean (*dmabuf_formats_equal)(const GdkDmabufFormats *formats1, const GdkDmabufFormats *formats2);
    GType (*dmabuf_formats_get_type)(void);
    GdkDisplay * (*dmabuf_texture_builder_get_display)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_display)(GdkDmabufTextureBuilder *self, GdkDisplay *display);
    unsigned int (*dmabuf_texture_builder_get_width)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_width)(GdkDmabufTextureBuilder *self, unsigned int width);
    unsigned int (*dmabuf_texture_builder_get_height)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_height)(GdkDmabufTextureBuilder *self, unsigned int height);
    guint32 (*dmabuf_texture_builder_get_fourcc)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_fourcc)(GdkDmabufTextureBuilder *self, guint32 fourcc);
    guint64 (*dmabuf_texture_builder_get_modifier)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_modifier)(GdkDmabufTextureBuilder *self, guint64 modifier);
    gboolean (*dmabuf_texture_builder_get_premultiplied)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_premultiplied)(GdkDmabufTextureBuilder *self, gboolean premultiplied);
    unsigned int (*dmabuf_texture_builder_get_n_planes)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_n_planes)(GdkDmabufTextureBuilder *self, unsigned int n_planes);
    int (*dmabuf_texture_builder_get_fd)(GdkDmabufTextureBuilder *self, unsigned int plan);
    void (*dmabuf_texture_builder_set_fd)(GdkDmabufTextureBuilder *self, unsigned int plane, int fd);
    unsigned int (*dmabuf_texture_builder_get_stride)(GdkDmabufTextureBuilder *self, unsigned int plan);
    void (*dmabuf_texture_builder_set_stride)(GdkDmabufTextureBuilder *self, unsigned int plane, unsigned int stride);
    unsigned int (*dmabuf_texture_builder_get_offset)(GdkDmabufTextureBuilder *self, unsigned int plan);
    void (*dmabuf_texture_builder_set_offset)(GdkDmabufTextureBuilder *self, unsigned int plane, unsigned int offset);
    GdkTexture * (*dmabuf_texture_builder_get_update_texture)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_update_texture)(GdkDmabufTextureBuilder *self, GdkTexture *texture);
    cairo_region_t * (*dmabuf_texture_builder_get_update_region)(GdkDmabufTextureBuilder *sel);
    void (*dmabuf_texture_builder_set_update_region)(GdkDmabufTextureBuilder *self, cairo_region_t *region);
    GdkTexture * (*dmabuf_texture_builder_build)(GdkDmabufTextureBuilder *self, GDestroyNotify destroy, gpointer data, GError **error);
    GdkDmabufTextureBuilder* (*dmabuf_texture_builder_new)(void);
    GQuark (*dmabuf_error_quark)(void);
    GType (*dmabuf_texture_get_type)(void);
    GdkDisplay * (*drag_get_display)(GdkDrag *drag);
    GdkDevice * (*drag_get_device)(GdkDrag *drag);
    GdkContentFormats* (*drag_get_formats)(GdkDrag *drag);
    GdkDragAction (*drag_get_actions)(GdkDrag *drag);
    GdkDragAction (*drag_get_selected_action)(GdkDrag *drag);
    gboolean (*drag_action_is_unique)(GdkDragAction action);
    GdkDrag * (*drag_begin)(GdkSurface *surface, GdkDevice *device, GdkContentProvider *content, GdkDragAction actions, double dx, double dy);
    void (*drag_drop_done)(GdkDrag *drag, gboolean success);
    GdkSurface* (*drag_get_drag_surface)(GdkDrag *drag);
    void (*drag_set_hotspot)(GdkDrag *drag, int hot_x, int hot_y);
    GdkContentProvider * (*drag_get_content)(GdkDrag *drag);
    GdkSurface * (*drag_get_surface)(GdkDrag *drag);
    GType (*drag_get_type)(void);
    void (*drag_surface_size_set_size)(GdkDragSurfaceSize *size, int width, int height);
    GType (*drag_surface_size_get_type)(void);
    GdkDisplay * (*draw_context_get_display)(GdkDrawContext *context);
    GdkSurface * (*draw_context_get_surface)(GdkDrawContext *context);
    void (*draw_context_begin_frame)(GdkDrawContext *context, const cairo_region_t *region);
    void (*draw_context_end_frame)(GdkDrawContext *context);
    gboolean (*draw_context_is_in_frame)(GdkDrawContext *context);
    const cairo_region_t * (*draw_context_get_frame_region)(GdkDrawContext *context);
    GType (*draw_context_get_type)(void);
    GdkDisplay * (*drop_get_display)(GdkDrop *self);
    GdkDevice * (*drop_get_device)(GdkDrop *self);
    GdkSurface * (*drop_get_surface)(GdkDrop *self);
    GdkContentFormats * (*drop_get_formats)(GdkDrop *self);
    GdkDragAction (*drop_get_actions)(GdkDrop *self);
    GdkDrag * (*drop_get_drag)(GdkDrop *self);
    void (*drop_status)(GdkDrop *self, GdkDragAction actions, GdkDragAction preferred);
    void (*drop_finish)(GdkDrop *self, GdkDragAction action);
    void (*drop_read_async)(GdkDrop *self, const char **mime_types, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    GInputStream * (*drop_read_finish)(GdkDrop *self, GAsyncResult *result, const char **out_mime_type, GError **error);
    void (*drop_read_value_async)(GdkDrop *self, GType type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
    const GValue * (*drop_read_value_finish)(GdkDrop *self, GAsyncResult *result, GError **error);
    GType (*drop_get_type)(void);
    GType (*device_pad_feature_get_type)(void);
    GType (*device_tool_type_get_type)(void);
    GType (*drag_cancel_reason_get_type)(void);
    GType (*gl_api_get_type)(void);
    GType (*gravity_get_type)(void);
    GType (*modifier_type_get_type)(void);
    GType (*dmabuf_error_get_type)(void);
    GType (*gl_error_get_type)(void);
    GType (*vulkan_error_get_type)(void);
    GType (*axis_use_get_type)(void);
    GType (*axis_flags_get_type)(void);
    GType (*drag_action_get_type)(void);
    GType (*memory_format_get_type)(void);
    GType (*event_type_get_type)(void);
    GType (*touchpad_gesture_phase_get_type)(void);
    GType (*scroll_direction_get_type)(void);
    GType (*scroll_unit_get_type)(void);
    GType (*notify_type_get_type)(void);
    GType (*crossing_mode_get_type)(void);
    GType (*key_match_get_type)(void);
    GType (*frame_clock_phase_get_type)(void);
    GType (*subpixel_layout_get_type)(void);
    GType (*paintable_flags_get_type)(void);
    GType (*anchor_hints_get_type)(void);
    GType (*seat_capabilities_get_type)(void);
    GType (*texture_error_get_type)(void);
    GType (*surface_edge_get_type)(void);
    GType (*fullscreen_mode_get_type)(void);
    GType (*toplevel_state_get_type)(void);
    GType (*titlebar_gesture_get_type)(void);
    GType (*input_source_get_type)(void);
    GType (*event_sequence_get_type)(void);
    GdkEvent * (*event_ref)(GdkEvent *event);
    void (*event_unref)(GdkEvent *event);
    GdkEventType (*event_get_event_type)(GdkEvent *event);
    GdkSurface * (*event_get_surface)(GdkEvent *event);
    GdkSeat * (*event_get_seat)(GdkEvent *event);
    GdkDevice * (*event_get_device)(GdkEvent *event);
    GdkDeviceTool * (*event_get_device_tool)(GdkEvent *event);
    guint32 (*event_get_time)(GdkEvent *event);
    GdkDisplay * (*event_get_display)(GdkEvent *event);
    GdkEventSequence * (*event_get_event_sequence)(GdkEvent *event);
    GdkModifierType (*event_get_modifier_state)(GdkEvent *event);
    gboolean (*event_get_position)(GdkEvent *event, double *x, double *y);
    gboolean (*event_get_axes)(GdkEvent *event, double **axes, guint *n_axes);
    gboolean (*event_get_axis)(GdkEvent *event, GdkAxisUse axis_use, double *value);
    GdkTimeCoord * (*event_get_history)(GdkEvent *event, guint *out_n_coords);
    gboolean (*event_get_pointer_emulated)(GdkEvent *event);
    GType (*button_event_get_type)(void);
    guint (*button_event_get_button)(GdkEvent *event);
    GType (*scroll_event_get_type)(void);
    GdkScrollDirection (*scroll_event_get_direction)(GdkEvent *event);
    void (*scroll_event_get_deltas)(GdkEvent *event, double *delta_x, double *delta_y);
    GdkScrollUnit (*scroll_event_get_unit)(GdkEvent *event);
    gboolean (*scroll_event_is_stop)(GdkEvent *event);
    GType (*key_event_get_type)(void);
    guint (*key_event_get_keyval)(GdkEvent *event);
    guint (*key_event_get_keycode)(GdkEvent *event);
    GdkModifierType (*key_event_get_consumed_modifiers)(GdkEvent *event);
    guint (*key_event_get_layout)(GdkEvent *event);
    guint (*key_event_get_level)(GdkEvent *event);
    gboolean (*key_event_is_modifier)(GdkEvent *event);
    GType (*focus_event_get_type)(void);
    gboolean (*focus_event_get_in)(GdkEvent *event);
    GType (*touch_event_get_type)(void);
    gboolean (*touch_event_get_emulating_pointer)(GdkEvent *event);
    GType (*crossing_event_get_type)(void);
    GdkCrossingMode (*crossing_event_get_mode)(GdkEvent *event);
    GdkNotifyType (*crossing_event_get_detail)(GdkEvent *event);
    gboolean (*crossing_event_get_focus)(GdkEvent *event);
    GType (*touchpad_event_get_type)(void);
    GdkTouchpadGesturePhase (*touchpad_event_get_gesture_phase)(GdkEvent *event);
    guint (*touchpad_event_get_n_fingers)(GdkEvent *event);
    void (*touchpad_event_get_deltas)(GdkEvent *event, double *dx, double *dy);
    double (*touchpad_event_get_pinch_angle_delta)(GdkEvent *event);
    double (*touchpad_event_get_pinch_scale)(GdkEvent *event);
    GType (*pad_event_get_type)(void);
    guint (*pad_event_get_button)(GdkEvent *event);
    void (*pad_event_get_axis_value)(GdkEvent *event, guint *index, double *value);
    void (*pad_event_get_group_mode)(GdkEvent *event, guint *group, guint *mode);
    GType (*dnd_event_get_type)(void);
    GdkDrop * (*dnd_event_get_drop)(GdkEvent *event);
    GType (*grab_broken_event_get_type)(void);
    GdkSurface * (*grab_broken_event_get_grab_surface)(GdkEvent *event);
    gboolean (*grab_broken_event_get_implicit)(GdkEvent *event);
    GType (*motion_event_get_type)(void);
    GType (*delete_event_get_type)(void);
    GType (*proximity_event_get_type)(void);
    gboolean (*event_triggers_context_menu)(GdkEvent *event);
    gboolean (*events_get_distance)(GdkEvent *event1, GdkEvent *event2, double *distance);
    gboolean (*events_get_angle)(GdkEvent *event1, GdkEvent *event2, double *angle);
    gboolean (*events_get_center)(GdkEvent *event1, GdkEvent *event2, double *x, double *y);
    GdkKeyMatch (*key_event_matches)(GdkEvent *event, guint keyval, GdkModifierType modifiers);
    gboolean (*key_event_get_match)(GdkEvent *event, guint *keyval, GdkModifierType *modifiers);
    GType (*event_get_type)(void);
    gint64 (*frame_clock_get_frame_time)(GdkFrameClock *frame_clock);
    void (*frame_clock_request_phase)(GdkFrameClock *frame_clock, GdkFrameClockPhase phase);
    void (*frame_clock_begin_updating)(GdkFrameClock *frame_clock);
    void (*frame_clock_end_updating)(GdkFrameClock *frame_clock);
    gint64 (*frame_clock_get_frame_counter)(GdkFrameClock *frame_clock);
    gint64 (*frame_clock_get_history_start)(GdkFrameClock *frame_clock);
    GdkFrameTimings* (*frame_clock_get_timings)(GdkFrameClock *frame_clock, gint64 frame_counter);
    GdkFrameTimings* (*frame_clock_get_current_timings)(GdkFrameClock *frame_clock);
    void (*frame_clock_get_refresh_info)(GdkFrameClock *frame_clock, gint64 base_time, gint64 *refresh_interval_return, gint64 *presentation_time_return);
    double (*frame_clock_get_fps)(GdkFrameClock *frame_clock);
    GType (*frame_clock_get_type)(void);
    GdkFrameTimings* (*frame_timings_ref)(GdkFrameTimings *timings);
    void (*frame_timings_unref)(GdkFrameTimings *timings);
    gint64 (*frame_timings_get_frame_counter)(GdkFrameTimings *timings);
    gboolean (*frame_timings_get_complete)(GdkFrameTimings *timings);
    gint64 (*frame_timings_get_frame_time)(GdkFrameTimings *timings);
    gint64 (*frame_timings_get_presentation_time)(GdkFrameTimings *timings);
    gint64 (*frame_timings_get_refresh_interval)(GdkFrameTimings *timings);
    gint64 (*frame_timings_get_predicted_presentation_time)(GdkFrameTimings *timings);
    GType (*frame_timings_get_type)(void);
    GType (*gl_context_get_type)(void);
    GdkDisplay * (*gl_context_get_display)(GdkGLContext *context);
    GdkSurface * (*gl_context_get_surface)(GdkGLContext *context);
    GdkGLContext * (*gl_context_get_shared_context)(GdkGLContext *context);
    void (*gl_context_get_version)(GdkGLContext *context, int *major, int *minor);
    gboolean (*gl_context_is_legacy)(GdkGLContext *context);
    gboolean (*gl_context_is_shared)(GdkGLContext *self, GdkGLContext *other);
    void (*gl_context_set_required_version)(GdkGLContext *context, int major, int minor);
    void (*gl_context_get_required_version)(GdkGLContext *context, int *major, int *minor);
    void (*gl_context_set_debug_enabled)(GdkGLContext *context, gboolean enabled);
    gboolean (*gl_context_get_debug_enabled)(GdkGLContext *context);
    void (*gl_context_set_forward_compatible)(GdkGLContext *context, gboolean compatible);
    gboolean (*gl_context_get_forward_compatible)(GdkGLContext *context);
    void (*gl_context_set_allowed_apis)(GdkGLContext *self, GdkGLAPI apis);
    GdkGLAPI (*gl_context_get_allowed_apis)(GdkGLContext *self);
    GdkGLAPI (*gl_context_get_api)(GdkGLContext *self);
    void (*gl_context_set_use_es)(GdkGLContext *context, int use_es);
    gboolean (*gl_context_get_use_es)(GdkGLContext *context);
    gboolean (*gl_context_realize)(GdkGLContext *context, GError **error);
    void (*gl_context_make_current)(GdkGLContext *context);
    GdkGLContext * (*gl_context_get_current)(void);
    void (*gl_context_clear_current)(void);
    GQuark (*gl_error_quark)(void);
    GdkGLContext * (*gl_texture_builder_get_context)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_context)(GdkGLTextureBuilder *self, GdkGLContext *context);
    guint (*gl_texture_builder_get_id)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_id)(GdkGLTextureBuilder *self, guint id);
    int (*gl_texture_builder_get_width)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_width)(GdkGLTextureBuilder *self, int width);
    int (*gl_texture_builder_get_height)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_height)(GdkGLTextureBuilder *self, int height);
    GdkMemoryFormat (*gl_texture_builder_get_format)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_format)(GdkGLTextureBuilder *self, GdkMemoryFormat format);
    gboolean (*gl_texture_builder_get_has_mipmap)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_has_mipmap)(GdkGLTextureBuilder *self, gboolean has_mipmap);
    gpointer (*gl_texture_builder_get_sync)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_sync)(GdkGLTextureBuilder *self, gpointer sync);
    GdkTexture * (*gl_texture_builder_get_update_texture)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_update_texture)(GdkGLTextureBuilder *self, GdkTexture *texture);
    cairo_region_t * (*gl_texture_builder_get_update_region)(GdkGLTextureBuilder *sel);
    void (*gl_texture_builder_set_update_region)(GdkGLTextureBuilder *self, cairo_region_t *region);
    GdkTexture * (*gl_texture_builder_build)(GdkGLTextureBuilder *self, GDestroyNotify destroy, gpointer data);
    GdkGLTextureBuilder * (*gl_texture_builder_new)(void);
    GdkTexture * (*gl_texture_new)(GdkGLContext *context, guint id, int width, int height, GDestroyNotify destroy, gpointer data);
    void (*gl_texture_release)(GdkGLTexture *self);
    GType (*gl_texture_get_type)(void);
    guint (*keyval_from_name)(const char *keyval_name);
    void (*keyval_convert_case)(guint symbol, guint *lower, guint *upper);
    guint (*keyval_to_upper)(guint keyval);
    guint (*keyval_to_lower)(guint keyval);
    gboolean (*keyval_is_upper)(guint keyval);
    gboolean (*keyval_is_lower)(guint keyval);
    guint32 (*keyval_to_unicode)(guint keyval);
    guint (*unicode_to_keyval)(guint32 wc);
    const char* (*keyval_name)(guint keyval);
    GdkTexture * (*memory_texture_new)(int width, int height, GdkMemoryFormat format, GBytes *bytes, gsize stride);
    GdkDisplay * (*monitor_get_display)(GdkMonitor *monitor);
    void (*monitor_get_geometry)(GdkMonitor *monitor, GdkRectangle *geometry);
    int (*monitor_get_width_mm)(GdkMonitor *monitor);
    int (*monitor_get_height_mm)(GdkMonitor *monitor);
    const char * (*monitor_get_manufacturer)(GdkMonitor *monitor);
    const char * (*monitor_get_model)(GdkMonitor *monitor);
    const char * (*monitor_get_connector)(GdkMonitor *monitor);
    int (*monitor_get_scale_factor)(GdkMonitor *monitor);
    double (*monitor_get_scale)(GdkMonitor *monitor);
    int (*monitor_get_refresh_rate)(GdkMonitor *monitor);
    GdkSubpixelLayout (*monitor_get_subpixel_layout)(GdkMonitor *monitor);
    gboolean (*monitor_is_valid)(GdkMonitor *monitor);
    const char * (*monitor_get_description)(GdkMonitor *monitor);
    GType (*monitor_get_type)(void);
    GdkPaintable * (*paintable_get_current_image)(GdkPaintable *paintable);
    GdkPaintableFlags (*paintable_get_flags)(GdkPaintable *paintable);
    int (*paintable_get_intrinsic_width)(GdkPaintable *paintable);
    int (*paintable_get_intrinsic_height)(GdkPaintable *paintable);
    double (*paintable_get_intrinsic_aspect_ratio)(GdkPaintable *paintable);
    void (*paintable_compute_concrete_size)(GdkPaintable *paintable, double specified_width, double specified_height, double default_width, double default_height, double *concrete_width, double *concrete_height);
    void (*paintable_invalidate_contents)(GdkPaintable *paintable);
    void (*paintable_invalidate_size)(GdkPaintable *paintable);
    GdkPaintable * (*paintable_new_empty)(int intrinsic_width, int intrinsic_height);
    cairo_region_t* (*pango_layout_get_clip_region)(PangoLayout *layout, int x_origin, int y_origin, const int *index_ranges, int n_ranges);
    cairo_region_t* (*pango_layout_line_get_clip_region)(PangoLayoutLine *line, int x_origin, int y_origin, const int *index_ranges, int n_ranges);
    GdkGravity (*popup_get_surface_anchor)(GdkPopup *popup);
    GdkGravity (*popup_get_rect_anchor)(GdkPopup *popup);
    GdkSurface * (*popup_get_parent)(GdkPopup *popup);
    int (*popup_get_position_x)(GdkPopup *popup);
    int (*popup_get_position_y)(GdkPopup *popup);
    gboolean (*popup_get_autohide)(GdkPopup *popup);
    GdkPopupLayout * (*popup_layout_new)(const GdkRectangle *anchor_rect, GdkGravity rect_anchor, GdkGravity surface_anchor);
    GdkPopupLayout * (*popup_layout_ref)(GdkPopupLayout *layout);
    void (*popup_layout_unref)(GdkPopupLayout *layout);
    GdkPopupLayout * (*popup_layout_copy)(GdkPopupLayout *layout);
    gboolean (*popup_layout_equal)(GdkPopupLayout *layout, GdkPopupLayout *other);
    void (*popup_layout_set_anchor_rect)(GdkPopupLayout *layout, const GdkRectangle *anchor_rect);
    const GdkRectangle * (*popup_layout_get_anchor_rect)(GdkPopupLayout *layout);
    void (*popup_layout_set_rect_anchor)(GdkPopupLayout *layout, GdkGravity anchor);
    GdkGravity (*popup_layout_get_rect_anchor)(GdkPopupLayout *layout);
    void (*popup_layout_set_surface_anchor)(GdkPopupLayout *layout, GdkGravity anchor);
    GdkGravity (*popup_layout_get_surface_anchor)(GdkPopupLayout *layout);
    void (*popup_layout_set_anchor_hints)(GdkPopupLayout *layout, GdkAnchorHints anchor_hints);
    GdkAnchorHints (*popup_layout_get_anchor_hints)(GdkPopupLayout *layout);
    void (*popup_layout_set_offset)(GdkPopupLayout *layout, int dx, int dy);
    void (*popup_layout_get_offset)(GdkPopupLayout *layout, int *dx, int *dy);
    void (*popup_layout_set_shadow_width)(GdkPopupLayout *layout, int left, int right, int top, int bottom);
    void (*popup_layout_get_shadow_width)(GdkPopupLayout *layout, int *left, int *right, int *top, int *bottom);
    GType (*popup_layout_get_type)(void);
    void (*rectangle_union)(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);
    gboolean (*rectangle_equal)(const GdkRectangle *rect1, const GdkRectangle *rect);
    gboolean (*rectangle_contains_point)(const GdkRectangle *rect, int x, int );
    GType (*rectangle_get_type)(void);
    gboolean (*rectangle_intersect)(const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);
    GdkRGBA * (*rgba_copy)(const GdkRGBA *rgba);
    void (*rgba_free)(GdkRGBA *rgba);
    gboolean (*rgba_is_clear)(const GdkRGBA *rgb);
    gboolean (*rgba_is_opaque)(const GdkRGBA *rgb);
    guint (*rgba_hash)(gconstpointer );
    gboolean (*rgba_equal)(gconstpointer p1, gconstpointer p);
    gboolean (*rgba_parse)(GdkRGBA *rgba, const char *spec);
    char * (*rgba_to_string)(const GdkRGBA *rgba);
    GType (*rgba_get_type)(void);
    GdkDisplay * (*seat_get_display)(GdkSeat *seat);
    GdkSeatCapabilities (*seat_get_capabilities)(GdkSeat *seat);
    GList * (*seat_get_devices)(GdkSeat *seat, GdkSeatCapabilities capabilities);
    GList * (*seat_get_tools)(GdkSeat *seat);
    GdkDevice * (*seat_get_pointer)(GdkSeat *seat);
    GdkDevice * (*seat_get_keyboard)(GdkSeat *seat);
    GType (*seat_get_type)(void);
    GType (*snapshot_get_type)(void);
    GdkSurface * (*surface_new_toplevel)(GdkDisplay *display);
    GdkSurface * (*surface_new_popup)(GdkSurface *parent, gboolean autohide);
    void (*surface_destroy)(GdkSurface *surface);
    gboolean (*surface_is_destroyed)(GdkSurface *surface);
    GdkDisplay * (*surface_get_display)(GdkSurface *surface);
    void (*surface_hide)(GdkSurface *surface);
    void (*surface_set_input_region)(GdkSurface *surface, cairo_region_t *region);
    gboolean (*surface_get_mapped)(GdkSurface *surface);
    void (*surface_set_cursor)(GdkSurface *surface, GdkCursor *cursor);
    GdkCursor* (*surface_get_cursor)(GdkSurface *surface);
    void (*surface_set_device_cursor)(GdkSurface *surface, GdkDevice *device, GdkCursor *cursor);
    GdkCursor* (*surface_get_device_cursor)(GdkSurface *surface, GdkDevice *device);
    int (*surface_get_width)(GdkSurface *surface);
    int (*surface_get_height)(GdkSurface *surface);
    gboolean (*surface_translate_coordinates)(GdkSurface *from, GdkSurface *to, double *x, double *y);
    int (*surface_get_scale_factor)(GdkSurface *surface);
    double (*surface_get_scale)(GdkSurface *surface);
    gboolean (*surface_get_device_position)(GdkSurface *surface, GdkDevice *device, double *x, double *y, GdkModifierType *mask);
    cairo_surface_t * (*surface_create_similar_surface)(GdkSurface *surface, cairo_content_t content, int width, int height);
    void (*surface_beep)(GdkSurface *surface);
    void (*surface_queue_render)(GdkSurface *surface);
    void (*surface_request_layout)(GdkSurface *surface);
    GdkFrameClock* (*surface_get_frame_clock)(GdkSurface *surface);
    void (*surface_set_opaque_region)(GdkSurface *surface, cairo_region_t *region);
    GdkCairoContext* (*surface_create_cairo_context)(GdkSurface *surface);
    GdkGLContext * (*surface_create_gl_context)(GdkSurface *surface, GError **error);
    GdkVulkanContext * (*surface_create_vulkan_context)(GdkSurface *surface, GError **error);
    GType (*surface_get_type)(void);
    GdkTextureDownloader * (*texture_downloader_new)(GdkTexture *texture);
    GdkTextureDownloader * (*texture_downloader_copy)(const GdkTextureDownloader *self);
    void (*texture_downloader_free)(GdkTextureDownloader *self);
    void (*texture_downloader_set_texture)(GdkTextureDownloader *self, GdkTexture *texture);
    GdkTexture * (*texture_downloader_get_texture)(const GdkTextureDownloader *self);
    void (*texture_downloader_set_format)(GdkTextureDownloader *self, GdkMemoryFormat format);
    GdkMemoryFormat (*texture_downloader_get_format)(const GdkTextureDownloader *self);
    void (*texture_downloader_download_into)(const GdkTextureDownloader *self, guchar *data, gsize stride);
    GBytes * (*texture_downloader_download_bytes)(const GdkTextureDownloader *self, gsize *out_stride);
    GType (*texture_downloader_get_type)(void);
    GType (*texture_get_type)(void);
    GdkTexture * (*texture_new_for_pixbuf)(GdkPixbuf *pixbuf);
    GdkTexture * (*texture_new_from_resource)(const char *resource_path);
    GdkTexture * (*texture_new_from_file)(GFile *file, GError **error);
    GdkTexture * (*texture_new_from_filename)(const char *path, GError **error);
    GdkTexture * (*texture_new_from_bytes)(GBytes *bytes, GError **error);
    int (*texture_get_width)(GdkTexture *textur);
    int (*texture_get_height)(GdkTexture *textur);
    GdkMemoryFormat (*texture_get_format)(GdkTexture *sel);
    void (*texture_download)(GdkTexture *texture, guchar *data, gsize stride);
    gboolean (*texture_save_to_png)(GdkTexture *texture, const char *filename);
    GBytes * (*texture_save_to_png_bytes)(GdkTexture *texture);
    gboolean (*texture_save_to_tiff)(GdkTexture *texture, const char *filename);
    GBytes * (*texture_save_to_tiff_bytes)(GdkTexture *texture);
    GQuark (*texture_error_quark)(void);
    gboolean (*toplevel_minimize)(GdkToplevel *toplevel);
    gboolean (*toplevel_lower)(GdkToplevel *toplevel);
    void (*toplevel_focus)(GdkToplevel *toplevel, guint32 timestamp);
    GdkToplevelState (*toplevel_get_state)(GdkToplevel *toplevel);
    void (*toplevel_set_title)(GdkToplevel *toplevel, const char *title);
    void (*toplevel_set_startup_id)(GdkToplevel *toplevel, const char *startup_id);
    void (*toplevel_set_transient_for)(GdkToplevel *toplevel, GdkSurface *parent);
    void (*toplevel_set_modal)(GdkToplevel *toplevel, gboolean modal);
    void (*toplevel_set_icon_list)(GdkToplevel *toplevel, GList *surfaces);
    gboolean (*toplevel_show_window_menu)(GdkToplevel *toplevel, GdkEvent *event);
    void (*toplevel_set_decorated)(GdkToplevel *toplevel, gboolean decorated);
    void (*toplevel_set_deletable)(GdkToplevel *toplevel, gboolean deletable);
    gboolean (*toplevel_supports_edge_constraints)(GdkToplevel *toplevel);
    void (*toplevel_inhibit_system_shortcuts)(GdkToplevel *toplevel, GdkEvent *event);
    void (*toplevel_restore_system_shortcuts)(GdkToplevel *toplevel);
    void (*toplevel_begin_resize)(GdkToplevel *toplevel, GdkSurfaceEdge edge, GdkDevice *device, int button, double x, double y, guint32 timestamp);
    void (*toplevel_begin_move)(GdkToplevel *toplevel, GdkDevice *device, int button, double x, double y, guint32 timestamp);
    gboolean (*toplevel_titlebar_gesture)(GdkToplevel *toplevel, GdkTitlebarGesture gesture);
    GdkToplevelLayout * (*toplevel_layout_new)(void);
    GdkToplevelLayout * (*toplevel_layout_ref)(GdkToplevelLayout *layout);
    void (*toplevel_layout_unref)(GdkToplevelLayout *layout);
    GdkToplevelLayout * (*toplevel_layout_copy)(GdkToplevelLayout *layout);
    gboolean (*toplevel_layout_equal)(GdkToplevelLayout *layout, GdkToplevelLayout *other);
    void (*toplevel_layout_set_maximized)(GdkToplevelLayout *layout, gboolean maximized);
    void (*toplevel_layout_set_fullscreen)(GdkToplevelLayout *layout, gboolean fullscreen, GdkMonitor *monitor);
    gboolean (*toplevel_layout_get_maximized)(GdkToplevelLayout *layout, gboolean *maximized);
    gboolean (*toplevel_layout_get_fullscreen)(GdkToplevelLayout *layout, gboolean *fullscreen);
    GdkMonitor * (*toplevel_layout_get_fullscreen_monitor)(GdkToplevelLayout *layout);
    void (*toplevel_layout_set_resizable)(GdkToplevelLayout *layout, gboolean resizable);
    gboolean (*toplevel_layout_get_resizable)(GdkToplevelLayout *layout);
    GType (*toplevel_layout_get_type)(void);
    void (*toplevel_size_get_bounds)(GdkToplevelSize *size, int *bounds_width, int *bounds_height);
    void (*toplevel_size_set_size)(GdkToplevelSize *size, int width, int height);
    void (*toplevel_size_set_min_size)(GdkToplevelSize *size, int min_width, int min_height);
    void (*toplevel_size_set_shadow_width)(GdkToplevelSize *size, int left, int right, int top, int bottom);
    GType (*toplevel_size_get_type)(void);
    GType (*vulkan_context_get_type)(void);
    GQuark (*vulkan_error_quark)(void);
    struct wl_seat* (*wayland_device_get_wl_seat)(GdkDevice *device);
    struct wl_pointer* (*wayland_device_get_wl_pointer)(GdkDevice *device);
    struct wl_keyboard* (*wayland_device_get_wl_keyboard)(GdkDevice *device);
    struct xkb_keymap* (*wayland_device_get_xkb_keymap)(GdkDevice *device);
    const char* (*wayland_device_get_node_path)(GdkDevice *device);
    GType (*wayland_device_get_type)(void);
    struct wl_display* (*wayland_display_get_wl_display)(GdkDisplay *display);
    struct wl_compositor* (*wayland_display_get_wl_compositor)(GdkDisplay *display);
    void (*wayland_display_set_cursor_theme)(GdkDisplay *display, const char *name, int size);
    const char * (*wayland_display_get_startup_notification_id)(GdkDisplay *display);
    void (*wayland_display_set_startup_notification_id)(GdkDisplay *display, const char *startup_id);
    gboolean (*wayland_display_query_registry)(GdkDisplay *display, const char *global);
    gpointer (*wayland_display_get_egl_display)(GdkDisplay *display);
    GType (*wayland_display_get_type)(void);
    GType (*wayland_gl_context_get_type)(void);
    struct wl_output* (*wayland_monitor_get_wl_output)(GdkMonitor *monitor);
    GType (*wayland_monitor_get_type)(void);
    GType (*wayland_popup_get_type)(void);
    struct wl_seat * (*wayland_seat_get_wl_seat)(GdkSeat *seat);
    GType (*wayland_seat_get_type)(void);
    struct wl_surface* (*wayland_surface_get_wl_surface)(GdkSurface *surface);
    GType (*wayland_surface_get_type)(void);
    gboolean (*wayland_toplevel_export_handle)(GdkToplevel *toplevel, GdkWaylandToplevelExported callback, gpointer user_data, GDestroyNotify destroy_func);
    void (*wayland_toplevel_unexport_handle)(GdkToplevel *toplevel);
    void (*wayland_toplevel_drop_exported_handle)(GdkToplevel *toplevel, const char *handle);
    gboolean (*wayland_toplevel_set_transient_for_exported)(GdkToplevel *toplevel, const char *parent_handle_str);
    void (*wayland_toplevel_set_application_id)(GdkToplevel *toplevel, const char *application_id);
    GType (*wayland_toplevel_get_type)(void);
    GType (*x11_app_launch_context_get_type)(void);
    GType (*x11_device_xi2_get_type)(void);
    int (*x11_device_get_id)(GdkDevice *device);
    GType (*x11_device_manager_xi2_get_type)(void);
    GdkDevice * (*x11_device_manager_lookup)(GdkX11DeviceManagerXI2 *device_manager, int device_id);
    GdkDisplay * (*x11_display_open)(const char *display_name);
    Display * (*x11_display_get_xdisplay)(GdkDisplay *display);
    Screen * (*x11_display_get_xscreen)(GdkDisplay *display);
    Window (*x11_display_get_xrootwindow)(GdkDisplay *display);
    Cursor (*x11_display_get_xcursor)(GdkDisplay *display, GdkCursor *cursor);
    guint32 (*x11_display_get_user_time)(GdkDisplay *display);
    const char * (*x11_display_get_startup_notification_id)(GdkDisplay *display);
    void (*x11_display_set_startup_notification_id)(GdkDisplay *display, const char *startup_id);
    void (*x11_display_set_program_class)(GdkDisplay *display, const char *program_class);
    void (*x11_display_set_cursor_theme)(GdkDisplay *display, const char *theme, const int size);
    void (*x11_display_broadcast_startup_message)(GdkDisplay *display, const char *message_type, ...);
    GdkDisplay* (*x11_lookup_xdisplay)(Display *xdisplay);
    GdkX11Screen* (*x11_display_get_screen)(GdkDisplay *display);
    GdkMonitor * (*x11_display_get_primary_monitor)(GdkDisplay *display);
    void (*x11_display_grab)(GdkDisplay *display);
    void (*x11_display_ungrab)(GdkDisplay *display);
    void (*x11_display_set_surface_scale)(GdkDisplay *display, int scale);
    void (*x11_display_error_trap_push)(GdkDisplay *display);
    int (*x11_display_error_trap_pop)(GdkDisplay *display);
    void (*x11_display_error_trap_pop_ignored)(GdkDisplay *display);
    void (*x11_set_sm_client_id)(const char *sm_client_id);
    GdkSurface * (*x11_display_get_default_group)(GdkDisplay *display);
    GType (*x11_display_get_type)(void);
    GType (*x11_drag_get_type)(void);
    gboolean (*x11_display_get_glx_version)(GdkDisplay *display, int *major, int *minor);
    gboolean (*x11_display_get_egl_version)(GdkDisplay *display, int *major, int *minor);
    gpointer (*x11_display_get_egl_display)(GdkDisplay *display);
    GType (*x11_gl_context_get_type)(void);
    XID (*x11_monitor_get_output)(GdkMonitor *monitor);
    void (*x11_monitor_get_workarea)(GdkMonitor *monitor, GdkRectangle *workarea);
    GType (*x11_monitor_get_type)(void);
    const char * (*x11_get_xatom_name_for_display)(GdkDisplay *display, Atom xatom);
    Atom (*x11_get_xatom_by_name_for_display)(GdkDisplay *display, const char *atom_name);
    Screen * (*x11_screen_get_xscreen)(GdkX11Screen *screen);
    int (*x11_screen_get_screen_number)(GdkX11Screen *screen);
    const char* (*x11_screen_get_window_manager_name)(GdkX11Screen *screen);
    gboolean (*x11_screen_supports_net_wm_hint)(GdkX11Screen *screen, const char *property_name);
    XID (*x11_screen_get_monitor_output)(GdkX11Screen *screen, int monitor_num);
    guint32 (*x11_screen_get_number_of_desktops)(GdkX11Screen *screen);
    guint32 (*x11_screen_get_current_desktop)(GdkX11Screen *screen);
    GType (*x11_screen_get_type)(void);
    void (*x11_free_text_list)(char **list);
    int (*x11_display_string_to_compound_text)(GdkDisplay *display, const char *str, const char **encoding, int *format, guchar **ctext, int *length);
    gboolean (*x11_display_utf8_to_compound_text)(GdkDisplay *display, const char *str, const char **encoding, int *format, guchar **ctext, int *length);
    void (*x11_free_compound_text)(guchar *ctext);
    int (*x11_display_text_property_to_text_list)(GdkDisplay *display, const char *encoding, int format, const guchar *text, int length, char ***list);
    Window (*x11_surface_get_xid)(GdkSurface *surface);
    void (*x11_surface_set_user_time)(GdkSurface *surface, guint32 timestamp);
    void (*x11_surface_set_utf8_property)(GdkSurface *surface, const char *name, const char *value);
    void (*x11_surface_set_theme_variant)(GdkSurface *surface, const char *variant);
    void (*x11_surface_move_to_current_desktop)(GdkSurface *surface);
    guint32 (*x11_surface_get_desktop)(GdkSurface *surface);
    void (*x11_surface_move_to_desktop)(GdkSurface *surface, guint32 desktop);
    void (*x11_surface_set_frame_sync_enabled)(GdkSurface *surface, gboolean frame_sync_enabled);
    guint32 (*x11_get_server_time)(GdkSurface *surface);
    GdkSurface* (*x11_surface_lookup_for_display)(GdkDisplay *display, Window window);
    void (*x11_surface_set_skip_taskbar_hint)(GdkSurface *surface, gboolean skips_taskbar);
    void (*x11_surface_set_skip_pager_hint)(GdkSurface *surface, gboolean skips_pager);
    void (*x11_surface_set_urgency_hint)(GdkSurface *surface, gboolean urgent);
    void (*x11_surface_set_group)(GdkSurface *surface, GdkSurface *leader);
    GdkSurface * (*x11_surface_get_group)(GdkSurface *surface);
    GType (*x11_surface_get_type)(void);
};

struct gsk_syms {
    // STORE_LIB_IF_NEEDED
    // SYMS_gsk_HERE
    GskRenderer * (*broadway_renderer_new)(void);
    GType (*broadway_renderer_get_type)(void);
    GskRenderer* (*gl_renderer_new)(void);
    GType (*ngl_renderer_get_type)(void);
    GskRenderer* (*ngl_renderer_new)(void);
    GType (*gl_renderer_get_type)(void);
    GskRenderer * (*vulkan_renderer_new)(void);
    GType (*vulkan_renderer_get_type)(void);
    GskRenderer * (*cairo_renderer_new)(void);
    GType (*cairo_renderer_get_type)(void);
    GType (*scaling_filter_get_type)(void);
    GType (*blend_mode_get_type)(void);
    GType (*corner_get_type)(void);
    GType (*fill_rule_get_type)(void);
    GType (*line_cap_get_type)(void);
    GType (*line_join_get_type)(void);
    GType (*path_operation_get_type)(void);
    GType (*path_direction_get_type)(void);
    GType (*serialization_error_get_type)(void);
    GType (*transform_category_get_type)(void);
    GType (*gl_uniform_type_get_type)(void);
    GType (*mask_mode_get_type)(void);
    GType (*path_foreach_flags_get_type)(void);
    GType (*render_node_type_get_type)(void);
    GskGLShader * (*gl_shader_new_from_resource)(const char *resource_path);
    gboolean (*gl_shader_compile)(GskGLShader *shader, GskRenderer *renderer, GError **error);
    GBytes * (*gl_shader_get_source)(GskGLShader *shader);
    const char * (*gl_shader_get_resource)(GskGLShader *shader);
    int (*gl_shader_get_n_textures)(GskGLShader *shader);
    int (*gl_shader_get_n_uniforms)(GskGLShader *shader);
    const char * (*gl_shader_get_uniform_name)(GskGLShader *shader, int idx);
    int (*gl_shader_find_uniform_by_name)(GskGLShader *shader, const char *name);
    GskGLUniformType (*gl_shader_get_uniform_type)(GskGLShader *shader, int idx);
    int (*gl_shader_get_uniform_offset)(GskGLShader *shader, int idx);
    gsize (*gl_shader_get_args_size)(GskGLShader *shader);
    GBytes * (*gl_shader_format_args_va)(GskGLShader *shader, va_list uniforms);
    GBytes * (*gl_shader_format_args)(GskGLShader *shader, ...);
    float (*gl_shader_get_arg_float)(GskGLShader *shader, GBytes *args, int idx);
    gint32 (*gl_shader_get_arg_int)(GskGLShader *shader, GBytes *args, int idx);
    guint32 (*gl_shader_get_arg_uint)(GskGLShader *shader, GBytes *args, int idx);
    gboolean (*gl_shader_get_arg_bool)(GskGLShader *shader, GBytes *args, int idx);
    void (*gl_shader_get_arg_vec2)(GskGLShader *shader, GBytes *args, int idx, graphene_vec2_t *out_value);
    void (*gl_shader_get_arg_vec3)(GskGLShader *shader, GBytes *args, int idx, graphene_vec3_t *out_value);
    void (*gl_shader_get_arg_vec4)(GskGLShader *shader, GBytes *args, int idx, graphene_vec4_t *out_value);
    GType (*shader_args_builder_get_type)(void);
    GskShaderArgsBuilder* (*shader_args_builder_new)(GskGLShader *shader, GBytes *initial_values);
    GBytes * (*shader_args_builder_to_args)(GskShaderArgsBuilder *builder);
    GBytes * (*shader_args_builder_free_to_args)(GskShaderArgsBuilder *builder);
    GskShaderArgsBuilder* (*shader_args_builder_ref)(GskShaderArgsBuilder *builder);
    void (*shader_args_builder_unref)(GskShaderArgsBuilder *builder);
    void (*shader_args_builder_set_float)(GskShaderArgsBuilder *builder, int idx, float value);
    void (*shader_args_builder_set_int)(GskShaderArgsBuilder *builder, int idx, gint32 value);
    void (*shader_args_builder_set_uint)(GskShaderArgsBuilder *builder, int idx, guint32 value);
    void (*shader_args_builder_set_bool)(GskShaderArgsBuilder *builder, int idx, gboolean value);
    void (*shader_args_builder_set_vec2)(GskShaderArgsBuilder *builder, int idx, const graphene_vec2_t *value);
    void (*shader_args_builder_set_vec3)(GskShaderArgsBuilder *builder, int idx, const graphene_vec3_t *value);
    void (*shader_args_builder_set_vec4)(GskShaderArgsBuilder *builder, int idx, const graphene_vec4_t *value);
    GskGLShader * (*gl_shader_new_from_bytes)(GBytes *sourcecode);
    GskPathBuilder * (*path_builder_new)(void);
    GskPathBuilder * (*path_builder_ref)(GskPathBuilder *self);
    void (*path_builder_unref)(GskPathBuilder *self);
    GskPath * (*path_builder_free_to_path)(GskPathBuilder *self);
    GskPath * (*path_builder_to_path)(GskPathBuilder *self);
    const graphene_point_t* (*path_builder_get_current_point)(GskPathBuilder *self);
    void (*path_builder_add_path)(GskPathBuilder *self, GskPath *path);
    void (*path_builder_add_reverse_path)(GskPathBuilder *self, GskPath *path);
    void (*path_builder_add_cairo_path)(GskPathBuilder *self, const cairo_path_t *path);
    void (*path_builder_add_layout)(GskPathBuilder *self, PangoLayout *layout);
    void (*path_builder_add_rect)(GskPathBuilder *self, const graphene_rect_t *rect);
    void (*path_builder_add_rounded_rect)(GskPathBuilder *self, const GskRoundedRect *rect);
    void (*path_builder_add_circle)(GskPathBuilder *self, const graphene_point_t *center, float radius);
    void (*path_builder_add_segment)(GskPathBuilder *self, GskPath *path, const GskPathPoint *start, const GskPathPoint *end);
    void (*path_builder_move_to)(GskPathBuilder *self, float x, float y);
    void (*path_builder_rel_move_to)(GskPathBuilder *self, float x, float y);
    void (*path_builder_line_to)(GskPathBuilder *self, float x, float y);
    void (*path_builder_rel_line_to)(GskPathBuilder *self, float x, float y);
    void (*path_builder_quad_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
    void (*path_builder_rel_quad_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
    void (*path_builder_cubic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float x3, float y3);
    void (*path_builder_rel_cubic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float x3, float y3);
    void (*path_builder_conic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float weight);
    void (*path_builder_rel_conic_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float weight);
    void (*path_builder_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
    void (*path_builder_rel_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2);
    void (*path_builder_svg_arc_to)(GskPathBuilder *self, float rx, float ry, float x_axis_rotation, gboolean large_arc, gboolean positive_sweep, float x, float y);
    void (*path_builder_rel_svg_arc_to)(GskPathBuilder *self, float rx, float ry, float x_axis_rotation, gboolean large_arc, gboolean positive_sweep, float x, float y);
    void (*path_builder_html_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float radius);
    void (*path_builder_rel_html_arc_to)(GskPathBuilder *self, float x1, float y1, float x2, float y2, float radius);
    void (*path_builder_close)(GskPathBuilder *self);
    GType (*path_builder_get_type)(void);
    GskPath * (*path_ref)(GskPath *self);
    void (*path_unref)(GskPath *self);
    void (*path_print)(GskPath *self, GString *string);
    char * (*path_to_string)(GskPath *self);
    GskPath * (*path_parse)(const char *string);
    void (*path_to_cairo)(GskPath *self, cairo_t *cr);
    gboolean (*path_is_empty)(GskPath *self);
    gboolean (*path_is_closed)(GskPath *self);
    gboolean (*path_get_bounds)(GskPath *self, graphene_rect_t *bounds);
    gboolean (*path_get_stroke_bounds)(GskPath *self, const GskStroke *stroke, graphene_rect_t *bounds);
    gboolean (*path_in_fill)(GskPath *self, const graphene_point_t *point, GskFillRule fill_rule);
    gboolean (*path_get_start_point)(GskPath *self, GskPathPoint *result);
    gboolean (*path_get_end_point)(GskPath *self, GskPathPoint *result);
    gboolean (*path_get_closest_point)(GskPath *self, const graphene_point_t *point, float threshold, GskPathPoint *result, float *distance);
    gboolean (*path_foreach)(GskPath *self, GskPathForeachFlags flags, GskPathForeachFunc func, gpointer user_data);
    GType (*path_get_type)(void);
    GskPathMeasure * (*path_measure_new)(GskPath *path);
    GskPathMeasure * (*path_measure_new_with_tolerance)(GskPath *path, float tolerance);
    GskPathMeasure * (*path_measure_ref)(GskPathMeasure *self);
    void (*path_measure_unref)(GskPathMeasure *self);
    GskPath * (*path_measure_get_path)(GskPathMeasure *sel);
    float (*path_measure_get_tolerance)(GskPathMeasure *sel);
    float (*path_measure_get_length)(GskPathMeasure *self);
    gboolean (*path_measure_get_point)(GskPathMeasure *self, float distance, GskPathPoint *result);
    GType (*path_measure_get_type)(void);
    GskPathPoint * (*path_point_copy)(GskPathPoint *point);
    void (*path_point_free)(GskPathPoint *point);
    gboolean (*path_point_equal)(const GskPathPoint *point1, const GskPathPoint *point);
    int (*path_point_compare)(const GskPathPoint *point1, const GskPathPoint *point);
    void (*path_point_get_position)(const GskPathPoint *point, GskPath *path, graphene_point_t *position);
    void (*path_point_get_tangent)(const GskPathPoint *point, GskPath *path, GskPathDirection direction, graphene_vec2_t *tangent);
    float (*path_point_get_rotation)(const GskPathPoint *point, GskPath *path, GskPathDirection direction);
    float (*path_point_get_curvature)(const GskPathPoint *point, GskPath *path, GskPathDirection direction, graphene_point_t *center);
    float (*path_point_get_distance)(const GskPathPoint *point, GskPathMeasure *measure);
    GType (*path_point_get_type)(void);
    GskRenderer * (*renderer_new_for_surface)(GdkSurface *surface);
    GdkSurface * (*renderer_get_surface)(GskRenderer *renderer);
    gboolean (*renderer_realize)(GskRenderer *renderer, GdkSurface *surface, GError **error);
    gboolean (*renderer_realize_for_display)(GskRenderer *renderer, GdkDisplay *display, GError **error);
    void (*renderer_unrealize)(GskRenderer *renderer);
    gboolean (*renderer_is_realized)(GskRenderer *renderer);
    GdkTexture * (*renderer_render_texture)(GskRenderer *renderer, GskRenderNode *root, const graphene_rect_t *viewport);
    void (*renderer_render)(GskRenderer *renderer, GskRenderNode *root, const cairo_region_t *region);
    GType (*renderer_get_type)(void);
    GQuark (*serialization_error_quark)(void);
    GskRenderNode * (*render_node_ref)(GskRenderNode *node);
    void (*render_node_unref)(GskRenderNode *node);
    GskRenderNodeType (*render_node_get_node_type)(const GskRenderNode *node);
    void (*render_node_get_bounds)(GskRenderNode *node, graphene_rect_t *bounds);
    void (*render_node_draw)(GskRenderNode *node, cairo_t *cr);
    GBytes * (*render_node_serialize)(GskRenderNode *node);
    gboolean (*render_node_write_to_file)(GskRenderNode *node, const char *filename, GError **error);
    GskRenderNode * (*render_node_deserialize)(GBytes *bytes, GskParseErrorFunc error_func, gpointer user_data);
    GType (*debug_node_get_type)(void);
    GskRenderNode * (*debug_node_new)(GskRenderNode *child, char *message);
    GskRenderNode * (*debug_node_get_child)(const GskRenderNode *nod);
    const char * (*debug_node_get_message)(const GskRenderNode *nod);
    GType (*color_node_get_type)(void);
    GskRenderNode * (*color_node_new)(const GdkRGBA *rgba, const graphene_rect_t *bounds);
    const GdkRGBA * (*color_node_get_color)(const GskRenderNode *nod);
    GType (*texture_node_get_type)(void);
    GskRenderNode * (*texture_node_new)(GdkTexture *texture, const graphene_rect_t *bounds);
    GdkTexture * (*texture_node_get_texture)(const GskRenderNode *nod);
    GType (*texture_scale_node_get_type)(void);
    GskRenderNode * (*texture_scale_node_new)(GdkTexture *texture, const graphene_rect_t *bounds, GskScalingFilter filter);
    GdkTexture * (*texture_scale_node_get_texture)(const GskRenderNode *nod);
    GskScalingFilter (*texture_scale_node_get_filter)(const GskRenderNode *nod);
    GType (*linear_gradient_node_get_type)(void);
    GskRenderNode * (*linear_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);
    const graphene_point_t * (*linear_gradient_node_get_start)(const GskRenderNode *nod);
    const graphene_point_t * (*linear_gradient_node_get_end)(const GskRenderNode *nod);
    gsize (*linear_gradient_node_get_n_color_stops)(const GskRenderNode *nod);
    const GskColorStop * (*linear_gradient_node_get_color_stops)(const GskRenderNode *node, gsize *n_stops);
    GType (*repeating_linear_gradient_node_get_type)(void);
    GskRenderNode * (*repeating_linear_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);
    GType (*conic_gradient_node_get_type)(void);
    GskRenderNode * (*conic_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *center, float rotation, const GskColorStop *color_stops, gsize n_color_stops);
    const graphene_point_t * (*conic_gradient_node_get_center)(const GskRenderNode *nod);
    float (*conic_gradient_node_get_rotation)(const GskRenderNode *nod);
    float (*conic_gradient_node_get_angle)(const GskRenderNode *nod);
    gsize (*conic_gradient_node_get_n_color_stops)(const GskRenderNode *nod);
    const GskColorStop * (*conic_gradient_node_get_color_stops)(const GskRenderNode *node, gsize *n_stops);
    GType (*radial_gradient_node_get_type)(void);
    GskRenderNode * (*radial_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *color_stops, gsize n_color_stops);
    gsize (*radial_gradient_node_get_n_color_stops)(const GskRenderNode *nod);
    const GskColorStop * (*radial_gradient_node_get_color_stops)(const GskRenderNode *node, gsize *n_stops);
    const graphene_point_t* (*radial_gradient_node_get_center)(const GskRenderNode *nod);
    float (*radial_gradient_node_get_hradius)(const GskRenderNode *nod);
    float (*radial_gradient_node_get_vradius)(const GskRenderNode *nod);
    float (*radial_gradient_node_get_start)(const GskRenderNode *nod);
    float (*radial_gradient_node_get_end)(const GskRenderNode *nod);
    GType (*repeating_radial_gradient_node_get_type)(void);
    GskRenderNode * (*repeating_radial_gradient_node_new)(const graphene_rect_t *bounds, const graphene_point_t *center, float hradius, float vradius, float start, float end, const GskColorStop *color_stops, gsize n_color_stops);
    GType (*border_node_get_type)(void);
    GskRenderNode * (*border_node_new)(const GskRoundedRect *outline, const float border_width[4], const GdkRGBA border_color[4]);
    const GskRoundedRect * (*border_node_get_outline)(const GskRenderNode *nod);
    const float * (*border_node_get_widths)(const GskRenderNode *nod);
    const GdkRGBA * (*border_node_get_colors)(const GskRenderNode *nod);
    GType (*inset_shadow_node_get_type)(void);
    GskRenderNode * (*inset_shadow_node_new)(const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
    const GskRoundedRect * (*inset_shadow_node_get_outline)(const GskRenderNode *nod);
    const GdkRGBA * (*inset_shadow_node_get_color)(const GskRenderNode *nod);
    float (*inset_shadow_node_get_dx)(const GskRenderNode *nod);
    float (*inset_shadow_node_get_dy)(const GskRenderNode *nod);
    float (*inset_shadow_node_get_spread)(const GskRenderNode *nod);
    float (*inset_shadow_node_get_blur_radius)(const GskRenderNode *nod);
    GType (*outset_shadow_node_get_type)(void);
    GskRenderNode * (*outset_shadow_node_new)(const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);
    const GskRoundedRect * (*outset_shadow_node_get_outline)(const GskRenderNode *nod);
    const GdkRGBA * (*outset_shadow_node_get_color)(const GskRenderNode *nod);
    float (*outset_shadow_node_get_dx)(const GskRenderNode *nod);
    float (*outset_shadow_node_get_dy)(const GskRenderNode *nod);
    float (*outset_shadow_node_get_spread)(const GskRenderNode *nod);
    float (*outset_shadow_node_get_blur_radius)(const GskRenderNode *nod);
    GType (*cairo_node_get_type)(void);
    GskRenderNode * (*cairo_node_new)(const graphene_rect_t *bounds);
    cairo_t * (*cairo_node_get_draw_context)(GskRenderNode *node);
    cairo_surface_t * (*cairo_node_get_surface)(GskRenderNode *node);
    GType (*container_node_get_type)(void);
    GskRenderNode * (*container_node_new)(GskRenderNode **children, guint n_children);
    guint (*container_node_get_n_children)(const GskRenderNode *nod);
    GskRenderNode * (*container_node_get_child)(const GskRenderNode *node, guint id);
    GType (*transform_node_get_type)(void);
    GskRenderNode * (*transform_node_new)(GskRenderNode *child, GskTransform *transform);
    GskRenderNode * (*transform_node_get_child)(const GskRenderNode *nod);
    GskTransform * (*transform_node_get_transform)(const GskRenderNode *nod);
    GType (*opacity_node_get_type)(void);
    GskRenderNode * (*opacity_node_new)(GskRenderNode *child, float opacity);
    GskRenderNode * (*opacity_node_get_child)(const GskRenderNode *nod);
    float (*opacity_node_get_opacity)(const GskRenderNode *nod);
    GType (*color_matrix_node_get_type)(void);
    GskRenderNode * (*color_matrix_node_new)(GskRenderNode *child, const graphene_matrix_t *color_matrix, const graphene_vec4_t *color_offset);
    GskRenderNode * (*color_matrix_node_get_child)(const GskRenderNode *nod);
    const graphene_matrix_t * (*color_matrix_node_get_color_matrix)(const GskRenderNode *nod);
    const graphene_vec4_t * (*color_matrix_node_get_color_offset)(const GskRenderNode *nod);
    GType (*repeat_node_get_type)(void);
    GskRenderNode * (*repeat_node_new)(const graphene_rect_t *bounds, GskRenderNode *child, const graphene_rect_t *child_bounds);
    GskRenderNode * (*repeat_node_get_child)(const GskRenderNode *nod);
    const graphene_rect_t * (*repeat_node_get_child_bounds)(const GskRenderNode *nod);
    GType (*clip_node_get_type)(void);
    GskRenderNode * (*clip_node_new)(GskRenderNode *child, const graphene_rect_t *clip);
    GskRenderNode * (*clip_node_get_child)(const GskRenderNode *nod);
    const graphene_rect_t * (*clip_node_get_clip)(const GskRenderNode *nod);
    GType (*rounded_clip_node_get_type)(void);
    GskRenderNode * (*rounded_clip_node_new)(GskRenderNode *child, const GskRoundedRect *clip);
    GskRenderNode * (*rounded_clip_node_get_child)(const GskRenderNode *nod);
    const GskRoundedRect * (*rounded_clip_node_get_clip)(const GskRenderNode *nod);
    GType (*fill_node_get_type)(void);
    GskRenderNode * (*fill_node_new)(GskRenderNode *child, GskPath *path, GskFillRule fill_rule);
    GskRenderNode * (*fill_node_get_child)(const GskRenderNode *node);
    GskPath * (*fill_node_get_path)(const GskRenderNode *node);
    GskFillRule (*fill_node_get_fill_rule)(const GskRenderNode *node);
    GType (*stroke_node_get_type)(void);
    GskRenderNode * (*stroke_node_new)(GskRenderNode *child, GskPath *path, const GskStroke *stroke);
    GskRenderNode * (*stroke_node_get_child)(const GskRenderNode *node);
    GskPath * (*stroke_node_get_path)(const GskRenderNode *node);
    const GskStroke * (*stroke_node_get_stroke)(const GskRenderNode *node);
    GType (*shadow_node_get_type)(void);
    GskRenderNode * (*shadow_node_new)(GskRenderNode *child, const GskShadow *shadows, gsize n_shadows);
    GskRenderNode * (*shadow_node_get_child)(const GskRenderNode *nod);
    const GskShadow * (*shadow_node_get_shadow)(const GskRenderNode *node, gsize );
    gsize (*shadow_node_get_n_shadows)(const GskRenderNode *nod);
    GType (*blend_node_get_type)(void);
    GskRenderNode * (*blend_node_new)(GskRenderNode *bottom, GskRenderNode *top, GskBlendMode blend_mode);
    GskRenderNode * (*blend_node_get_bottom_child)(const GskRenderNode *nod);
    GskRenderNode * (*blend_node_get_top_child)(const GskRenderNode *nod);
    GskBlendMode (*blend_node_get_blend_mode)(const GskRenderNode *nod);
    GType (*cross_fade_node_get_type)(void);
    GskRenderNode * (*cross_fade_node_new)(GskRenderNode *start, GskRenderNode *end, float progress);
    GskRenderNode * (*cross_fade_node_get_start_child)(const GskRenderNode *nod);
    GskRenderNode * (*cross_fade_node_get_end_child)(const GskRenderNode *nod);
    float (*cross_fade_node_get_progress)(const GskRenderNode *nod);
    GType (*text_node_get_type)(void);
    GskRenderNode * (*text_node_new)(PangoFont *font, PangoGlyphString *glyphs, const GdkRGBA *color, const graphene_point_t *offset);
    PangoFont * (*text_node_get_font)(const GskRenderNode *nod);
    gboolean (*text_node_has_color_glyphs)(const GskRenderNode *nod);
    guint (*text_node_get_num_glyphs)(const GskRenderNode *nod);
    const PangoGlyphInfo* (*text_node_get_glyphs)(const GskRenderNode *node, guint *n_glyphs);
    const GdkRGBA * (*text_node_get_color)(const GskRenderNode *nod);
    const graphene_point_t* (*text_node_get_offset)(const GskRenderNode *nod);
    GType (*blur_node_get_type)(void);
    GskRenderNode * (*blur_node_new)(GskRenderNode *child, float radius);
    GskRenderNode * (*blur_node_get_child)(const GskRenderNode *nod);
    float (*blur_node_get_radius)(const GskRenderNode *nod);
    GType (*mask_node_get_type)(void);
    GskRenderNode * (*mask_node_new)(GskRenderNode *source, GskRenderNode *mask, GskMaskMode mask_mode);
    GskRenderNode * (*mask_node_get_source)(const GskRenderNode *node);
    GskRenderNode * (*mask_node_get_mask)(const GskRenderNode *node);
    GskMaskMode (*mask_node_get_mask_mode)(const GskRenderNode *node);
    GType (*gl_shader_node_get_type)(void);
    GskRenderNode * (*gl_shader_node_new)(GskGLShader *shader, const graphene_rect_t *bounds, GBytes *args, GskRenderNode **children, guint n_children);
    guint (*gl_shader_node_get_n_children)(const GskRenderNode *nod);
    GskRenderNode * (*gl_shader_node_get_child)(const GskRenderNode *node, guint id);
    GBytes * (*gl_shader_node_get_args)(const GskRenderNode *nod);
    GskGLShader * (*gl_shader_node_get_shader)(const GskRenderNode *nod);
    GType (*subsurface_node_get_type)(void);
    GskRenderNode * (*subsurface_node_new)(GskRenderNode *child, gpointer subsurface);
    GskRenderNode * (*subsurface_node_get_child)(const GskRenderNode *nod);
    gpointer (*subsurface_node_get_subsurface)(const GskRenderNode *node);
    void (*value_set_render_node)(GValue *value, GskRenderNode *node);
    void (*value_take_render_node)(GValue *value, GskRenderNode *node);
    GskRenderNode * (*value_get_render_node)(const GValue *value);
    GskRenderNode * (*value_dup_render_node)(const GValue *value);
    GType (*render_node_get_type)(void);
    GskRoundedRect * (*rounded_rect_init_copy)(GskRoundedRect *self, const GskRoundedRect *src);
    GskRoundedRect * (*rounded_rect_init_from_rect)(GskRoundedRect *self, const graphene_rect_t *bounds, float radius);
    GskRoundedRect * (*rounded_rect_normalize)(GskRoundedRect *self);
    GskRoundedRect * (*rounded_rect_offset)(GskRoundedRect *self, float dx, float dy);
    GskRoundedRect * (*rounded_rect_shrink)(GskRoundedRect *self, float top, float right, float bottom, float left);
    gboolean (*rounded_rect_is_rectilinear)(const GskRoundedRect *sel);
    gboolean (*rounded_rect_contains_point)(const GskRoundedRect *self, const graphene_point_t *poin);
    gboolean (*rounded_rect_contains_rect)(const GskRoundedRect *self, const graphene_rect_t *rec);
    gboolean (*rounded_rect_intersects_rect)(const GskRoundedRect *self, const graphene_rect_t *rec);
    GskRoundedRect * (*rounded_rect_init)(GskRoundedRect *self, const graphene_rect_t *bounds, const graphene_size_t *top_left, const graphene_size_t *top_right, const graphene_size_t *bottom_right, const graphene_size_t *bottom_left);
    GskStroke * (*stroke_new)(float line_width);
    GskStroke * (*stroke_copy)(const GskStroke *other);
    void (*stroke_free)(GskStroke *self);
    gboolean (*stroke_equal)(gconstpointer stroke1, gconstpointer stroke2);
    void (*stroke_set_line_width)(GskStroke *self, float line_width);
    float (*stroke_get_line_width)(const GskStroke *self);
    void (*stroke_set_line_cap)(GskStroke *self, GskLineCap line_cap);
    GskLineCap (*stroke_get_line_cap)(const GskStroke *self);
    void (*stroke_set_line_join)(GskStroke *self, GskLineJoin line_join);
    GskLineJoin (*stroke_get_line_join)(const GskStroke *self);
    void (*stroke_set_miter_limit)(GskStroke *self, float limit);
    float (*stroke_get_miter_limit)(const GskStroke *self);
    void (*stroke_set_dash)(GskStroke *self, const float *dash, gsize n_dash);
    const float * (*stroke_get_dash)(const GskStroke *self, gsize *n_dash);
    void (*stroke_set_dash_offset)(GskStroke *self, float offset);
    float (*stroke_get_dash_offset)(const GskStroke *self);
    void (*stroke_to_cairo)(const GskStroke *self, cairo_t *cr);
    GType (*stroke_get_type)(void);
    GskTransform * (*transform_ref)(GskTransform *self);
    void (*transform_unref)(GskTransform *self);
    void (*transform_print)(GskTransform *self, GString *string);
    char * (*transform_to_string)(GskTransform *self);
    gboolean (*transform_parse)(const char *string, GskTransform **out_transform);
    void (*transform_to_matrix)(GskTransform *self, graphene_matrix_t *out_matrix);
    void (*transform_to_2d)(GskTransform *self, float *out_xx, float *out_yx, float *out_xy, float *out_yy, float *out_dx, float *out_dy);
    void (*transform_to_2d_components)(GskTransform *self, float *out_skew_x, float *out_skew_y, float *out_scale_x, float *out_scale_y, float *out_angle, float *out_dx, float *out_dy);
    void (*transform_to_affine)(GskTransform *self, float *out_scale_x, float *out_scale_y, float *out_dx, float *out_dy);
    void (*transform_to_translate)(GskTransform *self, float *out_dx, float *out_dy);
    GskTransformCategory (*transform_get_category)(GskTransform *sel);
    gboolean (*transform_equal)(GskTransform *first, GskTransform *secon);
    GskTransform * (*transform_new)(void);
    GskTransform * (*transform_transform)(GskTransform *next, GskTransform *other);
    GskTransform * (*transform_invert)(GskTransform *self);
    GskTransform * (*transform_matrix)(GskTransform *next, const graphene_matrix_t *matrix);
    GskTransform * (*transform_translate)(GskTransform *next, const graphene_point_t *point);
    GskTransform * (*transform_translate_3d)(GskTransform *next, const graphene_point3d_t *point);
    GskTransform * (*transform_skew)(GskTransform *next, float skew_x, float skew_y);
    GskTransform * (*transform_rotate)(GskTransform *next, float angle);
    GskTransform * (*transform_rotate_3d)(GskTransform *next, float angle, const graphene_vec3_t *axis);
    GskTransform * (*transform_scale)(GskTransform *next, float factor_x, float factor_y);
    GskTransform * (*transform_scale_3d)(GskTransform *next, float factor_x, float factor_y, float factor_z);
    GskTransform * (*transform_perspective)(GskTransform *next, float depth);
    void (*transform_transform_bounds)(GskTransform *self, const graphene_rect_t *rect, graphene_rect_t *out_rect);
    void (*transform_transform_point)(GskTransform *self, const graphene_point_t *point, graphene_point_t *out_point);
    GType (*transform_get_type)(void);
};

// DEFINE_STRUCT_HERE


extern struct gtk_syms *gtk;
extern struct gdk_syms *gdk;
extern struct gsk_syms *gsk;
// DEFINE_STRUCT_VAR_HERE
#endif

void initialize_gtk4(void);
void close_gtk4(void);
