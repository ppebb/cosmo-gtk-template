#include <glib.h>
#include <glib-unix.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <gmodule.h>
#include <girepository/girepository.h>
#include <girepository/girffi.h>

void initialize_glib(void);
void close_glib(void);

// Header /usr/include/glib-2.0/glib/deprecated/gallocator.h
void (g_mem_chunk_destroy)(GMemChunk *mem_chunk);
gpointer (g_mem_chunk_alloc)(GMemChunk *mem_chunk);
gpointer (g_mem_chunk_alloc0)(GMemChunk *mem_chunk);
void (g_mem_chunk_free)(GMemChunk *mem_chunk, gpointer mem);
void (g_mem_chunk_clean)(GMemChunk *mem_chunk);
void (g_mem_chunk_reset)(GMemChunk *mem_chunk);
void (g_mem_chunk_print)(GMemChunk *mem_chunk);
void (g_mem_chunk_info)(void);
void (g_blow_chunks)(void);
GMemChunk * (g_mem_chunk_new)(const gchar *name, gint atom_size, gsize area_size, gint type);
// Header /usr/include/glib-2.0/glib/deprecated/gcache.h
void (g_cache_destroy)(GCache *cache);
gpointer (g_cache_insert)(GCache *cache, gpointer key);
void (g_cache_remove)(GCache *cache, gconstpointer value);
void (g_cache_key_foreach)(GCache *cache, GHFunc func, gpointer user_data);
void (g_cache_value_foreach)(GCache *cache, GHFunc func, gpointer user_data);
// Header /usr/include/glib-2.0/glib/deprecated/gcompletion.h
void (g_completion_add_items)(GCompletion* cmp, GList* items);
void (g_completion_remove_items)(GCompletion* cmp, GList* items);
void (g_completion_clear_items)(GCompletion* cmp);
GList* (g_completion_complete)(GCompletion* cmp, const gchar* prefix, gchar** new_prefix);
GList* (g_completion_complete_utf8)(GCompletion *cmp, const gchar* prefix, gchar** new_prefix);
void (g_completion_set_compare)(GCompletion *cmp, GCompletionStrncmpFunc strncmp_func);
void (g_completion_free)(GCompletion* cmp);
GCompletion* (g_completion_new)(GCompletionFunc func);
// Header /usr/include/glib-2.0/glib/deprecated/gmain.h
// Header /usr/include/glib-2.0/glib/deprecated/grel.h
void (g_relation_destroy)(GRelation *relation);
void (g_relation_index)(GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func);
gint (g_relation_delete)(GRelation *relation, gconstpointer key, gint field);
GTuples* (g_relation_select)(GRelation *relation, gconstpointer key, gint field);
gint (g_relation_count)(GRelation *relation, gconstpointer key, gint field);
void (g_relation_print)(GRelation *relation);
void (g_tuples_destroy)(GTuples *tuples);
gpointer (g_tuples_index)(GTuples *tuples, gint index_, gint field);
GRelation* (g_relation_new)(gint fields);
// Header /usr/include/glib-2.0/glib/deprecated/gthread.h
GThread* (g_thread_create)(GThreadFunc func, gpointer data, gboolean joinable, GError **error);
GThread* (g_thread_create_full)(GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error);
void (g_thread_set_priority)(GThread *thread, GThreadPriority priority);
void (g_thread_foreach)(GFunc thread_func, gpointer user_data);
GPrivate * (g_private_new)(GDestroyNotify notify);
gboolean (g_once_init_enter_impl)(volatile gsize *location);
void (g_thread_init)(gpointer vtable);
void (g_thread_init_with_errorcheck_mutexes)(gpointer vtable);
gboolean (g_thread_get_initialized)(void);
GMutex * (g_mutex_new)(void);
void (g_mutex_free)(GMutex *mutex);
GCond * (g_cond_new)(void);
void (g_cond_free)(GCond *cond);
gboolean (g_cond_timed_wait)(GCond *cond, GMutex *mutex, GTimeVal *abs_time);
// Header /usr/include/glib-2.0/glib/galloca.h
// Header /usr/include/glib-2.0/glib/garray.h
GArray* (g_array_new_take)(gpointer data, gsize len, gboolean clear, gsize element_size);
GArray* (g_array_new_take_zero_terminated)(gpointer data, gboolean clear, gsize element_size);
gpointer (g_array_steal)(GArray *array, gsize *len);
GArray* (g_array_sized_new)(gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size);
GArray* (g_array_copy)(GArray *array);
gchar* (g_array_free)(GArray *array, gboolean free_segment);
GArray* (g_array_ref)(GArray *array);
void (g_array_unref)(GArray *array);
guint (g_array_get_element_size)(GArray *array);
GArray* (g_array_append_vals)(GArray *array, gconstpointer data, guint len);
GArray* (g_array_prepend_vals)(GArray *array, gconstpointer data, guint len);
GArray* (g_array_insert_vals)(GArray *array, guint index_, gconstpointer data, guint len);
GArray* (g_array_set_size)(GArray *array, guint length);
GArray* (g_array_remove_index)(GArray *array, guint index_);
GArray* (g_array_remove_index_fast)(GArray *array, guint index_);
GArray* (g_array_remove_range)(GArray *array, guint index_, guint length);
void (g_array_sort)(GArray *array, GCompareFunc compare_func);
void (g_array_sort_with_data)(GArray *array, GCompareDataFunc compare_func, gpointer user_data);
gboolean (g_array_binary_search)(GArray *array, gconstpointer target, GCompareFunc compare_func, guint *out_match_index);
void (g_array_set_clear_func)(GArray *array, GDestroyNotify clear_func);
GPtrArray* (g_ptr_array_new)(void);
GPtrArray* (g_ptr_array_new_with_free_func)(GDestroyNotify element_free_func);
GPtrArray* (g_ptr_array_new_take)(gpointer *data, gsize len, GDestroyNotify element_free_func);
GPtrArray* (g_ptr_array_new_from_array)(gpointer *data, gsize len, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func);
gpointer* (g_ptr_array_steal)(GPtrArray *array, gsize *len);
GPtrArray* (g_ptr_array_copy)(GPtrArray *array, GCopyFunc func, gpointer user_data);
GPtrArray* (g_ptr_array_sized_new)(guint reserved_size);
GPtrArray* (g_ptr_array_new_full)(guint reserved_size, GDestroyNotify element_free_func);
GPtrArray* (g_ptr_array_new_null_terminated)(guint reserved_size, GDestroyNotify element_free_func, gboolean null_terminated);
GPtrArray* (g_ptr_array_new_take_null_terminated)(gpointer *data, GDestroyNotify element_free_func);
GPtrArray* (g_ptr_array_new_from_null_terminated_array)(gpointer *data, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func);
gpointer* (g_ptr_array_free)(GPtrArray *array, gboolean free_seg);
GPtrArray* (g_ptr_array_ref)(GPtrArray *array);
void (g_ptr_array_unref)(GPtrArray *array);
void (g_ptr_array_set_free_func)(GPtrArray *array, GDestroyNotify element_free_func);
void (g_ptr_array_set_size)(GPtrArray *array, gint length);
gpointer (g_ptr_array_remove_index)(GPtrArray *array, guint index_);
gpointer (g_ptr_array_remove_index_fast)(GPtrArray *array, guint index_);
gpointer (g_ptr_array_steal_index)(GPtrArray *array, guint index_);
gpointer (g_ptr_array_steal_index_fast)(GPtrArray *array, guint index_);
gboolean (g_ptr_array_remove)(GPtrArray *array, gpointer data);
gboolean (g_ptr_array_remove_fast)(GPtrArray *array, gpointer data);
GPtrArray* (g_ptr_array_remove_range)(GPtrArray *array, guint index_, guint length);
void (g_ptr_array_add)(GPtrArray *array, gpointer data);
void (g_ptr_array_extend)(GPtrArray *array_to_extend, GPtrArray *array, GCopyFunc func, gpointer user_data);
void (g_ptr_array_extend_and_steal)(GPtrArray *array_to_extend, GPtrArray *array);
void (g_ptr_array_insert)(GPtrArray *array, gint index_, gpointer data);
void (g_ptr_array_sort)(GPtrArray *array, GCompareFunc compare_func);
void (g_ptr_array_sort_with_data)(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data);
void (g_ptr_array_sort_values)(GPtrArray *array, GCompareFunc compare_func);
void (g_ptr_array_sort_values_with_data)(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data);
void (g_ptr_array_foreach)(GPtrArray *array, GFunc func, gpointer user_data);
gboolean (g_ptr_array_find)(GPtrArray *haystack, gconstpointer needle, guint *index_);
gboolean (g_ptr_array_find_with_equal_func)(GPtrArray *haystack, gconstpointer needle, GEqualFunc equal_func, guint *index_);
gboolean (g_ptr_array_is_null_terminated)(GPtrArray *array);
GByteArray* (g_byte_array_new)(void);
GByteArray* (g_byte_array_new_take)(guint8 *data, gsize len);
guint8* (g_byte_array_steal)(GByteArray *array, gsize *len);
GByteArray* (g_byte_array_sized_new)(guint reserved_size);
guint8* (g_byte_array_free)(GByteArray *array, gboolean free_segment);
GBytes* (g_byte_array_free_to_bytes)(GByteArray *array);
GByteArray* (g_byte_array_ref)(GByteArray *array);
void (g_byte_array_unref)(GByteArray *array);
GByteArray* (g_byte_array_append)(GByteArray *array, const guint8 *data, guint len);
GByteArray* (g_byte_array_prepend)(GByteArray *array, const guint8 *data, guint len);
GByteArray* (g_byte_array_set_size)(GByteArray *array, guint length);
GByteArray* (g_byte_array_remove_index)(GByteArray *array, guint index_);
GByteArray* (g_byte_array_remove_index_fast)(GByteArray *array, guint index_);
GByteArray* (g_byte_array_remove_range)(GByteArray *array, guint index_, guint length);
void (g_byte_array_sort)(GByteArray *array, GCompareFunc compare_func);
void (g_byte_array_sort_with_data)(GByteArray *array, GCompareDataFunc compare_func, gpointer user_data);
GArray* (g_array_new)(gboolean zero_terminated, gboolean clear_, guint element_size);
// Header /usr/include/glib-2.0/glib/gasyncqueue.h
GAsyncQueue* (g_async_queue_new_full)(GDestroyNotify item_free_func);
void (g_async_queue_lock)(GAsyncQueue *queue);
void (g_async_queue_unlock)(GAsyncQueue *queue);
GAsyncQueue* (g_async_queue_ref)(GAsyncQueue *queue);
void (g_async_queue_unref)(GAsyncQueue *queue);
void (g_async_queue_ref_unlocked)(GAsyncQueue *queue);
void (g_async_queue_unref_and_unlock)(GAsyncQueue *queue);
void (g_async_queue_push)(GAsyncQueue *queue, gpointer data);
void (g_async_queue_push_unlocked)(GAsyncQueue *queue, gpointer data);
void (g_async_queue_push_sorted)(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);
void (g_async_queue_push_sorted_unlocked)(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);
gpointer (g_async_queue_pop)(GAsyncQueue *queue);
gpointer (g_async_queue_pop_unlocked)(GAsyncQueue *queue);
gpointer (g_async_queue_try_pop)(GAsyncQueue *queue);
gpointer (g_async_queue_try_pop_unlocked)(GAsyncQueue *queue);
gpointer (g_async_queue_timeout_pop)(GAsyncQueue *queue, guint64 timeout);
gpointer (g_async_queue_timeout_pop_unlocked)(GAsyncQueue *queue, guint64 timeout);
gint (g_async_queue_length)(GAsyncQueue *queue);
gint (g_async_queue_length_unlocked)(GAsyncQueue *queue);
void (g_async_queue_sort)(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);
void (g_async_queue_sort_unlocked)(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);
gboolean (g_async_queue_remove)(GAsyncQueue *queue, gpointer item);
gboolean (g_async_queue_remove_unlocked)(GAsyncQueue *queue, gpointer item);
void (g_async_queue_push_front)(GAsyncQueue *queue, gpointer item);
void (g_async_queue_push_front_unlocked)(GAsyncQueue *queue, gpointer item);
gpointer (g_async_queue_timed_pop_unlocked)(GAsyncQueue *queue, GTimeVal *end_time);
GAsyncQueue* (g_async_queue_new)(void);
// Header /usr/include/glib-2.0/glib/gatomic.h
void (g_atomic_int_set)(volatile gint *atomic, gint newval);
void (g_atomic_int_inc)(volatile gint *atomic);
gboolean (g_atomic_int_dec_and_test)(volatile gint *atomic);
gboolean (g_atomic_int_compare_and_exchange)(volatile gint *atomic, gint oldval, gint newval);
gboolean (g_atomic_int_compare_and_exchange_full)(gint *atomic, gint oldval, gint newval, gint *preval);
gint (g_atomic_int_exchange)(gint *atomic, gint newval);
gint (g_atomic_int_add)(volatile gint *atomic, gint val);
guint (g_atomic_int_and)(volatile guint *atomic, guint val);
guint (g_atomic_int_or)(volatile guint *atomic, guint val);
guint (g_atomic_int_xor)(volatile guint *atomic, guint val);
gpointer (g_atomic_pointer_get)(const volatile void *atomic);
void (g_atomic_pointer_set)(volatile void *atomic, gpointer newval);
gboolean (g_atomic_pointer_compare_and_exchange)(volatile void *atomic, gpointer oldval, gpointer newval);
gboolean (g_atomic_pointer_compare_and_exchange_full)(void *atomic, gpointer oldval, gpointer newval, void *preval);
gpointer (g_atomic_pointer_exchange)(void *atomic, gpointer newval);
gintptr (g_atomic_pointer_add)(volatile void *atomic, gssize val);
guintptr (g_atomic_pointer_and)(volatile void *atomic, gsize val);
guintptr (g_atomic_pointer_or)(volatile void *atomic, gsize val);
guintptr (g_atomic_pointer_xor)(volatile void *atomic, gsize val);
gint (g_atomic_int_exchange_and_add)(volatile gint *atomic, gint val);
gint (g_atomic_int_get)(const volatile gint *atomic);
// Header /usr/include/glib-2.0/glib/gbacktrace.h
void (g_on_error_stack_trace)(const gchar *prg_name);
void (g_on_error_query)(const gchar *prg_name);
// Header /usr/include/glib-2.0/glib/gbase64.h
gsize (g_base64_encode_close)(gboolean break_lines, gchar *out, gint *state, gint *save);
gchar* (g_base64_encode)(const guchar *data, gsize len);
gsize (g_base64_decode_step)(const gchar *in, gsize len, guchar *out, gint *state, guint *save);
guchar* (g_base64_decode)(const gchar *text, gsize *out_len);
guchar* (g_base64_decode_inplace)(gchar *text, gsize *out_len);
gsize (g_base64_encode_step)(const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save);
// Header /usr/include/glib-2.0/glib/gbitlock.h
gboolean (g_bit_trylock)(volatile gint *address, gint lock_bit);
void (g_bit_unlock)(volatile gint *address, gint lock_bit);
void (g_pointer_bit_lock)(volatile void *address, gint lock_bit);
void (g_pointer_bit_lock_and_get)(gpointer address, guint lock_bit, guintptr *out_ptr);
gboolean (g_pointer_bit_trylock)(volatile void *address, gint lock_bit);
void (g_pointer_bit_unlock)(volatile void *address, gint lock_bit);
gpointer (g_pointer_bit_lock_mask_ptr)(gpointer ptr, guint lock_bit, gboolean set, guintptr preserve_mask, gpointer preserve_ptr);
void (g_pointer_bit_unlock_and_set)(void *address, guint lock_bit, gpointer ptr, guintptr preserve_mask);
void (g_bit_lock)(volatile gint *address, gint lock_bit);
// Header /usr/include/glib-2.0/glib/gbookmarkfile.h
GBookmarkFile* (g_bookmark_file_new)(void);
void (g_bookmark_file_free)(GBookmarkFile *bookmark);
GBookmarkFile* (g_bookmark_file_copy)(GBookmarkFile *bookmark);
gboolean (g_bookmark_file_load_from_file)(GBookmarkFile *bookmark, const gchar *filename, GError **error);
gboolean (g_bookmark_file_load_from_data)(GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error);
gboolean (g_bookmark_file_load_from_data_dirs)(GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error);
gchar * (g_bookmark_file_to_data)(GBookmarkFile *bookmark, gsize *length, GError **error);
gboolean (g_bookmark_file_to_file)(GBookmarkFile *bookmark, const gchar *filename, GError **error);
void (g_bookmark_file_set_title)(GBookmarkFile *bookmark, const gchar *uri, const gchar *title);
gchar * (g_bookmark_file_get_title)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
void (g_bookmark_file_set_description)(GBookmarkFile *bookmark, const gchar *uri, const gchar *description);
gchar * (g_bookmark_file_get_description)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
void (g_bookmark_file_set_mime_type)(GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type);
gchar * (g_bookmark_file_get_mime_type)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
void (g_bookmark_file_set_groups)(GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length);
void (g_bookmark_file_add_group)(GBookmarkFile *bookmark, const gchar *uri, const gchar *group);
gboolean (g_bookmark_file_has_group)(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);
gchar ** (g_bookmark_file_get_groups)(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error);
void (g_bookmark_file_add_application)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec);
gboolean (g_bookmark_file_has_application)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);
gchar ** (g_bookmark_file_get_applications)(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error);
gboolean (g_bookmark_file_set_app_info)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error);
gboolean (g_bookmark_file_set_application_info)(GBookmarkFile *bookmark, const char *uri, const char *name, const char *exec, int count, GDateTime *stamp, GError **error);
gboolean (g_bookmark_file_get_app_info)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error);
gboolean (g_bookmark_file_get_application_info)(GBookmarkFile *bookmark, const char *uri, const char *name, char **exec, unsigned int *count, GDateTime **stamp, GError **error);
void (g_bookmark_file_set_is_private)(GBookmarkFile *bookmark, const gchar *uri, gboolean is_private);
gboolean (g_bookmark_file_get_is_private)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
void (g_bookmark_file_set_icon)(GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type);
gboolean (g_bookmark_file_get_icon)(GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error);
void (g_bookmark_file_set_added)(GBookmarkFile *bookmark, const gchar *uri, time_t added);
void (g_bookmark_file_set_added_date_time)(GBookmarkFile *bookmark, const char *uri, GDateTime *added);
time_t (g_bookmark_file_get_added)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
GDateTime* (g_bookmark_file_get_added_date_time)(GBookmarkFile *bookmark, const char *uri, GError **error);
void (g_bookmark_file_set_modified)(GBookmarkFile *bookmark, const gchar *uri, time_t modified);
void (g_bookmark_file_set_modified_date_time)(GBookmarkFile *bookmark, const char *uri, GDateTime *modified);
time_t (g_bookmark_file_get_modified)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
GDateTime* (g_bookmark_file_get_modified_date_time)(GBookmarkFile *bookmark, const char *uri, GError **error);
void (g_bookmark_file_set_visited)(GBookmarkFile *bookmark, const gchar *uri, time_t visited);
void (g_bookmark_file_set_visited_date_time)(GBookmarkFile *bookmark, const char *uri, GDateTime *visited);
time_t (g_bookmark_file_get_visited)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
GDateTime* (g_bookmark_file_get_visited_date_time)(GBookmarkFile *bookmark, const char *uri, GError **error);
gboolean (g_bookmark_file_has_item)(GBookmarkFile *bookmark, const gchar *uri);
gint (g_bookmark_file_get_size)(GBookmarkFile *bookmark);
gchar ** (g_bookmark_file_get_uris)(GBookmarkFile *bookmark, gsize *length);
gboolean (g_bookmark_file_remove_group)(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);
gboolean (g_bookmark_file_remove_application)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);
gboolean (g_bookmark_file_remove_item)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
gboolean (g_bookmark_file_move_item)(GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error);
GQuark (g_bookmark_file_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gbytes.h
GBytes * (g_bytes_new_take)(gpointer data, gsize size);
GBytes * (g_bytes_new_static)(gconstpointer data, gsize size);
GBytes * (g_bytes_new_with_free_func)(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);
GBytes * (g_bytes_new_from_bytes)(GBytes *bytes, gsize offset, gsize length);
gconstpointer (g_bytes_get_data)(GBytes *bytes, gsize *size);
gsize (g_bytes_get_size)(GBytes *bytes);
GBytes * (g_bytes_ref)(GBytes *bytes);
void (g_bytes_unref)(GBytes *bytes);
gpointer (g_bytes_unref_to_data)(GBytes *bytes, gsize *size);
GByteArray * (g_bytes_unref_to_array)(GBytes *bytes);
guint (g_bytes_hash)(gconstpointer bytes);
gboolean (g_bytes_equal)(gconstpointer bytes1, gconstpointer bytes2);
gint (g_bytes_compare)(gconstpointer bytes1, gconstpointer bytes2);
gconstpointer (g_bytes_get_region)(GBytes *bytes, gsize element_size, gsize offset, gsize n_elements);
GBytes * (g_bytes_new)(gconstpointer data, gsize size);
// Header /usr/include/glib-2.0/glib/gcharset.h
gchar * (g_get_codeset)(void);
gboolean (g_get_console_charset)(const char **charset);
const gchar * const * (g_get_language_names)(void);
const gchar * const * (g_get_language_names_with_category)(const gchar *category_name);
gchar ** (g_get_locale_variants)(const gchar *locale);
gboolean (g_get_charset)(const char **charset);
// Header /usr/include/glib-2.0/glib/gchecksum.h
GChecksum * (g_checksum_new)(GChecksumType checksum_type);
void (g_checksum_reset)(GChecksum *checksum);
GChecksum * (g_checksum_copy)(const GChecksum *checksum);
void (g_checksum_free)(GChecksum *checksum);
void (g_checksum_update)(GChecksum *checksum, const guchar *data, gssize length);
const gchar * (g_checksum_get_string)(GChecksum *checksum);
void (g_checksum_get_digest)(GChecksum *checksum, guint8 *buffer, gsize *digest_len);
gchar* (g_compute_checksum_for_data)(GChecksumType checksum_type, const guchar *data, gsize length);
gchar* (g_compute_checksum_for_string)(GChecksumType checksum_type, const gchar *str, gssize length);
gchar* (g_compute_checksum_for_bytes)(GChecksumType checksum_type, GBytes *data);
gssize (g_checksum_type_get_length)(GChecksumType checksum_type);
// Header /usr/include/glib-2.0/glib/gconvert.h
GIConv (g_iconv_open)(const gchar *to_codeset, const gchar *from_codeset);
gsize (g_iconv)(GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left);
gint (g_iconv_close)(GIConv converter);
gchar* (g_convert)(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_convert_with_iconv)(const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_convert_with_fallback)(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_locale_to_utf8)(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_locale_from_utf8)(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_filename_to_utf8)(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_filename_from_utf8)(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
gchar* (g_filename_from_uri)(const gchar *uri, gchar **hostname, GError **error);
gchar* (g_filename_to_uri)(const gchar *filename, const gchar *hostname, GError **error);
gchar* (g_filename_display_name)(const gchar *filename);
gboolean (g_get_filename_charsets)(const gchar ***filename_charsets);
gchar* (g_filename_display_basename)(const gchar *filename);
gchar** (g_uri_list_extract_uris)(const gchar *uri_list);
GQuark (g_convert_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gdataset.h
void (g_datalist_clear)(GData **datalist);
gpointer (g_datalist_id_get_data)(GData **datalist, GQuark key_id);
void (g_datalist_id_set_data_full)(GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);
void (g_datalist_id_remove_multiple)(GData **datalist, GQuark *keys, gsize n_keys);
gpointer (g_datalist_id_dup_data)(GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);
gboolean (g_datalist_id_replace_data)(GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);
gpointer (g_datalist_id_remove_no_notify)(GData **datalist, GQuark key_id);
void (g_datalist_foreach)(GData **datalist, GDataForeachFunc func, gpointer user_data);
void (g_datalist_set_flags)(GData **datalist, guint flags);
void (g_datalist_unset_flags)(GData **datalist, guint flags);
guint (g_datalist_get_flags)(GData **datalist);
void (g_dataset_destroy)(gconstpointer dataset_location);
gpointer (g_dataset_id_get_data)(gconstpointer dataset_location, GQuark key_id);
gpointer (g_datalist_get_data)(GData **datalist, const gchar *key);
void (g_dataset_id_set_data_full)(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);
gpointer (g_dataset_id_remove_no_notify)(gconstpointer dataset_location, GQuark key_id);
void (g_dataset_foreach)(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);
void (g_datalist_init)(GData **datalist);
// Header /usr/include/glib-2.0/glib/gdate.h
GDate* (g_date_new_dmy)(GDateDay day, GDateMonth month, GDateYear year);
GDate* (g_date_new_julian)(guint32 julian_day);
void (g_date_free)(GDate *date);
GDate* (g_date_copy)(const GDate *date);
gboolean (g_date_valid)(const GDate *date);
gboolean (g_date_valid_day)(GDateDay day);
gboolean (g_date_valid_month)(GDateMonth month);
gboolean (g_date_valid_year)(GDateYear year);
gboolean (g_date_valid_weekday)(GDateWeekday weekday);
gboolean (g_date_valid_julian)(guint32 julian_date);
gboolean (g_date_valid_dmy)(GDateDay day, GDateMonth month, GDateYear year);
GDateWeekday (g_date_get_weekday)(const GDate *date);
GDateMonth (g_date_get_month)(const GDate *date);
GDateYear (g_date_get_year)(const GDate *date);
GDateDay (g_date_get_day)(const GDate *date);
guint32 (g_date_get_julian)(const GDate *date);
guint (g_date_get_day_of_year)(const GDate *date);
guint (g_date_get_monday_week_of_year)(const GDate *date);
guint (g_date_get_sunday_week_of_year)(const GDate *date);
guint (g_date_get_iso8601_week_of_year)(const GDate *date);
void (g_date_clear)(GDate *date, guint n_dates);
void (g_date_set_parse)(GDate *date, const gchar *str);
void (g_date_set_time_t)(GDate *date, time_t timet);
void (g_date_set_time)(GDate *date, GTime time_);
void (g_date_set_day)(GDate *date, GDateDay day);
void (g_date_set_year)(GDate *date, GDateYear year);
void (g_date_set_dmy)(GDate *date, GDateDay day, GDateMonth month, GDateYear y);
void (g_date_set_julian)(GDate *date, guint32 julian_date);
gboolean (g_date_is_first_of_month)(const GDate *date);
gboolean (g_date_is_last_of_month)(const GDate *date);
void (g_date_add_days)(GDate *date, guint n_days);
void (g_date_subtract_days)(GDate *date, guint n_days);
void (g_date_add_months)(GDate *date, guint n_months);
void (g_date_subtract_months)(GDate *date, guint n_months);
void (g_date_add_years)(GDate *date, guint n_years);
void (g_date_subtract_years)(GDate *date, guint n_years);
gboolean (g_date_is_leap_year)(GDateYear year);
guint8 (g_date_get_days_in_month)(GDateMonth month, GDateYear year);
guint8 (g_date_get_monday_weeks_in_year)(GDateYear year);
guint8 (g_date_get_sunday_weeks_in_year)(GDateYear year);
gint (g_date_days_between)(const GDate *date1, const GDate *date2);
gint (g_date_compare)(const GDate *lhs, const GDate *rhs);
void (g_date_to_struct_tm)(const GDate *date, struct tm *tm);
void (g_date_clamp)(GDate *date, const GDate *min_date, const GDate *max_date);
void (g_date_order)(GDate *date1, GDate *date2);
gsize (g_date_strftime)(gchar *s, gsize slen, const gchar *format, const GDate *date);
GDate* (g_date_new)(void);
// Header /usr/include/glib-2.0/glib/gdatetime.h
GDateTime * (g_date_time_ref)(GDateTime *datetime);
GDateTime * (g_date_time_new_now)(GTimeZone *tz);
GDateTime * (g_date_time_new_now_local)(void);
GDateTime * (g_date_time_new_now_utc)(void);
GDateTime * (g_date_time_new_from_unix_local)(gint64 t);
GDateTime * (g_date_time_new_from_unix_utc)(gint64 t);
GDateTime * (g_date_time_new_from_unix_local_usec)(gint64 usecs);
GDateTime * (g_date_time_new_from_unix_utc_usec)(gint64 usecs);
GDateTime * (g_date_time_new_from_timeval_utc)(const GTimeVal *tv);
GDateTime * (g_date_time_new)(GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
GDateTime * (g_date_time_new_local)(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
GDateTime * (g_date_time_new_utc)(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
GDateTime * (g_date_time_add)(GDateTime *datetime, GTimeSpan timespan);
GDateTime * (g_date_time_add_years)(GDateTime *datetime, gint years);
GDateTime * (g_date_time_add_months)(GDateTime *datetime, gint months);
GDateTime * (g_date_time_add_weeks)(GDateTime *datetime, gint weeks);
GDateTime * (g_date_time_add_days)(GDateTime *datetime, gint days);
GDateTime * (g_date_time_add_hours)(GDateTime *datetime, gint hours);
GDateTime * (g_date_time_add_minutes)(GDateTime *datetime, gint minutes);
GDateTime * (g_date_time_add_seconds)(GDateTime *datetime, gdouble seconds);
GDateTime * (g_date_time_add_full)(GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds);
gint (g_date_time_compare)(gconstpointer dt1, gconstpointer dt2);
GTimeSpan (g_date_time_difference)(GDateTime *end, GDateTime *begin);
guint (g_date_time_hash)(gconstpointer datetime);
gboolean (g_date_time_equal)(gconstpointer dt1, gconstpointer dt2);
void (g_date_time_get_ymd)(GDateTime *datetime, gint *year, gint *month, gint *day);
gint (g_date_time_get_year)(GDateTime *datetime);
gint (g_date_time_get_month)(GDateTime *datetime);
gint (g_date_time_get_day_of_month)(GDateTime *datetime);
gint (g_date_time_get_week_numbering_year)(GDateTime *datetime);
gint (g_date_time_get_week_of_year)(GDateTime *datetime);
gint (g_date_time_get_day_of_week)(GDateTime *datetime);
gint (g_date_time_get_day_of_year)(GDateTime *datetime);
gint (g_date_time_get_hour)(GDateTime *datetime);
gint (g_date_time_get_minute)(GDateTime *datetime);
gint (g_date_time_get_second)(GDateTime *datetime);
gint (g_date_time_get_microsecond)(GDateTime *datetime);
gdouble (g_date_time_get_seconds)(GDateTime *datetime);
gint64 (g_date_time_to_unix)(GDateTime *datetime);
gint64 (g_date_time_to_unix_usec)(GDateTime *datetime);
GTimeZone * (g_date_time_get_timezone)(GDateTime *datetime);
const gchar * (g_date_time_get_timezone_abbreviation)(GDateTime *datetime);
gboolean (g_date_time_is_daylight_savings)(GDateTime *datetime);
GDateTime * (g_date_time_to_timezone)(GDateTime *datetime, GTimeZone *tz);
GDateTime * (g_date_time_to_local)(GDateTime *datetime);
GDateTime * (g_date_time_to_utc)(GDateTime *datetime);
gchar * (g_date_time_format)(GDateTime *datetime, const gchar *format);
gchar * (g_date_time_format_iso8601)(GDateTime *datetime);
void (g_date_time_unref)(GDateTime *datetime);
// Header /usr/include/glib-2.0/glib/gdir.h
const gchar * (g_dir_read_name)(GDir *dir);
void (g_dir_rewind)(GDir *dir);
void (g_dir_close)(GDir *dir);
GDir * (g_dir_ref)(GDir *dir);
void (g_dir_unref)(GDir *dir);
GDir * (g_dir_open)(const gchar *path, guint flags, GError **error);
// Header /usr/include/glib-2.0/glib/genviron.h
gboolean (g_setenv)(const gchar *variable, const gchar *value, gboolean overwrite);
void (g_unsetenv)(const gchar *variable);
gchar ** (g_listenv)(void);
gchar ** (g_get_environ)(void);
const gchar * (g_environ_getenv)(gchar **envp, const gchar *variable);
gchar ** (g_environ_setenv)(gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite);
gchar ** (g_environ_unsetenv)(gchar **envp, const gchar *variable);
const gchar * (g_getenv)(const gchar *variable);
// Header /usr/include/glib-2.0/glib/gerror.h
GQuark (g_error_domain_register)(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear);
GError* (g_error_new_literal)(GQuark domain, gint code, const gchar *message);
GError* (g_error_new_valist)(GQuark domain, gint code, const gchar *format, va_list args);
void (g_error_free)(GError *error);
GError* (g_error_copy)(const GError *error);
gboolean (g_error_matches)(const GError *error, GQuark domain, gint code);
void (g_set_error_literal)(GError **err, GQuark domain, gint code, const gchar *message);
void (g_propagate_error)(GError **dest, GError *src);
void (g_clear_error)(GError **err);
void (g_prefix_error_literal)(GError **err, const gchar *prefix);
GQuark (g_error_domain_register_static)(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear);
// Header /usr/include/glib-2.0/glib/gfileutils.h
GQuark (g_file_error_quark)(void);
GFileError (g_file_error_from_errno)(gint err_no);
gboolean (g_file_test)(const gchar *filename, GFileTest test);
gboolean (g_file_get_contents)(const gchar *filename, gchar **contents, gsize *length, GError **error);
gboolean (g_file_set_contents)(const gchar *filename, const gchar *contents, gssize length, GError **error);
gchar* (g_mkdtemp)(gchar *tmpl);
gchar* (g_mkdtemp_full)(gchar *tmpl, gint mode);
gint (g_mkstemp)(gchar *tmpl);
gint (g_mkstemp_full)(gchar *tmpl, gint flags, gint mode);
gint (g_file_open_tmp)(const gchar *tmpl, gchar **name_used, GError **error);
gchar* (g_dir_make_tmp)(const gchar *tmpl, GError **error);
gchar* (g_build_pathv)(const gchar *separator, gchar **args);
gchar* (g_build_filenamev)(gchar **args);
gchar* (g_build_filename_valist)(const gchar *first_element, va_list *args);
gboolean (g_path_is_absolute)(const gchar *file_name);
const gchar* (g_path_skip_root)(const gchar *file_name);
const gchar* (g_basename)(const gchar *file_name);
gchar* (g_get_current_dir)(void);
gchar* (g_path_get_basename)(const gchar *file_name);
gchar* (g_path_get_dirname)(const gchar *file_name);
gchar* (g_canonicalize_filename)(const gchar *filename, const gchar *relative_to);
// Header /usr/include/glib-2.0/glib/ggettext.h
const gchar* (g_dgettext)(const gchar *domain, const gchar *msgid);
const gchar* (g_dcgettext)(const gchar *domain, const gchar *msgid, gint category);
const gchar* (g_dngettext)(const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n);
const gchar* (g_dpgettext)(const gchar *domain, const gchar *msgctxtid, gsize msgidoffset);
const gchar* (g_dpgettext2)(const gchar *domain, const gchar *context, const gchar *msgid);
const gchar* (g_strip_context)(const gchar *msgid, const gchar *msgval);
// Header /usr/include/glib-2.0/glib/ghash.h
GHashTable* (g_hash_table_new_full)(GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);
GHashTable* (g_hash_table_new_similar)(GHashTable *other_hash_table);
void (g_hash_table_destroy)(GHashTable *hash_table);
gboolean (g_hash_table_insert)(GHashTable *hash_table, gpointer key, gpointer value);
gboolean (g_hash_table_replace)(GHashTable *hash_table, gpointer key, gpointer value);
gboolean (g_hash_table_add)(GHashTable *hash_table, gpointer key);
gboolean (g_hash_table_remove)(GHashTable *hash_table, gconstpointer key);
void (g_hash_table_remove_all)(GHashTable *hash_table);
gboolean (g_hash_table_steal)(GHashTable *hash_table, gconstpointer key);
gboolean (g_hash_table_steal_extended)(GHashTable *hash_table, gconstpointer lookup_key, gpointer *stolen_key, gpointer *stolen_value);
void (g_hash_table_steal_all)(GHashTable *hash_table);
GPtrArray * (g_hash_table_steal_all_keys)(GHashTable *hash_table);
GPtrArray * (g_hash_table_steal_all_values)(GHashTable *hash_table);
gpointer (g_hash_table_lookup)(GHashTable *hash_table, gconstpointer key);
gboolean (g_hash_table_contains)(GHashTable *hash_table, gconstpointer key);
gboolean (g_hash_table_lookup_extended)(GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);
void (g_hash_table_foreach)(GHashTable *hash_table, GHFunc func, gpointer user_data);
gpointer (g_hash_table_find)(GHashTable *hash_table, GHRFunc predicate, gpointer user_data);
guint (g_hash_table_foreach_remove)(GHashTable *hash_table, GHRFunc func, gpointer user_data);
guint (g_hash_table_foreach_steal)(GHashTable *hash_table, GHRFunc func, gpointer user_data);
guint (g_hash_table_size)(GHashTable *hash_table);
GList * (g_hash_table_get_keys)(GHashTable *hash_table);
GList * (g_hash_table_get_values)(GHashTable *hash_table);
gpointer * (g_hash_table_get_keys_as_array)(GHashTable *hash_table, guint *length);
GPtrArray * (g_hash_table_get_keys_as_ptr_array)(GHashTable *hash_table);
GPtrArray * (g_hash_table_get_values_as_ptr_array)(GHashTable *hash_table);
void (g_hash_table_iter_init)(GHashTableIter *iter, GHashTable *hash_table);
gboolean (g_hash_table_iter_next)(GHashTableIter *iter, gpointer *key, gpointer *value);
GHashTable* (g_hash_table_iter_get_hash_table)(GHashTableIter *iter);
void (g_hash_table_iter_remove)(GHashTableIter *iter);
void (g_hash_table_iter_replace)(GHashTableIter *iter, gpointer value);
void (g_hash_table_iter_steal)(GHashTableIter *iter);
GHashTable* (g_hash_table_ref)(GHashTable *hash_table);
void (g_hash_table_unref)(GHashTable *hash_table);
gboolean (g_str_equal)(gconstpointer v1, gconstpointer v2);
guint (g_str_hash)(gconstpointer v);
gboolean (g_int_equal)(gconstpointer v1, gconstpointer v2);
guint (g_int_hash)(gconstpointer v);
gboolean (g_int64_equal)(gconstpointer v1, gconstpointer v2);
guint (g_int64_hash)(gconstpointer v);
gboolean (g_double_equal)(gconstpointer v1, gconstpointer v2);
guint (g_double_hash)(gconstpointer v);
guint (g_direct_hash)(gconstpointer v);
gboolean (g_direct_equal)(gconstpointer v1, gconstpointer v2);
GHashTable* (g_hash_table_new)(GHashFunc hash_func, GEqualFunc key_equal_func);
// Header /usr/include/glib-2.0/glib/ghmac.h
GHmac * (g_hmac_copy)(const GHmac *hmac);
GHmac * (g_hmac_ref)(GHmac *hmac);
void (g_hmac_unref)(GHmac *hmac);
void (g_hmac_update)(GHmac *hmac, const guchar *data, gssize length);
const gchar * (g_hmac_get_string)(GHmac *hmac);
void (g_hmac_get_digest)(GHmac *hmac, guint8 *buffer, gsize *digest_len);
gchar* (g_compute_hmac_for_data)(GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length);
gchar* (g_compute_hmac_for_string)(GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length);
gchar* (g_compute_hmac_for_bytes)(GChecksumType digest_type, GBytes *key, GBytes *data);
GHmac * (g_hmac_new)(GChecksumType digest_type, const guchar *key, gsize key_len);
// Header /usr/include/glib-2.0/glib/ghook.h
void (g_hook_list_clear)(GHookList *hook_list);
GHook* (g_hook_alloc)(GHookList *hook_list);
void (g_hook_free)(GHookList *hook_list, GHook *hook);
GHook * (g_hook_ref)(GHookList *hook_list, GHook *hook);
void (g_hook_unref)(GHookList *hook_list, GHook *hook);
gboolean (g_hook_destroy)(GHookList *hook_list, gulong hook_id);
void (g_hook_destroy_link)(GHookList *hook_list, GHook *hook);
void (g_hook_prepend)(GHookList *hook_list, GHook *hook);
void (g_hook_insert_before)(GHookList *hook_list, GHook *sibling, GHook *hook);
void (g_hook_insert_sorted)(GHookList *hook_list, GHook *hook, GHookCompareFunc func);
GHook* (g_hook_get)(GHookList *hook_list, gulong hook_id);
GHook* (g_hook_find)(GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);
GHook* (g_hook_find_data)(GHookList *hook_list, gboolean need_valids, gpointer data);
GHook* (g_hook_find_func)(GHookList *hook_list, gboolean need_valids, gpointer func);
GHook* (g_hook_find_func_data)(GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data);
GHook* (g_hook_first_valid)(GHookList *hook_list, gboolean may_be_in_call);
GHook* (g_hook_next_valid)(GHookList *hook_list, GHook *hook, gboolean may_be_in_call);
gint (g_hook_compare_ids)(GHook *new_hook, GHook *sibling);
void (g_hook_list_invoke)(GHookList *hook_list, gboolean may_recurse);
void (g_hook_list_invoke_check)(GHookList *hook_list, gboolean may_recurse);
void (g_hook_list_marshal)(GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);
void (g_hook_list_marshal_check)(GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);
void (g_hook_list_init)(GHookList *hook_list, guint hook_size);
// Header /usr/include/glib-2.0/glib/ghostutils.h
gboolean (g_hostname_is_ascii_encoded)(const gchar *hostname);
gboolean (g_hostname_is_ip_address)(const gchar *hostname);
gchar* (g_hostname_to_ascii)(const gchar *hostname);
gchar* (g_hostname_to_unicode)(const gchar *hostname);
gboolean (g_hostname_is_non_ascii)(const gchar *hostname);
// Header /usr/include/glib-2.0/glib/giochannel.h
GIOChannel* (g_io_channel_ref)(GIOChannel *channel);
void (g_io_channel_unref)(GIOChannel *channel);
GIOError (g_io_channel_read)(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read);
GIOError (g_io_channel_write)(GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written);
GIOError (g_io_channel_seek)(GIOChannel *channel, gint64 offset, GSeekType type);
void (g_io_channel_close)(GIOChannel *channel);
GIOStatus (g_io_channel_shutdown)(GIOChannel *channel, gboolean flush, GError **err);
guint (g_io_add_watch_full)(GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);
GSource * (g_io_create_watch)(GIOChannel *channel, GIOCondition condition);
guint (g_io_add_watch)(GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data);
void (g_io_channel_set_buffer_size)(GIOChannel *channel, gsize size);
gsize (g_io_channel_get_buffer_size)(GIOChannel *channel);
GIOCondition (g_io_channel_get_buffer_condition)(GIOChannel *channel);
GIOStatus (g_io_channel_set_flags)(GIOChannel *channel, GIOFlags flags, GError **error);
GIOFlags (g_io_channel_get_flags)(GIOChannel *channel);
void (g_io_channel_set_line_term)(GIOChannel *channel, const gchar *line_term, gint length);
const gchar * (g_io_channel_get_line_term)(GIOChannel *channel, gint *length);
void (g_io_channel_set_buffered)(GIOChannel *channel, gboolean buffered);
gboolean (g_io_channel_get_buffered)(GIOChannel *channel);
GIOStatus (g_io_channel_set_encoding)(GIOChannel *channel, const gchar *encoding, GError **error);
const gchar * (g_io_channel_get_encoding)(GIOChannel *channel);
void (g_io_channel_set_close_on_unref)(GIOChannel *channel, gboolean do_close);
gboolean (g_io_channel_get_close_on_unref)(GIOChannel *channel);
GIOStatus (g_io_channel_flush)(GIOChannel *channel, GError **error);
GIOStatus (g_io_channel_read_line)(GIOChannel *channel, gchar **str_return, gsize *length, gsize *terminator_pos, GError **error);
GIOStatus (g_io_channel_read_line_string)(GIOChannel *channel, GString *buffer, gsize *terminator_pos, GError **error);
GIOStatus (g_io_channel_read_to_end)(GIOChannel *channel, gchar **str_return, gsize *length, GError **error);
GIOStatus (g_io_channel_read_chars)(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **error);
GIOStatus (g_io_channel_read_unichar)(GIOChannel *channel, gunichar *thechar, GError **error);
GIOStatus (g_io_channel_write_chars)(GIOChannel *channel, const gchar *buf, gssize count, gsize *bytes_written, GError **error);
GIOStatus (g_io_channel_write_unichar)(GIOChannel *channel, gunichar thechar, GError **error);
GIOStatus (g_io_channel_seek_position)(GIOChannel *channel, gint64 offset, GSeekType type, GError **error);
GIOChannel* (g_io_channel_new_file)(const gchar *filename, const gchar *mode, GError **error);
GQuark (g_io_channel_error_quark)(void);
GIOChannelError (g_io_channel_error_from_errno)(gint en);
GIOChannel* (g_io_channel_unix_new)(int fd);
gint (g_io_channel_unix_get_fd)(GIOChannel *channel);
void (g_io_channel_win32_make_pollfd)(GIOChannel *channel, GIOCondition condition, GPollFD *fd);
gint (g_io_channel_win32_poll)(GPollFD *fds, gint n_fds, gint timeout_);
GIOChannel* (g_io_channel_win32_new_messages)(gsize hwnd);
GIOChannel* (g_io_channel_win32_new_fd)(gint fd);
gint (g_io_channel_win32_get_fd)(GIOChannel *channel);
GIOChannel* (g_io_channel_win32_new_socket)(gint socket);
GIOChannel* (g_io_channel_win32_new_stream_socket)(gint socket);
void (g_io_channel_win32_set_debug)(GIOChannel *channel, gboolean flag);
void (g_io_channel_init)(GIOChannel *channel);
// Header /usr/include/glib-2.0/glib/gkeyfile.h
GKeyFile* (g_key_file_new)(void);
GKeyFile* (g_key_file_ref)(GKeyFile *key_file);
void (g_key_file_unref)(GKeyFile *key_file);
void (g_key_file_free)(GKeyFile *key_file);
void (g_key_file_set_list_separator)(GKeyFile *key_file, gchar separator);
gboolean (g_key_file_load_from_file)(GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error);
gboolean (g_key_file_load_from_data)(GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error);
gboolean (g_key_file_load_from_bytes)(GKeyFile *key_file, GBytes *bytes, GKeyFileFlags flags, GError **error);
gboolean (g_key_file_load_from_dirs)(GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error);
gboolean (g_key_file_load_from_data_dirs)(GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error);
gchar* (g_key_file_to_data)(GKeyFile *key_file, gsize *length, GError **error);
gboolean (g_key_file_save_to_file)(GKeyFile *key_file, const gchar *filename, GError **error);
gchar* (g_key_file_get_start_group)(GKeyFile *key_file);
gchar** (g_key_file_get_groups)(GKeyFile *key_file, gsize *length);
gchar** (g_key_file_get_keys)(GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error);
gboolean (g_key_file_has_group)(GKeyFile *key_file, const gchar *group_name);
gboolean (g_key_file_has_key)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
gchar* (g_key_file_get_value)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_value)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value);
gchar* (g_key_file_get_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string);
gchar* (g_key_file_get_locale_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error);
gchar* (g_key_file_get_locale_for_key)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale);
void (g_key_file_set_locale_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string);
gboolean (g_key_file_get_boolean)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_boolean)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value);
gint (g_key_file_get_integer)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_integer)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value);
gint64 (g_key_file_get_int64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_int64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value);
guint64 (g_key_file_get_uint64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_uint64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value);
gdouble (g_key_file_get_double)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
void (g_key_file_set_double)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value);
gchar** (g_key_file_get_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
void (g_key_file_set_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar * const list[], gsize length);
gchar** (g_key_file_get_locale_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error);
void (g_key_file_set_locale_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar * const list[], gsize length);
gboolean* (g_key_file_get_boolean_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
void (g_key_file_set_boolean_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length);
gint* (g_key_file_get_integer_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
void (g_key_file_set_double_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length);
gdouble* (g_key_file_get_double_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
void (g_key_file_set_integer_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length);
gboolean (g_key_file_set_comment)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error);
gchar* (g_key_file_get_comment)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
gboolean (g_key_file_remove_comment)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
gboolean (g_key_file_remove_key)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
gboolean (g_key_file_remove_group)(GKeyFile *key_file, const gchar *group_name, GError **error);
GQuark (g_key_file_error_quark)(void);
// Header /usr/include/glib-2.0/glib/glist.h
void (g_list_free)(GList *list);
void (g_list_free_1)(GList *list);
void (g_list_free_full)(GList *list, GDestroyNotify free_func);
GList* (g_list_append)(GList *list, gpointer data);
GList* (g_list_prepend)(GList *list, gpointer data);
GList* (g_list_insert)(GList *list, gpointer data, gint position);
GList* (g_list_insert_sorted)(GList *list, gpointer data, GCompareFunc func);
GList* (g_list_insert_sorted_with_data)(GList *list, gpointer data, GCompareDataFunc func, gpointer user_data);
GList* (g_list_insert_before)(GList *list, GList *sibling, gpointer data);
GList* (g_list_insert_before_link)(GList *list, GList *sibling, GList *link_);
GList* (g_list_concat)(GList *list1, GList *list2);
GList* (g_list_remove)(GList *list, gconstpointer data);
GList* (g_list_remove_all)(GList *list, gconstpointer data);
GList* (g_list_remove_link)(GList *list, GList *llink);
GList* (g_list_delete_link)(GList *list, GList *link_);
GList* (g_list_reverse)(GList *list);
GList* (g_list_copy)(GList *list);
GList* (g_list_copy_deep)(GList *list, GCopyFunc func, gpointer user_data);
GList* (g_list_nth)(GList *list, guint n);
GList* (g_list_nth_prev)(GList *list, guint n);
GList* (g_list_find)(GList *list, gconstpointer data);
GList* (g_list_find_custom)(GList *list, gconstpointer data, GCompareFunc func);
gint (g_list_position)(GList *list, GList *llink);
gint (g_list_index)(GList *list, gconstpointer data);
GList* (g_list_last)(GList *list);
GList* (g_list_first)(GList *list);
guint (g_list_length)(GList *list);
void (g_list_foreach)(GList *list, GFunc func, gpointer user_data);
GList* (g_list_sort)(GList *list, GCompareFunc compare_func);
GList* (g_list_sort_with_data)(GList *list, GCompareDataFunc compare_func, gpointer user_data);
gpointer (g_list_nth_data)(GList *list, guint n);
void (g_clear_list)(GList **list_ptr, GDestroyNotify destroy);
GList* (g_list_alloc)(void);
// Header /usr/include/glib-2.0/glib/gmacros.h
// Header /usr/include/glib-2.0/glib/gmain.h
void (g_main_context_unref)(GMainContext *context);
GMainContext* (g_main_context_default)(void);
gboolean (g_main_context_iteration)(GMainContext *context, gboolean may_block);
gboolean (g_main_context_pending)(GMainContext *context);
GSource* (g_main_context_find_source_by_id)(GMainContext *context, guint source_id);
GSource* (g_main_context_find_source_by_user_data)(GMainContext *context, gpointer user_data);
GSource* (g_main_context_find_source_by_funcs_user_data)(GMainContext *context, GSourceFuncs *funcs, gpointer user_data);
void (g_main_context_wakeup)(GMainContext *context);
gboolean (g_main_context_acquire)(GMainContext *context);
void (g_main_context_release)(GMainContext *context);
gboolean (g_main_context_is_owner)(GMainContext *context);
gboolean (g_main_context_wait)(GMainContext *context, GCond *cond, GMutex *mutex);
gboolean (g_main_context_prepare)(GMainContext *context, gint *priority);
gint (g_main_context_query)(GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds);
gboolean (g_main_context_check)(GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds);
void (g_main_context_dispatch)(GMainContext *context);
void (g_main_context_set_poll_func)(GMainContext *context, GPollFunc func);
GPollFunc (g_main_context_get_poll_func)(GMainContext *context);
void (g_main_context_add_poll)(GMainContext *context, GPollFD *fd, gint priority);
void (g_main_context_remove_poll)(GMainContext *context, GPollFD *fd);
gint (g_main_depth)(void);
GSource* (g_main_current_source)(void);
void (g_main_context_push_thread_default)(GMainContext *context);
void (g_main_context_pop_thread_default)(GMainContext *context);
GMainContext* (g_main_context_get_thread_default)(void);
GMainContext* (g_main_context_ref_thread_default)(void);
void (g_main_loop_run)(GMainLoop *loop);
void (g_main_loop_quit)(GMainLoop *loop);
GMainLoop* (g_main_loop_ref)(GMainLoop *loop);
void (g_main_loop_unref)(GMainLoop *loop);
gboolean (g_main_loop_is_running)(GMainLoop *loop);
GMainContext* (g_main_loop_get_context)(GMainLoop *loop);
GSource* (g_source_new)(GSourceFuncs *source_funcs, guint struct_size);
void (g_source_unref)(GSource *source);
guint (g_source_attach)(GSource *source, GMainContext *context);
void (g_source_destroy)(GSource *source);
void (g_source_set_priority)(GSource *source, gint priority);
gint (g_source_get_priority)(GSource *source);
void (g_source_set_can_recurse)(GSource *source, gboolean can_recurse);
gboolean (g_source_get_can_recurse)(GSource *source);
guint (g_source_get_id)(GSource *source);
GMainContext* (g_source_get_context)(GSource *source);
void (g_source_set_callback)(GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify);
void (g_source_set_funcs)(GSource *source, GSourceFuncs *funcs);
gboolean (g_source_is_destroyed)(GSource *source);
void (g_source_set_name)(GSource *source, const char *name);
void (g_source_set_static_name)(GSource *source, const char *name);
const char * (g_source_get_name)(GSource *source);
void (g_source_set_name_by_id)(guint tag, const char *name);
void (g_source_set_ready_time)(GSource *source, gint64 ready_time);
gint64 (g_source_get_ready_time)(GSource *source);
gpointer (g_source_add_unix_fd)(GSource *source, gint fd, GIOCondition events);
void (g_source_modify_unix_fd)(GSource *source, gpointer tag, GIOCondition new_events);
void (g_source_remove_unix_fd)(GSource *source, gpointer tag);
GIOCondition (g_source_query_unix_fd)(GSource *source, gpointer tag);
void (g_source_set_callback_indirect)(GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs);
void (g_source_add_poll)(GSource *source, GPollFD *fd);
void (g_source_remove_poll)(GSource *source, GPollFD *fd);
void (g_source_add_child_source)(GSource *source, GSource *child_source);
void (g_source_remove_child_source)(GSource *source, GSource *child_source);
GSource* (g_idle_source_new)(void);
GSource* (g_child_watch_source_new)(GPid pid);
GSource* (g_timeout_source_new)(guint interval);
GSource* (g_timeout_source_new_seconds)(guint interval);
gint64 (g_get_real_time)(void);
gboolean (g_source_remove)(guint tag);
gboolean (g_source_remove_by_user_data)(gpointer user_data);
gboolean (g_source_remove_by_funcs_user_data)(GSourceFuncs *funcs, gpointer user_data);
void (g_clear_handle_id)(guint *tag_ptr, GClearHandleFunc clear_func);
guint (g_timeout_add_full)(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);
guint (g_timeout_add)(guint interval, GSourceFunc function, gpointer data);
guint (g_timeout_add_once)(guint interval, GSourceOnceFunc function, gpointer data);
guint (g_timeout_add_seconds_full)(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);
guint (g_timeout_add_seconds)(guint interval, GSourceFunc function, gpointer data);
guint (g_timeout_add_seconds_once)(guint interval, GSourceOnceFunc function, gpointer data);
guint (g_child_watch_add_full)(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);
guint (g_child_watch_add)(GPid pid, GChildWatchFunc function, gpointer data);
guint (g_idle_add)(GSourceFunc function, gpointer data);
guint (g_idle_add_full)(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);
guint (g_idle_add_once)(GSourceOnceFunc function, gpointer data);
gboolean (g_idle_remove_by_data)(gpointer data);
void (g_main_context_invoke_full)(GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);
void (g_main_context_invoke)(GMainContext *context, GSourceFunc function, gpointer data);
GMainContext* (g_main_context_new)(void);
// Header /usr/include/glib-2.0/glib/gmappedfile.h
GMappedFile* (g_mapped_file_new_from_fd)(gint fd, gboolean writable, GError **error);
gsize (g_mapped_file_get_length)(GMappedFile *file);
gchar* (g_mapped_file_get_contents)(GMappedFile *file);
GBytes * (g_mapped_file_get_bytes)(GMappedFile *file);
GMappedFile* (g_mapped_file_ref)(GMappedFile *file);
void (g_mapped_file_unref)(GMappedFile *file);
void (g_mapped_file_free)(GMappedFile *file);
GMappedFile* (g_mapped_file_new)(const gchar *filename, gboolean writable, GError **error);
// Header /usr/include/glib-2.0/glib/gmarkup.h
GMarkupParseContext* (g_markup_parse_context_new)(const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);
GMarkupParseContext* (g_markup_parse_context_ref)(GMarkupParseContext *context);
void (g_markup_parse_context_unref)(GMarkupParseContext *context);
void (g_markup_parse_context_free)(GMarkupParseContext *context);
gboolean (g_markup_parse_context_parse)(GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error);
void (g_markup_parse_context_push)(GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data);
gpointer (g_markup_parse_context_pop)(GMarkupParseContext *context);
gboolean (g_markup_parse_context_end_parse)(GMarkupParseContext *context, GError **error);
const gchar * (g_markup_parse_context_get_element)(GMarkupParseContext *context);
const GSList * (g_markup_parse_context_get_element_stack)(GMarkupParseContext *context);
void (g_markup_parse_context_get_position)(GMarkupParseContext *context, gint *line_number, gint *char_number);
gpointer (g_markup_parse_context_get_user_data)(GMarkupParseContext *context);
gchar* (g_markup_escape_text)(const gchar *text, gssize length);
gchar* (g_markup_vprintf_escaped)(const char *format, va_list args);
GQuark (g_markup_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gmem.h
void (g_free_sized)(gpointer mem, size_t size);
void (g_clear_pointer)(gpointer *pp, GDestroyNotify destroy);
gpointer (g_malloc)(gsize n_bytes);
gpointer (g_malloc0)(gsize n_bytes);
gpointer (g_realloc)(gpointer mem, gsize n_bytes);
gpointer (g_try_malloc)(gsize n_bytes);
gpointer (g_try_malloc0)(gsize n_bytes);
gpointer (g_try_realloc)(gpointer mem, gsize n_bytes);
gpointer (g_malloc_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_malloc0_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_realloc_n)(gpointer mem, gsize n_blocks, gsize n_block_bytes);
gpointer (g_try_malloc_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_try_malloc0_n)(gsize n_blocks, gsize n_block_bytes);
gpointer (g_try_realloc_n)(gpointer mem, gsize n_blocks, gsize n_block_bytes);
gpointer (g_aligned_alloc)(gsize n_blocks, gsize n_block_bytes, gsize alignment);
gpointer (g_aligned_alloc0)(gsize n_blocks, gsize n_block_bytes, gsize alignment);
void (g_aligned_free)(gpointer mem);
void (g_aligned_free_sized)(gpointer mem, size_t alignment, size_t size);
void (g_mem_set_vtable)(GMemVTable *vtable);
gboolean (g_mem_is_system_malloc)(void);
void (g_mem_profile)(void);
void (g_free)(gpointer mem);
// Header /usr/include/glib-2.0/glib/gmessages.h
guint (g_log_set_handler)(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);
guint (g_log_set_handler_full)(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy);
void (g_log_default_handler)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data);
GLogFunc (g_log_set_default_handler)(GLogFunc log_func, gpointer user_data);
void (g_logv)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, va_list args);
GLogLevelFlags (g_log_set_fatal_mask)(const gchar *log_domain, GLogLevelFlags fatal_mask);
GLogLevelFlags (g_log_set_always_fatal)(GLogLevelFlags fatal_mask);
void (g_log_structured_array)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields);
void (g_log_variant)(const gchar *log_domain, GLogLevelFlags log_level, GVariant *fields);
void (g_log_set_writer_func)(GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free);
gboolean (g_log_writer_supports_color)(gint output_fd);
gboolean (g_log_writer_is_journald)(gint output_fd);
gchar* (g_log_writer_format_fields)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gboolean use_color);
GLogWriterOutput (g_log_writer_syslog)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
GLogWriterOutput (g_log_writer_journald)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
GLogWriterOutput (g_log_writer_standard_streams)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
GLogWriterOutput (g_log_writer_default)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
void (g_log_writer_default_set_use_stderr)(gboolean use_stderr);
gboolean (g_log_writer_default_would_drop)(GLogLevelFlags log_level, const char *log_domain);
void (g_log_writer_default_set_debug_domains)(const gchar * const *domains);
gboolean (g_log_get_debug_enabled)(void);
void (g_log_set_debug_enabled)(gboolean enabled);
void (_g_log_fallback_handler)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data);
void (g_return_if_fail_warning)(const char *log_domain, const char *pretty_function, const char *expression);
void (g_warn_message)(const char *domain, const char *file, int line, const char *func, const char *warnexpr);
void (g_assert_warning)(const char *log_domain, const char *file, const int line, const char *pretty_function, const char *expression);
GPrintFunc (g_set_print_handler)(GPrintFunc func);
GPrintFunc (g_set_printerr_handler)(GPrintFunc func);
gsize (g_printf_string_upper_bound)(const gchar* format, va_list args);
// Header /usr/include/glib-2.0/glib/gnode.h
void (g_node_destroy)(GNode *root);
void (g_node_unlink)(GNode *node);
GNode* (g_node_copy_deep)(GNode *node, GCopyFunc copy_func, gpointer data);
GNode* (g_node_copy)(GNode *node);
GNode* (g_node_insert)(GNode *parent, gint position, GNode *node);
GNode* (g_node_insert_before)(GNode *parent, GNode *sibling, GNode *node);
GNode* (g_node_insert_after)(GNode *parent, GNode *sibling, GNode *node);
GNode* (g_node_prepend)(GNode *parent, GNode *node);
guint (g_node_n_nodes)(GNode *root, GTraverseFlags flags);
GNode* (g_node_get_root)(GNode *node);
gboolean (g_node_is_ancestor)(GNode *node, GNode *descendant);
guint (g_node_depth)(GNode *node);
GNode* (g_node_find)(GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data);
void (g_node_traverse)(GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);
guint (g_node_max_height)(GNode *root);
void (g_node_children_foreach)(GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);
void (g_node_reverse_children)(GNode *node);
guint (g_node_n_children)(GNode *node);
GNode* (g_node_nth_child)(GNode *node, guint n);
GNode* (g_node_last_child)(GNode *node);
GNode* (g_node_find_child)(GNode *node, GTraverseFlags flags, gpointer data);
gint (g_node_child_position)(GNode *node, GNode *child);
gint (g_node_child_index)(GNode *node, gpointer data);
GNode* (g_node_first_sibling)(GNode *node);
GNode* (g_node_last_sibling)(GNode *node);
GNode* (g_node_new)(gpointer data);
// Header /usr/include/glib-2.0/glib/goption.h
GOptionContext* (g_option_context_new)(const gchar *parameter_string);
void (g_option_context_set_summary)(GOptionContext *context, const gchar *summary);
const gchar * (g_option_context_get_summary)(GOptionContext *context);
void (g_option_context_set_description)(GOptionContext *context, const gchar *description);
const gchar * (g_option_context_get_description)(GOptionContext *context);
void (g_option_context_free)(GOptionContext *context);
void (g_option_context_set_help_enabled)(GOptionContext *context, gboolean help_enabled);
gboolean (g_option_context_get_help_enabled)(GOptionContext *context);
void (g_option_context_set_ignore_unknown_options)(GOptionContext *context, gboolean ignore_unknown);
gboolean (g_option_context_get_ignore_unknown_options)(GOptionContext *context);
void (g_option_context_set_strict_posix)(GOptionContext *context, gboolean strict_posix);
gboolean (g_option_context_get_strict_posix)(GOptionContext *context);
void (g_option_context_add_main_entries)(GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain);
gboolean (g_option_context_parse)(GOptionContext *context, gint *argc, gchar ***argv, GError **error);
gboolean (g_option_context_parse_strv)(GOptionContext *context, gchar ***arguments, GError **error);
void (g_option_context_set_translate_func)(GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);
void (g_option_context_set_translation_domain)(GOptionContext *context, const gchar *domain);
void (g_option_context_add_group)(GOptionContext *context, GOptionGroup *group);
void (g_option_context_set_main_group)(GOptionContext *context, GOptionGroup *group);
GOptionGroup* (g_option_context_get_main_group)(GOptionContext *context);
gchar* (g_option_context_get_help)(GOptionContext *context, gboolean main_help, GOptionGroup *group);
GOptionGroup* (g_option_group_new)(const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy);
void (g_option_group_set_parse_hooks)(GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func);
void (g_option_group_set_error_hook)(GOptionGroup *group, GOptionErrorFunc error_func);
void (g_option_group_free)(GOptionGroup *group);
GOptionGroup* (g_option_group_ref)(GOptionGroup *group);
void (g_option_group_unref)(GOptionGroup *group);
void (g_option_group_add_entries)(GOptionGroup *group, const GOptionEntry *entries);
void (g_option_group_set_translate_func)(GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);
void (g_option_group_set_translation_domain)(GOptionGroup *group, const gchar *domain);
GQuark (g_option_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gpathbuf.h
GPathBuf * (g_path_buf_new_from_path)(const char *path);
GPathBuf * (g_path_buf_init)(GPathBuf *buf);
GPathBuf * (g_path_buf_init_from_path)(GPathBuf *buf, const char *path);
void (g_path_buf_clear)(GPathBuf *buf);
char * (g_path_buf_clear_to_path)(GPathBuf *buf);
void (g_path_buf_free)(GPathBuf *buf);
char * (g_path_buf_free_to_path)(GPathBuf *buf);
GPathBuf * (g_path_buf_copy)(GPathBuf *buf);
GPathBuf * (g_path_buf_push)(GPathBuf *buf, const char *path);
gboolean (g_path_buf_pop)(GPathBuf *buf);
gboolean (g_path_buf_set_filename)(GPathBuf *buf, const char *file_name);
gboolean (g_path_buf_set_extension)(GPathBuf *buf, const char *extension);
char * (g_path_buf_to_path)(GPathBuf *buf);
gboolean (g_path_buf_equal)(gconstpointer v1, gconstpointer v2);
GPathBuf * (g_path_buf_new)(void);
// Header /usr/include/glib-2.0/glib/gpattern.h
void (g_pattern_spec_free)(GPatternSpec *pspec);
GPatternSpec* (g_pattern_spec_copy)(GPatternSpec *pspec);
gboolean (g_pattern_spec_equal)(GPatternSpec *pspec1, GPatternSpec *pspec2);
gboolean (g_pattern_spec_match)(GPatternSpec *pspec, gsize string_length, const gchar *string, const gchar *string_reversed);
gboolean (g_pattern_spec_match_string)(GPatternSpec *pspec, const gchar *string);
gboolean (g_pattern_match)(GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed);
gboolean (g_pattern_match_string)(GPatternSpec *pspec, const gchar *string);
gboolean (g_pattern_match_simple)(const gchar *pattern, const gchar *string);
GPatternSpec* (g_pattern_spec_new)(const gchar *pattern);
// Header /usr/include/glib-2.0/glib/gpoll.h
gint (g_poll)(GPollFD *fds, guint nfds, gint timeout);
// Header /usr/include/glib-2.0/glib/gprimes.h
guint (g_spaced_primes_closest)(guint num);
// Header /usr/include/glib-2.0/glib/gprintf.h
gint (g_vprintf)(gchar const *format, va_list args);
gint (g_vfprintf)(FILE *file, gchar const *format, va_list args);
gint (g_vsprintf)(gchar *string, gchar const *format, va_list args);
gint (g_vasprintf)(gchar **string, gchar const *format, va_list args);
// Header /usr/include/glib-2.0/glib/gqsort.h
void (g_qsort_with_data)(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);
// Header /usr/include/glib-2.0/glib/gquark.h
GQuark (g_quark_from_static_string)(const gchar *string);
GQuark (g_quark_from_string)(const gchar *string);
const gchar * (g_quark_to_string)(GQuark quark);
const gchar * (g_intern_string)(const gchar *string);
const gchar * (g_intern_static_string)(const gchar *string);
GQuark (g_quark_try_string)(const gchar *string);
// Header /usr/include/glib-2.0/glib/gqueue.h
void (g_queue_free)(GQueue *queue);
void (g_queue_free_full)(GQueue *queue, GDestroyNotify free_func);
void (g_queue_init)(GQueue *queue);
void (g_queue_clear)(GQueue *queue);
gboolean (g_queue_is_empty)(GQueue *queue);
void (g_queue_clear_full)(GQueue *queue, GDestroyNotify free_func);
guint (g_queue_get_length)(GQueue *queue);
void (g_queue_reverse)(GQueue *queue);
GQueue * (g_queue_copy)(GQueue *queue);
void (g_queue_foreach)(GQueue *queue, GFunc func, gpointer user_data);
GList * (g_queue_find)(GQueue *queue, gconstpointer data);
GList * (g_queue_find_custom)(GQueue *queue, gconstpointer data, GCompareFunc func);
void (g_queue_sort)(GQueue *queue, GCompareDataFunc compare_func, gpointer user_data);
void (g_queue_push_head)(GQueue *queue, gpointer data);
void (g_queue_push_tail)(GQueue *queue, gpointer data);
void (g_queue_push_nth)(GQueue *queue, gpointer data, gint n);
gpointer (g_queue_pop_head)(GQueue *queue);
gpointer (g_queue_pop_tail)(GQueue *queue);
gpointer (g_queue_pop_nth)(GQueue *queue, guint n);
gpointer (g_queue_peek_head)(GQueue *queue);
gpointer (g_queue_peek_tail)(GQueue *queue);
gpointer (g_queue_peek_nth)(GQueue *queue, guint n);
gint (g_queue_index)(GQueue *queue, gconstpointer data);
gboolean (g_queue_remove)(GQueue *queue, gconstpointer data);
guint (g_queue_remove_all)(GQueue *queue, gconstpointer data);
void (g_queue_insert_before)(GQueue *queue, GList *sibling, gpointer data);
void (g_queue_insert_before_link)(GQueue *queue, GList *sibling, GList *link_);
void (g_queue_insert_after)(GQueue *queue, GList *sibling, gpointer data);
void (g_queue_insert_after_link)(GQueue *queue, GList *sibling, GList *link_);
void (g_queue_insert_sorted)(GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);
void (g_queue_push_head_link)(GQueue *queue, GList *link_);
void (g_queue_push_tail_link)(GQueue *queue, GList *link_);
void (g_queue_push_nth_link)(GQueue *queue, gint n, GList *link_);
GList* (g_queue_pop_head_link)(GQueue *queue);
GList* (g_queue_pop_tail_link)(GQueue *queue);
GList* (g_queue_pop_nth_link)(GQueue *queue, guint n);
GList* (g_queue_peek_head_link)(GQueue *queue);
GList* (g_queue_peek_tail_link)(GQueue *queue);
GList* (g_queue_peek_nth_link)(GQueue *queue, guint n);
gint (g_queue_link_index)(GQueue *queue, GList *link_);
void (g_queue_unlink)(GQueue *queue, GList *link_);
void (g_queue_delete_link)(GQueue *queue, GList *link_);
GQueue* (g_queue_new)(void);
// Header /usr/include/glib-2.0/glib/grand.h
GRand* (g_rand_new_with_seed_array)(const guint32 *seed, guint seed_length);
GRand* (g_rand_new)(void);
void (g_rand_free)(GRand *rand_);
GRand* (g_rand_copy)(GRand *rand_);
void (g_rand_set_seed)(GRand *rand_, guint32 seed);
void (g_rand_set_seed_array)(GRand *rand_, const guint32 *seed, guint seed_length);
guint32 (g_rand_int)(GRand *rand_);
gint32 (g_rand_int_range)(GRand *rand_, gint32 begin, gint32 end);
gdouble (g_rand_double)(GRand *rand_);
gdouble (g_rand_double_range)(GRand *rand_, gdouble begin, gdouble end);
void (g_random_set_seed)(guint32 seed);
guint32 (g_random_int)(void);
gint32 (g_random_int_range)(gint32 begin, gint32 end);
gdouble (g_random_double)(void);
gdouble (g_random_double_range)(gdouble begin, gdouble end);
GRand* (g_rand_new_with_seed)(guint32 seed);
// Header /usr/include/glib-2.0/glib/grcbox.h
gpointer (g_rc_box_alloc0)(gsize block_size);
gpointer (g_rc_box_dup)(gsize block_size, gconstpointer mem_block);
gpointer (g_rc_box_acquire)(gpointer mem_block);
void (g_rc_box_release)(gpointer mem_block);
void (g_rc_box_release_full)(gpointer mem_block, GDestroyNotify clear_func);
gsize (g_rc_box_get_size)(gpointer mem_block);
gpointer (g_atomic_rc_box_alloc)(gsize block_size);
gpointer (g_atomic_rc_box_alloc0)(gsize block_size);
gpointer (g_atomic_rc_box_dup)(gsize block_size, gconstpointer mem_block);
gpointer (g_atomic_rc_box_acquire)(gpointer mem_block);
void (g_atomic_rc_box_release)(gpointer mem_block);
void (g_atomic_rc_box_release_full)(gpointer mem_block, GDestroyNotify clear_func);
gsize (g_atomic_rc_box_get_size)(gpointer mem_block);
gpointer (g_rc_box_alloc)(gsize block_size);
// Header /usr/include/glib-2.0/glib/grefcount.h
void (g_ref_count_inc)(grefcount *rc);
gboolean (g_ref_count_dec)(grefcount *rc);
gboolean (g_ref_count_compare)(grefcount *rc, gint val);
void (g_atomic_ref_count_init)(gatomicrefcount *arc);
void (g_atomic_ref_count_inc)(gatomicrefcount *arc);
gboolean (g_atomic_ref_count_dec)(gatomicrefcount *arc);
gboolean (g_atomic_ref_count_compare)(gatomicrefcount *arc, gint val);
void (g_ref_count_init)(grefcount *rc);
// Header /usr/include/glib-2.0/glib/grefstring.h
char * (g_ref_string_new_len)(const char *str, gssize len);
char * (g_ref_string_new_intern)(const char *str);
char * (g_ref_string_acquire)(char *str);
void (g_ref_string_release)(char *str);
gsize (g_ref_string_length)(char *str);
char * (g_ref_string_new)(const char *str);
// Header /usr/include/glib-2.0/glib/gregex.h
GRegex* (g_regex_new)(const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error);
GRegex* (g_regex_ref)(GRegex *regex);
void (g_regex_unref)(GRegex *regex);
const gchar* (g_regex_get_pattern)(const GRegex *regex);
gint (g_regex_get_max_backref)(const GRegex *regex);
gint (g_regex_get_capture_count)(const GRegex *regex);
gboolean (g_regex_get_has_cr_or_lf)(const GRegex *regex);
gint (g_regex_get_max_lookbehind)(const GRegex *regex);
gint (g_regex_get_string_number)(const GRegex *regex, const gchar *name);
gchar* (g_regex_escape_string)(const gchar *string, gint length);
gchar* (g_regex_escape_nul)(const gchar *string, gint length);
GRegexCompileFlags (g_regex_get_compile_flags)(const GRegex *regex);
GRegexMatchFlags (g_regex_get_match_flags)(const GRegex *regex);
gboolean (g_regex_match_simple)(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);
gboolean (g_regex_match)(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);
gboolean (g_regex_match_full)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);
gboolean (g_regex_match_all)(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);
gboolean (g_regex_match_all_full)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);
gchar** (g_regex_split_simple)(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);
gchar** (g_regex_split)(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options);
gchar** (g_regex_split_full)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error);
gchar* (g_regex_replace)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);
gchar* (g_regex_replace_literal)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);
gchar* (g_regex_replace_eval)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error);
gboolean (g_regex_check_replacement)(const gchar *replacement, gboolean *has_references, GError **error);
GRegex* (g_match_info_get_regex)(const GMatchInfo *match_info);
const gchar* (g_match_info_get_string)(const GMatchInfo *match_info);
GMatchInfo* (g_match_info_ref)(GMatchInfo *match_info);
void (g_match_info_unref)(GMatchInfo *match_info);
void (g_match_info_free)(GMatchInfo *match_info);
gboolean (g_match_info_next)(GMatchInfo *match_info, GError **error);
gboolean (g_match_info_matches)(const GMatchInfo *match_info);
gint (g_match_info_get_match_count)(const GMatchInfo *match_info);
gboolean (g_match_info_is_partial_match)(const GMatchInfo *match_info);
gchar* (g_match_info_expand_references)(const GMatchInfo *match_info, const gchar *string_to_expand, GError **error);
gchar* (g_match_info_fetch)(const GMatchInfo *match_info, gint match_num);
gboolean (g_match_info_fetch_pos)(const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos);
gchar* (g_match_info_fetch_named)(const GMatchInfo *match_info, const gchar *name);
gboolean (g_match_info_fetch_named_pos)(const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos);
gchar** (g_match_info_fetch_all)(const GMatchInfo *match_info);
GQuark (g_regex_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gscanner.h
void (g_scanner_destroy)(GScanner *scanner);
void (g_scanner_input_file)(GScanner *scanner, gint input_fd);
void (g_scanner_sync_file_offset)(GScanner *scanner);
void (g_scanner_input_text)(GScanner *scanner, const gchar *text, guint text_len);
GTokenType (g_scanner_get_next_token)(GScanner *scanner);
GTokenType (g_scanner_peek_next_token)(GScanner *scanner);
GTokenType (g_scanner_cur_token)(GScanner *scanner);
GTokenValue (g_scanner_cur_value)(GScanner *scanner);
guint (g_scanner_cur_line)(GScanner *scanner);
guint (g_scanner_cur_position)(GScanner *scanner);
gboolean (g_scanner_eof)(GScanner *scanner);
guint (g_scanner_set_scope)(GScanner *scanner, guint scope_id);
void (g_scanner_scope_add_symbol)(GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value);
void (g_scanner_scope_remove_symbol)(GScanner *scanner, guint scope_id, const gchar *symbol);
gpointer (g_scanner_scope_lookup_symbol)(GScanner *scanner, guint scope_id, const gchar *symbol);
void (g_scanner_scope_foreach_symbol)(GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data);
gpointer (g_scanner_lookup_symbol)(GScanner *scanner, const gchar *symbol);
void (g_scanner_unexp_token)(GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error);
GScanner* (g_scanner_new)(const GScannerConfig *config_templ);
// Header /usr/include/glib-2.0/glib/gsequence.h
void (g_sequence_free)(GSequence *seq);
gint (g_sequence_get_length)(GSequence *seq);
void (g_sequence_foreach)(GSequence *seq, GFunc func, gpointer user_data);
void (g_sequence_foreach_range)(GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data);
void (g_sequence_sort)(GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data);
void (g_sequence_sort_iter)(GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);
gboolean (g_sequence_is_empty)(GSequence *seq);
GSequenceIter* (g_sequence_get_begin_iter)(GSequence *seq);
GSequenceIter* (g_sequence_get_end_iter)(GSequence *seq);
GSequenceIter* (g_sequence_get_iter_at_pos)(GSequence *seq, gint pos);
GSequenceIter* (g_sequence_append)(GSequence *seq, gpointer data);
GSequenceIter* (g_sequence_prepend)(GSequence *seq, gpointer data);
GSequenceIter* (g_sequence_insert_before)(GSequenceIter *iter, gpointer data);
void (g_sequence_move)(GSequenceIter *src, GSequenceIter *dest);
void (g_sequence_swap)(GSequenceIter *a, GSequenceIter *b);
GSequenceIter* (g_sequence_insert_sorted)(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
GSequenceIter* (g_sequence_insert_sorted_iter)(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
void (g_sequence_sort_changed)(GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data);
void (g_sequence_sort_changed_iter)(GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
void (g_sequence_remove)(GSequenceIter *iter);
void (g_sequence_remove_range)(GSequenceIter *begin, GSequenceIter *end);
void (g_sequence_move_range)(GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end);
GSequenceIter* (g_sequence_search)(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
GSequenceIter* (g_sequence_search_iter)(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
GSequenceIter* (g_sequence_lookup)(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
GSequenceIter* (g_sequence_lookup_iter)(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
gpointer (g_sequence_get)(GSequenceIter *iter);
void (g_sequence_set)(GSequenceIter *iter, gpointer data);
gboolean (g_sequence_iter_is_begin)(GSequenceIter *iter);
gboolean (g_sequence_iter_is_end)(GSequenceIter *iter);
GSequenceIter* (g_sequence_iter_next)(GSequenceIter *iter);
GSequenceIter* (g_sequence_iter_prev)(GSequenceIter *iter);
gint (g_sequence_iter_get_position)(GSequenceIter *iter);
GSequenceIter* (g_sequence_iter_move)(GSequenceIter *iter, gint delta);
GSequence * (g_sequence_iter_get_sequence)(GSequenceIter *iter);
gint (g_sequence_iter_compare)(GSequenceIter *a, GSequenceIter *b);
GSequenceIter* (g_sequence_range_get_midpoint)(GSequenceIter *begin, GSequenceIter *end);
GSequence * (g_sequence_new)(GDestroyNotify data_destroy);
// Header /usr/include/glib-2.0/glib/gshell.h
gchar* (g_shell_quote)(const gchar *unquoted_string);
gchar* (g_shell_unquote)(const gchar *quoted_string, GError **error);
gboolean (g_shell_parse_argv)(const gchar *command_line, gint *argcp, gchar ***argvp, GError **error);
GQuark (g_shell_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gslice.h
gpointer (g_slice_alloc0)(gsize block_size);
gpointer (g_slice_copy)(gsize block_size, gconstpointer mem_block);
void (g_slice_free1)(gsize block_size, gpointer mem_block);
void (g_slice_free_chain_with_offset)(gsize block_size, gpointer mem_chain, gsize next_offset);
void (g_slice_set_config)(GSliceConfig ckey, gint64 value);
gint64 (g_slice_get_config)(GSliceConfig ckey);
void (g_slice_debug_tree_statistics)(void);
gpointer (g_slice_alloc)(gsize block_size);
// Header /usr/include/glib-2.0/glib/gslist.h
void (g_slist_free)(GSList *list);
void (g_slist_free_1)(GSList *list);
void (g_slist_free_full)(GSList *list, GDestroyNotify free_func);
GSList* (g_slist_append)(GSList *list, gpointer data);
GSList* (g_slist_prepend)(GSList *list, gpointer data);
GSList* (g_slist_insert)(GSList *list, gpointer data, gint position);
GSList* (g_slist_insert_sorted)(GSList *list, gpointer data, GCompareFunc func);
GSList* (g_slist_insert_sorted_with_data)(GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data);
GSList* (g_slist_insert_before)(GSList *slist, GSList *sibling, gpointer data);
GSList* (g_slist_concat)(GSList *list1, GSList *list2);
GSList* (g_slist_remove)(GSList *list, gconstpointer data);
GSList* (g_slist_remove_all)(GSList *list, gconstpointer data);
GSList* (g_slist_remove_link)(GSList *list, GSList *link_);
GSList* (g_slist_delete_link)(GSList *list, GSList *link_);
GSList* (g_slist_reverse)(GSList *list);
GSList* (g_slist_copy)(GSList *list);
GSList* (g_slist_copy_deep)(GSList *list, GCopyFunc func, gpointer user_data);
GSList* (g_slist_nth)(GSList *list, guint n);
GSList* (g_slist_find)(GSList *list, gconstpointer data);
GSList* (g_slist_find_custom)(GSList *list, gconstpointer data, GCompareFunc func);
gint (g_slist_position)(GSList *list, GSList *llink);
gint (g_slist_index)(GSList *list, gconstpointer data);
GSList* (g_slist_last)(GSList *list);
guint (g_slist_length)(GSList *list);
void (g_slist_foreach)(GSList *list, GFunc func, gpointer user_data);
GSList* (g_slist_sort)(GSList *list, GCompareFunc compare_func);
GSList* (g_slist_sort_with_data)(GSList *list, GCompareDataFunc compare_func, gpointer user_data);
gpointer (g_slist_nth_data)(GSList *list, guint n);
void (g_clear_slist)(GSList **slist_ptr, GDestroyNotify destroy);
GSList* (g_slist_alloc)(void);
// Header /usr/include/glib-2.0/glib/gspawn.h
GQuark (g_spawn_exit_error_quark)(void);
gboolean (g_spawn_async)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error);
gboolean (g_spawn_async_with_pipes)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error);
gboolean (g_spawn_async_with_pipes_and_fds)(const gchar *working_directory, const gchar * const *argv, const gchar * const *envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint stdin_fd, gint stdout_fd, gint stderr_fd, const gint *source_fds, const gint *target_fds, gsize n_fds, GPid *child_pid_out, gint *stdin_pipe_out, gint *stdout_pipe_out, gint *stderr_pipe_out, GError **error);
gboolean (g_spawn_async_with_fds)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint stdin_fd, gint stdout_fd, gint stderr_fd, GError **error);
gboolean (g_spawn_sync)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error);
gboolean (g_spawn_command_line_sync)(const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error);
gboolean (g_spawn_command_line_async)(const gchar *command_line, GError **error);
gboolean (g_spawn_check_wait_status)(gint wait_status, GError **error);
gboolean (g_spawn_check_exit_status)(gint wait_status, GError **error);
void (g_spawn_close_pid)(GPid pid);
GQuark (g_spawn_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gstdio.h
int (g_chdir)(const gchar *path);
int (g_unlink)(const gchar *filename);
int (g_rmdir)(const gchar *filename);
int (g_access)(const gchar *filename, int mode);
gboolean (g_close)(gint fd, GError **error);
// Header /usr/include/glib-2.0/glib/gstrfuncs.h
gchar (g_ascii_tolower)(gchar c);
gchar (g_ascii_toupper)(gchar c);
gint (g_ascii_digit_value)(gchar c);
gint (g_ascii_xdigit_value)(gchar c);
gchar* (g_strdelimit)(gchar *string, const gchar *delimiters, gchar new_delimiter);
gchar* (g_strcanon)(gchar *string, const gchar *valid_chars, gchar substitutor);
const gchar * (g_strerror)(gint errnum);
const gchar * (g_strsignal)(gint signum);
gchar * (g_strreverse)(gchar *string);
gsize (g_strlcpy)(gchar *dest, const gchar *src, gsize dest_size);
gsize (g_strlcat)(gchar *dest, const gchar *src, gsize dest_size);
gchar * (g_strstr_len)(const gchar *haystack, gssize haystack_len, const gchar *needle);
gchar * (g_strrstr)(const gchar *haystack, const gchar *needle);
gchar * (g_strrstr_len)(const gchar *haystack, gssize haystack_len, const gchar *needle);
gboolean (g_str_has_suffix)(const gchar *str, const gchar *suffix);
gboolean (g_str_has_prefix)(const gchar *str, const gchar *prefix);
gdouble (g_strtod)(const gchar *nptr, gchar **endptr);
gdouble (g_ascii_strtod)(const gchar *nptr, gchar **endptr);
guint64 (g_ascii_strtoull)(const gchar *nptr, gchar **endptr, guint base);
gint64 (g_ascii_strtoll)(const gchar *nptr, gchar **endptr, guint base);
gchar * (g_ascii_dtostr)(gchar *buffer, gint buf_len, gdouble d);
gchar * (g_ascii_formatd)(gchar *buffer, gint buf_len, const gchar *format, gdouble d);
gchar* (g_strchug)(gchar *string);
gchar* (g_strchomp)(gchar *string);
gint (g_ascii_strcasecmp)(const gchar *s1, const gchar *s2);
gint (g_ascii_strncasecmp)(const gchar *s1, const gchar *s2, gsize n);
gchar* (g_ascii_strdown)(const gchar *str, gssize len);
gchar* (g_ascii_strup)(const gchar *str, gssize len);
gboolean (g_str_is_ascii)(const gchar *str);
gint (g_strcasecmp)(const gchar *s1, const gchar *s2);
gint (g_strncasecmp)(const gchar *s1, const gchar *s2, guint n);
gchar* (g_strdown)(gchar *string);
gchar* (g_strup)(gchar *string);
gchar* (g_strdup)(const gchar *str);
gchar* (g_strdup_vprintf)(const gchar *format, va_list args);
gchar* (g_strndup)(const gchar *str, gsize n);
gchar* (g_strnfill)(gsize length, gchar fill_char);
gchar* (g_strcompress)(const gchar *source);
gchar* (g_strescape)(const gchar *source, const gchar *exceptions);
gpointer (g_memdup)(gconstpointer mem, guint byte_size);
gpointer (g_memdup2)(gconstpointer mem, gsize byte_size);
gchar** (g_strsplit)(const gchar *string, const gchar *delimiter, gint max_tokens);
gchar ** (g_strsplit_set)(const gchar *string, const gchar *delimiters, gint max_tokens);
gchar* (g_strjoinv)(const gchar *separator, gchar **str_array);
void (g_strfreev)(gchar **str_array);
gchar** (g_strdupv)(gchar **str_array);
guint (g_strv_length)(gchar **str_array);
gchar* (g_stpcpy)(gchar *dest, const char *src);
gchar * (g_str_to_ascii)(const gchar *str, const gchar *from_locale);
gchar ** (g_str_tokenize_and_fold)(const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates);
gboolean (g_str_match_string)(const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates);
gboolean (g_strv_contains)(const gchar * const *strv, const gchar *str);
gboolean (g_strv_equal)(const gchar * const *strv1, const gchar * const *strv2);
GQuark (g_number_parser_error_quark)(void);
gboolean (g_ascii_string_to_signed)(const gchar *str, guint base, gint64 min, gint64 max, gint64 *out_num, GError **error);
gboolean (g_ascii_string_to_unsigned)(const gchar *str, guint base, guint64 min, guint64 max, guint64 *out_num, GError **error);
// Header /usr/include/glib-2.0/glib/gstring.h
GString* (g_string_new_take)(gchar *init);
GString* (g_string_new_len)(const gchar *init, gssize len);
GString* (g_string_sized_new)(gsize dfl_size);
gchar* (g_string_free)(GString *string, gboolean free_segment);
gchar* (g_string_free_and_steal)(GString *string);
GBytes* (g_string_free_to_bytes)(GString *string);
gboolean (g_string_equal)(const GString *v, const GString *v2);
guint (g_string_hash)(const GString *str);
GString* (g_string_assign)(GString *string, const gchar *rval);
GString* (g_string_truncate)(GString *string, gsize len);
GString* (g_string_set_size)(GString *string, gsize len);
GString* (g_string_insert_len)(GString *string, gssize pos, const gchar *val, gssize len);
GString* (g_string_append)(GString *string, const gchar *val);
GString* (g_string_append_len)(GString *string, const gchar *val, gssize len);
GString* (g_string_append_c)(GString *string, gchar c);
GString* (g_string_append_unichar)(GString *string, gunichar wc);
GString* (g_string_prepend)(GString *string, const gchar *val);
GString* (g_string_prepend_c)(GString *string, gchar c);
GString* (g_string_prepend_unichar)(GString *string, gunichar wc);
GString* (g_string_prepend_len)(GString *string, const gchar *val, gssize len);
GString* (g_string_insert)(GString *string, gssize pos, const gchar *val);
GString* (g_string_insert_c)(GString *string, gssize pos, gchar c);
GString* (g_string_insert_unichar)(GString *string, gssize pos, gunichar wc);
GString* (g_string_overwrite)(GString *string, gsize pos, const gchar *val);
GString* (g_string_overwrite_len)(GString *string, gsize pos, const gchar *val, gssize len);
GString* (g_string_erase)(GString *string, gssize pos, gssize len);
guint (g_string_replace)(GString *string, const gchar *find, const gchar *replace, guint limit);
GString* (g_string_ascii_down)(GString *string);
GString* (g_string_ascii_up)(GString *string);
void (g_string_vprintf)(GString *string, const gchar *format, va_list args);
void (g_string_append_vprintf)(GString *string, const gchar *format, va_list args);
GString* (g_string_append_uri_escaped)(GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8);
GString* (g_string_down)(GString *string);
GString* (g_string_up)(GString *string);
GString* (g_string_new)(const gchar *init);
// Header /usr/include/glib-2.0/glib/gstringchunk.h
void (g_string_chunk_free)(GStringChunk *chunk);
void (g_string_chunk_clear)(GStringChunk *chunk);
gchar* (g_string_chunk_insert)(GStringChunk *chunk, const gchar *string);
gchar* (g_string_chunk_insert_len)(GStringChunk *chunk, const gchar *string, gssize len);
gchar* (g_string_chunk_insert_const)(GStringChunk *chunk, const gchar *string);
GStringChunk* (g_string_chunk_new)(gsize size);
// Header /usr/include/glib-2.0/glib/gstrvbuilder.h
void (g_strv_builder_unref)(GStrvBuilder *builder);
GStrvBuilder* (g_strv_builder_ref)(GStrvBuilder *builder);
void (g_strv_builder_add)(GStrvBuilder *builder, const char *value);
void (g_strv_builder_addv)(GStrvBuilder *builder, const char **value);
void (g_strv_builder_take)(GStrvBuilder *builder, char *value);
GStrv (g_strv_builder_end)(GStrvBuilder *builder);
GStrvBuilder* (g_strv_builder_new)(void);
// Header /usr/include/glib-2.0/glib/gtestutils.h
gboolean (g_test_subprocess)(void);
int (g_test_run)(void);
void (g_test_add_func)(const char *testpath, GTestFunc test_func);
void (g_test_add_data_func)(const char *testpath, gconstpointer test_data, GTestDataFunc test_func);
void (g_test_add_data_func_full)(const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);
const char * (g_test_get_path)(void);
void (g_test_fail)(void);
void (g_test_incomplete)(const gchar *msg);
void (g_test_skip)(const gchar *msg);
gboolean (g_test_failed)(void);
void (g_test_set_nonfatal_assertions)(void);
void (g_test_disable_crash_reporting)(void);
void (g_test_bug_base)(const char *uri_pattern);
void (g_test_bug)(const char *bug_uri_snippet);
void (g_test_summary)(const char *summary);
void (g_test_timer_start)(void);
double (g_test_timer_elapsed)(void);
double (g_test_timer_last)(void);
void (g_test_queue_free)(gpointer gfree_pointer);
void (g_test_queue_destroy)(GDestroyNotify destroy_func, gpointer destroy_data);
void (g_test_trap_subprocess_with_envp)(const char *test_path, const char * const *envp, guint64 usec_timeout, GTestSubprocessFlags test_flags);
gboolean (g_test_trap_has_passed)(void);
gboolean (g_test_trap_reached_timeout)(void);
gint32 (g_test_rand_int)(void);
gint32 (g_test_rand_int_range)(gint32 begin, gint32 end);
double (g_test_rand_double)(void);
double (g_test_rand_double_range)(double range_start, double range_end);
GTestCase* (g_test_create_case)(const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);
GTestSuite* (g_test_create_suite)(const char *suite_name);
GTestSuite* (g_test_get_root)(void);
void (g_test_suite_add)(GTestSuite *suite, GTestCase *test_case);
void (g_test_suite_add_suite)(GTestSuite *suite, GTestSuite *nestedsuite);
int (g_test_run_suite)(GTestSuite *suite);
void (g_test_case_free)(GTestCase *test_case);
void (g_test_suite_free)(GTestSuite *suite);
void (g_test_trap_assertions)(const char *domain, const char *file, int line, const char *func, guint64 assertion_flags, const char *pattern);
void (g_assertion_message)(const char *domain, const char *file, int line, const char *func, const char *message);
void (g_assertion_message_expr)(const char *domain, const char *file, int line, const char *func, const char *expr);
void (g_assertion_message_cmpstr)(const char *domain, const char *file, int line, const char *func, const char *expr, const char *arg1, const char *cmp, const char *arg2);
void (g_assertion_message_cmpstrv)(const char *domain, const char *file, int line, const char *func, const char *expr, const char * const *arg1, const char * const *arg2, gsize first_wrong_idx);
void (g_assertion_message_cmpint)(const char *domain, const char *file, int line, const char *func, const char *expr, guint64 arg1, const char *cmp, guint64 arg2, char numtype);
void (g_assertion_message_cmpnum)(const char *domain, const char *file, int line, const char *func, const char *expr, long double arg1, const char *cmp, long double arg2, char numtype);
void (g_assertion_message_error)(const char *domain, const char *file, int line, const char *func, const char *expr, const GError *error, GQuark error_domain, int error_code);
void (g_test_add_vtable)(const char *testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);
const char* (g_test_log_type_name)(GTestLogType log_type);
GTestLogBuffer* (g_test_log_buffer_new)(void);
void (g_test_log_buffer_free)(GTestLogBuffer *tbuffer);
void (g_test_log_buffer_push)(GTestLogBuffer *tbuffer, guint n_bytes, const guint8 *bytes);
GTestLogMsg* (g_test_log_buffer_pop)(GTestLogBuffer *tbuffer);
void (g_test_log_msg_free)(GTestLogMsg *tmsg);
void (g_test_log_set_fatal_handler)(GTestLogFatalFunc log_func, gpointer user_data);
void (g_test_expect_message)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern);
void (g_test_assert_expected_messages_internal)(const char *domain, const char *file, int line, const char *func);
const gchar* (g_test_get_dir)(GTestFileType file_type);
int (g_strcmp0)(const char *str1, const char *str2);
// Header /usr/include/glib-2.0/glib/gthread.h
GThread * (g_thread_ref)(GThread *thread);
void (g_thread_unref)(GThread *thread);
GThread * (g_thread_new)(const gchar *name, GThreadFunc func, gpointer data);
GThread * (g_thread_try_new)(const gchar *name, GThreadFunc func, gpointer data, GError **error);
GThread * (g_thread_self)(void);
void (g_thread_exit)(gpointer retval);
gpointer (g_thread_join)(GThread *thread);
void (g_thread_yield)(void);
void (g_mutex_init)(GMutex *mutex);
void (g_mutex_clear)(GMutex *mutex);
void (g_mutex_lock)(GMutex *mutex);
gboolean (g_mutex_trylock)(GMutex *mutex);
void (g_mutex_unlock)(GMutex *mutex);
void (g_rw_lock_init)(GRWLock *rw_lock);
void (g_rw_lock_clear)(GRWLock *rw_lock);
void (g_rw_lock_writer_lock)(GRWLock *rw_lock);
gboolean (g_rw_lock_writer_trylock)(GRWLock *rw_lock);
void (g_rw_lock_writer_unlock)(GRWLock *rw_lock);
void (g_rw_lock_reader_lock)(GRWLock *rw_lock);
gboolean (g_rw_lock_reader_trylock)(GRWLock *rw_lock);
void (g_rw_lock_reader_unlock)(GRWLock *rw_lock);
void (g_rec_mutex_init)(GRecMutex *rec_mutex);
void (g_rec_mutex_clear)(GRecMutex *rec_mutex);
void (g_rec_mutex_lock)(GRecMutex *rec_mutex);
gboolean (g_rec_mutex_trylock)(GRecMutex *rec_mutex);
void (g_rec_mutex_unlock)(GRecMutex *rec_mutex);
void (g_cond_init)(GCond *cond);
void (g_cond_clear)(GCond *cond);
void (g_cond_wait)(GCond *cond, GMutex *mutex);
void (g_cond_signal)(GCond *cond);
void (g_cond_broadcast)(GCond *cond);
gboolean (g_cond_wait_until)(GCond *cond, GMutex *mutex, gint64 end_time);
gpointer (g_private_get)(GPrivate *key);
void (g_private_set)(GPrivate *key, gpointer value);
void (g_private_replace)(GPrivate *key, gpointer value);
gpointer (g_once_impl)(GOnce *once, GThreadFunc func, gpointer arg);
gboolean (g_once_init_enter)(volatile void *location);
void (g_once_init_leave)(volatile void *location, gsize result);
gboolean (g_once_init_enter_pointer)(void *location);
void (g_once_init_leave_pointer)(void *location, gpointer result);
guint (g_get_num_processors)(void);
GQuark (g_thread_error_quark)(void);
// Header /usr/include/glib-2.0/glib/gthreadpool.h
GThreadPool * (g_thread_pool_new_full)(GFunc func, gpointer user_data, GDestroyNotify item_free_func, gint max_threads, gboolean exclusive, GError **error);
void (g_thread_pool_free)(GThreadPool *pool, gboolean immediate, gboolean wait_);
gboolean (g_thread_pool_push)(GThreadPool *pool, gpointer data, GError **error);
guint (g_thread_pool_unprocessed)(GThreadPool *pool);
void (g_thread_pool_set_sort_function)(GThreadPool *pool, GCompareDataFunc func, gpointer user_data);
gboolean (g_thread_pool_move_to_front)(GThreadPool *pool, gpointer data);
gboolean (g_thread_pool_set_max_threads)(GThreadPool *pool, gint max_threads, GError **error);
gint (g_thread_pool_get_max_threads)(GThreadPool *pool);
guint (g_thread_pool_get_num_threads)(GThreadPool *pool);
void (g_thread_pool_set_max_unused_threads)(gint max_threads);
gint (g_thread_pool_get_max_unused_threads)(void);
guint (g_thread_pool_get_num_unused_threads)(void);
void (g_thread_pool_stop_unused_threads)(void);
void (g_thread_pool_set_max_idle_time)(guint interval);
guint (g_thread_pool_get_max_idle_time)(void);
GThreadPool * (g_thread_pool_new)(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error);
// Header /usr/include/glib-2.0/glib/gtimer.h
void (g_timer_destroy)(GTimer *timer);
void (g_timer_start)(GTimer *timer);
void (g_timer_stop)(GTimer *timer);
void (g_timer_reset)(GTimer *timer);
void (g_timer_continue)(GTimer *timer);
gdouble (g_timer_elapsed)(GTimer *timer, gulong *microseconds);
gboolean (g_timer_is_active)(GTimer *timer);
void (g_usleep)(gulong microseconds);
gboolean (g_time_val_from_iso8601)(const gchar *iso_date, GTimeVal *time_);
gchar* (g_time_val_to_iso8601)(GTimeVal *time_);
GTimer* (g_timer_new)(void);
// Header /usr/include/glib-2.0/glib/gtimezone.h
GTimeZone * (g_time_zone_new_identifier)(const gchar *identifier);
GTimeZone * (g_time_zone_new_utc)(void);
GTimeZone * (g_time_zone_new_local)(void);
GTimeZone * (g_time_zone_new_offset)(gint32 seconds);
GTimeZone * (g_time_zone_ref)(GTimeZone *tz);
void (g_time_zone_unref)(GTimeZone *tz);
gint (g_time_zone_find_interval)(GTimeZone *tz, GTimeType type, gint64 time_);
gint (g_time_zone_adjust_time)(GTimeZone *tz, GTimeType type, gint64 *time_);
const gchar * (g_time_zone_get_abbreviation)(GTimeZone *tz, gint interval);
gint32 (g_time_zone_get_offset)(GTimeZone *tz, gint interval);
gboolean (g_time_zone_is_dst)(GTimeZone *tz, gint interval);
const gchar * (g_time_zone_get_identifier)(GTimeZone *tz);
GTimeZone * (g_time_zone_new)(const gchar *identifier);
// Header /usr/include/glib-2.0/glib/gtrashstack.h
gpointer (g_trash_stack_pop)(GTrashStack **stack_p);
gpointer (g_trash_stack_peek)(GTrashStack **stack_p);
guint (g_trash_stack_height)(GTrashStack **stack_p);
// Header /usr/include/glib-2.0/glib/gtree.h
GTree* (g_tree_new_with_data)(GCompareDataFunc key_compare_func, gpointer key_compare_data);
GTree* (g_tree_new_full)(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);
GTreeNode* (g_tree_node_first)(GTree *tree);
GTreeNode* (g_tree_node_last)(GTree *tree);
GTreeNode* (g_tree_node_previous)(GTreeNode *node);
GTreeNode* (g_tree_node_next)(GTreeNode *node);
GTree* (g_tree_ref)(GTree *tree);
void (g_tree_unref)(GTree *tree);
void (g_tree_destroy)(GTree *tree);
GTreeNode* (g_tree_insert_node)(GTree *tree, gpointer key, gpointer value);
void (g_tree_insert)(GTree *tree, gpointer key, gpointer value);
GTreeNode* (g_tree_replace_node)(GTree *tree, gpointer key, gpointer value);
void (g_tree_replace)(GTree *tree, gpointer key, gpointer value);
gboolean (g_tree_remove)(GTree *tree, gconstpointer key);
void (g_tree_remove_all)(GTree *tree);
gboolean (g_tree_steal)(GTree *tree, gconstpointer key);
gpointer (g_tree_node_key)(GTreeNode *node);
gpointer (g_tree_node_value)(GTreeNode *node);
GTreeNode* (g_tree_lookup_node)(GTree *tree, gconstpointer key);
gpointer (g_tree_lookup)(GTree *tree, gconstpointer key);
gboolean (g_tree_lookup_extended)(GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);
void (g_tree_foreach)(GTree *tree, GTraverseFunc func, gpointer user_data);
void (g_tree_foreach_node)(GTree *tree, GTraverseNodeFunc func, gpointer user_data);
void (g_tree_traverse)(GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);
GTreeNode* (g_tree_search_node)(GTree *tree, GCompareFunc search_func, gconstpointer user_data);
gpointer (g_tree_search)(GTree *tree, GCompareFunc search_func, gconstpointer user_data);
GTreeNode* (g_tree_lower_bound)(GTree *tree, gconstpointer key);
GTreeNode* (g_tree_upper_bound)(GTree *tree, gconstpointer key);
gint (g_tree_height)(GTree *tree);
gint (g_tree_nnodes)(GTree *tree);
void (g_tree_dump)(GTree *tree);
GTree* (g_tree_new)(GCompareFunc key_compare_func);
// Header /usr/include/glib-2.0/glib/gtypes.h
// Header /usr/include/glib-2.0/glib/gunicode.h
GUnicodeScript (g_unicode_script_from_iso15924)(guint32 iso15924);
gboolean (g_unichar_isalnum)(gunichar c);
gboolean (g_unichar_isalpha)(gunichar c);
gboolean (g_unichar_iscntrl)(gunichar c);
gboolean (g_unichar_isdigit)(gunichar c);
gboolean (g_unichar_isgraph)(gunichar c);
gboolean (g_unichar_islower)(gunichar c);
gboolean (g_unichar_isprint)(gunichar c);
gboolean (g_unichar_ispunct)(gunichar c);
gboolean (g_unichar_isspace)(gunichar c);
gboolean (g_unichar_isupper)(gunichar c);
gboolean (g_unichar_isxdigit)(gunichar c);
gboolean (g_unichar_istitle)(gunichar c);
gboolean (g_unichar_isdefined)(gunichar c);
gboolean (g_unichar_iswide)(gunichar c);
gboolean (g_unichar_iswide_cjk)(gunichar c);
gboolean (g_unichar_iszerowidth)(gunichar c);
gboolean (g_unichar_ismark)(gunichar c);
gunichar (g_unichar_toupper)(gunichar c);
gunichar (g_unichar_tolower)(gunichar c);
gunichar (g_unichar_totitle)(gunichar c);
gint (g_unichar_digit_value)(gunichar c);
gint (g_unichar_xdigit_value)(gunichar c);
GUnicodeType (g_unichar_type)(gunichar c);
GUnicodeBreakType (g_unichar_break_type)(gunichar c);
gint (g_unichar_combining_class)(gunichar uc);
gboolean (g_unichar_get_mirror_char)(gunichar ch, gunichar *mirrored_ch);
GUnicodeScript (g_unichar_get_script)(gunichar ch);
gboolean (g_unichar_validate)(gunichar ch);
gboolean (g_unichar_compose)(gunichar a, gunichar b, gunichar *ch);
gboolean (g_unichar_decompose)(gunichar ch, gunichar *a, gunichar *b);
gsize (g_unichar_fully_decompose)(gunichar ch, gboolean compat, gunichar *result, gsize result_len);
void (g_unicode_canonical_ordering)(gunichar *string, gsize len);
gunichar* (g_unicode_canonical_decomposition)(gunichar ch, gsize *result_len);
gunichar (g_utf8_get_char)(const gchar *p);
gunichar (g_utf8_get_char_validated)(const gchar *p, gssize max_len);
gchar* (g_utf8_offset_to_pointer)(const gchar *str, glong offset);
glong (g_utf8_pointer_to_offset)(const gchar *str, const gchar *pos);
gchar* (g_utf8_prev_char)(const gchar *p);
gchar* (g_utf8_find_next_char)(const gchar *p, const gchar *end);
gchar* (g_utf8_find_prev_char)(const gchar *str, const gchar *p);
glong (g_utf8_strlen)(const gchar *p, gssize max);
gchar* (g_utf8_substring)(const gchar *str, glong start_pos, glong end_pos);
gchar* (g_utf8_strncpy)(gchar *dest, const gchar *src, gsize n);
gchar* (g_utf8_truncate_middle)(const gchar *string, gsize truncate_length);
gchar* (g_utf8_strchr)(const gchar *p, gssize len, gunichar c);
gchar* (g_utf8_strrchr)(const gchar *p, gssize len, gunichar c);
gchar* (g_utf8_strreverse)(const gchar *str, gssize len);
gunichar2* (g_utf8_to_utf16)(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error);
gunichar * (g_utf8_to_ucs4)(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error);
gunichar * (g_utf8_to_ucs4_fast)(const gchar *str, glong len, glong *items_written);
gunichar * (g_utf16_to_ucs4)(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error);
gchar* (g_utf16_to_utf8)(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error);
gunichar2* (g_ucs4_to_utf16)(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error);
gchar* (g_ucs4_to_utf8)(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error);
gint (g_unichar_to_utf8)(gunichar c, gchar *outbuf);
gboolean (g_utf8_validate)(const gchar *str, gssize max_len, const gchar **end);
gboolean (g_utf8_validate_len)(const gchar *str, gsize max_len, const gchar **end);
gchar* (g_utf8_strup)(const gchar *str, gssize len);
gchar* (g_utf8_strdown)(const gchar *str, gssize len);
gchar* (g_utf8_casefold)(const gchar *str, gssize len);
gchar* (g_utf8_normalize)(const gchar *str, gssize len, GNormalizeMode mode);
gint (g_utf8_collate)(const gchar *str1, const gchar *str2);
gchar* (g_utf8_collate_key)(const gchar *str, gssize len);
gchar* (g_utf8_collate_key_for_filename)(const gchar *str, gssize len);
gchar* (g_utf8_make_valid)(const gchar *str, gssize len);
guint32 (g_unicode_script_to_iso15924)(GUnicodeScript script);
// Header /usr/include/glib-2.0/glib/guri.h
void (g_uri_unref)(GUri *uri);
gboolean (g_uri_split)(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **userinfo, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error);
gboolean (g_uri_split_with_user)(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **user, gchar **password, gchar **auth_params, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error);
gboolean (g_uri_split_network)(const gchar *uri_string, GUriFlags flags, gchar **scheme, gchar **host, gint *port, GError **error);
gboolean (g_uri_is_valid)(const gchar *uri_string, GUriFlags flags, GError **error);
gchar * (g_uri_join)(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
gchar * (g_uri_join_with_user)(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
GUri * (g_uri_parse)(const gchar *uri_string, GUriFlags flags, GError **error);
GUri * (g_uri_parse_relative)(GUri *base_uri, const gchar *uri_ref, GUriFlags flags, GError **error);
gchar * (g_uri_resolve_relative)(const gchar *base_uri_string, const gchar *uri_ref, GUriFlags flags, GError **error);
GUri * (g_uri_build)(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
GUri * (g_uri_build_with_user)(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
char * (g_uri_to_string)(GUri *uri);
char * (g_uri_to_string_partial)(GUri *uri, GUriHideFlags flags);
const gchar* (g_uri_get_scheme)(GUri *uri);
const gchar* (g_uri_get_userinfo)(GUri *uri);
const gchar* (g_uri_get_user)(GUri *uri);
const gchar* (g_uri_get_password)(GUri *uri);
const gchar* (g_uri_get_auth_params)(GUri *uri);
const gchar* (g_uri_get_host)(GUri *uri);
gint (g_uri_get_port)(GUri *uri);
const gchar* (g_uri_get_path)(GUri *uri);
const gchar* (g_uri_get_query)(GUri *uri);
const gchar* (g_uri_get_fragment)(GUri *uri);
GUriFlags (g_uri_get_flags)(GUri *uri);
GHashTable* (g_uri_parse_params)(const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags, GError **error);
void (g_uri_params_iter_init)(GUriParamsIter *iter, const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags);
gboolean (g_uri_params_iter_next)(GUriParamsIter *iter, gchar **attribute, gchar **value, GError **error);
GQuark (g_uri_error_quark)(void);
char * (g_uri_unescape_string)(const char *escaped_string, const char *illegal_characters);
char * (g_uri_unescape_segment)(const char *escaped_string, const char *escaped_string_end, const char *illegal_characters);
char * (g_uri_parse_scheme)(const char *uri);
const char* (g_uri_peek_scheme)(const char *uri);
char * (g_uri_escape_string)(const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8);
GBytes * (g_uri_unescape_bytes)(const char *escaped_string, gssize length, const char *illegal_characters, GError **error);
char * (g_uri_escape_bytes)(const guint8 *unescaped, gsize length, const char *reserved_chars_allowed);
// Header /usr/include/glib-2.0/glib/gutils.h
const gchar * (g_get_real_name)(void);
const gchar * (g_get_home_dir)(void);
const gchar * (g_get_tmp_dir)(void);
const gchar * (g_get_host_name)(void);
const gchar * (g_get_prgname)(void);
void (g_set_prgname)(const gchar *prgname);
const gchar * (g_get_application_name)(void);
void (g_set_application_name)(const gchar *application_name);
gchar * (g_get_os_info)(const gchar *key_name);
void (g_reload_user_special_dirs_cache)(void);
const gchar * (g_get_user_data_dir)(void);
const gchar * (g_get_user_config_dir)(void);
const gchar * (g_get_user_cache_dir)(void);
const gchar * (g_get_user_state_dir)(void);
const gchar * const * (g_get_system_data_dirs)(void);
const gchar * const * (g_get_system_config_dirs)(void);
const gchar * (g_get_user_runtime_dir)(void);
const gchar * (g_get_user_special_dir)(GUserDirectory directory);
guint (g_parse_debug_string)(const gchar *string, const GDebugKey *keys, guint nkeys);
gint (g_vsnprintf)(gchar *string, gulong n, gchar const *format, va_list args);
void (g_nullify_pointer)(gpointer *nullify_location);
gchar* (g_format_size_full)(guint64 size, GFormatSizeFlags flags);
gchar* (g_format_size)(guint64 size);
gchar* (g_format_size_for_display)(goffset size);
gchar* (g_find_program_in_path)(const gchar *program);
gint (g_bit_nth_lsf)(gulong mask, gint nth_bit);
gint (g_bit_nth_msf)(gulong mask, gint nth_bit);
guint (g_bit_storage)(gulong number);
void (g_abort)(void);
const gchar * (g_get_user_name)(void);
// Header /usr/include/glib-2.0/glib/guuid.h
gchar * (g_uuid_string_random)(void);
gboolean (g_uuid_string_is_valid)(const gchar *str);
// Header /usr/include/glib-2.0/glib/gvariant.h
GVariant * (g_variant_ref)(GVariant *value);
GVariant * (g_variant_ref_sink)(GVariant *value);
gboolean (g_variant_is_floating)(GVariant *value);
GVariant * (g_variant_take_ref)(GVariant *value);
const GVariantType * (g_variant_get_type)(GVariant *value);
const gchar * (g_variant_get_type_string)(GVariant *value);
gboolean (g_variant_is_of_type)(GVariant *value, const GVariantType *type);
gboolean (g_variant_is_container)(GVariant *value);
GVariantClass (g_variant_classify)(GVariant *value);
GVariant * (g_variant_new_boolean)(gboolean value);
GVariant * (g_variant_new_byte)(guint8 value);
GVariant * (g_variant_new_int16)(gint16 value);
GVariant * (g_variant_new_uint16)(guint16 value);
GVariant * (g_variant_new_int32)(gint32 value);
GVariant * (g_variant_new_uint32)(guint32 value);
GVariant * (g_variant_new_int64)(gint64 value);
GVariant * (g_variant_new_uint64)(guint64 value);
GVariant * (g_variant_new_handle)(gint32 value);
GVariant * (g_variant_new_double)(gdouble value);
GVariant * (g_variant_new_string)(const gchar *string);
GVariant * (g_variant_new_take_string)(gchar *string);
GVariant * (g_variant_new_object_path)(const gchar *object_path);
gboolean (g_variant_is_object_path)(const gchar *string);
GVariant * (g_variant_new_signature)(const gchar *signature);
gboolean (g_variant_is_signature)(const gchar *string);
GVariant * (g_variant_new_variant)(GVariant *value);
GVariant * (g_variant_new_strv)(const gchar * const *strv, gssize length);
GVariant * (g_variant_new_objv)(const gchar * const *strv, gssize length);
GVariant * (g_variant_new_bytestring)(const gchar *string);
GVariant * (g_variant_new_bytestring_array)(const gchar * const *strv, gssize length);
GVariant * (g_variant_new_fixed_array)(const GVariantType *element_type, gconstpointer elements, gsize n_elements, gsize element_size);
gboolean (g_variant_get_boolean)(GVariant *value);
guint8 (g_variant_get_byte)(GVariant *value);
gint16 (g_variant_get_int16)(GVariant *value);
guint16 (g_variant_get_uint16)(GVariant *value);
gint32 (g_variant_get_int32)(GVariant *value);
guint32 (g_variant_get_uint32)(GVariant *value);
gint64 (g_variant_get_int64)(GVariant *value);
guint64 (g_variant_get_uint64)(GVariant *value);
gint32 (g_variant_get_handle)(GVariant *value);
gdouble (g_variant_get_double)(GVariant *value);
GVariant * (g_variant_get_variant)(GVariant *value);
const gchar * (g_variant_get_string)(GVariant *value, gsize *length);
gchar * (g_variant_dup_string)(GVariant *value, gsize *length);
const gchar ** (g_variant_get_strv)(GVariant *value, gsize *length);
gchar ** (g_variant_dup_strv)(GVariant *value, gsize *length);
const gchar ** (g_variant_get_objv)(GVariant *value, gsize *length);
gchar ** (g_variant_dup_objv)(GVariant *value, gsize *length);
const gchar * (g_variant_get_bytestring)(GVariant *value);
gchar * (g_variant_dup_bytestring)(GVariant *value, gsize *length);
const gchar ** (g_variant_get_bytestring_array)(GVariant *value, gsize *length);
gchar ** (g_variant_dup_bytestring_array)(GVariant *value, gsize *length);
GVariant * (g_variant_new_maybe)(const GVariantType *child_type, GVariant *child);
GVariant * (g_variant_new_array)(const GVariantType *child_type, GVariant * const *children, gsize n_children);
GVariant * (g_variant_new_tuple)(GVariant * const *children, gsize n_children);
GVariant * (g_variant_new_dict_entry)(GVariant *key, GVariant *value);
GVariant * (g_variant_get_maybe)(GVariant *value);
gsize (g_variant_n_children)(GVariant *value);
GVariant * (g_variant_get_child_value)(GVariant *value, gsize index_);
GVariant * (g_variant_lookup_value)(GVariant *dictionary, const gchar *key, const GVariantType *expected_type);
gconstpointer (g_variant_get_fixed_array)(GVariant *value, gsize *n_elements, gsize element_size);
gsize (g_variant_get_size)(GVariant *value);
gconstpointer (g_variant_get_data)(GVariant *value);
GBytes * (g_variant_get_data_as_bytes)(GVariant *value);
void (g_variant_store)(GVariant *value, gpointer data);
gchar * (g_variant_print)(GVariant *value, gboolean type_annotate);
GString * (g_variant_print_string)(GVariant *value, GString *string, gboolean type_annotate);
guint (g_variant_hash)(gconstpointer value);
gboolean (g_variant_equal)(gconstpointer one, gconstpointer two);
GVariant * (g_variant_get_normal_form)(GVariant *value);
gboolean (g_variant_is_normal_form)(GVariant *value);
GVariant * (g_variant_byteswap)(GVariant *value);
GVariant * (g_variant_new_from_bytes)(const GVariantType *type, GBytes *bytes, gboolean trusted);
GVariant * (g_variant_new_from_data)(const GVariantType *type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);
GVariantIter * (g_variant_iter_new)(GVariant *value);
gsize (g_variant_iter_init)(GVariantIter *iter, GVariant *value);
GVariantIter * (g_variant_iter_copy)(GVariantIter *iter);
gsize (g_variant_iter_n_children)(GVariantIter *iter);
void (g_variant_iter_free)(GVariantIter *iter);
GVariant * (g_variant_iter_next_value)(GVariantIter *iter);
GQuark (g_variant_parser_get_error_quark)(void);
GQuark (g_variant_parse_error_quark)(void);
GVariantBuilder * (g_variant_builder_new)(const GVariantType *type);
void (g_variant_builder_unref)(GVariantBuilder *builder);
GVariantBuilder * (g_variant_builder_ref)(GVariantBuilder *builder);
void (g_variant_builder_init)(GVariantBuilder *builder, const GVariantType *type);
GVariant * (g_variant_builder_end)(GVariantBuilder *builder);
void (g_variant_builder_clear)(GVariantBuilder *builder);
void (g_variant_builder_open)(GVariantBuilder *builder, const GVariantType *type);
void (g_variant_builder_close)(GVariantBuilder *builder);
void (g_variant_builder_add_value)(GVariantBuilder *builder, GVariant *value);
GVariant * (g_variant_new_va)(const gchar *format_string, const gchar **endptr, va_list *app);
void (g_variant_get_va)(GVariant *value, const gchar *format_string, const gchar **endptr, va_list *app);
gboolean (g_variant_check_format_string)(GVariant *value, const gchar *format_string, gboolean copy_only);
GVariant * (g_variant_parse)(const GVariantType *type, const gchar *text, const gchar *limit, const gchar **endptr, GError **error);
GVariant * (g_variant_new_parsed_va)(const gchar *format, va_list *app);
gchar * (g_variant_parse_error_print_context)(GError *error, const gchar *source_str);
gint (g_variant_compare)(gconstpointer one, gconstpointer two);
GVariantDict * (g_variant_dict_new)(GVariant *from_asv);
void (g_variant_dict_init)(GVariantDict *dict, GVariant *from_asv);
GVariant * (g_variant_dict_lookup_value)(GVariantDict *dict, const gchar *key, const GVariantType *expected_type);
gboolean (g_variant_dict_contains)(GVariantDict *dict, const gchar *key);
void (g_variant_dict_insert_value)(GVariantDict *dict, const gchar *key, GVariant *value);
gboolean (g_variant_dict_remove)(GVariantDict *dict, const gchar *key);
void (g_variant_dict_clear)(GVariantDict *dict);
GVariant * (g_variant_dict_end)(GVariantDict *dict);
GVariantDict * (g_variant_dict_ref)(GVariantDict *dict);
void (g_variant_dict_unref)(GVariantDict *dict);
void (g_variant_unref)(GVariant *value);
// Header /usr/include/glib-2.0/glib/gvarianttype.h
gboolean (g_variant_type_string_scan)(const gchar *string, const gchar *limit, const gchar **endptr);
void (g_variant_type_free)(GVariantType *type);
GVariantType * (g_variant_type_copy)(const GVariantType *type);
GVariantType * (g_variant_type_new)(const gchar *type_string);
gsize (g_variant_type_get_string_length)(const GVariantType *type);
const gchar * (g_variant_type_peek_string)(const GVariantType *type);
gchar * (g_variant_type_dup_string)(const GVariantType *type);
gboolean (g_variant_type_is_definite)(const GVariantType *type);
gboolean (g_variant_type_is_container)(const GVariantType *type);
gboolean (g_variant_type_is_basic)(const GVariantType *type);
gboolean (g_variant_type_is_maybe)(const GVariantType *type);
gboolean (g_variant_type_is_array)(const GVariantType *type);
gboolean (g_variant_type_is_tuple)(const GVariantType *type);
gboolean (g_variant_type_is_dict_entry)(const GVariantType *type);
gboolean (g_variant_type_is_variant)(const GVariantType *type);
guint (g_variant_type_hash)(gconstpointer type);
gboolean (g_variant_type_equal)(gconstpointer type1, gconstpointer type2);
gboolean (g_variant_type_is_subtype_of)(const GVariantType *type, const GVariantType *supertype);
const GVariantType * (g_variant_type_element)(const GVariantType *type);
const GVariantType * (g_variant_type_first)(const GVariantType *type);
const GVariantType * (g_variant_type_next)(const GVariantType *type);
gsize (g_variant_type_n_items)(const GVariantType *type);
const GVariantType * (g_variant_type_key)(const GVariantType *type);
const GVariantType * (g_variant_type_value)(const GVariantType *type);
GVariantType * (g_variant_type_new_array)(const GVariantType *element);
GVariantType * (g_variant_type_new_maybe)(const GVariantType *element);
GVariantType * (g_variant_type_new_tuple)(const GVariantType * const *items, gint length);
GVariantType * (g_variant_type_new_dict_entry)(const GVariantType *key, const GVariantType *value);
const GVariantType * (g_variant_type_checked_)(const gchar *type_string);
gsize (g_variant_type_string_get_depth_)(const gchar *type_string);
gboolean (g_variant_type_string_is_valid)(const gchar *type_string);
// Header /usr/include/glib-2.0/glib/gversion.h
const gchar * (glib_check_version)(guint required_major, guint required_minor, guint required_micro);
// Header /usr/include/glib-2.0/glib-unix.h
gboolean (g_unix_open_pipe)(gint *fds, gint flags, GError **error);
gboolean (g_unix_set_fd_nonblocking)(gint fd, gboolean nonblock, GError **error);
GSource* (g_unix_signal_source_new)(gint signum);
guint (g_unix_signal_add_full)(gint priority, gint signum, GSourceFunc handler, gpointer user_data, GDestroyNotify notify);
guint (g_unix_signal_add)(gint signum, GSourceFunc handler, gpointer user_data);
GSource* (g_unix_fd_source_new)(gint fd, GIOCondition condition);
guint (g_unix_fd_add_full)(gint priority, gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data, GDestroyNotify notify);
guint (g_unix_fd_add)(gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data);
struct passwd* (g_unix_get_passwd_entry)(const gchar *user_name, GError **error);
int (g_fdwalk_set_cloexec)(int lowfd);
GQuark (g_unix_error_quark)(void);
// Header /usr/include/glib-2.0/gobject/gbinding.h
GType (g_binding_flags_get_type)(void);
GType (g_binding_get_type)(void);
GBindingFlags (g_binding_get_flags)(GBinding *binding);
GObject * (g_binding_get_source)(GBinding *binding);
GObject * (g_binding_dup_source)(GBinding *binding);
GObject * (g_binding_get_target)(GBinding *binding);
GObject * (g_binding_dup_target)(GBinding *binding);
const gchar * (g_binding_get_source_property)(GBinding *binding);
const gchar * (g_binding_get_target_property)(GBinding *binding);
void (g_binding_unbind)(GBinding *binding);
GBinding* (g_object_bind_property)(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags);
GBinding* (g_object_bind_property_full)(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify);
GBinding* (g_object_bind_property_with_closures)(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);
// Header /usr/include/glib-2.0/gobject/gbindinggroup.h
GType (g_binding_group_get_type)(void);
GBindingGroup* (g_binding_group_new)(void);
gpointer (g_binding_group_dup_source)(GBindingGroup *self);
void (g_binding_group_set_source)(GBindingGroup *self, gpointer source);
void (g_binding_group_bind)(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags);
void (g_binding_group_bind_full)(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify user_data_destroy);
void (g_binding_group_bind_with_closures)(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);
// Header /usr/include/glib-2.0/gobject/gboxed.h
gpointer (g_boxed_copy)(GType boxed_type, gconstpointer src_boxed);
void (g_boxed_free)(GType boxed_type, gpointer boxed);
void (g_value_set_boxed)(GValue *value, gconstpointer v_boxed);
void (g_value_set_static_boxed)(GValue *value, gconstpointer v_boxed);
void (g_value_take_boxed)(GValue *value, gconstpointer v_boxed);
void (g_value_set_boxed_take_ownership)(GValue *value, gconstpointer v_boxed);
gpointer (g_value_get_boxed)(const GValue *value);
gpointer (g_value_dup_boxed)(const GValue *value);
GType (g_boxed_type_register_static)(const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free);
GType (g_closure_get_type)(void);
GType (g_value_get_type)(void);
// Header /usr/include/glib-2.0/gobject/gclosure.h
GClosure* (g_cclosure_new_swap)(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);
GClosure* (g_signal_type_cclosure_new)(GType itype, guint struct_offset);
GClosure* (g_closure_ref)(GClosure *closure);
void (g_closure_sink)(GClosure *closure);
void (g_closure_unref)(GClosure *closure);
GClosure* (g_closure_new_simple)(guint sizeof_closure, gpointer data);
void (g_closure_add_finalize_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
void (g_closure_remove_finalize_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
void (g_closure_add_invalidate_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
void (g_closure_remove_invalidate_notifier)(GClosure *closure, gpointer notify_data, GClosureNotify notify_func);
void (g_closure_add_marshal_guards)(GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify);
void (g_closure_set_marshal)(GClosure *closure, GClosureMarshal marshal);
void (g_closure_set_meta_marshal)(GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal);
void (g_closure_invalidate)(GClosure *closure);
void (g_closure_invoke)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint);
void (g_cclosure_marshal_generic)(GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_generic_va)(GClosure *closure, GValue *return_value, gpointer instance, va_list args_list, gpointer marshal_data, int n_params, GType *param_types);
GClosure* (g_cclosure_new)(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);
// Header /usr/include/glib-2.0/gobject/genums.h
GEnumValue* (g_enum_get_value)(GEnumClass *enum_class, gint value);
GEnumValue* (g_enum_get_value_by_name)(GEnumClass *enum_class, const gchar *name);
GEnumValue* (g_enum_get_value_by_nick)(GEnumClass *enum_class, const gchar *nick);
GFlagsValue* (g_flags_get_first_value)(GFlagsClass *flags_class, guint value);
GFlagsValue* (g_flags_get_value_by_name)(GFlagsClass *flags_class, const gchar *name);
GFlagsValue* (g_flags_get_value_by_nick)(GFlagsClass *flags_class, const gchar *nick);
gchar* (g_enum_to_string)(GType g_enum_type, gint value);
gchar* (g_flags_to_string)(GType flags_type, guint value);
void (g_value_set_enum)(GValue *value, gint v_enum);
gint (g_value_get_enum)(const GValue *value);
void (g_value_set_flags)(GValue *value, guint v_flags);
guint (g_value_get_flags)(const GValue *value);
GType (g_enum_register_static)(const gchar *name, const GEnumValue *const_static_values);
GType (g_flags_register_static)(const gchar *name, const GFlagsValue *const_static_values);
void (g_enum_complete_type_info)(GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values);
void (g_flags_complete_type_info)(GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values);
// Header /usr/include/glib-2.0/gobject/glib-enumtypes.h
GType (g_unicode_type_get_type)(void);
GType (g_unicode_break_type_get_type)(void);
GType (g_unicode_script_get_type)(void);
GType (g_normalize_mode_get_type)(void);
// Header /usr/include/glib-2.0/gobject/glib-types.h
GType (g_date_get_type)(void);
GType (g_strv_get_type)(void);
GType (g_gstring_get_type)(void);
GType (g_hash_table_get_type)(void);
GType (g_regex_get_type)(void);
GType (g_match_info_get_type)(void);
GType (g_array_get_type)(void);
GType (g_byte_array_get_type)(void);
GType (g_ptr_array_get_type)(void);
GType (g_bytes_get_type)(void);
GType (g_variant_type_get_gtype)(void);
GType (g_error_get_type)(void);
GType (g_date_time_get_type)(void);
GType (g_time_zone_get_type)(void);
GType (g_io_channel_get_type)(void);
GType (g_io_condition_get_type)(void);
GType (g_variant_builder_get_type)(void);
GType (g_variant_dict_get_type)(void);
GType (g_main_loop_get_type)(void);
GType (g_main_context_get_type)(void);
GType (g_source_get_type)(void);
GType (g_pollfd_get_type)(void);
GType (g_markup_parse_context_get_type)(void);
GType (g_key_file_get_type)(void);
GType (g_mapped_file_get_type)(void);
GType (g_thread_get_type)(void);
GType (g_option_group_get_type)(void);
GType (g_uri_get_type)(void);
GType (g_tree_get_type)(void);
GType (g_pattern_spec_get_type)(void);
GType (g_bookmark_file_get_type)(void);
GType (g_hmac_get_type)(void);
GType (g_dir_get_type)(void);
GType (g_rand_get_type)(void);
GType (g_strv_builder_get_type)(void);
GType (g_checksum_get_type)(void);
GType (g_variant_get_gtype)(void);
// Header /usr/include/glib-2.0/gobject/gmarshal.h
void (g_cclosure_marshal_VOID__VOIDv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__BOOLEAN)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__BOOLEANv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__CHAR)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__CHARv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__UCHAR)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__UCHARv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__INT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__INTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__UINT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__UINTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__LONG)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__LONGv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__ULONG)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__ULONGv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__ENUM)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__ENUMv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__FLAGS)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__FLAGSv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__FLOAT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__FLOATv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__DOUBLE)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__DOUBLEv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__STRING)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__STRINGv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__PARAM)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__PARAMv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__BOXED)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__BOXEDv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__POINTER)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__POINTERv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__OBJECT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__OBJECTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__VARIANT)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__VARIANTv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__UINT_POINTER)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_VOID__UINT_POINTERv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_BOOLEAN__FLAGS)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_BOOLEAN__FLAGSv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_STRING__OBJECT_POINTER)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_STRING__OBJECT_POINTERv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_BOOLEAN__BOXED_BOXED)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
void (g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv)(GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);
void (g_cclosure_marshal_VOID__VOID)(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);
// Header /usr/include/glib-2.0/gobject/gobject.h
GType (g_initially_unowned_get_type)(void);
void (g_object_class_install_property)(GObjectClass *oclass, guint property_id, GParamSpec *pspec);
GParamSpec* (g_object_class_find_property)(GObjectClass *oclass, const gchar *property_name);
GParamSpec** (g_object_class_list_properties)(GObjectClass *oclass, guint *n_properties);
void (g_object_class_override_property)(GObjectClass *oclass, guint property_id, const gchar *name);
void (g_object_class_install_properties)(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs);
void (g_object_interface_install_property)(gpointer g_iface, GParamSpec *pspec);
GParamSpec* (g_object_interface_find_property)(gpointer g_iface, const gchar *property_name);
GParamSpec** (g_object_interface_list_properties)(gpointer g_iface, guint *n_properties_p);
GType (g_object_get_type)(void);
GObject* (g_object_new_with_properties)(GType object_type, guint n_properties, const char *names[], const GValue values[]);
void (g_object_setv)(GObject *object, guint n_properties, const gchar *names[], const GValue values[]);
void (g_object_set_valist)(GObject *object, const gchar *first_property_name, va_list var_args);
void (g_object_getv)(GObject *object, guint n_properties, const gchar *names[], GValue values[]);
void (g_object_get_valist)(GObject *object, const gchar *first_property_name, va_list var_args);
void (g_object_set_property)(GObject *object, const gchar *property_name, const GValue *value);
void (g_object_get_property)(GObject *object, const gchar *property_name, GValue *value);
void (g_object_freeze_notify)(GObject *object);
void (g_object_notify)(GObject *object, const gchar *property_name);
void (g_object_notify_by_pspec)(GObject *object, GParamSpec *pspec);
void (g_object_thaw_notify)(GObject *object);
gboolean (g_object_is_floating)(gpointer object);
gpointer (g_object_ref_sink)(gpointer object);
gpointer (g_object_take_ref)(gpointer object);
gpointer (g_object_ref)(gpointer object);
void (g_object_unref)(gpointer object);
void (g_object_weak_ref)(GObject *object, GWeakNotify notify, gpointer data);
void (g_object_weak_unref)(GObject *object, GWeakNotify notify, gpointer data);
void (g_object_add_weak_pointer)(GObject *object, gpointer *weak_pointer_location);
void (g_object_remove_weak_pointer)(GObject *object, gpointer *weak_pointer_location);
void (g_object_add_toggle_ref)(GObject *object, GToggleNotify notify, gpointer data);
void (g_object_remove_toggle_ref)(GObject *object, GToggleNotify notify, gpointer data);
gpointer (g_object_get_qdata)(GObject *object, GQuark quark);
void (g_object_set_qdata)(GObject *object, GQuark quark, gpointer data);
void (g_object_set_qdata_full)(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy);
gpointer (g_object_steal_qdata)(GObject *object, GQuark quark);
gpointer (g_object_dup_qdata)(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data);
gboolean (g_object_replace_qdata)(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);
gpointer (g_object_get_data)(GObject *object, const gchar *key);
void (g_object_set_data)(GObject *object, const gchar *key, gpointer data);
void (g_object_set_data_full)(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy);
gpointer (g_object_steal_data)(GObject *object, const gchar *key);
gpointer (g_object_dup_data)(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data);
gboolean (g_object_replace_data)(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);
void (g_object_watch_closure)(GObject *object, GClosure *closure);
GClosure* (g_cclosure_new_object)(GCallback callback_func, GObject *object);
GClosure* (g_cclosure_new_object_swap)(GCallback callback_func, GObject *object);
GClosure* (g_closure_new_object)(guint sizeof_closure, GObject *object);
void (g_value_set_object)(GValue *value, gpointer v_object);
gpointer (g_value_get_object)(const GValue *value);
gpointer (g_value_dup_object)(const GValue *value);
gulong (g_signal_connect_object)(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags);
void (g_object_force_floating)(GObject *object);
void (g_object_run_dispose)(GObject *object);
void (g_value_take_object)(GValue *value, gpointer v_object);
void (g_value_set_object_take_ownership)(GValue *value, gpointer v_object);
gsize (g_object_compat_control)(gsize what, gpointer data);
void (g_clear_object)(GObject **object_ptr);
void (g_weak_ref_init)(GWeakRef *weak_ref, gpointer object);
void (g_weak_ref_clear)(GWeakRef *weak_ref);
gpointer (g_weak_ref_get)(GWeakRef *weak_ref);
void (g_weak_ref_set)(GWeakRef *weak_ref, gpointer object);
// Header /usr/include/glib-2.0/gobject/gparam.h
GParamSpec* (g_param_spec_ref)(GParamSpec *pspec);
void (g_param_spec_unref)(GParamSpec *pspec);
void (g_param_spec_sink)(GParamSpec *pspec);
GParamSpec* (g_param_spec_ref_sink)(GParamSpec *pspec);
gpointer (g_param_spec_get_qdata)(GParamSpec *pspec, GQuark quark);
void (g_param_spec_set_qdata)(GParamSpec *pspec, GQuark quark, gpointer data);
void (g_param_spec_set_qdata_full)(GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy);
gpointer (g_param_spec_steal_qdata)(GParamSpec *pspec, GQuark quark);
GParamSpec* (g_param_spec_get_redirect_target)(GParamSpec *pspec);
void (g_param_value_set_default)(GParamSpec *pspec, GValue *value);
gboolean (g_param_value_defaults)(GParamSpec *pspec, const GValue *value);
gboolean (g_param_value_validate)(GParamSpec *pspec, GValue *value);
gboolean (g_param_value_is_valid)(GParamSpec *pspec, const GValue *value);
gboolean (g_param_value_convert)(GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation);
gint (g_param_values_cmp)(GParamSpec *pspec, const GValue *value1, const GValue *value2);
const gchar * (g_param_spec_get_name)(GParamSpec *pspec);
const gchar * (g_param_spec_get_nick)(GParamSpec *pspec);
const gchar * (g_param_spec_get_blurb)(GParamSpec *pspec);
void (g_value_set_param)(GValue *value, GParamSpec *param);
GParamSpec* (g_value_get_param)(const GValue *value);
GParamSpec* (g_value_dup_param)(const GValue *value);
void (g_value_take_param)(GValue *value, GParamSpec *param);
void (g_value_set_param_take_ownership)(GValue *value, GParamSpec *param);
const GValue * (g_param_spec_get_default_value)(GParamSpec *pspec);
GQuark (g_param_spec_get_name_quark)(GParamSpec *pspec);
GType (g_param_type_register_static)(const gchar *name, const GParamSpecTypeInfo *pspec_info);
gboolean (g_param_spec_is_valid_name)(const gchar *name);
GType (_g_param_type_register_static_constant)(const gchar *name, const GParamSpecTypeInfo *pspec_info, GType opt_type);
gpointer (g_param_spec_internal)(GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);
GParamSpecPool* (g_param_spec_pool_new)(gboolean type_prefixing);
void (g_param_spec_pool_insert)(GParamSpecPool *pool, GParamSpec *pspec, GType owner_type);
void (g_param_spec_pool_remove)(GParamSpecPool *pool, GParamSpec *pspec);
GParamSpec* (g_param_spec_pool_lookup)(GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors);
GList* (g_param_spec_pool_list_owned)(GParamSpecPool *pool, GType owner_type);
GParamSpec** (g_param_spec_pool_list)(GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p);
void (g_param_spec_pool_free)(GParamSpecPool *pool);
// Header /usr/include/glib-2.0/gobject/gparamspecs.h
GParamSpec* (g_param_spec_char)(const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags);
GParamSpec* (g_param_spec_uchar)(const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags);
GParamSpec* (g_param_spec_boolean)(const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags);
GParamSpec* (g_param_spec_int)(const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags);
GParamSpec* (g_param_spec_uint)(const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags);
GParamSpec* (g_param_spec_long)(const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags);
GParamSpec* (g_param_spec_ulong)(const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags);
GParamSpec* (g_param_spec_int64)(const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags);
GParamSpec* (g_param_spec_uint64)(const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags);
GParamSpec* (g_param_spec_unichar)(const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags);
GParamSpec* (g_param_spec_enum)(const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags);
GParamSpec* (g_param_spec_flags)(const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags);
GParamSpec* (g_param_spec_float)(const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags);
GParamSpec* (g_param_spec_double)(const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags);
GParamSpec* (g_param_spec_string)(const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags);
GParamSpec* (g_param_spec_param)(const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags);
GParamSpec* (g_param_spec_boxed)(const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags);
GParamSpec* (g_param_spec_pointer)(const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);
GParamSpec* (g_param_spec_value_array)(const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags);
GParamSpec* (g_param_spec_object)(const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags);
GParamSpec* (g_param_spec_override)(const gchar *name, GParamSpec *overridden);
GParamSpec* (g_param_spec_gtype)(const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags);
GParamSpec* (g_param_spec_variant)(const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags);
// Header /usr/include/glib-2.0/gobject/gsignal.h
guint (g_signal_new_valist)(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, va_list args);
void (g_signal_set_va_marshaller)(guint signal_id, GType instance_type, GSignalCVaMarshaller va_marshaller);
void (g_signal_emitv)(const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value);
void (g_signal_emit_valist)(gpointer instance, guint signal_id, GQuark detail, va_list var_args);
guint (g_signal_lookup)(const gchar *name, GType itype);
const gchar * (g_signal_name)(guint signal_id);
void (g_signal_query)(guint signal_id, GSignalQuery *query);
guint* (g_signal_list_ids)(GType itype, guint *n_ids);
gboolean (g_signal_is_valid_name)(const gchar *name);
gboolean (g_signal_parse_name)(const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark);
GSignalInvocationHint* (g_signal_get_invocation_hint)(gpointer instance);
void (g_signal_stop_emission)(gpointer instance, guint signal_id, GQuark detail);
void (g_signal_stop_emission_by_name)(gpointer instance, const gchar *detailed_signal);
gulong (g_signal_add_emission_hook)(guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy);
void (g_signal_remove_emission_hook)(guint signal_id, gulong hook_id);
gboolean (g_signal_has_handler_pending)(gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked);
gulong (g_signal_connect_closure_by_id)(gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after);
gulong (g_signal_connect_closure)(gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after);
gulong (g_signal_connect_data)(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags);
void (g_signal_handler_block)(gpointer instance, gulong handler_id);
void (g_signal_handler_unblock)(gpointer instance, gulong handler_id);
void (g_signal_handler_disconnect)(gpointer instance, gulong handler_id);
gboolean (g_signal_handler_is_connected)(gpointer instance, gulong handler_id);
gulong (g_signal_handler_find)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
guint (g_signal_handlers_block_matched)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
guint (g_signal_handlers_unblock_matched)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
guint (g_signal_handlers_disconnect_matched)(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);
void (g_clear_signal_handler)(gulong *handler_id_ptr, gpointer instance);
void (g_signal_override_class_closure)(guint signal_id, GType instance_type, GClosure *class_closure);
void (g_signal_override_class_handler)(const gchar *signal_name, GType instance_type, GCallback class_handler);
void (g_signal_chain_from_overridden)(const GValue *instance_and_params, GValue *return_value);
gboolean (g_signal_accumulator_true_handled)(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);
gboolean (g_signal_accumulator_first_wins)(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);
void (g_signal_handlers_destroy)(gpointer instance);
void (_g_signals_destroy)(GType itype);
guint (g_signal_newv)(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types);
// Header /usr/include/glib-2.0/gobject/gsignalgroup.h
GType (g_signal_group_get_type)(void);
GSignalGroup* (g_signal_group_new)(GType target_type);
void (g_signal_group_set_target)(GSignalGroup *self, gpointer target);
gpointer (g_signal_group_dup_target)(GSignalGroup *self);
void (g_signal_group_block)(GSignalGroup *self);
void (g_signal_group_unblock)(GSignalGroup *self);
void (g_signal_group_connect_closure)(GSignalGroup *self, const gchar *detailed_signal, GClosure *closure, gboolean after);
void (g_signal_group_connect_object)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer object, GConnectFlags flags);
void (g_signal_group_connect_data)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify notify, GConnectFlags flags);
void (g_signal_group_connect)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data);
void (g_signal_group_connect_after)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data);
void (g_signal_group_connect_swapped)(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data);
// Header /usr/include/glib-2.0/gobject/gsourceclosure.h
void (g_source_set_dummy_callback)(GSource *source);
void (g_source_set_closure)(GSource *source, GClosure *closure);
// Header /usr/include/glib-2.0/gobject/gtype.h
void (g_type_init_with_debug_flags)(GTypeDebugFlags debug_flags);
GQuark (g_type_qname)(GType type);
GType (g_type_from_name)(const gchar *name);
GType (g_type_parent)(GType type);
guint (g_type_depth)(GType type);
GType (g_type_next_base)(GType leaf_type, GType root_type);
gboolean (g_type_is_a)(GType type, GType is_a_type);
gpointer (g_type_class_ref)(GType type);
gpointer (g_type_class_peek)(GType type);
gpointer (g_type_class_peek_static)(GType type);
void (g_type_class_unref)(gpointer g_class);
gpointer (g_type_class_peek_parent)(gpointer g_class);
gpointer (g_type_interface_peek)(gpointer instance_class, GType iface_type);
gpointer (g_type_interface_peek_parent)(gpointer g_iface);
gpointer (g_type_default_interface_ref)(GType g_type);
gpointer (g_type_default_interface_peek)(GType g_type);
void (g_type_default_interface_unref)(gpointer g_iface);
GType* (g_type_children)(GType type, guint *n_children);
GType* (g_type_interfaces)(GType type, guint *n_interfaces);
void (g_type_set_qdata)(GType type, GQuark quark, gpointer data);
gpointer (g_type_get_qdata)(GType type, GQuark quark);
void (g_type_query)(GType type, GTypeQuery *query);
int (g_type_get_instance_count)(GType type);
GType (g_type_register_static_simple)(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags);
GType (g_type_register_dynamic)(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags);
GType (g_type_register_fundamental)(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags);
void (g_type_add_interface_static)(GType instance_type, GType interface_type, const GInterfaceInfo *info);
void (g_type_add_interface_dynamic)(GType instance_type, GType interface_type, GTypePlugin *plugin);
void (g_type_interface_add_prerequisite)(GType interface_type, GType prerequisite_type);
GType* (g_type_interface_prerequisites)(GType interface_type, guint *n_prerequisites);
GType (g_type_interface_instantiatable_prerequisite)(GType interface_type);
void (g_type_class_add_private)(gpointer g_class, gsize private_size);
gint (g_type_add_instance_private)(GType class_type, gsize private_size);
gpointer (g_type_instance_get_private)(GTypeInstance *instance, GType private_type);
void (g_type_class_adjust_private_offset)(gpointer g_class, gint *private_size_or_offset);
void (g_type_add_class_private)(GType class_type, gsize private_size);
gpointer (g_type_class_get_private)(GTypeClass *klass, GType private_type);
gint (g_type_class_get_instance_private_offset)(gpointer g_class);
void (g_type_ensure)(GType type);
guint (g_type_get_type_registration_serial)(void);
GTypePlugin* (g_type_get_plugin)(GType type);
GTypePlugin* (g_type_interface_get_plugin)(GType instance_type, GType interface_type);
GType (g_type_fundamental_next)(void);
GType (g_type_fundamental)(GType type_id);
GTypeInstance* (g_type_create_instance)(GType type);
void (g_type_free_instance)(GTypeInstance *instance);
void (g_type_add_class_cache_func)(gpointer cache_data, GTypeClassCacheFunc cache_func);
void (g_type_remove_class_cache_func)(gpointer cache_data, GTypeClassCacheFunc cache_func);
void (g_type_class_unref_uncached)(gpointer g_class);
void (g_type_add_interface_check)(gpointer check_data, GTypeInterfaceCheckFunc check_func);
void (g_type_remove_interface_check)(gpointer check_data, GTypeInterfaceCheckFunc check_func);
GTypeValueTable* (g_type_value_table_peek)(GType type);
gboolean (g_type_check_instance)(GTypeInstance *instance);
GTypeInstance* (g_type_check_instance_cast)(GTypeInstance *instance, GType iface_type);
gboolean (g_type_check_instance_is_a)(GTypeInstance *instance, GType iface_type);
gboolean (g_type_check_instance_is_fundamentally_a)(GTypeInstance *instance, GType fundamental_type);
GTypeClass* (g_type_check_class_cast)(GTypeClass *g_class, GType is_a_type);
gboolean (g_type_check_class_is_a)(GTypeClass *g_class, GType is_a_type);
gboolean (g_type_check_is_value_type)(GType type);
gboolean (g_type_check_value)(const GValue *value);
gboolean (g_type_check_value_holds)(const GValue *value, GType type);
gboolean (g_type_test_flags)(GType type, guint flags);
const gchar * (g_type_name_from_instance)(GTypeInstance *instance);
const gchar * (g_type_name_from_class)(GTypeClass *g_class);
// Header /usr/include/glib-2.0/gobject/gtypemodule.h
GType (g_type_module_get_type)(void);
gboolean (g_type_module_use)(GTypeModule *module);
void (g_type_module_unuse)(GTypeModule *module);
void (g_type_module_set_name)(GTypeModule *module, const gchar *name);
GType (g_type_module_register_type)(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags);
void (g_type_module_add_interface)(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info);
GType (g_type_module_register_enum)(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values);
GType (g_type_module_register_flags)(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values);
// Header /usr/include/glib-2.0/gobject/gtypeplugin.h
GType (g_type_plugin_get_type)(void);
void (g_type_plugin_use)(GTypePlugin *plugin);
void (g_type_plugin_unuse)(GTypePlugin *plugin);
void (g_type_plugin_complete_type_info)(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table);
void (g_type_plugin_complete_interface_info)(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info);
// Header /usr/include/glib-2.0/gobject/gvalue.h
void (g_value_copy)(const GValue *src_value, GValue *dest_value);
GValue* (g_value_reset)(GValue *value);
void (g_value_unset)(GValue *value);
void (g_value_set_instance)(GValue *value, gpointer instance);
void (g_value_init_from_instance)(GValue *value, gpointer instance);
gboolean (g_value_fits_pointer)(const GValue *value);
gpointer (g_value_peek_pointer)(const GValue *value);
gboolean (g_value_type_compatible)(GType src_type, GType dest_type);
gboolean (g_value_type_transformable)(GType src_type, GType dest_type);
gboolean (g_value_transform)(const GValue *src_value, GValue *dest_value);
void (g_value_register_transform_func)(GType src_type, GType dest_type, GValueTransform transform_func);
GValue* (g_value_init)(GValue *value, GType g_type);
// Header /usr/include/glib-2.0/gobject/gvaluearray.h
GType (g_value_array_get_type)(void);
GValue* (g_value_array_get_nth)(GValueArray *value_array, guint index_);
GValueArray* (g_value_array_new)(guint n_prealloced);
void (g_value_array_free)(GValueArray *value_array);
GValueArray* (g_value_array_copy)(const GValueArray *value_array);
GValueArray* (g_value_array_prepend)(GValueArray *value_array, const GValue *value);
GValueArray* (g_value_array_append)(GValueArray *value_array, const GValue *value);
GValueArray* (g_value_array_insert)(GValueArray *value_array, guint index_, const GValue *value);
GValueArray* (g_value_array_remove)(GValueArray *value_array, guint index_);
GValueArray* (g_value_array_sort)(GValueArray *value_array, GCompareFunc compare_func);
GValueArray* (g_value_array_sort_with_data)(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data);
// Header /usr/include/glib-2.0/gobject/gvaluecollector.h
// Header /usr/include/glib-2.0/gobject/gvaluetypes.h
gchar (g_value_get_char)(const GValue *value);
void (g_value_set_schar)(GValue *value, gint8 v_char);
gint8 (g_value_get_schar)(const GValue *value);
void (g_value_set_uchar)(GValue *value, guchar v_uchar);
guchar (g_value_get_uchar)(const GValue *value);
void (g_value_set_boolean)(GValue *value, gboolean v_boolean);
gboolean (g_value_get_boolean)(const GValue *value);
void (g_value_set_int)(GValue *value, gint v_int);
gint (g_value_get_int)(const GValue *value);
void (g_value_set_uint)(GValue *value, guint v_uint);
guint (g_value_get_uint)(const GValue *value);
void (g_value_set_long)(GValue *value, glong v_long);
glong (g_value_get_long)(const GValue *value);
void (g_value_set_ulong)(GValue *value, gulong v_ulong);
gulong (g_value_get_ulong)(const GValue *value);
void (g_value_set_int64)(GValue *value, gint64 v_int64);
gint64 (g_value_get_int64)(const GValue *value);
void (g_value_set_uint64)(GValue *value, guint64 v_uint64);
guint64 (g_value_get_uint64)(const GValue *value);
void (g_value_set_float)(GValue *value, gfloat v_float);
gfloat (g_value_get_float)(const GValue *value);
void (g_value_set_double)(GValue *value, gdouble v_double);
gdouble (g_value_get_double)(const GValue *value);
void (g_value_set_string)(GValue *value, const gchar *v_string);
void (g_value_set_static_string)(GValue *value, const gchar *v_string);
void (g_value_set_interned_string)(GValue *value, const gchar *v_string);
const gchar * (g_value_get_string)(const GValue *value);
gchar* (g_value_dup_string)(const GValue *value);
gchar* (g_value_steal_string)(GValue *value);
void (g_value_set_pointer)(GValue *value, gpointer v_pointer);
gpointer (g_value_get_pointer)(const GValue *value);
GType (g_gtype_get_type)(void);
void (g_value_set_gtype)(GValue *value, GType v_gtype);
GType (g_value_get_gtype)(const GValue *value);
void (g_value_set_variant)(GValue *value, GVariant *variant);
void (g_value_take_variant)(GValue *value, GVariant *variant);
GVariant* (g_value_get_variant)(const GValue *value);
GVariant* (g_value_dup_variant)(const GValue *value);
GType (g_pointer_type_register_static)(const gchar *name);
gchar* (g_strdup_value_contents)(const GValue *value);
void (g_value_take_string)(GValue *value, gchar *v_string);
void (g_value_set_string_take_ownership)(GValue *value, gchar *v_string);
void (g_value_set_char)(GValue *value, gchar v_char);
// Header /usr/include/glib-2.0/gio/gaction.h
GType (g_action_get_type)(void);
const gchar * (g_action_get_name)(GAction *action);
const GVariantType * (g_action_get_parameter_type)(GAction *action);
const GVariantType * (g_action_get_state_type)(GAction *action);
GVariant * (g_action_get_state_hint)(GAction *action);
gboolean (g_action_get_enabled)(GAction *action);
GVariant * (g_action_get_state)(GAction *action);
void (g_action_change_state)(GAction *action, GVariant *value);
void (g_action_activate)(GAction *action, GVariant *parameter);
gboolean (g_action_name_is_valid)(const gchar *action_name);
gboolean (g_action_parse_detailed_name)(const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error);
gchar * (g_action_print_detailed_name)(const gchar *action_name, GVariant *target_value);
// Header /usr/include/glib-2.0/gio/gactiongroup.h
GType (g_action_group_get_type)(void);
gboolean (g_action_group_has_action)(GActionGroup *action_group, const gchar *action_name);
gchar ** (g_action_group_list_actions)(GActionGroup *action_group);
const GVariantType * (g_action_group_get_action_parameter_type)(GActionGroup *action_group, const gchar *action_name);
const GVariantType * (g_action_group_get_action_state_type)(GActionGroup *action_group, const gchar *action_name);
GVariant * (g_action_group_get_action_state_hint)(GActionGroup *action_group, const gchar *action_name);
gboolean (g_action_group_get_action_enabled)(GActionGroup *action_group, const gchar *action_name);
GVariant * (g_action_group_get_action_state)(GActionGroup *action_group, const gchar *action_name);
void (g_action_group_change_action_state)(GActionGroup *action_group, const gchar *action_name, GVariant *value);
void (g_action_group_activate_action)(GActionGroup *action_group, const gchar *action_name, GVariant *parameter);
void (g_action_group_action_added)(GActionGroup *action_group, const gchar *action_name);
void (g_action_group_action_removed)(GActionGroup *action_group, const gchar *action_name);
void (g_action_group_action_enabled_changed)(GActionGroup *action_group, const gchar *action_name, gboolean enabled);
void (g_action_group_action_state_changed)(GActionGroup *action_group, const gchar *action_name, GVariant *state);
gboolean (g_action_group_query_action)(GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state);
// Header /usr/include/glib-2.0/gio/gactiongroupexporter.h
void (g_dbus_connection_unexport_action_group)(GDBusConnection *connection, guint export_id);
guint (g_dbus_connection_export_action_group)(GDBusConnection *connection, const gchar *object_path, GActionGroup *action_group, GError **error);
// Header /usr/include/glib-2.0/gio/gactionmap.h
GType (g_action_map_get_type)(void);
GAction * (g_action_map_lookup_action)(GActionMap *action_map, const gchar *action_name);
void (g_action_map_add_action)(GActionMap *action_map, GAction *action);
void (g_action_map_remove_action)(GActionMap *action_map, const gchar *action_name);
void (g_action_map_add_action_entries)(GActionMap *action_map, const GActionEntry *entries, gint n_entries, gpointer user_data);
void (g_action_map_remove_action_entries)(GActionMap *action_map, const GActionEntry *entries, gint n_entries);
// Header /usr/include/glib-2.0/gio/gappinfo.h
GType (g_app_info_get_type)(void);
GType (g_app_launch_context_get_type)(void);
GAppInfo * (g_app_info_create_from_commandline)(const char *commandline, const char *application_name, GAppInfoCreateFlags flags, GError **error);
GAppInfo * (g_app_info_dup)(GAppInfo *appinfo);
gboolean (g_app_info_equal)(GAppInfo *appinfo1, GAppInfo *appinfo2);
const char* (g_app_info_get_id)(GAppInfo *appinfo);
const char* (g_app_info_get_name)(GAppInfo *appinfo);
const char* (g_app_info_get_display_name)(GAppInfo *appinfo);
const char* (g_app_info_get_description)(GAppInfo *appinfo);
const char* (g_app_info_get_executable)(GAppInfo *appinfo);
const char* (g_app_info_get_commandline)(GAppInfo *appinfo);
GIcon * (g_app_info_get_icon)(GAppInfo *appinfo);
gboolean (g_app_info_launch)(GAppInfo *appinfo, GList *files, GAppLaunchContext *context, GError **error);
gboolean (g_app_info_supports_uris)(GAppInfo *appinfo);
gboolean (g_app_info_supports_files)(GAppInfo *appinfo);
gboolean (g_app_info_launch_uris)(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GError **error);
void (g_app_info_launch_uris_async)(GAppInfo *appinfo, GList *uris, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_app_info_launch_uris_finish)(GAppInfo *appinfo, GAsyncResult *result, GError **error);
gboolean (g_app_info_should_show)(GAppInfo *appinfo);
gboolean (g_app_info_set_as_default_for_type)(GAppInfo *appinfo, const char *content_type, GError **error);
gboolean (g_app_info_set_as_default_for_extension)(GAppInfo *appinfo, const char *extension, GError **error);
gboolean (g_app_info_add_supports_type)(GAppInfo *appinfo, const char *content_type, GError **error);
gboolean (g_app_info_can_remove_supports_type)(GAppInfo *appinfo);
gboolean (g_app_info_remove_supports_type)(GAppInfo *appinfo, const char *content_type, GError **error);
const char** (g_app_info_get_supported_types)(GAppInfo *appinfo);
gboolean (g_app_info_can_delete)(GAppInfo *appinfo);
gboolean (g_app_info_delete)(GAppInfo *appinfo);
gboolean (g_app_info_set_as_last_used_for_type)(GAppInfo *appinfo, const char *content_type, GError **error);
GList * (g_app_info_get_all)(void);
GList * (g_app_info_get_all_for_type)(const char *content_type);
GList * (g_app_info_get_recommended_for_type)(const gchar *content_type);
GList * (g_app_info_get_fallback_for_type)(const gchar *content_type);
void (g_app_info_reset_type_associations)(const char *content_type);
GAppInfo* (g_app_info_get_default_for_type)(const char *content_type, gboolean must_support_uris);
void (g_app_info_get_default_for_type_async)(const char *content_type, gboolean must_support_uris, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GAppInfo* (g_app_info_get_default_for_type_finish)(GAsyncResult *result, GError **error);
GAppInfo* (g_app_info_get_default_for_uri_scheme)(const char *uri_scheme);
void (g_app_info_get_default_for_uri_scheme_async)(const char *uri_scheme, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GAppInfo* (g_app_info_get_default_for_uri_scheme_finish)(GAsyncResult *result, GError **error);
gboolean (g_app_info_launch_default_for_uri)(const char *uri, GAppLaunchContext *context, GError **error);
void (g_app_info_launch_default_for_uri_async)(const char *uri, GAppLaunchContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_app_info_launch_default_for_uri_finish)(GAsyncResult *result, GError **error);
GAppLaunchContext* (g_app_launch_context_new)(void);
void (g_app_launch_context_setenv)(GAppLaunchContext *context, const char *variable, const char *value);
void (g_app_launch_context_unsetenv)(GAppLaunchContext *context, const char *variable);
char ** (g_app_launch_context_get_environment)(GAppLaunchContext *context);
char * (g_app_launch_context_get_display)(GAppLaunchContext *context, GAppInfo *info, GList *files);
char * (g_app_launch_context_get_startup_notify_id)(GAppLaunchContext *context, GAppInfo *info, GList *files);
void (g_app_launch_context_launch_failed)(GAppLaunchContext *context, const char * startup_notify_id);
GType (g_app_info_monitor_get_type)(void);
GAppInfoMonitor * (g_app_info_monitor_get)(void);
// Header /usr/include/glib-2.0/gio/gapplication.h
GType (g_application_get_type)(void);
gboolean (g_application_id_is_valid)(const gchar *application_id);
GApplication * (g_application_new)(const gchar *application_id, GApplicationFlags flags);
const gchar * (g_application_get_application_id)(GApplication *application);
void (g_application_set_application_id)(GApplication *application, const gchar *application_id);
const gchar * (g_application_get_version)(GApplication *application);
void (g_application_set_version)(GApplication *application, const gchar *version);
GDBusConnection * (g_application_get_dbus_connection)(GApplication *application);
const gchar * (g_application_get_dbus_object_path)(GApplication *application);
guint (g_application_get_inactivity_timeout)(GApplication *application);
void (g_application_set_inactivity_timeout)(GApplication *application, guint inactivity_timeout);
GApplicationFlags (g_application_get_flags)(GApplication *application);
void (g_application_set_flags)(GApplication *application, GApplicationFlags flags);
const gchar * (g_application_get_resource_base_path)(GApplication *application);
void (g_application_set_resource_base_path)(GApplication *application, const gchar *resource_path);
void (g_application_set_action_group)(GApplication *application, GActionGroup *action_group);
void (g_application_add_main_option_entries)(GApplication *application, const GOptionEntry *entries);
void (g_application_add_main_option)(GApplication *application, const char *long_name, char short_name, GOptionFlags flags, GOptionArg arg, const char *description, const char *arg_description);
void (g_application_add_option_group)(GApplication *application, GOptionGroup *group);
void (g_application_set_option_context_parameter_string)(GApplication *application, const gchar *parameter_string);
void (g_application_set_option_context_summary)(GApplication *application, const gchar *summary);
void (g_application_set_option_context_description)(GApplication *application, const gchar *description);
gboolean (g_application_get_is_registered)(GApplication *application);
gboolean (g_application_get_is_remote)(GApplication *application);
gboolean (g_application_register)(GApplication *application, GCancellable *cancellable, GError **error);
void (g_application_hold)(GApplication *application);
void (g_application_release)(GApplication *application);
void (g_application_activate)(GApplication *application);
void (g_application_open)(GApplication *application, GFile **files, gint n_files, const gchar *hint);
int (g_application_run)(GApplication *application, int argc, char **argv);
void (g_application_quit)(GApplication *application);
GApplication * (g_application_get_default)(void);
void (g_application_set_default)(GApplication *application);
void (g_application_mark_busy)(GApplication *application);
void (g_application_unmark_busy)(GApplication *application);
gboolean (g_application_get_is_busy)(GApplication *application);
void (g_application_send_notification)(GApplication *application, const gchar *id, GNotification *notification);
void (g_application_withdraw_notification)(GApplication *application, const gchar *id);
void (g_application_bind_busy_property)(GApplication *application, gpointer object, const gchar *property);
void (g_application_unbind_busy_property)(GApplication *application, gpointer object, const gchar *property);
// Header /usr/include/glib-2.0/gio/gapplicationcommandline.h
GType (g_application_command_line_get_type)(void);
gchar ** (g_application_command_line_get_arguments)(GApplicationCommandLine *cmdline, int *argc);
GVariantDict * (g_application_command_line_get_options_dict)(GApplicationCommandLine *cmdline);
GInputStream * (g_application_command_line_get_stdin)(GApplicationCommandLine *cmdline);
const gchar * const * (g_application_command_line_get_environ)(GApplicationCommandLine *cmdline);
const gchar * (g_application_command_line_getenv)(GApplicationCommandLine *cmdline, const gchar *name);
const gchar * (g_application_command_line_get_cwd)(GApplicationCommandLine *cmdline);
gboolean (g_application_command_line_get_is_remote)(GApplicationCommandLine *cmdline);
void (g_application_command_line_print_literal)(GApplicationCommandLine *cmdline, const gchar *message);
void (g_application_command_line_printerr_literal)(GApplicationCommandLine *cmdline, const gchar *message);
int (g_application_command_line_get_exit_status)(GApplicationCommandLine *cmdline);
void (g_application_command_line_set_exit_status)(GApplicationCommandLine *cmdline, int exit_status);
GVariant * (g_application_command_line_get_platform_data)(GApplicationCommandLine *cmdline);
GFile * (g_application_command_line_create_file_for_arg)(GApplicationCommandLine *cmdline, const gchar *arg);
void (g_application_command_line_done)(GApplicationCommandLine *cmdline);
// Header /usr/include/glib-2.0/gio/gasyncinitable.h
GType (g_async_initable_get_type)(void);
void (g_async_initable_init_async)(GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_async_initable_init_finish)(GAsyncInitable *initable, GAsyncResult *res, GError **error);
GObject* (g_async_initable_new_finish)(GAsyncInitable *initable, GAsyncResult *res, GError **error);
// Header /usr/include/glib-2.0/gio/gasyncresult.h
GType (g_async_result_get_type)(void);
gpointer (g_async_result_get_user_data)(GAsyncResult *res);
GObject* (g_async_result_get_source_object)(GAsyncResult *res);
gboolean (g_async_result_legacy_propagate_error)(GAsyncResult *res, GError **error);
gboolean (g_async_result_is_tagged)(GAsyncResult *res, gpointer source_tag);
// Header /usr/include/glib-2.0/gio/gbufferedinputstream.h
GType (g_buffered_input_stream_get_type)(void);
GInputStream* (g_buffered_input_stream_new)(GInputStream *base_stream);
GInputStream* (g_buffered_input_stream_new_sized)(GInputStream *base_stream, gsize size);
gsize (g_buffered_input_stream_get_buffer_size)(GBufferedInputStream *stream);
void (g_buffered_input_stream_set_buffer_size)(GBufferedInputStream *stream, gsize size);
gsize (g_buffered_input_stream_get_available)(GBufferedInputStream *stream);
gsize (g_buffered_input_stream_peek)(GBufferedInputStream *stream, void *buffer, gsize offset, gsize count);
const void* (g_buffered_input_stream_peek_buffer)(GBufferedInputStream *stream, gsize *count);
gssize (g_buffered_input_stream_fill)(GBufferedInputStream *stream, gssize count, GCancellable *cancellable, GError **error);
void (g_buffered_input_stream_fill_async)(GBufferedInputStream *stream, gssize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_buffered_input_stream_fill_finish)(GBufferedInputStream *stream, GAsyncResult *result, GError **error);
int (g_buffered_input_stream_read_byte)(GBufferedInputStream *stream, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gbufferedoutputstream.h
GType (g_buffered_output_stream_get_type)(void);
GOutputStream* (g_buffered_output_stream_new)(GOutputStream *base_stream);
GOutputStream* (g_buffered_output_stream_new_sized)(GOutputStream *base_stream, gsize size);
gsize (g_buffered_output_stream_get_buffer_size)(GBufferedOutputStream *stream);
void (g_buffered_output_stream_set_buffer_size)(GBufferedOutputStream *stream, gsize size);
gboolean (g_buffered_output_stream_get_auto_grow)(GBufferedOutputStream *stream);
void (g_buffered_output_stream_set_auto_grow)(GBufferedOutputStream *stream, gboolean auto_grow);
// Header /usr/include/glib-2.0/gio/gbytesicon.h
GType (g_bytes_icon_get_type)(void);
GIcon * (g_bytes_icon_new)(GBytes *bytes);
GBytes * (g_bytes_icon_get_bytes)(GBytesIcon *icon);
// Header /usr/include/glib-2.0/gio/gcancellable.h
GType (g_cancellable_get_type)(void);
GCancellable* (g_cancellable_new)(void);
gboolean (g_cancellable_is_cancelled)(GCancellable *cancellable);
gboolean (g_cancellable_set_error_if_cancelled)(GCancellable *cancellable, GError **error);
int (g_cancellable_get_fd)(GCancellable *cancellable);
gboolean (g_cancellable_make_pollfd)(GCancellable *cancellable, GPollFD *pollfd);
void (g_cancellable_release_fd)(GCancellable *cancellable);
GSource * (g_cancellable_source_new)(GCancellable *cancellable);
GCancellable* (g_cancellable_get_current)(void);
void (g_cancellable_push_current)(GCancellable *cancellable);
void (g_cancellable_pop_current)(GCancellable *cancellable);
void (g_cancellable_reset)(GCancellable *cancellable);
gulong (g_cancellable_connect)(GCancellable *cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func);
void (g_cancellable_disconnect)(GCancellable *cancellable, gulong handler_id);
void (g_cancellable_cancel)(GCancellable *cancellable);
// Header /usr/include/glib-2.0/gio/gcharsetconverter.h
GType (g_charset_converter_get_type)(void);
GCharsetConverter* (g_charset_converter_new)(const gchar *to_charset, const gchar *from_charset, GError **error);
void (g_charset_converter_set_use_fallback)(GCharsetConverter *converter, gboolean use_fallback);
gboolean (g_charset_converter_get_use_fallback)(GCharsetConverter *converter);
guint (g_charset_converter_get_num_fallbacks)(GCharsetConverter *converter);
// Header /usr/include/glib-2.0/gio/gcontenttype.h
gboolean (g_content_type_is_a)(const gchar *type, const gchar *supertype);
gboolean (g_content_type_is_mime_type)(const gchar *type, const gchar *mime_type);
gboolean (g_content_type_is_unknown)(const gchar *type);
gchar * (g_content_type_get_description)(const gchar *type);
gchar * (g_content_type_get_mime_type)(const gchar *type);
GIcon * (g_content_type_get_icon)(const gchar *type);
GIcon * (g_content_type_get_symbolic_icon)(const gchar *type);
gchar * (g_content_type_get_generic_icon_name)(const gchar *type);
gboolean (g_content_type_can_be_executable)(const gchar *type);
gchar * (g_content_type_from_mime_type)(const gchar *mime_type);
gchar * (g_content_type_guess)(const gchar *filename, const guchar *data, gsize data_size, gboolean *result_uncertain);
gchar ** (g_content_type_guess_for_tree)(GFile *root);
GList * (g_content_types_get_registered)(void);
const gchar * const* (g_content_type_get_mime_dirs)(void);
void (g_content_type_set_mime_dirs)(const gchar * const *dirs);
gboolean (g_content_type_equals)(const gchar *type1, const gchar *type2);
// Header /usr/include/glib-2.0/gio/gconverter.h
GType (g_converter_get_type)(void);
GConverterResult (g_converter_convert)(GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error);
void (g_converter_reset)(GConverter *converter);
// Header /usr/include/glib-2.0/gio/gconverterinputstream.h
GType (g_converter_input_stream_get_type)(void);
GInputStream* (g_converter_input_stream_new)(GInputStream *base_stream, GConverter *converter);
GConverter* (g_converter_input_stream_get_converter)(GConverterInputStream *converter_stream);
// Header /usr/include/glib-2.0/gio/gconverteroutputstream.h
GType (g_converter_output_stream_get_type)(void);
GOutputStream* (g_converter_output_stream_new)(GOutputStream *base_stream, GConverter *converter);
GConverter* (g_converter_output_stream_get_converter)(GConverterOutputStream *converter_stream);
// Header /usr/include/glib-2.0/gio/gcredentials.h
GType (g_credentials_get_type)(void);
GCredentials* (g_credentials_new)(void);
gchar* (g_credentials_to_string)(GCredentials *credentials);
gpointer (g_credentials_get_native)(GCredentials *credentials, GCredentialsType native_type);
void (g_credentials_set_native)(GCredentials *credentials, GCredentialsType native_type, gpointer native);
gboolean (g_credentials_is_same_user)(GCredentials *credentials, GCredentials *other_credentials, GError **error);
pid_t (g_credentials_get_unix_pid)(GCredentials *credentials, GError **error);
uid_t (g_credentials_get_unix_user)(GCredentials *credentials, GError **error);
gboolean (g_credentials_set_unix_user)(GCredentials *credentials, uid_t uid, GError **error);
// Header /usr/include/glib-2.0/gio/gdatagrambased.h
GType (g_datagram_based_get_type)(void);
gint (g_datagram_based_receive_messages)(GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);
gint (g_datagram_based_send_messages)(GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);
GSource * (g_datagram_based_create_source)(GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable);
GIOCondition (g_datagram_based_condition_check)(GDatagramBased *datagram_based, GIOCondition condition);
gboolean (g_datagram_based_condition_wait)(GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gdatainputstream.h
GType (g_data_input_stream_get_type)(void);
GDataInputStream * (g_data_input_stream_new)(GInputStream *base_stream);
void (g_data_input_stream_set_byte_order)(GDataInputStream *stream, GDataStreamByteOrder order);
GDataStreamByteOrder (g_data_input_stream_get_byte_order)(GDataInputStream *stream);
void (g_data_input_stream_set_newline_type)(GDataInputStream *stream, GDataStreamNewlineType type);
GDataStreamNewlineType (g_data_input_stream_get_newline_type)(GDataInputStream *stream);
guchar (g_data_input_stream_read_byte)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
gint16 (g_data_input_stream_read_int16)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
guint16 (g_data_input_stream_read_uint16)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
gint32 (g_data_input_stream_read_int32)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
guint32 (g_data_input_stream_read_uint32)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
gint64 (g_data_input_stream_read_int64)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
guint64 (g_data_input_stream_read_uint64)(GDataInputStream *stream, GCancellable *cancellable, GError **error);
char * (g_data_input_stream_read_line)(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error);
char * (g_data_input_stream_read_line_utf8)(GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error);
void (g_data_input_stream_read_line_async)(GDataInputStream *stream, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (g_data_input_stream_read_line_finish)(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);
char * (g_data_input_stream_read_line_finish_utf8)(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);
char * (g_data_input_stream_read_until)(GDataInputStream *stream, const gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **error);
void (g_data_input_stream_read_until_async)(GDataInputStream *stream, const gchar *stop_chars, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (g_data_input_stream_read_until_finish)(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);
char * (g_data_input_stream_read_upto)(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *cancellable, GError **error);
void (g_data_input_stream_read_upto_async)(GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
char * (g_data_input_stream_read_upto_finish)(GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);
// Header /usr/include/glib-2.0/gio/gdataoutputstream.h
GType (g_data_output_stream_get_type)(void);
GDataOutputStream * (g_data_output_stream_new)(GOutputStream *base_stream);
void (g_data_output_stream_set_byte_order)(GDataOutputStream *stream, GDataStreamByteOrder order);
GDataStreamByteOrder (g_data_output_stream_get_byte_order)(GDataOutputStream *stream);
gboolean (g_data_output_stream_put_byte)(GDataOutputStream *stream, guchar data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_int16)(GDataOutputStream *stream, gint16 data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_uint16)(GDataOutputStream *stream, guint16 data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_int32)(GDataOutputStream *stream, gint32 data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_uint32)(GDataOutputStream *stream, guint32 data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_int64)(GDataOutputStream *stream, gint64 data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_uint64)(GDataOutputStream *stream, guint64 data, GCancellable *cancellable, GError **error);
gboolean (g_data_output_stream_put_string)(GDataOutputStream *stream, const char *str, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gdbusactiongroup.h
GType (g_dbus_action_group_get_type)(void);
GDBusActionGroup * (g_dbus_action_group_get)(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path);
// Header /usr/include/glib-2.0/gio/gdbusaddress.h
gboolean (g_dbus_is_address)(const gchar *string);
gboolean (g_dbus_is_supported_address)(const gchar *string, GError **error);
void (g_dbus_address_get_stream)(const gchar *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GIOStream* (g_dbus_address_get_stream_finish)(GAsyncResult *res, gchar **out_guid, GError **error);
GIOStream* (g_dbus_address_get_stream_sync)(const gchar *address, gchar **out_guid, GCancellable *cancellable, GError **error);
gchar* (g_dbus_address_get_for_bus_sync)(GBusType bus_type, GCancellable *cancellable, GError **error);
gchar* (g_dbus_address_escape_value)(const gchar *string);
// Header /usr/include/glib-2.0/gio/gdbusauthobserver.h
GType (g_dbus_auth_observer_get_type)(void);
GDBusAuthObserver* (g_dbus_auth_observer_new)(void);
gboolean (g_dbus_auth_observer_authorize_authenticated_peer)(GDBusAuthObserver *observer, GIOStream *stream, GCredentials *credentials);
gboolean (g_dbus_auth_observer_allow_mechanism)(GDBusAuthObserver *observer, const gchar *mechanism);
// Header /usr/include/glib-2.0/gio/gdbusconnection.h
GType (g_dbus_connection_get_type)(void);
void (g_bus_get)(GBusType bus_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusConnection* (g_bus_get_finish)(GAsyncResult *res, GError **error);
GDBusConnection* (g_bus_get_sync)(GBusType bus_type, GCancellable *cancellable, GError **error);
void (g_dbus_connection_new)(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusConnection* (g_dbus_connection_new_finish)(GAsyncResult *res, GError **error);
GDBusConnection* (g_dbus_connection_new_sync)(GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);
void (g_dbus_connection_new_for_address)(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusConnection* (g_dbus_connection_new_for_address_finish)(GAsyncResult *res, GError **error);
GDBusConnection* (g_dbus_connection_new_for_address_sync)(const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);
void (g_dbus_connection_start_message_processing)(GDBusConnection *connection);
gboolean (g_dbus_connection_is_closed)(GDBusConnection *connection);
GIOStream* (g_dbus_connection_get_stream)(GDBusConnection *connection);
const gchar* (g_dbus_connection_get_guid)(GDBusConnection *connection);
const gchar* (g_dbus_connection_get_unique_name)(GDBusConnection *connection);
GCredentials* (g_dbus_connection_get_peer_credentials)(GDBusConnection *connection);
guint32 (g_dbus_connection_get_last_serial)(GDBusConnection *connection);
gboolean (g_dbus_connection_get_exit_on_close)(GDBusConnection *connection);
void (g_dbus_connection_set_exit_on_close)(GDBusConnection *connection, gboolean exit_on_close);
GDBusCapabilityFlags (g_dbus_connection_get_capabilities)(GDBusConnection *connection);
GDBusConnectionFlags (g_dbus_connection_get_flags)(GDBusConnection *connection);
void (g_dbus_connection_close)(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dbus_connection_close_finish)(GDBusConnection *connection, GAsyncResult *res, GError **error);
gboolean (g_dbus_connection_close_sync)(GDBusConnection *connection, GCancellable *cancellable, GError **error);
void (g_dbus_connection_flush)(GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dbus_connection_flush_finish)(GDBusConnection *connection, GAsyncResult *res, GError **error);
gboolean (g_dbus_connection_flush_sync)(GDBusConnection *connection, GCancellable *cancellable, GError **error);
gboolean (g_dbus_connection_send_message)(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *out_serial, GError **error);
void (g_dbus_connection_send_message_with_reply)(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusMessage* (g_dbus_connection_send_message_with_reply_finish)(GDBusConnection *connection, GAsyncResult *res, GError **error);
GDBusMessage* (g_dbus_connection_send_message_with_reply_sync)(GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GError **error);
gboolean (g_dbus_connection_emit_signal)(GDBusConnection *connection, const gchar *destination_bus_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, GError **error);
void (g_dbus_connection_call)(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant* (g_dbus_connection_call_finish)(GDBusConnection *connection, GAsyncResult *res, GError **error);
GVariant* (g_dbus_connection_call_sync)(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error);
void (g_dbus_connection_call_with_unix_fd_list)(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant* (g_dbus_connection_call_with_unix_fd_list_finish)(GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);
GVariant* (g_dbus_connection_call_with_unix_fd_list_sync)(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error);
guint (g_dbus_connection_register_object)(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, const GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError **error);
guint (g_dbus_connection_register_object_with_closures)(GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, GClosure *method_call_closure, GClosure *get_property_closure, GClosure *set_property_closure, GError **error);
gboolean (g_dbus_connection_unregister_object)(GDBusConnection *connection, guint registration_id);
guint (g_dbus_connection_register_subtree)(GDBusConnection *connection, const gchar *object_path, const GDBusSubtreeVTable *vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError **error);
gboolean (g_dbus_connection_unregister_subtree)(GDBusConnection *connection, guint registration_id);
guint (g_dbus_connection_signal_subscribe)(GDBusConnection *connection, const gchar *sender, const gchar *interface_name, const gchar *member, const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func);
void (g_dbus_connection_signal_unsubscribe)(GDBusConnection *connection, guint subscription_id);
guint (g_dbus_connection_add_filter)(GDBusConnection *connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func);
void (g_dbus_connection_remove_filter)(GDBusConnection *connection, guint filter_id);
// Header /usr/include/glib-2.0/gio/gdbuserror.h
gboolean (g_dbus_error_is_remote_error)(const GError *error);
gchar* (g_dbus_error_get_remote_error)(const GError *error);
gboolean (g_dbus_error_strip_remote_error)(GError *error);
gboolean (g_dbus_error_register_error)(GQuark error_domain, gint error_code, const gchar *dbus_error_name);
gboolean (g_dbus_error_unregister_error)(GQuark error_domain, gint error_code, const gchar *dbus_error_name);
void (g_dbus_error_register_error_domain)(const gchar *error_domain_quark_name, volatile gsize *quark_volatile, const GDBusErrorEntry *entries, guint num_entries);
GError* (g_dbus_error_new_for_dbus_error)(const gchar *dbus_error_name, const gchar *dbus_error_message);
void (g_dbus_error_set_dbus_error_valist)(GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, va_list var_args);
gchar* (g_dbus_error_encode_gerror)(const GError *error);
GQuark (g_dbus_error_quark)(void);
// Header /usr/include/glib-2.0/gio/gdbusinterface.h
GType (g_dbus_interface_get_type)(void);
GDBusInterfaceInfo* (g_dbus_interface_get_info)(GDBusInterface *interface_);
GDBusObject* (g_dbus_interface_get_object)(GDBusInterface *interface_);
void (g_dbus_interface_set_object)(GDBusInterface *interface_, GDBusObject *object);
GDBusObject* (g_dbus_interface_dup_object)(GDBusInterface *interface_);
// Header /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
GType (g_dbus_interface_skeleton_get_type)(void);
GDBusInterfaceSkeletonFlags (g_dbus_interface_skeleton_get_flags)(GDBusInterfaceSkeleton *interface_);
void (g_dbus_interface_skeleton_set_flags)(GDBusInterfaceSkeleton *interface_, GDBusInterfaceSkeletonFlags flags);
GDBusInterfaceInfo* (g_dbus_interface_skeleton_get_info)(GDBusInterfaceSkeleton *interface_);
GDBusInterfaceVTable* (g_dbus_interface_skeleton_get_vtable)(GDBusInterfaceSkeleton *interface_);
GVariant* (g_dbus_interface_skeleton_get_properties)(GDBusInterfaceSkeleton *interface_);
void (g_dbus_interface_skeleton_flush)(GDBusInterfaceSkeleton *interface_);
gboolean (g_dbus_interface_skeleton_export)(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection, const gchar *object_path, GError **error);
void (g_dbus_interface_skeleton_unexport)(GDBusInterfaceSkeleton *interface_);
void (g_dbus_interface_skeleton_unexport_from_connection)(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);
GDBusConnection* (g_dbus_interface_skeleton_get_connection)(GDBusInterfaceSkeleton *interface_);
GList* (g_dbus_interface_skeleton_get_connections)(GDBusInterfaceSkeleton *interface_);
gboolean (g_dbus_interface_skeleton_has_connection)(GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);
const gchar* (g_dbus_interface_skeleton_get_object_path)(GDBusInterfaceSkeleton *interface_);
// Header /usr/include/glib-2.0/gio/gdbusintrospection.h
GDBusMethodInfo* (g_dbus_interface_info_lookup_method)(GDBusInterfaceInfo *info, const gchar *name);
GDBusSignalInfo* (g_dbus_interface_info_lookup_signal)(GDBusInterfaceInfo *info, const gchar *name);
GDBusPropertyInfo* (g_dbus_interface_info_lookup_property)(GDBusInterfaceInfo *info, const gchar *name);
void (g_dbus_interface_info_cache_build)(GDBusInterfaceInfo *info);
void (g_dbus_interface_info_cache_release)(GDBusInterfaceInfo *info);
void (g_dbus_interface_info_generate_xml)(GDBusInterfaceInfo *info, guint indent, GString *string_builder);
GDBusNodeInfo* (g_dbus_node_info_new_for_xml)(const gchar *xml_data, GError **error);
GDBusInterfaceInfo* (g_dbus_node_info_lookup_interface)(GDBusNodeInfo *info, const gchar *name);
void (g_dbus_node_info_generate_xml)(GDBusNodeInfo *info, guint indent, GString *string_builder);
GDBusNodeInfo* (g_dbus_node_info_ref)(GDBusNodeInfo *info);
GDBusInterfaceInfo* (g_dbus_interface_info_ref)(GDBusInterfaceInfo *info);
GDBusMethodInfo* (g_dbus_method_info_ref)(GDBusMethodInfo *info);
GDBusSignalInfo* (g_dbus_signal_info_ref)(GDBusSignalInfo *info);
GDBusPropertyInfo* (g_dbus_property_info_ref)(GDBusPropertyInfo *info);
GDBusArgInfo* (g_dbus_arg_info_ref)(GDBusArgInfo *info);
GDBusAnnotationInfo* (g_dbus_annotation_info_ref)(GDBusAnnotationInfo *info);
void (g_dbus_node_info_unref)(GDBusNodeInfo *info);
void (g_dbus_interface_info_unref)(GDBusInterfaceInfo *info);
void (g_dbus_method_info_unref)(GDBusMethodInfo *info);
void (g_dbus_signal_info_unref)(GDBusSignalInfo *info);
void (g_dbus_property_info_unref)(GDBusPropertyInfo *info);
void (g_dbus_arg_info_unref)(GDBusArgInfo *info);
void (g_dbus_annotation_info_unref)(GDBusAnnotationInfo *info);
GType (g_dbus_node_info_get_type)(void);
GType (g_dbus_interface_info_get_type)(void);
GType (g_dbus_method_info_get_type)(void);
GType (g_dbus_signal_info_get_type)(void);
GType (g_dbus_property_info_get_type)(void);
GType (g_dbus_arg_info_get_type)(void);
GType (g_dbus_annotation_info_get_type)(void);
const gchar* (g_dbus_annotation_info_lookup)(GDBusAnnotationInfo **annotations, const gchar *name);
// Header /usr/include/glib-2.0/gio/gdbusmenumodel.h
GType (g_dbus_menu_model_get_type)(void);
GDBusMenuModel * (g_dbus_menu_model_get)(GDBusConnection *connection, const gchar *bus_name, const gchar *object_path);
// Header /usr/include/glib-2.0/gio/gdbusmessage.h
GType (g_dbus_message_get_type)(void);
GDBusMessage* (g_dbus_message_new)(void);
GDBusMessage* (g_dbus_message_new_signal)(const gchar *path, const gchar *interface_, const gchar *signal);
GDBusMessage* (g_dbus_message_new_method_call)(const gchar *name, const gchar *path, const gchar *interface_, const gchar *method);
GDBusMessage* (g_dbus_message_new_method_reply)(GDBusMessage *method_call_message);
GDBusMessage* (g_dbus_message_new_method_error_valist)(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message_format, va_list var_args);
GDBusMessage* (g_dbus_message_new_method_error_literal)(GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message);
gchar* (g_dbus_message_print)(GDBusMessage *message, guint indent);
gboolean (g_dbus_message_get_locked)(GDBusMessage *message);
void (g_dbus_message_lock)(GDBusMessage *message);
GDBusMessage* (g_dbus_message_copy)(GDBusMessage *message, GError **error);
GDBusMessageByteOrder (g_dbus_message_get_byte_order)(GDBusMessage *message);
void (g_dbus_message_set_byte_order)(GDBusMessage *message, GDBusMessageByteOrder byte_order);
GDBusMessageType (g_dbus_message_get_message_type)(GDBusMessage *message);
void (g_dbus_message_set_message_type)(GDBusMessage *message, GDBusMessageType type);
GDBusMessageFlags (g_dbus_message_get_flags)(GDBusMessage *message);
void (g_dbus_message_set_flags)(GDBusMessage *message, GDBusMessageFlags flags);
guint32 (g_dbus_message_get_serial)(GDBusMessage *message);
void (g_dbus_message_set_serial)(GDBusMessage *message, guint32 serial);
GVariant* (g_dbus_message_get_header)(GDBusMessage *message, GDBusMessageHeaderField header_field);
void (g_dbus_message_set_header)(GDBusMessage *message, GDBusMessageHeaderField header_field, GVariant *value);
guchar* (g_dbus_message_get_header_fields)(GDBusMessage *message);
GVariant* (g_dbus_message_get_body)(GDBusMessage *message);
void (g_dbus_message_set_body)(GDBusMessage *message, GVariant *body);
GUnixFDList* (g_dbus_message_get_unix_fd_list)(GDBusMessage *message);
void (g_dbus_message_set_unix_fd_list)(GDBusMessage *message, GUnixFDList *fd_list);
guint32 (g_dbus_message_get_reply_serial)(GDBusMessage *message);
void (g_dbus_message_set_reply_serial)(GDBusMessage *message, guint32 value);
const gchar* (g_dbus_message_get_interface)(GDBusMessage *message);
void (g_dbus_message_set_interface)(GDBusMessage *message, const gchar *value);
const gchar* (g_dbus_message_get_member)(GDBusMessage *message);
void (g_dbus_message_set_member)(GDBusMessage *message, const gchar *value);
const gchar* (g_dbus_message_get_path)(GDBusMessage *message);
void (g_dbus_message_set_path)(GDBusMessage *message, const gchar *value);
const gchar* (g_dbus_message_get_sender)(GDBusMessage *message);
void (g_dbus_message_set_sender)(GDBusMessage *message, const gchar *value);
const gchar* (g_dbus_message_get_destination)(GDBusMessage *message);
void (g_dbus_message_set_destination)(GDBusMessage *message, const gchar *value);
const gchar* (g_dbus_message_get_error_name)(GDBusMessage *message);
void (g_dbus_message_set_error_name)(GDBusMessage *message, const gchar *value);
const gchar* (g_dbus_message_get_signature)(GDBusMessage *message);
void (g_dbus_message_set_signature)(GDBusMessage *message, const gchar *value);
guint32 (g_dbus_message_get_num_unix_fds)(GDBusMessage *message);
void (g_dbus_message_set_num_unix_fds)(GDBusMessage *message, guint32 value);
const gchar* (g_dbus_message_get_arg0)(GDBusMessage *message);
const gchar* (g_dbus_message_get_arg0_path)(GDBusMessage *message);
GDBusMessage* (g_dbus_message_new_from_blob)(guchar *blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError **error);
gssize (g_dbus_message_bytes_needed)(guchar *blob, gsize blob_len, GError **error);
guchar* (g_dbus_message_to_blob)(GDBusMessage *message, gsize *out_size, GDBusCapabilityFlags capabilities, GError **error);
gboolean (g_dbus_message_to_gerror)(GDBusMessage *message, GError **error);
// Header /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
GType (g_dbus_method_invocation_get_type)(void);
const gchar* (g_dbus_method_invocation_get_sender)(GDBusMethodInvocation *invocation);
const gchar* (g_dbus_method_invocation_get_object_path)(GDBusMethodInvocation *invocation);
const gchar* (g_dbus_method_invocation_get_interface_name)(GDBusMethodInvocation *invocation);
const gchar* (g_dbus_method_invocation_get_method_name)(GDBusMethodInvocation *invocation);
const GDBusMethodInfo* (g_dbus_method_invocation_get_method_info)(GDBusMethodInvocation *invocation);
const GDBusPropertyInfo* (g_dbus_method_invocation_get_property_info)(GDBusMethodInvocation *invocation);
GDBusConnection* (g_dbus_method_invocation_get_connection)(GDBusMethodInvocation *invocation);
GDBusMessage* (g_dbus_method_invocation_get_message)(GDBusMethodInvocation *invocation);
GVariant* (g_dbus_method_invocation_get_parameters)(GDBusMethodInvocation *invocation);
gpointer (g_dbus_method_invocation_get_user_data)(GDBusMethodInvocation *invocation);
void (g_dbus_method_invocation_return_value)(GDBusMethodInvocation *invocation, GVariant *parameters);
void (g_dbus_method_invocation_return_value_with_unix_fd_list)(GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *fd_list);
void (g_dbus_method_invocation_return_error_valist)(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, va_list var_args);
void (g_dbus_method_invocation_return_error_literal)(GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *message);
void (g_dbus_method_invocation_return_gerror)(GDBusMethodInvocation *invocation, const GError *error);
void (g_dbus_method_invocation_take_error)(GDBusMethodInvocation *invocation, GError *error);
void (g_dbus_method_invocation_return_dbus_error)(GDBusMethodInvocation *invocation, const gchar *error_name, const gchar *error_message);
// Header /usr/include/glib-2.0/gio/gdbusnameowning.h
guint (g_bus_own_name_on_connection)(GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);
guint (g_bus_own_name_with_closures)(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure *name_acquired_closure, GClosure *name_lost_closure);
guint (g_bus_own_name_on_connection_with_closures)( GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *name_acquired_closure, GClosure *name_lost_closure);
void (g_bus_unown_name)(guint owner_id);
guint (g_bus_own_name)(GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);
// Header /usr/include/glib-2.0/gio/gdbusnamewatching.h
guint (g_bus_watch_name_on_connection)(GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);
guint (g_bus_watch_name_with_closures)(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure);
guint (g_bus_watch_name_on_connection_with_closures)( GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure);
void (g_bus_unwatch_name)(guint watcher_id);
guint (g_bus_watch_name)(GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);
// Header /usr/include/glib-2.0/gio/gdbusobject.h
GType (g_dbus_object_get_type)(void);
const gchar* (g_dbus_object_get_object_path)(GDBusObject *object);
GList* (g_dbus_object_get_interfaces)(GDBusObject *object);
GDBusInterface* (g_dbus_object_get_interface)(GDBusObject *object, const gchar *interface_name);
// Header /usr/include/glib-2.0/gio/gdbusobjectmanager.h
GType (g_dbus_object_manager_get_type)(void);
const gchar* (g_dbus_object_manager_get_object_path)(GDBusObjectManager *manager);
GList* (g_dbus_object_manager_get_objects)(GDBusObjectManager *manager);
GDBusObject* (g_dbus_object_manager_get_object)(GDBusObjectManager *manager, const gchar *object_path);
GDBusInterface* (g_dbus_object_manager_get_interface)(GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name);
// Header /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
GType (g_dbus_object_manager_client_get_type)(void);
void (g_dbus_object_manager_client_new)(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusObjectManager* (g_dbus_object_manager_client_new_finish)(GAsyncResult *res, GError **error);
GDBusObjectManager* (g_dbus_object_manager_client_new_sync)(GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error);
void (g_dbus_object_manager_client_new_for_bus)(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusObjectManager* (g_dbus_object_manager_client_new_for_bus_finish)(GAsyncResult *res, GError **error);
GDBusObjectManager* (g_dbus_object_manager_client_new_for_bus_sync)(GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error);
GDBusConnection* (g_dbus_object_manager_client_get_connection)(GDBusObjectManagerClient *manager);
GDBusObjectManagerClientFlags (g_dbus_object_manager_client_get_flags)(GDBusObjectManagerClient *manager);
const gchar* (g_dbus_object_manager_client_get_name)(GDBusObjectManagerClient *manager);
gchar* (g_dbus_object_manager_client_get_name_owner)(GDBusObjectManagerClient *manager);
// Header /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
GType (g_dbus_object_manager_server_get_type)(void);
GDBusObjectManagerServer* (g_dbus_object_manager_server_new)(const gchar *object_path);
GDBusConnection* (g_dbus_object_manager_server_get_connection)(GDBusObjectManagerServer *manager);
void (g_dbus_object_manager_server_set_connection)(GDBusObjectManagerServer *manager, GDBusConnection *connection);
void (g_dbus_object_manager_server_export)(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);
void (g_dbus_object_manager_server_export_uniquely)(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);
gboolean (g_dbus_object_manager_server_is_exported)(GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);
gboolean (g_dbus_object_manager_server_unexport)(GDBusObjectManagerServer *manager, const gchar *object_path);
// Header /usr/include/glib-2.0/gio/gdbusobjectproxy.h
GType (g_dbus_object_proxy_get_type)(void);
GDBusObjectProxy* (g_dbus_object_proxy_new)(GDBusConnection *connection, const gchar *object_path);
GDBusConnection* (g_dbus_object_proxy_get_connection)(GDBusObjectProxy *proxy);
// Header /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
GType (g_dbus_object_skeleton_get_type)(void);
GDBusObjectSkeleton* (g_dbus_object_skeleton_new)(const gchar *object_path);
void (g_dbus_object_skeleton_flush)(GDBusObjectSkeleton *object);
void (g_dbus_object_skeleton_add_interface)(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_);
void (g_dbus_object_skeleton_remove_interface)(GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_);
void (g_dbus_object_skeleton_remove_interface_by_name)(GDBusObjectSkeleton *object, const gchar *interface_name);
void (g_dbus_object_skeleton_set_object_path)(GDBusObjectSkeleton *object, const gchar *object_path);
// Header /usr/include/glib-2.0/gio/gdbusproxy.h
GType (g_dbus_proxy_get_type)(void);
void (g_dbus_proxy_new)(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusProxy* (g_dbus_proxy_new_finish)(GAsyncResult *res, GError **error);
GDBusProxy* (g_dbus_proxy_new_sync)(GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error);
void (g_dbus_proxy_new_for_bus)(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GDBusProxy* (g_dbus_proxy_new_for_bus_finish)(GAsyncResult *res, GError **error);
GDBusProxy* (g_dbus_proxy_new_for_bus_sync)(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error);
GDBusConnection* (g_dbus_proxy_get_connection)(GDBusProxy *proxy);
GDBusProxyFlags (g_dbus_proxy_get_flags)(GDBusProxy *proxy);
const gchar* (g_dbus_proxy_get_name)(GDBusProxy *proxy);
gchar* (g_dbus_proxy_get_name_owner)(GDBusProxy *proxy);
const gchar* (g_dbus_proxy_get_object_path)(GDBusProxy *proxy);
const gchar* (g_dbus_proxy_get_interface_name)(GDBusProxy *proxy);
gint (g_dbus_proxy_get_default_timeout)(GDBusProxy *proxy);
void (g_dbus_proxy_set_default_timeout)(GDBusProxy *proxy, gint timeout_msec);
GDBusInterfaceInfo* (g_dbus_proxy_get_interface_info)(GDBusProxy *proxy);
void (g_dbus_proxy_set_interface_info)(GDBusProxy *proxy, GDBusInterfaceInfo *info);
GVariant* (g_dbus_proxy_get_cached_property)(GDBusProxy *proxy, const gchar *property_name);
void (g_dbus_proxy_set_cached_property)(GDBusProxy *proxy, const gchar *property_name, GVariant *value);
gchar** (g_dbus_proxy_get_cached_property_names)(GDBusProxy *proxy);
void (g_dbus_proxy_call)(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant* (g_dbus_proxy_call_finish)(GDBusProxy *proxy, GAsyncResult *res, GError **error);
GVariant* (g_dbus_proxy_call_sync)(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error);
void (g_dbus_proxy_call_with_unix_fd_list)(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GVariant* (g_dbus_proxy_call_with_unix_fd_list_finish)(GDBusProxy *proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);
GVariant* (g_dbus_proxy_call_with_unix_fd_list_sync)(GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gdbusserver.h
GType (g_dbus_server_get_type)(void);
GDBusServer* (g_dbus_server_new_sync)(const gchar *address, GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);
const gchar* (g_dbus_server_get_client_address)(GDBusServer *server);
const gchar* (g_dbus_server_get_guid)(GDBusServer *server);
GDBusServerFlags (g_dbus_server_get_flags)(GDBusServer *server);
void (g_dbus_server_start)(GDBusServer *server);
void (g_dbus_server_stop)(GDBusServer *server);
gboolean (g_dbus_server_is_active)(GDBusServer *server);
// Header /usr/include/glib-2.0/gio/gdbusutils.h
gchar* (g_dbus_generate_guid)(void);
gboolean (g_dbus_is_name)(const gchar *string);
gboolean (g_dbus_is_unique_name)(const gchar *string);
gboolean (g_dbus_is_member_name)(const gchar *string);
gboolean (g_dbus_is_interface_name)(const gchar *string);
gboolean (g_dbus_is_error_name)(const gchar *string);
void (g_dbus_gvariant_to_gvalue)(GVariant *value, GValue *out_gvalue);
GVariant* (g_dbus_gvalue_to_gvariant)(const GValue *gvalue, const GVariantType *type);
gchar* (g_dbus_escape_object_path_bytestring)(const guint8 *bytes);
gchar* (g_dbus_escape_object_path)(const gchar *s);
guint8* (g_dbus_unescape_object_path)(const gchar *s);
gboolean (g_dbus_is_guid)(const gchar *string);
// Header /usr/include/glib-2.0/gio/gdebugcontroller.h
GType (g_debug_controller_get_type)(void);
void (g_debug_controller_set_debug_enabled)(GDebugController *self, gboolean debug_enabled);
// Header /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
GType (g_debug_controller_dbus_get_type)(void);
GDebugControllerDBus* (g_debug_controller_dbus_new)(GDBusConnection *connection, GCancellable *cancellable, GError **error);
void (g_debug_controller_dbus_stop)(GDebugControllerDBus *self);
// Header /usr/include/glib-2.0/gio/gdrive.h
GType (g_drive_get_type)(void);
char * (g_drive_get_name)(GDrive *drive);
GIcon * (g_drive_get_icon)(GDrive *drive);
GIcon * (g_drive_get_symbolic_icon)(GDrive *drive);
gboolean (g_drive_has_volumes)(GDrive *drive);
GList * (g_drive_get_volumes)(GDrive *drive);
gboolean (g_drive_is_removable)(GDrive *drive);
gboolean (g_drive_is_media_removable)(GDrive *drive);
gboolean (g_drive_has_media)(GDrive *drive);
gboolean (g_drive_is_media_check_automatic)(GDrive *drive);
gboolean (g_drive_can_poll_for_media)(GDrive *drive);
gboolean (g_drive_can_eject)(GDrive *drive);
void (g_drive_eject)(GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_eject_finish)(GDrive *drive, GAsyncResult *result, GError **error);
void (g_drive_poll_for_media)(GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_poll_for_media_finish)(GDrive *drive, GAsyncResult *result, GError **error);
char * (g_drive_get_identifier)(GDrive *drive, const char *kind);
char ** (g_drive_enumerate_identifiers)(GDrive *drive);
GDriveStartStopType (g_drive_get_start_stop_type)(GDrive *drive);
gboolean (g_drive_can_start)(GDrive *drive);
gboolean (g_drive_can_start_degraded)(GDrive *drive);
void (g_drive_start)(GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_start_finish)(GDrive *drive, GAsyncResult *result, GError **error);
gboolean (g_drive_can_stop)(GDrive *drive);
void (g_drive_stop)(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_stop_finish)(GDrive *drive, GAsyncResult *result, GError **error);
void (g_drive_eject_with_operation)(GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_drive_eject_with_operation_finish)(GDrive *drive, GAsyncResult *result, GError **error);
const gchar* (g_drive_get_sort_key)(GDrive *drive);
// Header /usr/include/glib-2.0/gio/gdtlsclientconnection.h
GType (g_dtls_client_connection_get_type)(void);
GDatagramBased* (g_dtls_client_connection_new)(GDatagramBased *base_socket, GSocketConnectable *server_identity, GError **error);
GTlsCertificateFlags (g_dtls_client_connection_get_validation_flags)(GDtlsClientConnection *conn);
void (g_dtls_client_connection_set_validation_flags)(GDtlsClientConnection *conn, GTlsCertificateFlags flags);
GSocketConnectable* (g_dtls_client_connection_get_server_identity)(GDtlsClientConnection *conn);
void (g_dtls_client_connection_set_server_identity)(GDtlsClientConnection *conn, GSocketConnectable *identity);
GList * (g_dtls_client_connection_get_accepted_cas)(GDtlsClientConnection *conn);
// Header /usr/include/glib-2.0/gio/gdtlsconnection.h
GType (g_dtls_connection_get_type)(void);
void (g_dtls_connection_set_database)(GDtlsConnection *conn, GTlsDatabase *database);
GTlsDatabase* (g_dtls_connection_get_database)(GDtlsConnection *conn);
void (g_dtls_connection_set_certificate)(GDtlsConnection *conn, GTlsCertificate *certificate);
GTlsCertificate* (g_dtls_connection_get_certificate)(GDtlsConnection *conn);
void (g_dtls_connection_set_interaction)(GDtlsConnection *conn, GTlsInteraction *interaction);
GTlsInteraction* (g_dtls_connection_get_interaction)(GDtlsConnection *conn);
GTlsCertificate* (g_dtls_connection_get_peer_certificate)(GDtlsConnection *conn);
GTlsCertificateFlags (g_dtls_connection_get_peer_certificate_errors)(GDtlsConnection *conn);
void (g_dtls_connection_set_require_close_notify)(GDtlsConnection *conn, gboolean require_close_notify);
gboolean (g_dtls_connection_get_require_close_notify)(GDtlsConnection *conn);
GTlsRehandshakeMode (g_dtls_connection_get_rehandshake_mode)(GDtlsConnection *conn);
void (g_dtls_connection_handshake_async)(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dtls_connection_handshake_finish)(GDtlsConnection *conn, GAsyncResult *result, GError **error);
gboolean (g_dtls_connection_shutdown)(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable *cancellable, GError **error);
void (g_dtls_connection_shutdown_async)(GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dtls_connection_shutdown_finish)(GDtlsConnection *conn, GAsyncResult *result, GError **error);
gboolean (g_dtls_connection_close)(GDtlsConnection *conn, GCancellable *cancellable, GError **error);
void (g_dtls_connection_close_async)(GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_dtls_connection_close_finish)(GDtlsConnection *conn, GAsyncResult *result, GError **error);
gboolean (g_dtls_connection_emit_accept_certificate)(GDtlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);
void (g_dtls_connection_set_advertised_protocols)(GDtlsConnection *conn, const gchar * const *protocols);
const gchar * (g_dtls_connection_get_negotiated_protocol)(GDtlsConnection *conn);
gchar * (g_dtls_connection_get_ciphersuite_name)(GDtlsConnection *conn);
// Header /usr/include/glib-2.0/gio/gdtlsserverconnection.h
GType (g_dtls_server_connection_get_type)(void);
GDatagramBased* (g_dtls_server_connection_new)(GDatagramBased *base_socket, GTlsCertificate *certificate, GError **error);
// Header /usr/include/glib-2.0/gio/gemblem.h
GType (g_emblem_get_type)(void);
GEmblem* (g_emblem_new)(GIcon *icon);
GEmblem* (g_emblem_new_with_origin)(GIcon *icon, GEmblemOrigin origin);
GIcon* (g_emblem_get_icon)(GEmblem *emblem);
GEmblemOrigin (g_emblem_get_origin)(GEmblem *emblem);
// Header /usr/include/glib-2.0/gio/gemblemedicon.h
GType (g_emblemed_icon_get_type)(void);
GIcon* (g_emblemed_icon_new)(GIcon *icon, GEmblem *emblem);
GIcon* (g_emblemed_icon_get_icon)(GEmblemedIcon *emblemed);
GList* (g_emblemed_icon_get_emblems)(GEmblemedIcon *emblemed);
void (g_emblemed_icon_add_emblem)(GEmblemedIcon *emblemed, GEmblem *emblem);
void (g_emblemed_icon_clear_emblems)(GEmblemedIcon *emblemed);
// Header /usr/include/glib-2.0/gio/gfile.h
GType (g_file_get_type)(void);
GFile * (g_file_new_for_path)(const char *path);
GFile * (g_file_new_for_uri)(const char *uri);
GFile * (g_file_new_for_commandline_arg)(const char *arg);
GFile * (g_file_new_for_commandline_arg_and_cwd)(const gchar *arg, const gchar *cwd);
GFile * (g_file_new_tmp)(const char *tmpl, GFileIOStream **iostream, GError **error);
void (g_file_new_tmp_async)(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_new_tmp_finish)(GAsyncResult *result, GFileIOStream **iostream, GError **error);
void (g_file_new_tmp_dir_async)(const char *tmpl, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_new_tmp_dir_finish)(GAsyncResult *result, GError **error);
GFile * (g_file_parse_name)(const char *parse_name);
GFile * (g_file_new_build_filenamev)(const gchar * const *args);
GFile * (g_file_dup)(GFile *file);
guint (g_file_hash)(gconstpointer file);
gboolean (g_file_equal)(GFile *file1, GFile *file2);
char * (g_file_get_basename)(GFile *file);
char * (g_file_get_path)(GFile *file);
const char * (g_file_peek_path)(GFile *file);
char * (g_file_get_uri)(GFile *file);
char * (g_file_get_parse_name)(GFile *file);
GFile * (g_file_get_parent)(GFile *file);
gboolean (g_file_has_parent)(GFile *file, GFile *parent);
GFile * (g_file_get_child)(GFile *file, const char *name);
GFile * (g_file_get_child_for_display_name)(GFile *file, const char *display_name, GError **error);
gboolean (g_file_has_prefix)(GFile *file, GFile *prefix);
char * (g_file_get_relative_path)(GFile *parent, GFile *descendant);
GFile * (g_file_resolve_relative_path)(GFile *file, const char *relative_path);
gboolean (g_file_is_native)(GFile *file);
gboolean (g_file_has_uri_scheme)(GFile *file, const char *uri_scheme);
char * (g_file_get_uri_scheme)(GFile *file);
GFileInputStream * (g_file_read)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_read_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInputStream * (g_file_read_finish)(GFile *file, GAsyncResult *res, GError **error);
GFileOutputStream * (g_file_append_to)(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
GFileOutputStream * (g_file_create)(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
GFileOutputStream * (g_file_replace)(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
void (g_file_append_to_async)(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileOutputStream * (g_file_append_to_finish)(GFile *file, GAsyncResult *res, GError **error);
void (g_file_create_async)(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileOutputStream * (g_file_create_finish)(GFile *file, GAsyncResult *res, GError **error);
void (g_file_replace_async)(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileOutputStream * (g_file_replace_finish)(GFile *file, GAsyncResult *res, GError **error);
GFileIOStream * (g_file_open_readwrite)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_open_readwrite_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileIOStream * (g_file_open_readwrite_finish)(GFile *file, GAsyncResult *res, GError **error);
GFileIOStream * (g_file_create_readwrite)(GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
void (g_file_create_readwrite_async)(GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileIOStream * (g_file_create_readwrite_finish)(GFile *file, GAsyncResult *res, GError **error);
GFileIOStream * (g_file_replace_readwrite)(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
void (g_file_replace_readwrite_async)(GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileIOStream * (g_file_replace_readwrite_finish)(GFile *file, GAsyncResult *res, GError **error);
gboolean (g_file_query_exists)(GFile *file, GCancellable *cancellable);
GFileType (g_file_query_file_type)(GFile *file, GFileQueryInfoFlags flags, GCancellable *cancellable);
GFileInfo * (g_file_query_info)(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
void (g_file_query_info_async)(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_query_info_finish)(GFile *file, GAsyncResult *res, GError **error);
GFileInfo * (g_file_query_filesystem_info)(GFile *file, const char *attributes, GCancellable *cancellable, GError **error);
void (g_file_query_filesystem_info_async)(GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo * (g_file_query_filesystem_info_finish)(GFile *file, GAsyncResult *res, GError **error);
GMount * (g_file_find_enclosing_mount)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_find_enclosing_mount_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GMount * (g_file_find_enclosing_mount_finish)(GFile *file, GAsyncResult *res, GError **error);
GFileEnumerator * (g_file_enumerate_children)(GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
void (g_file_enumerate_children_async)(GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileEnumerator * (g_file_enumerate_children_finish)(GFile *file, GAsyncResult *res, GError **error);
GFile * (g_file_set_display_name)(GFile *file, const char *display_name, GCancellable *cancellable, GError **error);
void (g_file_set_display_name_async)(GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_set_display_name_finish)(GFile *file, GAsyncResult *res, GError **error);
gboolean (g_file_delete)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_delete_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_delete_finish)(GFile *file, GAsyncResult *result, GError **error);
gboolean (g_file_trash)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_trash_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_trash_finish)(GFile *file, GAsyncResult *result, GError **error);
gboolean (g_file_copy)(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);
void (g_file_copy_async)(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_copy_finish)(GFile *file, GAsyncResult *res, GError **error);
gboolean (g_file_move)(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);
void (g_file_move_async)(GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_move_finish)(GFile *file, GAsyncResult *result, GError **error);
gboolean (g_file_make_directory)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_make_directory_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_make_directory_finish)(GFile *file, GAsyncResult *result, GError **error);
gboolean (g_file_make_directory_with_parents)(GFile *file, GCancellable *cancellable, GError **error);
gboolean (g_file_make_symbolic_link)(GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error);
void (g_file_make_symbolic_link_async)(GFile *file, const char *symlink_value, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_make_symbolic_link_finish)(GFile *file, GAsyncResult *result, GError **error);
GFileAttributeInfoList* (g_file_query_settable_attributes)(GFile *file, GCancellable *cancellable, GError **error);
GFileAttributeInfoList* (g_file_query_writable_namespaces)(GFile *file, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attribute)(GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attributes_from_info)(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
void (g_file_set_attributes_async)(GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_set_attributes_finish)(GFile *file, GAsyncResult *result, GFileInfo **info, GError **error);
gboolean (g_file_set_attribute_string)(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attribute_byte_string)(GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attribute_uint32)(GFile *file, const char *attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attribute_int32)(GFile *file, const char *attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attribute_uint64)(GFile *file, const char *attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_set_attribute_int64)(GFile *file, const char *attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
void (g_file_mount_enclosing_volume)(GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_mount_enclosing_volume_finish)(GFile *location, GAsyncResult *result, GError **error);
void (g_file_mount_mountable)(GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFile * (g_file_mount_mountable_finish)(GFile *file, GAsyncResult *result, GError **error);
void (g_file_unmount_mountable)(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_unmount_mountable_finish)(GFile *file, GAsyncResult *result, GError **error);
void (g_file_unmount_mountable_with_operation)(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_unmount_mountable_with_operation_finish)(GFile *file, GAsyncResult *result, GError **error);
void (g_file_eject_mountable)(GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_eject_mountable_finish)(GFile *file, GAsyncResult *result, GError **error);
void (g_file_eject_mountable_with_operation)(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_eject_mountable_with_operation_finish)(GFile *file, GAsyncResult *result, GError **error);
char * (g_file_build_attribute_list_for_copy)(GFile *file, GFileCopyFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_copy_attributes)(GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GError **error);
GFileMonitor* (g_file_monitor_directory)(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);
GFileMonitor* (g_file_monitor_file)(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);
GFileMonitor* (g_file_monitor)(GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_file_measure_disk_usage)(GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);
void (g_file_measure_disk_usage_async)(GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_measure_disk_usage_finish)(GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);
void (g_file_start_mountable)(GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_start_mountable_finish)(GFile *file, GAsyncResult *result, GError **error);
void (g_file_stop_mountable)(GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_stop_mountable_finish)(GFile *file, GAsyncResult *result, GError **error);
void (g_file_poll_mountable)(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_poll_mountable_finish)(GFile *file, GAsyncResult *result, GError **error);
GAppInfo* (g_file_query_default_handler)(GFile *file, GCancellable *cancellable, GError **error);
void (g_file_query_default_handler_async)(GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GAppInfo* (g_file_query_default_handler_finish)(GFile *file, GAsyncResult *result, GError **error);
gboolean (g_file_load_contents)(GFile *file, GCancellable *cancellable, char **contents, gsize *length, char **etag_out, GError **error);
void (g_file_load_contents_async)(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_load_contents_finish)(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error);
void (g_file_load_partial_contents_async)(GFile *file, GCancellable *cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_load_partial_contents_finish)(GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error);
gboolean (g_file_replace_contents)(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, char **new_etag, GCancellable *cancellable, GError **error);
void (g_file_replace_contents_async)(GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
void (g_file_replace_contents_bytes_async)(GFile *file, GBytes *contents, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_replace_contents_finish)(GFile *file, GAsyncResult *res, char **new_etag, GError **error);
gboolean (g_file_supports_thread_contexts)(GFile *file);
GBytes* (g_file_load_bytes)(GFile *file, GCancellable *cancellable, gchar **etag_out, GError **error);
void (g_file_load_bytes_async)(GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GBytes* (g_file_load_bytes_finish)(GFile *file, GAsyncResult *result, gchar **etag_out, GError **error);
// Header /usr/include/glib-2.0/gio/gfileattribute.h
GType (g_file_attribute_info_list_get_type)(void);
GFileAttributeInfoList * (g_file_attribute_info_list_new)(void);
GFileAttributeInfoList * (g_file_attribute_info_list_ref)(GFileAttributeInfoList *list);
void (g_file_attribute_info_list_unref)(GFileAttributeInfoList *list);
GFileAttributeInfoList * (g_file_attribute_info_list_dup)(GFileAttributeInfoList *list);
const GFileAttributeInfo* (g_file_attribute_info_list_lookup)(GFileAttributeInfoList *list, const char *name);
void (g_file_attribute_info_list_add)(GFileAttributeInfoList *list, const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags);
// Header /usr/include/glib-2.0/gio/gfileenumerator.h
GType (g_file_enumerator_get_type)(void);
GFileInfo* (g_file_enumerator_next_file)(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error);
gboolean (g_file_enumerator_close)(GFileEnumerator *enumerator, GCancellable *cancellable, GError **error);
void (g_file_enumerator_next_files_async)(GFileEnumerator *enumerator, int num_files, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList * (g_file_enumerator_next_files_finish)(GFileEnumerator *enumerator, GAsyncResult *result, GError **error);
void (g_file_enumerator_close_async)(GFileEnumerator *enumerator, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_file_enumerator_close_finish)(GFileEnumerator *enumerator, GAsyncResult *result, GError **error);
gboolean (g_file_enumerator_is_closed)(GFileEnumerator *enumerator);
gboolean (g_file_enumerator_has_pending)(GFileEnumerator *enumerator);
void (g_file_enumerator_set_pending)(GFileEnumerator *enumerator, gboolean pending);
GFile * (g_file_enumerator_get_container)(GFileEnumerator *enumerator);
GFile * (g_file_enumerator_get_child)(GFileEnumerator *enumerator, GFileInfo *info);
gboolean (g_file_enumerator_iterate)(GFileEnumerator *direnum, GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gfileicon.h
GType (g_file_icon_get_type)(void);
GIcon * (g_file_icon_new)(GFile *file);
GFile * (g_file_icon_get_file)(GFileIcon *icon);
// Header /usr/include/glib-2.0/gio/gfileinfo.h
GType (g_file_info_get_type)(void);
GFileInfo * (g_file_info_new)(void);
GFileInfo * (g_file_info_dup)(GFileInfo *other);
void (g_file_info_copy_into)(GFileInfo *src_info, GFileInfo *dest_info);
gboolean (g_file_info_has_attribute)(GFileInfo *info, const char *attribute);
gboolean (g_file_info_has_namespace)(GFileInfo *info, const char *name_space);
char ** (g_file_info_list_attributes)(GFileInfo *info, const char *name_space);
gboolean (g_file_info_get_attribute_data)(GFileInfo *info, const char *attribute, GFileAttributeType *type, gpointer *value_pp, GFileAttributeStatus *status);
GFileAttributeType (g_file_info_get_attribute_type)(GFileInfo *info, const char *attribute);
void (g_file_info_remove_attribute)(GFileInfo *info, const char *attribute);
GFileAttributeStatus (g_file_info_get_attribute_status)(GFileInfo *info, const char *attribute);
gboolean (g_file_info_set_attribute_status)(GFileInfo *info, const char *attribute, GFileAttributeStatus status);
char * (g_file_info_get_attribute_as_string)(GFileInfo *info, const char *attribute);
const char * (g_file_info_get_attribute_string)(GFileInfo *info, const char *attribute);
const char * (g_file_info_get_attribute_byte_string)(GFileInfo *info, const char *attribute);
gboolean (g_file_info_get_attribute_boolean)(GFileInfo *info, const char *attribute);
guint32 (g_file_info_get_attribute_uint32)(GFileInfo *info, const char *attribute);
gint32 (g_file_info_get_attribute_int32)(GFileInfo *info, const char *attribute);
guint64 (g_file_info_get_attribute_uint64)(GFileInfo *info, const char *attribute);
gint64 (g_file_info_get_attribute_int64)(GFileInfo *info, const char *attribute);
GObject * (g_file_info_get_attribute_object)(GFileInfo *info, const char *attribute);
char ** (g_file_info_get_attribute_stringv)(GFileInfo *info, const char *attribute);
const char * (g_file_info_get_attribute_file_path)(GFileInfo *info, const char *attribute);
void (g_file_info_set_attribute)(GFileInfo *info, const char *attribute, GFileAttributeType type, gpointer value_p);
void (g_file_info_set_attribute_string)(GFileInfo *info, const char *attribute, const char *attr_value);
void (g_file_info_set_attribute_byte_string)(GFileInfo *info, const char *attribute, const char *attr_value);
void (g_file_info_set_attribute_boolean)(GFileInfo *info, const char *attribute, gboolean attr_value);
void (g_file_info_set_attribute_uint32)(GFileInfo *info, const char *attribute, guint32 attr_value);
void (g_file_info_set_attribute_int32)(GFileInfo *info, const char *attribute, gint32 attr_value);
void (g_file_info_set_attribute_uint64)(GFileInfo *info, const char *attribute, guint64 attr_value);
void (g_file_info_set_attribute_int64)(GFileInfo *info, const char *attribute, gint64 attr_value);
void (g_file_info_set_attribute_object)(GFileInfo *info, const char *attribute, GObject *attr_value);
void (g_file_info_set_attribute_stringv)(GFileInfo *info, const char *attribute, char **attr_value);
void (g_file_info_set_attribute_file_path)(GFileInfo *info, const char *attribute, const char *attr_value);
void (g_file_info_clear_status)(GFileInfo *info);
GDateTime * (g_file_info_get_deletion_date)(GFileInfo *info);
GFileType (g_file_info_get_file_type)(GFileInfo *info);
gboolean (g_file_info_get_is_hidden)(GFileInfo *info);
gboolean (g_file_info_get_is_backup)(GFileInfo *info);
gboolean (g_file_info_get_is_symlink)(GFileInfo *info);
const char * (g_file_info_get_name)(GFileInfo *info);
const char * (g_file_info_get_display_name)(GFileInfo *info);
const char * (g_file_info_get_edit_name)(GFileInfo *info);
GIcon * (g_file_info_get_icon)(GFileInfo *info);
GIcon * (g_file_info_get_symbolic_icon)(GFileInfo *info);
const char * (g_file_info_get_content_type)(GFileInfo *info);
goffset (g_file_info_get_size)(GFileInfo *info);
GDateTime * (g_file_info_get_access_date_time)(GFileInfo *info);
GDateTime * (g_file_info_get_creation_date_time)(GFileInfo *info);
const char * (g_file_info_get_symlink_target)(GFileInfo *info);
const char * (g_file_info_get_etag)(GFileInfo *info);
gint32 (g_file_info_get_sort_order)(GFileInfo *info);
void (g_file_info_set_attribute_mask)(GFileInfo *info, GFileAttributeMatcher *mask);
void (g_file_info_unset_attribute_mask)(GFileInfo *info);
void (g_file_info_set_file_type)(GFileInfo *info, GFileType type);
void (g_file_info_set_is_hidden)(GFileInfo *info, gboolean is_hidden);
void (g_file_info_set_is_symlink)(GFileInfo *info, gboolean is_symlink);
void (g_file_info_set_name)(GFileInfo *info, const char *name);
void (g_file_info_set_display_name)(GFileInfo *info, const char *display_name);
void (g_file_info_set_edit_name)(GFileInfo *info, const char *edit_name);
void (g_file_info_set_icon)(GFileInfo *info, GIcon *icon);
void (g_file_info_set_symbolic_icon)(GFileInfo *info, GIcon *icon);
void (g_file_info_set_content_type)(GFileInfo *info, const char *content_type);
void (g_file_info_set_size)(GFileInfo *info, goffset size);
void (g_file_info_set_access_date_time)(GFileInfo *info, GDateTime *atime);
void (g_file_info_set_creation_date_time)(GFileInfo *info, GDateTime *creation_time);
void (g_file_info_set_symlink_target)(GFileInfo *info, const char *symlink_target);
void (g_file_info_set_sort_order)(GFileInfo *info, gint32 sort_order);
GType (g_file_attribute_matcher_get_type)(void);
GFileAttributeMatcher* (g_file_attribute_matcher_new)(const char *attributes);
GFileAttributeMatcher* (g_file_attribute_matcher_ref)(GFileAttributeMatcher *matcher);
void (g_file_attribute_matcher_unref)(GFileAttributeMatcher *matcher);
GFileAttributeMatcher* (g_file_attribute_matcher_subtract)(GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract);
gboolean (g_file_attribute_matcher_matches)(GFileAttributeMatcher *matcher, const char *attribute);
gboolean (g_file_attribute_matcher_matches_only)(GFileAttributeMatcher *matcher, const char *attribute);
gboolean (g_file_attribute_matcher_enumerate_namespace)(GFileAttributeMatcher *matcher, const char *ns);
const char * (g_file_attribute_matcher_enumerate_next)(GFileAttributeMatcher *matcher);
char * (g_file_attribute_matcher_to_string)(GFileAttributeMatcher *matcher);
// Header /usr/include/glib-2.0/gio/gfileinputstream.h
GType (g_file_input_stream_get_type)(void);
GFileInfo* (g_file_input_stream_query_info)(GFileInputStream *stream, const char *attributes, GCancellable *cancellable, GError **error);
void (g_file_input_stream_query_info_async)(GFileInputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo* (g_file_input_stream_query_info_finish)(GFileInputStream *stream, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gfileiostream.h
GType (g_file_io_stream_get_type)(void);
GFileInfo* (g_file_io_stream_query_info)(GFileIOStream *stream, const char *attributes, GCancellable *cancellable, GError **error);
void (g_file_io_stream_query_info_async)(GFileIOStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo* (g_file_io_stream_query_info_finish)(GFileIOStream *stream, GAsyncResult *result, GError **error);
char * (g_file_io_stream_get_etag)(GFileIOStream *stream);
// Header /usr/include/glib-2.0/gio/gfilemonitor.h
GType (g_file_monitor_get_type)(void);
gboolean (g_file_monitor_cancel)(GFileMonitor *monitor);
gboolean (g_file_monitor_is_cancelled)(GFileMonitor *monitor);
void (g_file_monitor_set_rate_limit)(GFileMonitor *monitor, gint limit_msecs);
void (g_file_monitor_emit_event)(GFileMonitor *monitor, GFile *child, GFile *other_file, GFileMonitorEvent event_type);
// Header /usr/include/glib-2.0/gio/gfilenamecompleter.h
GType (g_filename_completer_get_type)(void);
GFilenameCompleter* (g_filename_completer_new)(void);
char * (g_filename_completer_get_completion_suffix)(GFilenameCompleter *completer, const char *initial_text);
char ** (g_filename_completer_get_completions)(GFilenameCompleter *completer, const char *initial_text);
void (g_filename_completer_set_dirs_only)(GFilenameCompleter *completer, gboolean dirs_only);
// Header /usr/include/glib-2.0/gio/gfileoutputstream.h
GType (g_file_output_stream_get_type)(void);
GFileInfo* (g_file_output_stream_query_info)(GFileOutputStream *stream, const char *attributes, GCancellable *cancellable, GError **error);
void (g_file_output_stream_query_info_async)(GFileOutputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GFileInfo* (g_file_output_stream_query_info_finish)(GFileOutputStream *stream, GAsyncResult *result, GError **error);
char * (g_file_output_stream_get_etag)(GFileOutputStream *stream);
// Header /usr/include/glib-2.0/gio/gfilterinputstream.h
GType (g_filter_input_stream_get_type)(void);
GInputStream * (g_filter_input_stream_get_base_stream)(GFilterInputStream *stream);
gboolean (g_filter_input_stream_get_close_base_stream)(GFilterInputStream *stream);
void (g_filter_input_stream_set_close_base_stream)(GFilterInputStream *stream, gboolean close_base);
// Header /usr/include/glib-2.0/gio/gfilteroutputstream.h
GType (g_filter_output_stream_get_type)(void);
GOutputStream * (g_filter_output_stream_get_base_stream)(GFilterOutputStream *stream);
gboolean (g_filter_output_stream_get_close_base_stream)(GFilterOutputStream *stream);
void (g_filter_output_stream_set_close_base_stream)(GFilterOutputStream *stream, gboolean close_base);
// Header /usr/include/glib-2.0/gio/gicon.h
GType (g_icon_get_type)(void);
guint (g_icon_hash)(gconstpointer icon);
gboolean (g_icon_equal)(GIcon *icon1, GIcon *icon2);
gchar* (g_icon_to_string)(GIcon *icon);
GIcon* (g_icon_new_for_string)(const gchar *str, GError **error);
GVariant * (g_icon_serialize)(GIcon *icon);
GIcon * (g_icon_deserialize)(GVariant *value);
// Header /usr/include/glib-2.0/gio/ginetaddress.h
GType (g_inet_address_get_type)(void);
GInetAddress * (g_inet_address_new_from_string)(const gchar *string);
GInetAddress * (g_inet_address_new_from_bytes)(const guint8 *bytes, GSocketFamily family);
GInetAddress * (g_inet_address_new_loopback)(GSocketFamily family);
GInetAddress * (g_inet_address_new_any)(GSocketFamily family);
gboolean (g_inet_address_equal)(GInetAddress *address, GInetAddress *other_address);
gchar * (g_inet_address_to_string)(GInetAddress *address);
const guint8 * (g_inet_address_to_bytes)(GInetAddress *address);
gsize (g_inet_address_get_native_size)(GInetAddress *address);
GSocketFamily (g_inet_address_get_family)(GInetAddress *address);
gboolean (g_inet_address_get_is_any)(GInetAddress *address);
gboolean (g_inet_address_get_is_loopback)(GInetAddress *address);
gboolean (g_inet_address_get_is_link_local)(GInetAddress *address);
gboolean (g_inet_address_get_is_site_local)(GInetAddress *address);
gboolean (g_inet_address_get_is_multicast)(GInetAddress *address);
gboolean (g_inet_address_get_is_mc_global)(GInetAddress *address);
gboolean (g_inet_address_get_is_mc_link_local)(GInetAddress *address);
gboolean (g_inet_address_get_is_mc_node_local)(GInetAddress *address);
gboolean (g_inet_address_get_is_mc_org_local)(GInetAddress *address);
gboolean (g_inet_address_get_is_mc_site_local)(GInetAddress *address);
// Header /usr/include/glib-2.0/gio/ginetaddressmask.h
GType (g_inet_address_mask_get_type)(void);
GInetAddressMask* (g_inet_address_mask_new)(GInetAddress *addr, guint length, GError **error);
GInetAddressMask* (g_inet_address_mask_new_from_string)(const gchar *mask_string, GError **error);
gchar* (g_inet_address_mask_to_string)(GInetAddressMask *mask);
GSocketFamily (g_inet_address_mask_get_family)(GInetAddressMask *mask);
GInetAddress* (g_inet_address_mask_get_address)(GInetAddressMask *mask);
guint (g_inet_address_mask_get_length)(GInetAddressMask *mask);
gboolean (g_inet_address_mask_matches)(GInetAddressMask *mask, GInetAddress *address);
gboolean (g_inet_address_mask_equal)(GInetAddressMask *mask, GInetAddressMask *mask2);
// Header /usr/include/glib-2.0/gio/ginetsocketaddress.h
GType (g_inet_socket_address_get_type)(void);
GSocketAddress* (g_inet_socket_address_new)(GInetAddress *address, guint16 port);
GSocketAddress* (g_inet_socket_address_new_from_string)(const char *address, guint port);
GInetAddress * (g_inet_socket_address_get_address)(GInetSocketAddress *address);
guint16 (g_inet_socket_address_get_port)(GInetSocketAddress *address);
guint32 (g_inet_socket_address_get_flowinfo)(GInetSocketAddress *address);
guint32 (g_inet_socket_address_get_scope_id)(GInetSocketAddress *address);
// Header /usr/include/glib-2.0/gio/ginitable.h
GType (g_initable_get_type)(void);
gboolean (g_initable_init)(GInitable *initable, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/ginputstream.h
GType (g_input_stream_get_type)(void);
gssize (g_input_stream_read)(GInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error);
gboolean (g_input_stream_read_all)(GInputStream *stream, void *buffer, gsize count, gsize *bytes_read, GCancellable *cancellable, GError **error);
GBytes* (g_input_stream_read_bytes)(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error);
gssize (g_input_stream_skip)(GInputStream *stream, gsize count, GCancellable *cancellable, GError **error);
gboolean (g_input_stream_close)(GInputStream *stream, GCancellable *cancellable, GError **error);
void (g_input_stream_read_async)(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_input_stream_read_finish)(GInputStream *stream, GAsyncResult *result, GError **error);
void (g_input_stream_read_all_async)(GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_input_stream_read_all_finish)(GInputStream *stream, GAsyncResult *result, gsize *bytes_read, GError **error);
void (g_input_stream_read_bytes_async)(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GBytes* (g_input_stream_read_bytes_finish)(GInputStream *stream, GAsyncResult *result, GError **error);
void (g_input_stream_skip_async)(GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_input_stream_skip_finish)(GInputStream *stream, GAsyncResult *result, GError **error);
void (g_input_stream_close_async)(GInputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_input_stream_close_finish)(GInputStream *stream, GAsyncResult *result, GError **error);
gboolean (g_input_stream_is_closed)(GInputStream *stream);
gboolean (g_input_stream_has_pending)(GInputStream *stream);
gboolean (g_input_stream_set_pending)(GInputStream *stream, GError **error);
void (g_input_stream_clear_pending)(GInputStream *stream);
// Header /usr/include/glib-2.0/gio/gioenums.h
// Header /usr/include/glib-2.0/gio/gioenumtypes.h
GType (g_app_info_create_flags_get_type)(void);
GType (g_converter_flags_get_type)(void);
GType (g_converter_result_get_type)(void);
GType (g_data_stream_byte_order_get_type)(void);
GType (g_data_stream_newline_type_get_type)(void);
GType (g_file_attribute_type_get_type)(void);
GType (g_file_attribute_info_flags_get_type)(void);
GType (g_file_attribute_status_get_type)(void);
GType (g_file_query_info_flags_get_type)(void);
GType (g_file_create_flags_get_type)(void);
GType (g_file_measure_flags_get_type)(void);
GType (g_mount_mount_flags_get_type)(void);
GType (g_mount_unmount_flags_get_type)(void);
GType (g_drive_start_flags_get_type)(void);
GType (g_drive_start_stop_type_get_type)(void);
GType (g_file_copy_flags_get_type)(void);
GType (g_file_monitor_flags_get_type)(void);
GType (g_file_type_get_type)(void);
GType (g_filesystem_preview_type_get_type)(void);
GType (g_file_monitor_event_get_type)(void);
GType (g_io_error_enum_get_type)(void);
GType (g_ask_password_flags_get_type)(void);
GType (g_password_save_get_type)(void);
GType (g_mount_operation_result_get_type)(void);
GType (g_output_stream_splice_flags_get_type)(void);
GType (g_io_stream_splice_flags_get_type)(void);
GType (g_emblem_origin_get_type)(void);
GType (g_resolver_error_get_type)(void);
GType (g_resolver_record_type_get_type)(void);
GType (g_resource_error_get_type)(void);
GType (g_resource_flags_get_type)(void);
GType (g_resource_lookup_flags_get_type)(void);
GType (g_socket_family_get_type)(void);
GType (g_socket_type_get_type)(void);
GType (g_socket_msg_flags_get_type)(void);
GType (g_socket_protocol_get_type)(void);
GType (g_zlib_compressor_format_get_type)(void);
GType (g_unix_socket_address_type_get_type)(void);
GType (g_bus_type_get_type)(void);
GType (g_bus_name_owner_flags_get_type)(void);
GType (g_bus_name_watcher_flags_get_type)(void);
GType (g_dbus_proxy_flags_get_type)(void);
GType (g_dbus_error_get_type)(void);
GType (g_dbus_connection_flags_get_type)(void);
GType (g_dbus_capability_flags_get_type)(void);
GType (g_dbus_call_flags_get_type)(void);
GType (g_dbus_message_type_get_type)(void);
GType (g_dbus_message_flags_get_type)(void);
GType (g_dbus_message_header_field_get_type)(void);
GType (g_dbus_property_info_flags_get_type)(void);
GType (g_dbus_subtree_flags_get_type)(void);
GType (g_dbus_server_flags_get_type)(void);
GType (g_dbus_signal_flags_get_type)(void);
GType (g_dbus_send_message_flags_get_type)(void);
GType (g_credentials_type_get_type)(void);
GType (g_dbus_message_byte_order_get_type)(void);
GType (g_application_flags_get_type)(void);
GType (g_tls_error_get_type)(void);
GType (g_tls_certificate_flags_get_type)(void);
GType (g_tls_authentication_mode_get_type)(void);
GType (g_tls_channel_binding_type_get_type)(void);
GType (g_tls_channel_binding_error_get_type)(void);
GType (g_tls_rehandshake_mode_get_type)(void);
GType (g_tls_password_flags_get_type)(void);
GType (g_tls_interaction_result_get_type)(void);
GType (g_dbus_interface_skeleton_flags_get_type)(void);
GType (g_dbus_object_manager_client_flags_get_type)(void);
GType (g_tls_database_verify_flags_get_type)(void);
GType (g_tls_database_lookup_flags_get_type)(void);
GType (g_tls_certificate_request_flags_get_type)(void);
GType (g_tls_protocol_version_get_type)(void);
GType (g_io_module_scope_flags_get_type)(void);
GType (g_socket_client_event_get_type)(void);
GType (g_socket_listener_event_get_type)(void);
GType (g_test_dbus_flags_get_type)(void);
GType (g_subprocess_flags_get_type)(void);
GType (g_notification_priority_get_type)(void);
GType (g_network_connectivity_get_type)(void);
GType (g_pollable_return_get_type)(void);
GType (g_memory_monitor_warning_level_get_type)(void);
GType (g_resolver_name_lookup_flags_get_type)(void);
GType (g_settings_bind_flags_get_type)(void);
// Header /usr/include/glib-2.0/gio/gioerror.h
GIOErrorEnum (g_io_error_from_errno)(gint err_no);
GIOErrorEnum (g_io_error_from_file_error)(GFileError file_error);
GIOErrorEnum (g_io_error_from_win32_error)(gint error_code);
GQuark (g_io_error_quark)(void);
// Header /usr/include/glib-2.0/gio/giomodule.h
void (g_io_module_scope_free)(GIOModuleScope *scope);
void (g_io_module_scope_block)(GIOModuleScope *scope, const gchar *basename);
GType (g_io_module_get_type)(void);
GIOModule* (g_io_module_new)(const gchar *filename);
void (g_io_modules_scan_all_in_directory)(const char *dirname);
GList* (g_io_modules_load_all_in_directory)(const gchar *dirname);
void (g_io_modules_scan_all_in_directory_with_scope)(const gchar *dirname, GIOModuleScope *scope);
GList* (g_io_modules_load_all_in_directory_with_scope)(const gchar *dirname, GIOModuleScope *scope);
GIOExtensionPoint* (g_io_extension_point_register)(const char *name);
GIOExtensionPoint* (g_io_extension_point_lookup)(const char *name);
void (g_io_extension_point_set_required_type)(GIOExtensionPoint *extension_point, GType type);
GType (g_io_extension_point_get_required_type)(GIOExtensionPoint *extension_point);
GList* (g_io_extension_point_get_extensions)(GIOExtensionPoint *extension_point);
GIOExtension * (g_io_extension_point_get_extension_by_name)(GIOExtensionPoint *extension_point, const char *name);
GIOExtension * (g_io_extension_point_implement)(const char *extension_point_name, GType type, const char *extension_name, gint priority);
GType (g_io_extension_get_type)(GIOExtension *extension);
const char * (g_io_extension_get_name)(GIOExtension *extension);
gint (g_io_extension_get_priority)(GIOExtension *extension);
GTypeClass* (g_io_extension_ref_class)(GIOExtension *extension);
void (g_io_module_load)(GIOModule *module);
void (g_io_module_unload)(GIOModule *module);
char** (g_io_module_query)(void);
GIOModuleScope * (g_io_module_scope_new)(GIOModuleScopeFlags flags);
// Header /usr/include/glib-2.0/gio/gioscheduler.h
void (g_io_scheduler_cancel_all_jobs)(void);
gboolean (g_io_scheduler_job_send_to_mainloop)(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);
void (g_io_scheduler_job_send_to_mainloop_async)(GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);
void (g_io_scheduler_push_job)(GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable *cancellable);
// Header /usr/include/glib-2.0/gio/giostream.h
GType (g_io_stream_get_type)(void);
GInputStream * (g_io_stream_get_input_stream)(GIOStream *stream);
GOutputStream* (g_io_stream_get_output_stream)(GIOStream *stream);
void (g_io_stream_splice_async)(GIOStream *stream1, GIOStream *stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_io_stream_splice_finish)(GAsyncResult *result, GError **error);
gboolean (g_io_stream_close)(GIOStream *stream, GCancellable *cancellable, GError **error);
void (g_io_stream_close_async)(GIOStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_io_stream_close_finish)(GIOStream *stream, GAsyncResult *result, GError **error);
gboolean (g_io_stream_is_closed)(GIOStream *stream);
gboolean (g_io_stream_has_pending)(GIOStream *stream);
gboolean (g_io_stream_set_pending)(GIOStream *stream, GError **error);
void (g_io_stream_clear_pending)(GIOStream *stream);
// Header /usr/include/glib-2.0/gio/giotypes.h
// Header /usr/include/glib-2.0/gio/glistmodel.h
GType (g_list_model_get_type)(void);
guint (g_list_model_get_n_items)(GListModel *list);
gpointer (g_list_model_get_item)(GListModel *list, guint position);
GObject * (g_list_model_get_object)(GListModel *list, guint position);
void (g_list_model_items_changed)(GListModel *list, guint position, guint removed, guint added);
// Header /usr/include/glib-2.0/gio/gliststore.h
GType (g_list_store_get_type)(void);
GListStore * (g_list_store_new)(GType item_type);
void (g_list_store_insert)(GListStore *store, guint position, gpointer item);
guint (g_list_store_insert_sorted)(GListStore *store, gpointer item, GCompareDataFunc compare_func, gpointer user_data);
void (g_list_store_sort)(GListStore *store, GCompareDataFunc compare_func, gpointer user_data);
void (g_list_store_append)(GListStore *store, gpointer item);
void (g_list_store_remove)(GListStore *store, guint position);
void (g_list_store_remove_all)(GListStore *store);
void (g_list_store_splice)(GListStore *store, guint position, guint n_removals, gpointer *additions, guint n_additions);
gboolean (g_list_store_find)(GListStore *store, gpointer item, guint *position);
gboolean (g_list_store_find_with_equal_func)(GListStore *store, gpointer item, GEqualFunc equal_func, guint *position);
gboolean (g_list_store_find_with_equal_func_full)(GListStore *store, gpointer item, GEqualFuncFull equal_func, gpointer user_data, guint *position);
// Header /usr/include/glib-2.0/gio/gloadableicon.h
GType (g_loadable_icon_get_type)(void);
GInputStream* (g_loadable_icon_load)(GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error);
void (g_loadable_icon_load_async)(GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GInputStream* (g_loadable_icon_load_finish)(GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error);
// Header /usr/include/glib-2.0/gio/gmemoryinputstream.h
GType (g_memory_input_stream_get_type)(void);
GInputStream * (g_memory_input_stream_new)(void);
GInputStream * (g_memory_input_stream_new_from_data)(const void *data, gssize len, GDestroyNotify destroy);
GInputStream * (g_memory_input_stream_new_from_bytes)(GBytes *bytes);
void (g_memory_input_stream_add_data)(GMemoryInputStream *stream, const void *data, gssize len, GDestroyNotify destroy);
void (g_memory_input_stream_add_bytes)(GMemoryInputStream *stream, GBytes *bytes);
// Header /usr/include/glib-2.0/gio/gmemorymonitor.h
GType (g_memory_monitor_get_type)(void);
// Header /usr/include/glib-2.0/gio/gmemoryoutputstream.h
GType (g_memory_output_stream_get_type)(void);
GOutputStream* (g_memory_output_stream_new)(gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function);
GOutputStream* (g_memory_output_stream_new_resizable)(void);
gpointer (g_memory_output_stream_get_data)(GMemoryOutputStream *ostream);
gsize (g_memory_output_stream_get_size)(GMemoryOutputStream *ostream);
gsize (g_memory_output_stream_get_data_size)(GMemoryOutputStream *ostream);
gpointer (g_memory_output_stream_steal_data)(GMemoryOutputStream *ostream);
GBytes * (g_memory_output_stream_steal_as_bytes)(GMemoryOutputStream *ostream);
// Header /usr/include/glib-2.0/gio/gmenu.h
GType (g_menu_get_type)(void);
GType (g_menu_item_get_type)(void);
GMenu * (g_menu_new)(void);
void (g_menu_freeze)(GMenu *menu);
void (g_menu_insert_item)(GMenu *menu, gint position, GMenuItem *item);
void (g_menu_prepend_item)(GMenu *menu, GMenuItem *item);
void (g_menu_append_item)(GMenu *menu, GMenuItem *item);
void (g_menu_remove)(GMenu *menu, gint position);
void (g_menu_remove_all)(GMenu *menu);
void (g_menu_insert)(GMenu *menu, gint position, const gchar *label, const gchar *detailed_action);
void (g_menu_prepend)(GMenu *menu, const gchar *label, const gchar *detailed_action);
void (g_menu_append)(GMenu *menu, const gchar *label, const gchar *detailed_action);
void (g_menu_insert_section)(GMenu *menu, gint position, const gchar *label, GMenuModel *section);
void (g_menu_prepend_section)(GMenu *menu, const gchar *label, GMenuModel *section);
void (g_menu_append_section)(GMenu *menu, const gchar *label, GMenuModel *section);
void (g_menu_insert_submenu)(GMenu *menu, gint position, const gchar *label, GMenuModel *submenu);
void (g_menu_prepend_submenu)(GMenu *menu, const gchar *label, GMenuModel *submenu);
void (g_menu_append_submenu)(GMenu *menu, const gchar *label, GMenuModel *submenu);
GMenuItem * (g_menu_item_new)(const gchar *label, const gchar *detailed_action);
GMenuItem * (g_menu_item_new_from_model)(GMenuModel *model, gint item_index);
GMenuItem * (g_menu_item_new_submenu)(const gchar *label, GMenuModel *submenu);
GMenuItem * (g_menu_item_new_section)(const gchar *label, GMenuModel *section);
GVariant * (g_menu_item_get_attribute_value)(GMenuItem *menu_item, const gchar *attribute, const GVariantType *expected_type);
GMenuModel* (g_menu_item_get_link)(GMenuItem *menu_item, const gchar *link);
void (g_menu_item_set_attribute_value)(GMenuItem *menu_item, const gchar *attribute, GVariant *value);
void (g_menu_item_set_link)(GMenuItem *menu_item, const gchar *link, GMenuModel *model);
void (g_menu_item_set_label)(GMenuItem *menu_item, const gchar *label);
void (g_menu_item_set_submenu)(GMenuItem *menu_item, GMenuModel *submenu);
void (g_menu_item_set_section)(GMenuItem *menu_item, GMenuModel *section);
void (g_menu_item_set_action_and_target_value)(GMenuItem *menu_item, const gchar *action, GVariant *target_value);
void (g_menu_item_set_detailed_action)(GMenuItem *menu_item, const gchar *detailed_action);
void (g_menu_item_set_icon)(GMenuItem *menu_item, GIcon *icon);
// Header /usr/include/glib-2.0/gio/gmenuexporter.h
void (g_dbus_connection_unexport_menu_model)(GDBusConnection *connection, guint export_id);
guint (g_dbus_connection_export_menu_model)(GDBusConnection *connection, const gchar *object_path, GMenuModel *menu, GError **error);
// Header /usr/include/glib-2.0/gio/gmenumodel.h
GType (g_menu_model_get_type)(void);
gboolean (g_menu_model_is_mutable)(GMenuModel *model);
gint (g_menu_model_get_n_items)(GMenuModel *model);
GMenuAttributeIter * (g_menu_model_iterate_item_attributes)(GMenuModel *model, gint item_index);
GVariant * (g_menu_model_get_item_attribute_value)(GMenuModel *model, gint item_index, const gchar *attribute, const GVariantType *expected_type);
GMenuLinkIter * (g_menu_model_iterate_item_links)(GMenuModel *model, gint item_index);
GMenuModel * (g_menu_model_get_item_link)(GMenuModel *model, gint item_index, const gchar *link);
void (g_menu_model_items_changed)(GMenuModel *model, gint position, gint removed, gint added);
GType (g_menu_attribute_iter_get_type)(void);
gboolean (g_menu_attribute_iter_get_next)(GMenuAttributeIter *iter, const gchar **out_name, GVariant **value);
gboolean (g_menu_attribute_iter_next)(GMenuAttributeIter *iter);
const gchar * (g_menu_attribute_iter_get_name)(GMenuAttributeIter *iter);
GVariant * (g_menu_attribute_iter_get_value)(GMenuAttributeIter *iter);
GType (g_menu_link_iter_get_type)(void);
gboolean (g_menu_link_iter_get_next)(GMenuLinkIter *iter, const gchar **out_link, GMenuModel **value);
gboolean (g_menu_link_iter_next)(GMenuLinkIter *iter);
const gchar * (g_menu_link_iter_get_name)(GMenuLinkIter *iter);
GMenuModel * (g_menu_link_iter_get_value)(GMenuLinkIter *iter);
// Header /usr/include/glib-2.0/gio/gmount.h
GType (g_mount_get_type)(void);
GFile * (g_mount_get_root)(GMount *mount);
GFile * (g_mount_get_default_location)(GMount *mount);
char * (g_mount_get_name)(GMount *mount);
GIcon * (g_mount_get_icon)(GMount *mount);
GIcon * (g_mount_get_symbolic_icon)(GMount *mount);
char * (g_mount_get_uuid)(GMount *mount);
GVolume * (g_mount_get_volume)(GMount *mount);
GDrive * (g_mount_get_drive)(GMount *mount);
gboolean (g_mount_can_unmount)(GMount *mount);
gboolean (g_mount_can_eject)(GMount *mount);
void (g_mount_unmount)(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_unmount_finish)(GMount *mount, GAsyncResult *result, GError **error);
void (g_mount_eject)(GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_eject_finish)(GMount *mount, GAsyncResult *result, GError **error);
void (g_mount_remount)(GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_remount_finish)(GMount *mount, GAsyncResult *result, GError **error);
void (g_mount_guess_content_type)(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar ** (g_mount_guess_content_type_finish)(GMount *mount, GAsyncResult *result, GError **error);
gchar ** (g_mount_guess_content_type_sync)(GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error);
gboolean (g_mount_is_shadowed)(GMount *mount);
void (g_mount_shadow)(GMount *mount);
void (g_mount_unshadow)(GMount *mount);
void (g_mount_unmount_with_operation)(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_unmount_with_operation_finish)(GMount *mount, GAsyncResult *result, GError **error);
void (g_mount_eject_with_operation)(GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_mount_eject_with_operation_finish)(GMount *mount, GAsyncResult *result, GError **error);
const gchar* (g_mount_get_sort_key)(GMount *mount);
// Header /usr/include/glib-2.0/gio/gmountoperation.h
GType (g_mount_operation_get_type)(void);
GMountOperation * (g_mount_operation_new)(void);
const char * (g_mount_operation_get_username)(GMountOperation *op);
void (g_mount_operation_set_username)(GMountOperation *op, const char *username);
const char * (g_mount_operation_get_password)(GMountOperation *op);
void (g_mount_operation_set_password)(GMountOperation *op, const char *password);
gboolean (g_mount_operation_get_anonymous)(GMountOperation *op);
void (g_mount_operation_set_anonymous)(GMountOperation *op, gboolean anonymous);
const char * (g_mount_operation_get_domain)(GMountOperation *op);
void (g_mount_operation_set_domain)(GMountOperation *op, const char *domain);
GPasswordSave (g_mount_operation_get_password_save)(GMountOperation *op);
void (g_mount_operation_set_password_save)(GMountOperation *op, GPasswordSave save);
int (g_mount_operation_get_choice)(GMountOperation *op);
void (g_mount_operation_set_choice)(GMountOperation *op, int choice);
void (g_mount_operation_reply)(GMountOperation *op, GMountOperationResult result);
gboolean (g_mount_operation_get_is_tcrypt_hidden_volume)(GMountOperation *op);
void (g_mount_operation_set_is_tcrypt_hidden_volume)(GMountOperation *op, gboolean hidden_volume);
gboolean (g_mount_operation_get_is_tcrypt_system_volume)(GMountOperation *op);
void (g_mount_operation_set_is_tcrypt_system_volume)(GMountOperation *op, gboolean system_volume);
guint (g_mount_operation_get_pim)(GMountOperation *op);
void (g_mount_operation_set_pim)(GMountOperation *op, guint pim);
// Header /usr/include/glib-2.0/gio/gnativesocketaddress.h
GType (g_native_socket_address_get_type)(void);
GSocketAddress* (g_native_socket_address_new)(gpointer native, gsize len);
// Header /usr/include/glib-2.0/gio/gnativevolumemonitor.h
GType (g_native_volume_monitor_get_type)(void);
// Header /usr/include/glib-2.0/gio/gnetworkaddress.h
GType (g_network_address_get_type)(void);
GSocketConnectable* (g_network_address_new)(const gchar *hostname, guint16 port);
GSocketConnectable* (g_network_address_new_loopback)(guint16 port);
GSocketConnectable* (g_network_address_parse)(const gchar *host_and_port, guint16 default_port, GError **error);
GSocketConnectable* (g_network_address_parse_uri)(const gchar *uri, guint16 default_port, GError **error);
const gchar* (g_network_address_get_hostname)(GNetworkAddress *addr);
guint16 (g_network_address_get_port)(GNetworkAddress *addr);
const gchar* (g_network_address_get_scheme)(GNetworkAddress *addr);
// Header /usr/include/glib-2.0/gio/gnetworking.h
void (g_networking_init)(void);
// Header /usr/include/glib-2.0/gio/gnetworkmonitor.h
GType (g_network_monitor_get_type)(void);
GNetworkMonitor* (g_network_monitor_get_default)(void);
gboolean (g_network_monitor_get_network_available)(GNetworkMonitor *monitor);
gboolean (g_network_monitor_get_network_metered)(GNetworkMonitor *monitor);
GNetworkConnectivity (g_network_monitor_get_connectivity)(GNetworkMonitor *monitor);
gboolean (g_network_monitor_can_reach)(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);
void (g_network_monitor_can_reach_async)(GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_network_monitor_can_reach_finish)(GNetworkMonitor *monitor, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gnetworkservice.h
GType (g_network_service_get_type)(void);
GSocketConnectable* (g_network_service_new)(const gchar *service, const gchar *protocol, const gchar *domain);
const gchar* (g_network_service_get_service)(GNetworkService *srv);
const gchar* (g_network_service_get_protocol)(GNetworkService *srv);
const gchar* (g_network_service_get_domain)(GNetworkService *srv);
const gchar* (g_network_service_get_scheme)(GNetworkService *srv);
void (g_network_service_set_scheme)(GNetworkService *srv, const gchar *scheme);
// Header /usr/include/glib-2.0/gio/gnotification.h
GType (g_notification_get_type)(void);
GNotification * (g_notification_new)(const gchar *title);
void (g_notification_set_title)(GNotification *notification, const gchar *title);
void (g_notification_set_body)(GNotification *notification, const gchar *body);
void (g_notification_set_icon)(GNotification *notification, GIcon *icon);
void (g_notification_set_urgent)(GNotification *notification, gboolean urgent);
void (g_notification_set_priority)(GNotification *notification, GNotificationPriority priority);
void (g_notification_set_category)(GNotification *notification, const gchar *category);
void (g_notification_add_button)(GNotification *notification, const gchar *label, const gchar *detailed_action);
void (g_notification_add_button_with_target_value)(GNotification *notification, const gchar *label, const gchar *action, GVariant *target);
void (g_notification_set_default_action)(GNotification *notification, const gchar *detailed_action);
void (g_notification_set_default_action_and_target_value)(GNotification *notification, const gchar *action, GVariant *target);
// Header /usr/include/glib-2.0/gio/goutputstream.h
GType (g_output_stream_get_type)(void);
gssize (g_output_stream_write)(GOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error);
gboolean (g_output_stream_write_all)(GOutputStream *stream, const void *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, GError **error);
gboolean (g_output_stream_writev)(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error);
gboolean (g_output_stream_writev_all)(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error);
gboolean (g_output_stream_vprintf)(GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, va_list args);
gssize (g_output_stream_write_bytes)(GOutputStream *stream, GBytes *bytes, GCancellable *cancellable, GError **error);
gssize (g_output_stream_splice)(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **error);
gboolean (g_output_stream_flush)(GOutputStream *stream, GCancellable *cancellable, GError **error);
gboolean (g_output_stream_close)(GOutputStream *stream, GCancellable *cancellable, GError **error);
void (g_output_stream_write_async)(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_output_stream_write_finish)(GOutputStream *stream, GAsyncResult *result, GError **error);
void (g_output_stream_write_all_async)(GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_write_all_finish)(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error);
void (g_output_stream_writev_async)(GOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_writev_finish)(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error);
void (g_output_stream_writev_all_async)(GOutputStream *stream, GOutputVector *vectors, gsize n_vectors, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_writev_all_finish)(GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error);
void (g_output_stream_write_bytes_async)(GOutputStream *stream, GBytes *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_output_stream_write_bytes_finish)(GOutputStream *stream, GAsyncResult *result, GError **error);
void (g_output_stream_splice_async)(GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gssize (g_output_stream_splice_finish)(GOutputStream *stream, GAsyncResult *result, GError **error);
void (g_output_stream_flush_async)(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_flush_finish)(GOutputStream *stream, GAsyncResult *result, GError **error);
void (g_output_stream_close_async)(GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_output_stream_close_finish)(GOutputStream *stream, GAsyncResult *result, GError **error);
gboolean (g_output_stream_is_closed)(GOutputStream *stream);
gboolean (g_output_stream_is_closing)(GOutputStream *stream);
gboolean (g_output_stream_has_pending)(GOutputStream *stream);
gboolean (g_output_stream_set_pending)(GOutputStream *stream, GError **error);
void (g_output_stream_clear_pending)(GOutputStream *stream);
// Header /usr/include/glib-2.0/gio/gpermission.h
GType (g_permission_get_type)(void);
gboolean (g_permission_acquire)(GPermission *permission, GCancellable *cancellable, GError **error);
void (g_permission_acquire_async)(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_permission_acquire_finish)(GPermission *permission, GAsyncResult *result, GError **error);
gboolean (g_permission_release)(GPermission *permission, GCancellable *cancellable, GError **error);
void (g_permission_release_async)(GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_permission_release_finish)(GPermission *permission, GAsyncResult *result, GError **error);
gboolean (g_permission_get_allowed)(GPermission *permission);
gboolean (g_permission_get_can_acquire)(GPermission *permission);
gboolean (g_permission_get_can_release)(GPermission *permission);
void (g_permission_impl_update)(GPermission *permission, gboolean allowed, gboolean can_acquire, gboolean can_release);
// Header /usr/include/glib-2.0/gio/gpollableinputstream.h
GType (g_pollable_input_stream_get_type)(void);
gboolean (g_pollable_input_stream_can_poll)(GPollableInputStream *stream);
gboolean (g_pollable_input_stream_is_readable)(GPollableInputStream *stream);
GSource* (g_pollable_input_stream_create_source)(GPollableInputStream *stream, GCancellable *cancellable);
gssize (g_pollable_input_stream_read_nonblocking)(GPollableInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gpollableoutputstream.h
GType (g_pollable_output_stream_get_type)(void);
gboolean (g_pollable_output_stream_can_poll)(GPollableOutputStream *stream);
gboolean (g_pollable_output_stream_is_writable)(GPollableOutputStream *stream);
GSource* (g_pollable_output_stream_create_source)(GPollableOutputStream *stream, GCancellable *cancellable);
gssize (g_pollable_output_stream_write_nonblocking)(GPollableOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error);
GPollableReturn (g_pollable_output_stream_writev_nonblocking)(GPollableOutputStream *stream, const GOutputVector *vectors, gsize n_vectors, gsize *bytes_written, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gpollableutils.h
GSource* (g_pollable_source_new_full)(gpointer pollable_stream, GSource *child_source, GCancellable *cancellable);
gssize (g_pollable_stream_read)(GInputStream *stream, void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error);
gssize (g_pollable_stream_write)(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error);
gboolean (g_pollable_stream_write_all)(GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, gsize *bytes_written, GCancellable *cancellable, GError **error);
GSource* (g_pollable_source_new)(GObject *pollable_stream);
// Header /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
GType (g_power_profile_monitor_get_type)(void);
gboolean (g_power_profile_monitor_get_power_saver_enabled)(GPowerProfileMonitor *monitor);
// Header /usr/include/glib-2.0/gio/gpropertyaction.h
GType (g_property_action_get_type)(void);
GPropertyAction * (g_property_action_new)(const gchar *name, gpointer object, const gchar *property_name);
// Header /usr/include/glib-2.0/gio/gproxy.h
GType (g_proxy_get_type)(void);
GProxy* (g_proxy_get_default_for_protocol)(const gchar *protocol);
GIOStream* (g_proxy_connect)(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error);
void (g_proxy_connect_async)(GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GIOStream* (g_proxy_connect_finish)(GProxy *proxy, GAsyncResult *result, GError **error);
gboolean (g_proxy_supports_hostname)(GProxy *proxy);
// Header /usr/include/glib-2.0/gio/gproxyaddress.h
GType (g_proxy_address_get_type)(void);
GSocketAddress* (g_proxy_address_new)(GInetAddress *inetaddr, guint16 port, const gchar *protocol, const gchar *dest_hostname, guint16 dest_port, const gchar *username, const gchar *password);
const gchar* (g_proxy_address_get_protocol)(GProxyAddress *proxy);
const gchar* (g_proxy_address_get_destination_protocol)(GProxyAddress *proxy);
const gchar* (g_proxy_address_get_destination_hostname)(GProxyAddress *proxy);
guint16 (g_proxy_address_get_destination_port)(GProxyAddress *proxy);
const gchar* (g_proxy_address_get_username)(GProxyAddress *proxy);
const gchar* (g_proxy_address_get_password)(GProxyAddress *proxy);
const gchar* (g_proxy_address_get_uri)(GProxyAddress *proxy);
// Header /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
GType (g_proxy_address_enumerator_get_type)(void);
// Header /usr/include/glib-2.0/gio/gproxyresolver.h
GType (g_proxy_resolver_get_type)(void);
GProxyResolver* (g_proxy_resolver_get_default)(void);
gboolean (g_proxy_resolver_is_supported)(GProxyResolver *resolver);
gchar** (g_proxy_resolver_lookup)(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error);
void (g_proxy_resolver_lookup_async)(GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar** (g_proxy_resolver_lookup_finish)(GProxyResolver *resolver, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gremoteactiongroup.h
GType (g_remote_action_group_get_type)(void);
void (g_remote_action_group_activate_action_full)(GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data);
void (g_remote_action_group_change_action_state_full)(GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data);
// Header /usr/include/glib-2.0/gio/gresolver.h
GType (g_resolver_get_type)(void);
GResolver* (g_resolver_get_default)(void);
void (g_resolver_set_default)(GResolver *resolver);
GList* (g_resolver_lookup_by_name)(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GError **error);
void (g_resolver_lookup_by_name_async)(GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList* (g_resolver_lookup_by_name_finish)(GResolver *resolver, GAsyncResult *result, GError **error);
void (g_resolver_lookup_by_name_with_flags_async)(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList* (g_resolver_lookup_by_name_with_flags_finish)(GResolver *resolver, GAsyncResult *result, GError **error);
GList* (g_resolver_lookup_by_name_with_flags)(GResolver *resolver, const gchar *hostname, GResolverNameLookupFlags flags, GCancellable *cancellable, GError **error);
void (g_resolver_free_addresses)(GList *addresses);
gchar* (g_resolver_lookup_by_address)(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GError **error);
void (g_resolver_lookup_by_address_async)(GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gchar* (g_resolver_lookup_by_address_finish)(GResolver *resolver, GAsyncResult *result, GError **error);
GList* (g_resolver_lookup_service)(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GError **error);
void (g_resolver_lookup_service_async)(GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList* (g_resolver_lookup_service_finish)(GResolver *resolver, GAsyncResult *result, GError **error);
GList* (g_resolver_lookup_records)(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GError **error);
void (g_resolver_lookup_records_async)(GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList* (g_resolver_lookup_records_finish)(GResolver *resolver, GAsyncResult *result, GError **error);
void (g_resolver_free_targets)(GList *targets);
unsigned (g_resolver_get_timeout)(GResolver *resolver);
void (g_resolver_set_timeout)(GResolver *resolver, unsigned timeout_ms);
GQuark (g_resolver_error_quark)(void);
// Header /usr/include/glib-2.0/gio/gresource.h
GType (g_resource_get_type)(void);
GQuark (g_resource_error_quark)(void);
GResource * (g_resource_new_from_data)(GBytes *data, GError **error);
GResource * (g_resource_ref)(GResource *resource);
void (g_resource_unref)(GResource *resource);
GResource * (g_resource_load)(const gchar *filename, GError **error);
GInputStream* (g_resource_open_stream)(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);
GBytes * (g_resource_lookup_data)(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);
char ** (g_resource_enumerate_children)(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);
gboolean (g_resource_get_info)(GResource *resource, const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error);
void (g_resources_register)(GResource *resource);
void (g_resources_unregister)(GResource *resource);
GInputStream* (g_resources_open_stream)(const char *path, GResourceLookupFlags lookup_flags, GError **error);
GBytes * (g_resources_lookup_data)(const char *path, GResourceLookupFlags lookup_flags, GError **error);
char ** (g_resources_enumerate_children)(const char *path, GResourceLookupFlags lookup_flags, GError **error);
gboolean (g_resources_get_info)(const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error);
// Header /usr/include/glib-2.0/gio/gseekable.h
GType (g_seekable_get_type)(void);
goffset (g_seekable_tell)(GSeekable *seekable);
gboolean (g_seekable_can_seek)(GSeekable *seekable);
gboolean (g_seekable_seek)(GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error);
gboolean (g_seekable_can_truncate)(GSeekable *seekable);
gboolean (g_seekable_truncate)(GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error);
// Header /usr/include/glib-2.0/gio/gsettings.h
GType (g_settings_get_type)(void);
const gchar * const * (g_settings_list_schemas)(void);
const gchar * const * (g_settings_list_relocatable_schemas)(void);
GSettings * (g_settings_new)(const gchar *schema_id);
GSettings * (g_settings_new_with_path)(const gchar *schema_id, const gchar *path);
GSettings * (g_settings_new_with_backend)(const gchar *schema_id, GSettingsBackend *backend);
GSettings * (g_settings_new_with_backend_and_path)(const gchar *schema_id, GSettingsBackend *backend, const gchar *path);
GSettings * (g_settings_new_full)(GSettingsSchema *schema, GSettingsBackend *backend, const gchar *path);
gchar ** (g_settings_list_children)(GSettings *settings);
gchar ** (g_settings_list_keys)(GSettings *settings);
GVariant * (g_settings_get_range)(GSettings *settings, const gchar *key);
gboolean (g_settings_range_check)(GSettings *settings, const gchar *key, GVariant *value);
gboolean (g_settings_set_value)(GSettings *settings, const gchar *key, GVariant *value);
GVariant * (g_settings_get_value)(GSettings *settings, const gchar *key);
GVariant * (g_settings_get_user_value)(GSettings *settings, const gchar *key);
GVariant * (g_settings_get_default_value)(GSettings *settings, const gchar *key);
void (g_settings_reset)(GSettings *settings, const gchar *key);
gint (g_settings_get_int)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_int)(GSettings *settings, const gchar *key, gint value);
gint64 (g_settings_get_int64)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_int64)(GSettings *settings, const gchar *key, gint64 value);
guint (g_settings_get_uint)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_uint)(GSettings *settings, const gchar *key, guint value);
guint64 (g_settings_get_uint64)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_uint64)(GSettings *settings, const gchar *key, guint64 value);
gchar * (g_settings_get_string)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_string)(GSettings *settings, const gchar *key, const gchar *value);
gboolean (g_settings_get_boolean)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_boolean)(GSettings *settings, const gchar *key, gboolean value);
gdouble (g_settings_get_double)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_double)(GSettings *settings, const gchar *key, gdouble value);
gchar ** (g_settings_get_strv)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_strv)(GSettings *settings, const gchar *key, const gchar *const *value);
gint (g_settings_get_enum)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_enum)(GSettings *settings, const gchar *key, gint value);
guint (g_settings_get_flags)(GSettings *settings, const gchar *key);
gboolean (g_settings_set_flags)(GSettings *settings, const gchar *key, guint value);
GSettings * (g_settings_get_child)(GSettings *settings, const gchar *name);
gboolean (g_settings_is_writable)(GSettings *settings, const gchar *name);
void (g_settings_delay)(GSettings *settings);
void (g_settings_apply)(GSettings *settings);
void (g_settings_revert)(GSettings *settings);
gboolean (g_settings_get_has_unapplied)(GSettings *settings);
void (g_settings_sync)(void);
void (g_settings_bind)(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags);
void (g_settings_bind_with_mapping)(GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy);
void (g_settings_bind_writable)(GSettings *settings, const gchar *key, gpointer object, const gchar *property, gboolean inverted);
void (g_settings_unbind)(gpointer object, const gchar *property);
GAction * (g_settings_create_action)(GSettings *settings, const gchar *key);
gpointer (g_settings_get_mapped)(GSettings *settings, const gchar *key, GSettingsGetMapping mapping, gpointer user_data);
// Header /usr/include/glib-2.0/gio/gsettingsbackend.h
GType (g_settings_backend_get_type)(void);
void (g_settings_backend_changed)(GSettingsBackend *backend, const gchar *key, gpointer origin_tag);
void (g_settings_backend_path_changed)(GSettingsBackend *backend, const gchar *path, gpointer origin_tag);
void (g_settings_backend_flatten_tree)(GTree *tree, gchar **path, const gchar ***keys, GVariant ***values);
void (g_settings_backend_keys_changed)(GSettingsBackend *backend, const gchar *path, gchar const * const *items, gpointer origin_tag);
void (g_settings_backend_path_writable_changed)(GSettingsBackend *backend, const gchar *path);
void (g_settings_backend_writable_changed)(GSettingsBackend *backend, const gchar *key);
void (g_settings_backend_changed_tree)(GSettingsBackend *backend, GTree *tree, gpointer origin_tag);
GSettingsBackend * (g_settings_backend_get_default)(void);
GSettingsBackend * (g_keyfile_settings_backend_new)(const gchar *filename, const gchar *root_path, const gchar *root_group);
GSettingsBackend * (g_null_settings_backend_new)(void);
GSettingsBackend * (g_memory_settings_backend_new)(void);
// Header /usr/include/glib-2.0/gio/gsettingsschema.h
GSettingsSchemaSource * (g_settings_schema_source_get_default)(void);
GSettingsSchemaSource * (g_settings_schema_source_ref)(GSettingsSchemaSource *source);
void (g_settings_schema_source_unref)(GSettingsSchemaSource *source);
GSettingsSchemaSource * (g_settings_schema_source_new_from_directory)(const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted, GError **error);
GSettingsSchema * (g_settings_schema_source_lookup)(GSettingsSchemaSource *source, const gchar *schema_id, gboolean recursive);
void (g_settings_schema_source_list_schemas)(GSettingsSchemaSource *source, gboolean recursive, gchar ***non_relocatable, gchar ***relocatable);
GType (g_settings_schema_get_type)(void);
GSettingsSchema * (g_settings_schema_ref)(GSettingsSchema *schema);
void (g_settings_schema_unref)(GSettingsSchema *schema);
const gchar * (g_settings_schema_get_id)(GSettingsSchema *schema);
const gchar * (g_settings_schema_get_path)(GSettingsSchema *schema);
GSettingsSchemaKey * (g_settings_schema_get_key)(GSettingsSchema *schema, const gchar *name);
gboolean (g_settings_schema_has_key)(GSettingsSchema *schema, const gchar *name);
gchar** (g_settings_schema_list_keys)(GSettingsSchema *schema);
gchar ** (g_settings_schema_list_children)(GSettingsSchema *schema);
GType (g_settings_schema_key_get_type)(void);
GSettingsSchemaKey * (g_settings_schema_key_ref)(GSettingsSchemaKey *key);
void (g_settings_schema_key_unref)(GSettingsSchemaKey *key);
const GVariantType * (g_settings_schema_key_get_value_type)(GSettingsSchemaKey *key);
GVariant * (g_settings_schema_key_get_default_value)(GSettingsSchemaKey *key);
GVariant * (g_settings_schema_key_get_range)(GSettingsSchemaKey *key);
gboolean (g_settings_schema_key_range_check)(GSettingsSchemaKey *key, GVariant *value);
const gchar * (g_settings_schema_key_get_name)(GSettingsSchemaKey *key);
const gchar * (g_settings_schema_key_get_summary)(GSettingsSchemaKey *key);
const gchar * (g_settings_schema_key_get_description)(GSettingsSchemaKey *key);
GType (g_settings_schema_source_get_type)(void);
// Header /usr/include/glib-2.0/gio/gsimpleaction.h
GType (g_simple_action_get_type)(void);
GSimpleAction * (g_simple_action_new)(const gchar *name, const GVariantType *parameter_type);
GSimpleAction * (g_simple_action_new_stateful)(const gchar *name, const GVariantType *parameter_type, GVariant *state);
void (g_simple_action_set_enabled)(GSimpleAction *simple, gboolean enabled);
void (g_simple_action_set_state)(GSimpleAction *simple, GVariant *value);
void (g_simple_action_set_state_hint)(GSimpleAction *simple, GVariant *state_hint);
// Header /usr/include/glib-2.0/gio/gsimpleactiongroup.h
GType (g_simple_action_group_get_type)(void);
GSimpleActionGroup * (g_simple_action_group_new)(void);
GAction * (g_simple_action_group_lookup)(GSimpleActionGroup *simple, const gchar *action_name);
void (g_simple_action_group_insert)(GSimpleActionGroup *simple, GAction *action);
void (g_simple_action_group_remove)(GSimpleActionGroup *simple, const gchar *action_name);
void (g_simple_action_group_add_entries)(GSimpleActionGroup *simple, const GActionEntry *entries, gint n_entries, gpointer user_data);
// Header /usr/include/glib-2.0/gio/gsimpleasyncresult.h
GType (g_simple_async_result_get_type)(void);
GSimpleAsyncResult* (g_simple_async_result_new)(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag);
GSimpleAsyncResult* (g_simple_async_result_new_from_error)(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, const GError *error);
GSimpleAsyncResult* (g_simple_async_result_new_take_error)(GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GError *error);
void (g_simple_async_result_set_op_res_gpointer)(GSimpleAsyncResult *simple, gpointer op_res, GDestroyNotify destroy_op_res);
gpointer (g_simple_async_result_get_op_res_gpointer)(GSimpleAsyncResult *simple);
void (g_simple_async_result_set_op_res_gssize)(GSimpleAsyncResult *simple, gssize op_res);
gssize (g_simple_async_result_get_op_res_gssize)(GSimpleAsyncResult *simple);
void (g_simple_async_result_set_op_res_gboolean)(GSimpleAsyncResult *simple, gboolean op_res);
gboolean (g_simple_async_result_get_op_res_gboolean)(GSimpleAsyncResult *simple);
void (g_simple_async_result_set_check_cancellable)(GSimpleAsyncResult *simple, GCancellable *check_cancellable);
gpointer (g_simple_async_result_get_source_tag)(GSimpleAsyncResult *simple);
void (g_simple_async_result_set_handle_cancellation)(GSimpleAsyncResult *simple, gboolean handle_cancellation);
void (g_simple_async_result_complete)(GSimpleAsyncResult *simple);
void (g_simple_async_result_complete_in_idle)(GSimpleAsyncResult *simple);
void (g_simple_async_result_run_in_thread)(GSimpleAsyncResult *simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable);
void (g_simple_async_result_set_from_error)(GSimpleAsyncResult *simple, const GError *error);
void (g_simple_async_result_take_error)(GSimpleAsyncResult *simple, GError *error);
gboolean (g_simple_async_result_propagate_error)(GSimpleAsyncResult *simple, GError **dest);
void (g_simple_async_result_set_error_va)(GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, va_list args);
gboolean (g_simple_async_result_is_valid)(GAsyncResult *result, GObject *source, gpointer source_tag);
void (g_simple_async_report_gerror_in_idle)(GObject *object, GAsyncReadyCallback callback, gpointer user_data, const GError *error);
void (g_simple_async_report_take_gerror_in_idle)(GObject *object, GAsyncReadyCallback callback, gpointer user_data, GError *error);
// Header /usr/include/glib-2.0/gio/gsimpleiostream.h
GType (g_simple_io_stream_get_type)(void);
GIOStream* (g_simple_io_stream_new)(GInputStream *input_stream, GOutputStream *output_stream);
// Header /usr/include/glib-2.0/gio/gsimplepermission.h
GType (g_simple_permission_get_type)(void);
GPermission * (g_simple_permission_new)(gboolean allowed);
// Header /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
GType (g_simple_proxy_resolver_get_type)(void);
GProxyResolver* (g_simple_proxy_resolver_new)(const gchar *default_proxy, gchar **ignore_hosts);
void (g_simple_proxy_resolver_set_default_proxy)(GSimpleProxyResolver *resolver, const gchar *default_proxy);
void (g_simple_proxy_resolver_set_ignore_hosts)(GSimpleProxyResolver *resolver, gchar **ignore_hosts);
void (g_simple_proxy_resolver_set_uri_proxy)(GSimpleProxyResolver *resolver, const gchar *uri_scheme, const gchar *proxy);
// Header /usr/include/glib-2.0/gio/gsocket.h
GType (g_socket_get_type)(void);
GSocket * (g_socket_new)(GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError **error);
GSocket * (g_socket_new_from_fd)(gint fd, GError **error);
int (g_socket_get_fd)(GSocket *socket);
GSocketFamily (g_socket_get_family)(GSocket *socket);
GSocketType (g_socket_get_socket_type)(GSocket *socket);
GSocketProtocol (g_socket_get_protocol)(GSocket *socket);
GSocketAddress * (g_socket_get_local_address)(GSocket *socket, GError **error);
GSocketAddress * (g_socket_get_remote_address)(GSocket *socket, GError **error);
void (g_socket_set_blocking)(GSocket *socket, gboolean blocking);
gboolean (g_socket_get_blocking)(GSocket *socket);
void (g_socket_set_keepalive)(GSocket *socket, gboolean keepalive);
gboolean (g_socket_get_keepalive)(GSocket *socket);
gint (g_socket_get_listen_backlog)(GSocket *socket);
void (g_socket_set_listen_backlog)(GSocket *socket, gint backlog);
guint (g_socket_get_timeout)(GSocket *socket);
void (g_socket_set_timeout)(GSocket *socket, guint timeout);
guint (g_socket_get_ttl)(GSocket *socket);
void (g_socket_set_ttl)(GSocket *socket, guint ttl);
gboolean (g_socket_get_broadcast)(GSocket *socket);
void (g_socket_set_broadcast)(GSocket *socket, gboolean broadcast);
gboolean (g_socket_get_multicast_loopback)(GSocket *socket);
void (g_socket_set_multicast_loopback)(GSocket *socket, gboolean loopback);
guint (g_socket_get_multicast_ttl)(GSocket *socket);
void (g_socket_set_multicast_ttl)(GSocket *socket, guint ttl);
gboolean (g_socket_is_connected)(GSocket *socket);
gboolean (g_socket_bind)(GSocket *socket, GSocketAddress *address, gboolean allow_reuse, GError **error);
gboolean (g_socket_join_multicast_group)(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error);
gboolean (g_socket_leave_multicast_group)(GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error);
gboolean (g_socket_join_multicast_group_ssm)(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error);
gboolean (g_socket_leave_multicast_group_ssm)(GSocket *socket, GInetAddress *group, GInetAddress *source_specific, const gchar *iface, GError **error);
gboolean (g_socket_connect)(GSocket *socket, GSocketAddress *address, GCancellable *cancellable, GError **error);
gboolean (g_socket_check_connect_result)(GSocket *socket, GError **error);
gssize (g_socket_get_available_bytes)(GSocket *socket);
GIOCondition (g_socket_condition_check)(GSocket *socket, GIOCondition condition);
gboolean (g_socket_condition_wait)(GSocket *socket, GIOCondition condition, GCancellable *cancellable, GError **error);
gboolean (g_socket_condition_timed_wait)(GSocket *socket, GIOCondition condition, gint64 timeout_us, GCancellable *cancellable, GError **error);
GSocket * (g_socket_accept)(GSocket *socket, GCancellable *cancellable, GError **error);
gboolean (g_socket_listen)(GSocket *socket, GError **error);
gssize (g_socket_receive)(GSocket *socket, gchar *buffer, gsize size, GCancellable *cancellable, GError **error);
GBytes * (g_socket_receive_bytes)(GSocket *socket, gsize size, gint64 timeout_us, GCancellable *cancellable, GError **error);
gssize (g_socket_receive_from)(GSocket *socket, GSocketAddress **address, gchar *buffer, gsize size, GCancellable *cancellable, GError **error);
GBytes * (g_socket_receive_bytes_from)(GSocket *socket, GSocketAddress **address, gsize size, gint64 timeout_us, GCancellable *cancellable, GError **error);
gssize (g_socket_send)(GSocket *socket, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error);
gssize (g_socket_send_to)(GSocket *socket, GSocketAddress *address, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error);
gssize (g_socket_receive_message)(GSocket *socket, GSocketAddress **address, GInputVector *vectors, gint num_vectors, GSocketControlMessage ***messages, gint *num_messages, gint *flags, GCancellable *cancellable, GError **error);
gssize (g_socket_send_message)(GSocket *socket, GSocketAddress *address, GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, GCancellable *cancellable, GError **error);
gint (g_socket_receive_messages)(GSocket *socket, GInputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error);
gint (g_socket_send_messages)(GSocket *socket, GOutputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error);
gboolean (g_socket_close)(GSocket *socket, GError **error);
gboolean (g_socket_shutdown)(GSocket *socket, gboolean shutdown_read, gboolean shutdown_write, GError **error);
gboolean (g_socket_is_closed)(GSocket *socket);
GSource * (g_socket_create_source)(GSocket *socket, GIOCondition condition, GCancellable *cancellable);
gboolean (g_socket_speaks_ipv4)(GSocket *socket);
GCredentials* (g_socket_get_credentials)(GSocket *socket, GError **error);
gssize (g_socket_receive_with_blocking)(GSocket *socket, gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error);
gssize (g_socket_send_with_blocking)(GSocket *socket, const gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error);
GPollableReturn (g_socket_send_message_with_timeout)(GSocket *socket, GSocketAddress *address, const GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, gint64 timeout_us, gsize *bytes_written, GCancellable *cancellable, GError **error);
gboolean (g_socket_get_option)(GSocket *socket, gint level, gint optname, gint *value, GError **error);
gboolean (g_socket_set_option)(GSocket *socket, gint level, gint optname, gint value, GError **error);
// Header /usr/include/glib-2.0/gio/gsocketaddress.h
GType (g_socket_address_get_type)(void);
GSocketFamily (g_socket_address_get_family)(GSocketAddress *address);
GSocketAddress * (g_socket_address_new_from_native)(gpointer native, gsize len);
gboolean (g_socket_address_to_native)(GSocketAddress *address, gpointer dest, gsize destlen, GError **error);
gssize (g_socket_address_get_native_size)(GSocketAddress *address);
// Header /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
GType (g_socket_address_enumerator_get_type)(void);
GSocketAddress* (g_socket_address_enumerator_next)(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError **error);
void (g_socket_address_enumerator_next_async)(GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketAddress* (g_socket_address_enumerator_next_finish)(GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gsocketclient.h
GType (g_socket_client_get_type)(void);
GSocketClient* (g_socket_client_new)(void);
GSocketFamily (g_socket_client_get_family)(GSocketClient *client);
void (g_socket_client_set_family)(GSocketClient *client, GSocketFamily family);
GSocketType (g_socket_client_get_socket_type)(GSocketClient *client);
void (g_socket_client_set_socket_type)(GSocketClient *client, GSocketType type);
GSocketProtocol (g_socket_client_get_protocol)(GSocketClient *client);
void (g_socket_client_set_protocol)(GSocketClient *client, GSocketProtocol protocol);
GSocketAddress* (g_socket_client_get_local_address)(GSocketClient *client);
void (g_socket_client_set_local_address)(GSocketClient *client, GSocketAddress *address);
guint (g_socket_client_get_timeout)(GSocketClient *client);
void (g_socket_client_set_timeout)(GSocketClient *client, guint timeout);
gboolean (g_socket_client_get_enable_proxy)(GSocketClient *client);
void (g_socket_client_set_enable_proxy)(GSocketClient *client, gboolean enable);
gboolean (g_socket_client_get_tls)(GSocketClient *client);
void (g_socket_client_set_tls)(GSocketClient *client, gboolean tls);
GTlsCertificateFlags (g_socket_client_get_tls_validation_flags)(GSocketClient *client);
void (g_socket_client_set_tls_validation_flags)(GSocketClient *client, GTlsCertificateFlags flags);
GProxyResolver* (g_socket_client_get_proxy_resolver)(GSocketClient *client);
void (g_socket_client_set_proxy_resolver)(GSocketClient *client, GProxyResolver *proxy_resolver);
GSocketConnection * (g_socket_client_connect)(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);
GSocketConnection * (g_socket_client_connect_to_host)(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GError **error);
GSocketConnection * (g_socket_client_connect_to_service)(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GError **error);
GSocketConnection * (g_socket_client_connect_to_uri)(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GError **error);
void (g_socket_client_connect_async)(GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_finish)(GSocketClient *client, GAsyncResult *result, GError **error);
void (g_socket_client_connect_to_host_async)(GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_to_host_finish)(GSocketClient *client, GAsyncResult *result, GError **error);
void (g_socket_client_connect_to_service_async)(GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_to_service_finish)(GSocketClient *client, GAsyncResult *result, GError **error);
void (g_socket_client_connect_to_uri_async)(GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_client_connect_to_uri_finish)(GSocketClient *client, GAsyncResult *result, GError **error);
void (g_socket_client_add_application_proxy)(GSocketClient *client, const gchar *protocol);
// Header /usr/include/glib-2.0/gio/gsocketconnectable.h
GType (g_socket_connectable_get_type)(void);
GSocketAddressEnumerator* (g_socket_connectable_enumerate)(GSocketConnectable *connectable);
GSocketAddressEnumerator* (g_socket_connectable_proxy_enumerate)(GSocketConnectable *connectable);
gchar* (g_socket_connectable_to_string)(GSocketConnectable *connectable);
// Header /usr/include/glib-2.0/gio/gsocketconnection.h
GType (g_socket_connection_get_type)(void);
gboolean (g_socket_connection_is_connected)(GSocketConnection *connection);
gboolean (g_socket_connection_connect)(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GError **error);
void (g_socket_connection_connect_async)(GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_socket_connection_connect_finish)(GSocketConnection *connection, GAsyncResult *result, GError **error);
GSocket* (g_socket_connection_get_socket)(GSocketConnection *connection);
GSocketAddress* (g_socket_connection_get_local_address)(GSocketConnection *connection, GError **error);
GSocketAddress* (g_socket_connection_get_remote_address)(GSocketConnection *connection, GError **error);
void (g_socket_connection_factory_register_type)(GType g_type, GSocketFamily family, GSocketType type, gint protocol);
GType (g_socket_connection_factory_lookup_type)(GSocketFamily family, GSocketType type, gint protocol_id);
GSocketConnection* (g_socket_connection_factory_create_connection)(GSocket *socket);
// Header /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
GType (g_socket_control_message_get_type)(void);
gsize (g_socket_control_message_get_size)(GSocketControlMessage *message);
int (g_socket_control_message_get_level)(GSocketControlMessage *message);
int (g_socket_control_message_get_msg_type)(GSocketControlMessage *message);
void (g_socket_control_message_serialize)(GSocketControlMessage *message, gpointer data);
GSocketControlMessage* (g_socket_control_message_deserialize)(int level, int type, gsize size, gpointer data);
// Header /usr/include/glib-2.0/gio/gsocketlistener.h
GType (g_socket_listener_get_type)(void);
GSocketListener * (g_socket_listener_new)(void);
void (g_socket_listener_set_backlog)(GSocketListener *listener, int listen_backlog);
gboolean (g_socket_listener_add_socket)(GSocketListener *listener, GSocket *socket, GObject *source_object, GError **error);
gboolean (g_socket_listener_add_address)(GSocketListener *listener, GSocketAddress *address, GSocketType type, GSocketProtocol protocol, GObject *source_object, GSocketAddress **effective_address, GError **error);
gboolean (g_socket_listener_add_inet_port)(GSocketListener *listener, guint16 port, GObject *source_object, GError **error);
guint16 (g_socket_listener_add_any_inet_port)(GSocketListener *listener, GObject *source_object, GError **error);
GSocket * (g_socket_listener_accept_socket)(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error);
void (g_socket_listener_accept_socket_async)(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocket * (g_socket_listener_accept_socket_finish)(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error);
GSocketConnection * (g_socket_listener_accept)(GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error);
void (g_socket_listener_accept_async)(GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GSocketConnection * (g_socket_listener_accept_finish)(GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error);
void (g_socket_listener_close)(GSocketListener *listener);
// Header /usr/include/glib-2.0/gio/gsocketservice.h
GType (g_socket_service_get_type)(void);
GSocketService* (g_socket_service_new)(void);
void (g_socket_service_start)(GSocketService *service);
void (g_socket_service_stop)(GSocketService *service);
gboolean (g_socket_service_is_active)(GSocketService *service);
// Header /usr/include/glib-2.0/gio/gsrvtarget.h
GType (g_srv_target_get_type)(void);
GSrvTarget* (g_srv_target_new)(const gchar *hostname, guint16 port, guint16 priority, guint16 weight);
GSrvTarget* (g_srv_target_copy)(GSrvTarget *target);
void (g_srv_target_free)(GSrvTarget *target);
const gchar* (g_srv_target_get_hostname)(GSrvTarget *target);
guint16 (g_srv_target_get_port)(GSrvTarget *target);
guint16 (g_srv_target_get_priority)(GSrvTarget *target);
guint16 (g_srv_target_get_weight)(GSrvTarget *target);
GList* (g_srv_target_list_sort)(GList *targets);
// Header /usr/include/glib-2.0/gio/gsubprocess.h
GType (g_subprocess_get_type)(void);
GSubprocess * (g_subprocess_newv)(const gchar * const *argv, GSubprocessFlags flags, GError **error);
GOutputStream * (g_subprocess_get_stdin_pipe)(GSubprocess *subprocess);
GInputStream * (g_subprocess_get_stdout_pipe)(GSubprocess *subprocess);
GInputStream * (g_subprocess_get_stderr_pipe)(GSubprocess *subprocess);
const gchar * (g_subprocess_get_identifier)(GSubprocess *subprocess);
void (g_subprocess_send_signal)(GSubprocess *subprocess, gint signal_num);
void (g_subprocess_force_exit)(GSubprocess *subprocess);
gboolean (g_subprocess_wait)(GSubprocess *subprocess, GCancellable *cancellable, GError **error);
void (g_subprocess_wait_async)(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_wait_finish)(GSubprocess *subprocess, GAsyncResult *result, GError **error);
gboolean (g_subprocess_wait_check)(GSubprocess *subprocess, GCancellable *cancellable, GError **error);
void (g_subprocess_wait_check_async)(GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_wait_check_finish)(GSubprocess *subprocess, GAsyncResult *result, GError **error);
gint (g_subprocess_get_status)(GSubprocess *subprocess);
gboolean (g_subprocess_get_successful)(GSubprocess *subprocess);
gboolean (g_subprocess_get_if_exited)(GSubprocess *subprocess);
gint (g_subprocess_get_exit_status)(GSubprocess *subprocess);
gboolean (g_subprocess_get_if_signaled)(GSubprocess *subprocess);
gint (g_subprocess_get_term_sig)(GSubprocess *subprocess);
gboolean (g_subprocess_communicate)(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **stderr_buf, GError **error);
void (g_subprocess_communicate_async)(GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_communicate_finish)(GSubprocess *subprocess, GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError **error);
gboolean (g_subprocess_communicate_utf8)(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **stderr_buf, GError **error);
void (g_subprocess_communicate_utf8_async)(GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_subprocess_communicate_utf8_finish)(GSubprocess *subprocess, GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **error);
// Header /usr/include/glib-2.0/gio/gsubprocesslauncher.h
GType (g_subprocess_launcher_get_type)(void);
GSubprocessLauncher * (g_subprocess_launcher_new)(GSubprocessFlags flags);
GSubprocess * (g_subprocess_launcher_spawnv)(GSubprocessLauncher *self, const gchar * const *argv, GError **error);
void (g_subprocess_launcher_set_environ)(GSubprocessLauncher *self, gchar **env);
void (g_subprocess_launcher_setenv)(GSubprocessLauncher *self, const gchar *variable, const gchar *value, gboolean overwrite);
void (g_subprocess_launcher_unsetenv)(GSubprocessLauncher *self, const gchar *variable);
const gchar * (g_subprocess_launcher_getenv)(GSubprocessLauncher *self, const gchar *variable);
void (g_subprocess_launcher_set_cwd)(GSubprocessLauncher *self, const gchar *cwd);
void (g_subprocess_launcher_set_flags)(GSubprocessLauncher *self, GSubprocessFlags flags);
void (g_subprocess_launcher_set_stdin_file_path)(GSubprocessLauncher *self, const gchar *path);
void (g_subprocess_launcher_take_stdin_fd)(GSubprocessLauncher *self, gint fd);
void (g_subprocess_launcher_set_stdout_file_path)(GSubprocessLauncher *self, const gchar *path);
void (g_subprocess_launcher_take_stdout_fd)(GSubprocessLauncher *self, gint fd);
void (g_subprocess_launcher_set_stderr_file_path)(GSubprocessLauncher *self, const gchar *path);
void (g_subprocess_launcher_take_stderr_fd)(GSubprocessLauncher *self, gint fd);
void (g_subprocess_launcher_take_fd)(GSubprocessLauncher *self, gint source_fd, gint target_fd);
void (g_subprocess_launcher_close)(GSubprocessLauncher *self);
void (g_subprocess_launcher_set_child_setup)(GSubprocessLauncher *self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify);
// Header /usr/include/glib-2.0/gio/gtask.h
GType (g_task_get_type)(void);
GTask* (g_task_new)(gpointer source_object, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer callback_data);
void (g_task_report_error)(gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError *error);
void (g_task_set_task_data)(GTask *task, gpointer task_data, GDestroyNotify task_data_destroy);
void (g_task_set_priority)(GTask *task, gint priority);
void (g_task_set_check_cancellable)(GTask *task, gboolean check_cancellable);
void (g_task_set_source_tag)(GTask *task, gpointer source_tag);
void (g_task_set_name)(GTask *task, const gchar *name);
void (g_task_set_static_name)(GTask *task, const gchar *name);
gpointer (g_task_get_source_object)(GTask *task);
gpointer (g_task_get_task_data)(GTask *task);
gint (g_task_get_priority)(GTask *task);
GMainContext* (g_task_get_context)(GTask *task);
GCancellable* (g_task_get_cancellable)(GTask *task);
gboolean (g_task_get_check_cancellable)(GTask *task);
gpointer (g_task_get_source_tag)(GTask *task);
const gchar* (g_task_get_name)(GTask *task);
gboolean (g_task_is_valid)(gpointer result, gpointer source_object);
void (g_task_run_in_thread)(GTask *task, GTaskThreadFunc task_func);
void (g_task_run_in_thread_sync)(GTask *task, GTaskThreadFunc task_func);
gboolean (g_task_set_return_on_cancel)(GTask *task, gboolean return_on_cancel);
gboolean (g_task_get_return_on_cancel)(GTask *task);
void (g_task_attach_source)(GTask *task, GSource *source, GSourceFunc callback);
void (g_task_return_pointer)(GTask *task, gpointer result, GDestroyNotify result_destroy);
void (g_task_return_boolean)(GTask *task, gboolean result);
void (g_task_return_int)(GTask *task, gssize result);
void (g_task_return_error)(GTask *task, GError *error);
void (g_task_return_new_error_literal)(GTask *task, GQuark domain, gint code, const char *message);
void (g_task_return_value)(GTask *task, GValue *result);
gboolean (g_task_return_error_if_cancelled)(GTask *task);
gpointer (g_task_propagate_pointer)(GTask *task, GError **error);
gboolean (g_task_propagate_boolean)(GTask *task, GError **error);
gssize (g_task_propagate_int)(GTask *task, GError **error);
gboolean (g_task_propagate_value)(GTask *task, GValue *value, GError **error);
gboolean (g_task_had_error)(GTask *task);
gboolean (g_task_get_completed)(GTask *task);
void (g_task_print_alive_tasks)(void);
// Header /usr/include/glib-2.0/gio/gtcpconnection.h
GType (g_tcp_connection_get_type)(void);
void (g_tcp_connection_set_graceful_disconnect)(GTcpConnection *connection, gboolean graceful_disconnect);
gboolean (g_tcp_connection_get_graceful_disconnect)(GTcpConnection *connection);
// Header /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
GType (g_tcp_wrapper_connection_get_type)(void);
GSocketConnection* (g_tcp_wrapper_connection_new)(GIOStream *base_io_stream, GSocket *socket);
GIOStream* (g_tcp_wrapper_connection_get_base_io_stream)(GTcpWrapperConnection *conn);
// Header /usr/include/glib-2.0/gio/gtestdbus.h
GType (g_test_dbus_get_type)(void);
GTestDBus * (g_test_dbus_new)(GTestDBusFlags flags);
GTestDBusFlags (g_test_dbus_get_flags)(GTestDBus *self);
const gchar * (g_test_dbus_get_bus_address)(GTestDBus *self);
void (g_test_dbus_add_service_dir)(GTestDBus *self, const gchar *path);
void (g_test_dbus_up)(GTestDBus *self);
void (g_test_dbus_stop)(GTestDBus *self);
void (g_test_dbus_down)(GTestDBus *self);
void (g_test_dbus_unset)(void);
// Header /usr/include/glib-2.0/gio/gthemedicon.h
GType (g_themed_icon_get_type)(void);
GIcon* (g_themed_icon_new)(const char *iconname);
GIcon* (g_themed_icon_new_with_default_fallbacks)(const char *iconname);
GIcon* (g_themed_icon_new_from_names)(char **iconnames, int len);
void (g_themed_icon_prepend_name)(GThemedIcon *icon, const char *iconname);
void (g_themed_icon_append_name)(GThemedIcon *icon, const char *iconname);
const gchar* const * (g_themed_icon_get_names)(GThemedIcon *icon);
// Header /usr/include/glib-2.0/gio/gthreadedsocketservice.h
GType (g_threaded_socket_service_get_type)(void);
GSocketService * (g_threaded_socket_service_new)(int max_threads);
// Header /usr/include/glib-2.0/gio/gtlsbackend.h
GType (g_tls_backend_get_type)(void);
GTlsBackend * (g_tls_backend_get_default)(void);
GTlsDatabase * (g_tls_backend_get_default_database)(GTlsBackend *backend);
void (g_tls_backend_set_default_database)(GTlsBackend *backend, GTlsDatabase *database);
gboolean (g_tls_backend_supports_tls)(GTlsBackend *backend);
gboolean (g_tls_backend_supports_dtls)(GTlsBackend *backend);
GType (g_tls_backend_get_certificate_type)(GTlsBackend *backend);
GType (g_tls_backend_get_client_connection_type)(GTlsBackend *backend);
GType (g_tls_backend_get_server_connection_type)(GTlsBackend *backend);
GType (g_tls_backend_get_file_database_type)(GTlsBackend *backend);
GType (g_tls_backend_get_dtls_client_connection_type)(GTlsBackend *backend);
GType (g_tls_backend_get_dtls_server_connection_type)(GTlsBackend *backend);
// Header /usr/include/glib-2.0/gio/gtlscertificate.h
GType (g_tls_certificate_get_type)(void);
GTlsCertificate* (g_tls_certificate_new_from_pem)(const gchar *data, gssize length, GError **error);
GTlsCertificate* (g_tls_certificate_new_from_pkcs12)(const guint8 *data, gsize length, const gchar *password, GError **error);
GTlsCertificate* (g_tls_certificate_new_from_file_with_password)(const gchar *file, const gchar *password, GError **error);
GTlsCertificate* (g_tls_certificate_new_from_file)(const gchar *file, GError **error);
GTlsCertificate* (g_tls_certificate_new_from_files)(const gchar *cert_file, const gchar *key_file, GError **error);
GTlsCertificate* (g_tls_certificate_new_from_pkcs11_uris)(const gchar *pkcs11_uri, const gchar *private_key_pkcs11_uri, GError **error);
GList* (g_tls_certificate_list_new_from_file)(const gchar *file, GError **error);
GTlsCertificate* (g_tls_certificate_get_issuer)(GTlsCertificate *cert);
GTlsCertificateFlags (g_tls_certificate_verify)(GTlsCertificate *cert, GSocketConnectable *identity, GTlsCertificate *trusted_ca);
gboolean (g_tls_certificate_is_same)(GTlsCertificate *cert_one, GTlsCertificate *cert_two);
GDateTime* (g_tls_certificate_get_not_valid_before)(GTlsCertificate *cert);
GDateTime* (g_tls_certificate_get_not_valid_after)(GTlsCertificate *cert);
gchar* (g_tls_certificate_get_subject_name)(GTlsCertificate *cert);
gchar* (g_tls_certificate_get_issuer_name)(GTlsCertificate *cert);
GPtrArray* (g_tls_certificate_get_dns_names)(GTlsCertificate *cert);
GPtrArray* (g_tls_certificate_get_ip_addresses)(GTlsCertificate *cert);
// Header /usr/include/glib-2.0/gio/gtlsclientconnection.h
GType (g_tls_client_connection_get_type)(void);
GIOStream * (g_tls_client_connection_new)(GIOStream *base_io_stream, GSocketConnectable *server_identity, GError **error);
GTlsCertificateFlags (g_tls_client_connection_get_validation_flags)(GTlsClientConnection *conn);
void (g_tls_client_connection_set_validation_flags)(GTlsClientConnection *conn, GTlsCertificateFlags flags);
GSocketConnectable* (g_tls_client_connection_get_server_identity)(GTlsClientConnection *conn);
void (g_tls_client_connection_set_server_identity)(GTlsClientConnection *conn, GSocketConnectable *identity);
gboolean (g_tls_client_connection_get_use_ssl3)(GTlsClientConnection *conn);
void (g_tls_client_connection_set_use_ssl3)(GTlsClientConnection *conn, gboolean use_ssl3);
GList * (g_tls_client_connection_get_accepted_cas)(GTlsClientConnection *conn);
void (g_tls_client_connection_copy_session_state)(GTlsClientConnection *conn, GTlsClientConnection *source);
// Header /usr/include/glib-2.0/gio/gtlsconnection.h
GType (g_tls_connection_get_type)(void);
void (g_tls_connection_set_use_system_certdb)(GTlsConnection *conn, gboolean use_system_certdb);
gboolean (g_tls_connection_get_use_system_certdb)(GTlsConnection *conn);
void (g_tls_connection_set_database)(GTlsConnection *conn, GTlsDatabase *database);
GTlsDatabase * (g_tls_connection_get_database)(GTlsConnection *conn);
void (g_tls_connection_set_certificate)(GTlsConnection *conn, GTlsCertificate *certificate);
GTlsCertificate* (g_tls_connection_get_certificate)(GTlsConnection *conn);
void (g_tls_connection_set_interaction)(GTlsConnection *conn, GTlsInteraction *interaction);
GTlsInteraction * (g_tls_connection_get_interaction)(GTlsConnection *conn);
GTlsCertificate* (g_tls_connection_get_peer_certificate)(GTlsConnection *conn);
GTlsCertificateFlags (g_tls_connection_get_peer_certificate_errors)(GTlsConnection *conn);
void (g_tls_connection_set_require_close_notify)(GTlsConnection *conn, gboolean require_close_notify);
gboolean (g_tls_connection_get_require_close_notify)(GTlsConnection *conn);
GTlsRehandshakeMode (g_tls_connection_get_rehandshake_mode)(GTlsConnection *conn);
const gchar * (g_tls_connection_get_negotiated_protocol)(GTlsConnection *conn);
void (g_tls_connection_handshake_async)(GTlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_tls_connection_handshake_finish)(GTlsConnection *conn, GAsyncResult *result, GError **error);
GTlsProtocolVersion (g_tls_connection_get_protocol_version)(GTlsConnection *conn);
gchar * (g_tls_connection_get_ciphersuite_name)(GTlsConnection *conn);
GQuark (g_tls_error_quark)(void);
GQuark (g_tls_channel_binding_error_quark)(void);
gboolean (g_tls_connection_emit_accept_certificate)(GTlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);
// Header /usr/include/glib-2.0/gio/gtlsdatabase.h
GType (g_tls_database_get_type)(void);
GTlsCertificateFlags (g_tls_database_verify_chain)(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error);
void (g_tls_database_verify_chain_async)(GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsCertificateFlags (g_tls_database_verify_chain_finish)(GTlsDatabase *self, GAsyncResult *result, GError **error);
gchar* (g_tls_database_create_certificate_handle)(GTlsDatabase *self, GTlsCertificate *certificate);
GTlsCertificate* (g_tls_database_lookup_certificate_for_handle)(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);
void (g_tls_database_lookup_certificate_for_handle_async)(GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsCertificate* (g_tls_database_lookup_certificate_for_handle_finish)(GTlsDatabase *self, GAsyncResult *result, GError **error);
GTlsCertificate* (g_tls_database_lookup_certificate_issuer)(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);
void (g_tls_database_lookup_certificate_issuer_async)(GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsCertificate* (g_tls_database_lookup_certificate_issuer_finish)(GTlsDatabase *self, GAsyncResult *result, GError **error);
GList* (g_tls_database_lookup_certificates_issued_by)(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);
void (g_tls_database_lookup_certificates_issued_by_async)(GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GList* (g_tls_database_lookup_certificates_issued_by_finish)(GTlsDatabase *self, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gtlsfiledatabase.h
GType (g_tls_file_database_get_type)(void);
GTlsDatabase* (g_tls_file_database_new)(const gchar *anchors, GError **error);
// Header /usr/include/glib-2.0/gio/gtlsinteraction.h
GType (g_tls_interaction_get_type)(void);
GTlsInteractionResult (g_tls_interaction_invoke_ask_password)(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);
GTlsInteractionResult (g_tls_interaction_ask_password)(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);
void (g_tls_interaction_ask_password_async)(GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsInteractionResult (g_tls_interaction_ask_password_finish)(GTlsInteraction *interaction, GAsyncResult *result, GError **error);
GTlsInteractionResult (g_tls_interaction_invoke_request_certificate)(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);
GTlsInteractionResult (g_tls_interaction_request_certificate)(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);
void (g_tls_interaction_request_certificate_async)(GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GTlsInteractionResult (g_tls_interaction_request_certificate_finish)(GTlsInteraction *interaction, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gtlspassword.h
GType (g_tls_password_get_type)(void);
GTlsPassword * (g_tls_password_new)(GTlsPasswordFlags flags, const gchar *description);
const guchar * (g_tls_password_get_value)(GTlsPassword *password, gsize *length);
void (g_tls_password_set_value)(GTlsPassword *password, const guchar *value, gssize length);
void (g_tls_password_set_value_full)(GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy);
GTlsPasswordFlags (g_tls_password_get_flags)(GTlsPassword *password);
void (g_tls_password_set_flags)(GTlsPassword *password, GTlsPasswordFlags flags);
const gchar* (g_tls_password_get_description)(GTlsPassword *password);
void (g_tls_password_set_description)(GTlsPassword *password, const gchar *description);
const gchar * (g_tls_password_get_warning)(GTlsPassword *password);
void (g_tls_password_set_warning)(GTlsPassword *password, const gchar *warning);
// Header /usr/include/glib-2.0/gio/gtlsserverconnection.h
GType (g_tls_server_connection_get_type)(void);
GIOStream * (g_tls_server_connection_new)(GIOStream *base_io_stream, GTlsCertificate *certificate, GError **error);
// Header /usr/include/glib-2.0/gio/gunixconnection.h
GType (g_unix_connection_get_type)(void);
gboolean (g_unix_connection_send_fd)(GUnixConnection *connection, gint fd, GCancellable *cancellable, GError **error);
gint (g_unix_connection_receive_fd)(GUnixConnection *connection, GCancellable *cancellable, GError **error);
gboolean (g_unix_connection_send_credentials)(GUnixConnection *connection, GCancellable *cancellable, GError **error);
void (g_unix_connection_send_credentials_async)(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_unix_connection_send_credentials_finish)(GUnixConnection *connection, GAsyncResult *result, GError **error);
GCredentials* (g_unix_connection_receive_credentials)(GUnixConnection *connection, GCancellable *cancellable, GError **error);
void (g_unix_connection_receive_credentials_async)(GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
GCredentials* (g_unix_connection_receive_credentials_finish)(GUnixConnection *connection, GAsyncResult *result, GError **error);
// Header /usr/include/glib-2.0/gio/gunixcredentialsmessage.h
GType (g_unix_credentials_message_get_type)(void);
GSocketControlMessage* (g_unix_credentials_message_new)(void);
GSocketControlMessage* (g_unix_credentials_message_new_with_credentials)(GCredentials *credentials);
GCredentials* (g_unix_credentials_message_get_credentials)(GUnixCredentialsMessage *message);
gboolean (g_unix_credentials_message_is_supported)(void);
// Header /usr/include/glib-2.0/gio/gunixfdlist.h
GType (g_unix_fd_list_get_type)(void);
GUnixFDList * (g_unix_fd_list_new)(void);
GUnixFDList * (g_unix_fd_list_new_from_array)(const gint *fds, gint n_fds);
gint (g_unix_fd_list_append)(GUnixFDList *list, gint fd, GError **error);
gint (g_unix_fd_list_get_length)(GUnixFDList *list);
gint (g_unix_fd_list_get)(GUnixFDList *list, gint index_, GError **error);
const gint * (g_unix_fd_list_peek_fds)(GUnixFDList *list, gint *length);
gint * (g_unix_fd_list_steal_fds)(GUnixFDList *list, gint *length);
// Header /usr/include/glib-2.0/gio/gunixsocketaddress.h
GType (g_unix_socket_address_get_type)(void);
GSocketAddress* (g_unix_socket_address_new)(const gchar *path);
GSocketAddress* (g_unix_socket_address_new_abstract)(const gchar *path, gint path_len);
GSocketAddress* (g_unix_socket_address_new_with_type)(const gchar *path, gint path_len, GUnixSocketAddressType type);
const char * (g_unix_socket_address_get_path)(GUnixSocketAddress *address);
gsize (g_unix_socket_address_get_path_len)(GUnixSocketAddress *address);
GUnixSocketAddressType (g_unix_socket_address_get_address_type)(GUnixSocketAddress *address);
gboolean (g_unix_socket_address_get_is_abstract)(GUnixSocketAddress *address);
gboolean (g_unix_socket_address_abstract_names_supported)(void);
// Header /usr/include/glib-2.0/gio/gvfs.h
GType (g_vfs_get_type)(void);
gboolean (g_vfs_is_active)(GVfs *vfs);
GFile * (g_vfs_get_file_for_path)(GVfs *vfs, const char *path);
GFile * (g_vfs_get_file_for_uri)(GVfs *vfs, const char *uri);
const gchar* const * (g_vfs_get_supported_uri_schemes)(GVfs *vfs);
GFile * (g_vfs_parse_name)(GVfs *vfs, const char *parse_name);
GVfs * (g_vfs_get_default)(void);
GVfs * (g_vfs_get_local)(void);
gboolean (g_vfs_register_uri_scheme)(GVfs *vfs, const char *scheme, GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer parse_name_data, GDestroyNotify parse_name_destroy);
gboolean (g_vfs_unregister_uri_scheme)(GVfs *vfs, const char *scheme);
// Header /usr/include/glib-2.0/gio/gvolume.h
GType (g_volume_get_type)(void);
char * (g_volume_get_name)(GVolume *volume);
GIcon * (g_volume_get_icon)(GVolume *volume);
GIcon * (g_volume_get_symbolic_icon)(GVolume *volume);
char * (g_volume_get_uuid)(GVolume *volume);
GDrive * (g_volume_get_drive)(GVolume *volume);
GMount * (g_volume_get_mount)(GVolume *volume);
gboolean (g_volume_can_mount)(GVolume *volume);
gboolean (g_volume_can_eject)(GVolume *volume);
gboolean (g_volume_should_automount)(GVolume *volume);
void (g_volume_mount)(GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_volume_mount_finish)(GVolume *volume, GAsyncResult *result, GError **error);
void (g_volume_eject)(GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_volume_eject_finish)(GVolume *volume, GAsyncResult *result, GError **error);
char * (g_volume_get_identifier)(GVolume *volume, const char *kind);
char ** (g_volume_enumerate_identifiers)(GVolume *volume);
GFile * (g_volume_get_activation_root)(GVolume *volume);
void (g_volume_eject_with_operation)(GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
gboolean (g_volume_eject_with_operation_finish)(GVolume *volume, GAsyncResult *result, GError **error);
const gchar* (g_volume_get_sort_key)(GVolume *volume);
// Header /usr/include/glib-2.0/gio/gvolumemonitor.h
GType (g_volume_monitor_get_type)(void);
GVolumeMonitor* (g_volume_monitor_get)(void);
GList * (g_volume_monitor_get_connected_drives)(GVolumeMonitor *volume_monitor);
GList * (g_volume_monitor_get_volumes)(GVolumeMonitor *volume_monitor);
GList * (g_volume_monitor_get_mounts)(GVolumeMonitor *volume_monitor);
GVolume * (g_volume_monitor_get_volume_for_uuid)(GVolumeMonitor *volume_monitor, const char *uuid);
GMount * (g_volume_monitor_get_mount_for_uuid)(GVolumeMonitor *volume_monitor, const char *uuid);
GVolume * (g_volume_monitor_adopt_orphan_mount)(GMount *mount);
// Header /usr/include/glib-2.0/gio/gzlibcompressor.h
GType (g_zlib_compressor_get_type)(void);
GZlibCompressor* (g_zlib_compressor_new)(GZlibCompressorFormat format, int level);
GFileInfo* (g_zlib_compressor_get_file_info)(GZlibCompressor *compressor);
void (g_zlib_compressor_set_file_info)(GZlibCompressor *compressor, GFileInfo *file_info);
// Header /usr/include/glib-2.0/gio/gzlibdecompressor.h
GType (g_zlib_decompressor_get_type)(void);
GZlibDecompressor* (g_zlib_decompressor_new)(GZlibCompressorFormat format);
GFileInfo* (g_zlib_decompressor_get_file_info)(GZlibDecompressor *decompressor);
// Header /usr/include/glib-2.0/gmodule.h
gboolean (g_module_supported)(void);
GModule* (g_module_open)(const gchar *file_name, GModuleFlags flags);
GModule* (g_module_open_full)(const gchar *file_name, GModuleFlags flags, GError **error);
gboolean (g_module_close)(GModule *module);
void (g_module_make_resident)(GModule *module);
const gchar * (g_module_error)(void);
gboolean (g_module_symbol)(GModule *module, const gchar *symbol_name, gpointer *symbol);
const gchar * (g_module_name)(GModule *module);
gchar* (g_module_build_path)(const gchar *directory, const gchar *module_name);
GQuark (g_module_error_quark)(void);
// Header /usr/include/glib-2.0/girepository/girepository.h
GType (gi_repository_get_type)(void);
GIRepository* (gi_repository_new)(void);
void (gi_repository_prepend_search_path)(GIRepository *repository, const char *directory);
void (gi_repository_prepend_library_path)(GIRepository *repository, const char *directory);
const char * const * (gi_repository_get_search_path)(GIRepository *repository, size_t *n_paths_out);
const char * const* (gi_repository_get_library_path)(GIRepository *repository, size_t *n_paths_out);
const char * (gi_repository_load_typelib)(GIRepository *repository, GITypelib *typelib, GIRepositoryLoadFlags flags, GError **error);
gboolean (gi_repository_is_registered)(GIRepository *repository, const char *namespace_, const char *version);
GIBaseInfo * (gi_repository_find_by_name)(GIRepository *repository, const char *namespace_, const char *name);
char ** (gi_repository_enumerate_versions)(GIRepository *repository, const char *namespace_, size_t *n_versions_out);
GITypelib * (gi_repository_require)(GIRepository *repository, const char *namespace_, const char *version, GIRepositoryLoadFlags flags, GError **error);
GITypelib * (gi_repository_require_private)(GIRepository *repository, const char *typelib_dir, const char *namespace_, const char *version, GIRepositoryLoadFlags flags, GError **error);
char ** (gi_repository_get_immediate_dependencies)(GIRepository *repository, const char *namespace_, size_t *n_dependencies_out);
char ** (gi_repository_get_dependencies)(GIRepository *repository, const char *namespace_, size_t *n_dependencies_out);
char ** (gi_repository_get_loaded_namespaces)(GIRepository *repository, size_t *n_namespaces_out);
GIBaseInfo * (gi_repository_find_by_gtype)(GIRepository *repository, GType gtype);
void (gi_repository_get_object_gtype_interfaces)(GIRepository *repository, GType gtype, size_t *n_interfaces_out, GIInterfaceInfo ***interfaces_out);
unsigned int (gi_repository_get_n_infos)(GIRepository *repository, const char *namespace_);
GIBaseInfo * (gi_repository_get_info)(GIRepository *repository, const char *namespace_, unsigned int idx);
GIEnumInfo * (gi_repository_find_by_error_domain)(GIRepository *repository, GQuark domain);
const char * (gi_repository_get_typelib_path)(GIRepository *repository, const char *namespace_);
const char * const* (gi_repository_get_shared_libraries)(GIRepository *repository, const char *namespace_, size_t *out_n_elements);
const char * (gi_repository_get_c_prefix)(GIRepository *repository, const char *namespace_);
const char * (gi_repository_get_version)(GIRepository *repository, const char *namespace_);
GOptionGroup * (gi_repository_get_option_group)(void);
gboolean (gi_repository_dump)(const char *input_filename, const char *output_filename, GError **error);
GQuark (gi_repository_error_quark)(void);
void (gi_cclosure_marshal_generic)(GClosure *closure, GValue *return_gvalue, unsigned int n_param_values, const GValue *param_values, void *invocation_hint, void *marshal_data);
// Header /usr/include/glib-2.0/girepository/girffi.h
ffi_type * (gi_type_info_get_ffi_type)(GITypeInfo *info);
void (gi_type_info_extract_ffi_return_value)(GITypeInfo *return_info, GIFFIReturnValue *ffi_value, GIArgument *arg);
void (gi_type_tag_extract_ffi_return_value)(GITypeTag return_tag, GType interface_type, GIFFIReturnValue *ffi_value, GIArgument *arg);
gboolean (gi_function_info_prep_invoker)(GIFunctionInfo *info, GIFunctionInvoker *invoker, GError **error);
gboolean (gi_function_invoker_new_for_address)(void *addr, GICallableInfo *info, GIFunctionInvoker *invoker, GError **error);
void (gi_function_invoker_clear)(GIFunctionInvoker *invoker);
ffi_closure * (gi_callable_info_create_closure)(GICallableInfo *callable_info, ffi_cif *cif, GIFFIClosureCallback callback, void *user_data);
void ** (gi_callable_info_get_closure_native_address)(GICallableInfo *callable_info, ffi_closure *closure);
void (gi_callable_info_destroy_closure)(GICallableInfo *callable_info, ffi_closure *closure);
ffi_type * (gi_type_tag_get_ffi_type)(GITypeTag type_tag, gboolean is_pointer);