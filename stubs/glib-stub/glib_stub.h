#include "glib.h"
#include "glib-unix.h"

#ifndef SYMS_GLIB_H
#define SYMS_GLIB_H

struct glib_syms {
    void *lib;
    // SYMS_glib_HERE
    void (*mem_chunk_destroy)(GMemChunk *mem_chunk);
    gpointer (*mem_chunk_alloc)(GMemChunk *mem_chunk);
    gpointer (*mem_chunk_alloc0)(GMemChunk *mem_chunk);
    void (*mem_chunk_free)(GMemChunk *mem_chunk, gpointer mem);
    void (*mem_chunk_clean)(GMemChunk *mem_chunk);
    void (*mem_chunk_reset)(GMemChunk *mem_chunk);
    void (*mem_chunk_print)(GMemChunk *mem_chunk);
    void (*mem_chunk_info)(void);
    void (*blow_chunks)(void);
    GAllocator * (*allocator_new)(const gchar *name, guint n_preallocs);
    void (*allocator_free)(GAllocator *allocator);
    void (*list_push_allocator)(GAllocator *allocator);
    void (*list_pop_allocator)(void);
    void (*slist_push_allocator)(GAllocator *allocator);
    void (*slist_pop_allocator)(void);
    void (*node_push_allocator)(GAllocator *allocator);
    void (*node_pop_allocator)(void);
    GMemChunk * (*mem_chunk_new)(const gchar *name, gint atom_size, gsize area_size, gint type);
    void (*cache_destroy)(GCache *cache);
    gpointer (*cache_insert)(GCache *cache, gpointer key);
    void (*cache_remove)(GCache *cache, gconstpointer value);
    void (*cache_key_foreach)(GCache *cache, GHFunc func, gpointer user_data);
    void (*cache_value_foreach)(GCache *cache, GHFunc func, gpointer user_data);
    void (*completion_add_items)(GCompletion* cmp, GList* items);
    void (*completion_remove_items)(GCompletion* cmp, GList* items);
    void (*completion_clear_items)(GCompletion* cmp);
    GList* (*completion_complete)(GCompletion* cmp, const gchar* prefix, gchar** new_prefix);
    GList* (*completion_complete_utf8)(GCompletion *cmp, const gchar* prefix, gchar** new_prefix);
    void (*completion_set_compare)(GCompletion *cmp, GCompletionStrncmpFunc strncmp_func);
    void (*completion_free)(GCompletion* cmp);
    GCompletion* (*completion_new)(GCompletionFunc func);
    void (*relation_destroy)(GRelation *relation);
    void (*relation_index)(GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func);
    void (*relation_insert)(GRelation *relation, ...);
    gint (*relation_delete)(GRelation *relation, gconstpointer key, gint field);
    GTuples* (*relation_select)(GRelation *relation, gconstpointer key, gint field);
    gint (*relation_count)(GRelation *relation, gconstpointer key, gint field);
    gboolean (*relation_exists)(GRelation *relation, ...);
    void (*relation_print)(GRelation *relation);
    void (*tuples_destroy)(GTuples *tuples);
    gpointer (*tuples_index)(GTuples *tuples, gint index_, gint field);
    GRelation* (*relation_new)(gint fields);
    GThread* (*thread_create)(GThreadFunc func, gpointer data, gboolean joinable, GError **error);
    GThread* (*thread_create_full)(GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error);
    void (*thread_set_priority)(GThread *thread, GThreadPriority priority);
    void (*thread_foreach)(GFunc thread_func, gpointer user_data);
    void (*static_mutex_init)(GStaticMutex *mutex);
    void (*static_mutex_free)(GStaticMutex *mutex);
    GMutex* (*static_mutex_get_mutex_impl)(GStaticMutex *mutex);
    void (*static_rec_mutex_init)(GStaticRecMutex *mutex);
    void (*static_rec_mutex_lock)(GStaticRecMutex *mutex);
    gboolean (*static_rec_mutex_trylock)(GStaticRecMutex *mutex);
    void (*static_rec_mutex_unlock)(GStaticRecMutex *mutex);
    void (*static_rec_mutex_lock_full)(GStaticRecMutex *mutex, guint depth);
    guint (*static_rec_mutex_unlock_full)(GStaticRecMutex *mutex);
    void (*static_rec_mutex_free)(GStaticRecMutex *mutex);
    void (*static_rw_lock_init)(GStaticRWLock *lock);
    void (*static_rw_lock_reader_lock)(GStaticRWLock *lock);
    gboolean (*static_rw_lock_reader_trylock)(GStaticRWLock *lock);
    void (*static_rw_lock_reader_unlock)(GStaticRWLock *lock);
    void (*static_rw_lock_writer_lock)(GStaticRWLock *lock);
    gboolean (*static_rw_lock_writer_trylock)(GStaticRWLock *lock);
    void (*static_rw_lock_writer_unlock)(GStaticRWLock *lock);
    void (*static_rw_lock_free)(GStaticRWLock *lock);
    GPrivate * (*private_new)(GDestroyNotify notify);
    void (*static_private_init)(GStaticPrivate *private_key);
    gpointer (*static_private_get)(GStaticPrivate *private_key);
    void (*static_private_set)(GStaticPrivate *private_key, gpointer data, GDestroyNotify notify);
    void (*static_private_free)(GStaticPrivate *private_key);
    gboolean (*once_init_enter_impl)(volatile gsize *location);
    void (*thread_init)(gpointer vtable);
    void (*thread_init_with_errorcheck_mutexes)(gpointer vtable);
    gboolean (*thread_get_initialized)(void);
    GMutex * (*mutex_new)(void);
    void (*mutex_free)(GMutex *mutex);
    GCond * (*cond_new)(void);
    void (*cond_free)(GCond *cond);
    gboolean (*cond_timed_wait)(GCond *cond, GMutex *mutex, GTimeVal *abs_time);
    char* (*alloca)(void);
    GArray* (*array_new_take)(gpointer data, gsize len, gboolean clear, gsize element_size);
    GArray* (*array_new_take_zero_terminated)(gpointer data, gboolean clear, gsize element_size);
    gpointer (*array_steal)(GArray *array, gsize *len);
    GArray* (*array_sized_new)(gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size);
    GArray* (*array_copy)(GArray *array);
    gchar* (*array_free)(GArray *array, gboolean free_segment);
    GArray* (*array_ref)(GArray *array);
    void (*array_unref)(GArray *array);
    guint (*array_get_element_size)(GArray *array);
    GArray* (*array_append_vals)(GArray *array, gconstpointer data, guint len);
    GArray* (*array_prepend_vals)(GArray *array, gconstpointer data, guint len);
    GArray* (*array_insert_vals)(GArray *array, guint index_, gconstpointer data, guint len);
    GArray* (*array_set_size)(GArray *array, guint length);
    GArray* (*array_remove_index)(GArray *array, guint index_);
    GArray* (*array_remove_index_fast)(GArray *array, guint index_);
    GArray* (*array_remove_range)(GArray *array, guint index_, guint length);
    void (*array_sort)(GArray *array, GCompareFunc compare_func);
    void (*array_sort_with_data)(GArray *array, GCompareDataFunc compare_func, gpointer user_data);
    gboolean (*array_binary_search)(GArray *array, gconstpointer target, GCompareFunc compare_func, guint *out_match_index);
    void (*array_set_clear_func)(GArray *array, GDestroyNotify clear_func);
    GPtrArray* (*ptr_array_new)(void);
    GPtrArray* (*ptr_array_new_with_free_func)(GDestroyNotify element_free_func);
    GPtrArray* (*ptr_array_new_take)(gpointer *data, gsize len, GDestroyNotify element_free_func);
    GPtrArray* (*ptr_array_new_from_array)(gpointer *data, gsize len, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func);
    gpointer* (*ptr_array_steal)(GPtrArray *array, gsize *len);
    GPtrArray* (*ptr_array_copy)(GPtrArray *array, GCopyFunc func, gpointer user_data);
    GPtrArray* (*ptr_array_sized_new)(guint reserved_size);
    GPtrArray* (*ptr_array_new_full)(guint reserved_size, GDestroyNotify element_free_func);
    GPtrArray* (*ptr_array_new_null_terminated)(guint reserved_size, GDestroyNotify element_free_func, gboolean null_terminated);
    GPtrArray* (*ptr_array_new_take_null_terminated)(gpointer *data, GDestroyNotify element_free_func);
    GPtrArray* (*ptr_array_new_from_null_terminated_array)(gpointer *data, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func);
    gpointer* (*ptr_array_free)(GPtrArray *array, gboolean free_seg);
    GPtrArray* (*ptr_array_ref)(GPtrArray *array);
    void (*ptr_array_unref)(GPtrArray *array);
    void (*ptr_array_set_free_func)(GPtrArray *array, GDestroyNotify element_free_func);
    void (*ptr_array_set_size)(GPtrArray *array, gint length);
    gpointer (*ptr_array_remove_index)(GPtrArray *array, guint index_);
    gpointer (*ptr_array_remove_index_fast)(GPtrArray *array, guint index_);
    gpointer (*ptr_array_steal_index)(GPtrArray *array, guint index_);
    gpointer (*ptr_array_steal_index_fast)(GPtrArray *array, guint index_);
    gboolean (*ptr_array_remove)(GPtrArray *array, gpointer data);
    gboolean (*ptr_array_remove_fast)(GPtrArray *array, gpointer data);
    GPtrArray* (*ptr_array_remove_range)(GPtrArray *array, guint index_, guint length);
    void (*ptr_array_add)(GPtrArray *array, gpointer data);
    void (*ptr_array_extend)(GPtrArray *array_to_extend, GPtrArray *array, GCopyFunc func, gpointer user_data);
    void (*ptr_array_extend_and_steal)(GPtrArray *array_to_extend, GPtrArray *array);
    void (*ptr_array_insert)(GPtrArray *array, gint index_, gpointer data);
    void (*ptr_array_sort)(GPtrArray *array, GCompareFunc compare_func);
    void (*ptr_array_sort_with_data)(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data);
    void (*ptr_array_sort_values)(GPtrArray *array, GCompareFunc compare_func);
    void (*ptr_array_sort_values_with_data)(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data);
    void (*ptr_array_foreach)(GPtrArray *array, GFunc func, gpointer user_data);
    gboolean (*ptr_array_find)(GPtrArray *haystack, gconstpointer needle, guint *index_);
    gboolean (*ptr_array_find_with_equal_func)(GPtrArray *haystack, gconstpointer needle, GEqualFunc equal_func, guint *index_);
    gboolean (*ptr_array_is_null_terminated)(GPtrArray *array);
    GByteArray* (*byte_array_new)(void);
    GByteArray* (*byte_array_new_take)(guint8 *data, gsize len);
    guint8* (*byte_array_steal)(GByteArray *array, gsize *len);
    GByteArray* (*byte_array_sized_new)(guint reserved_size);
    guint8* (*byte_array_free)(GByteArray *array, gboolean free_segment);
    GBytes* (*byte_array_free_to_bytes)(GByteArray *array);
    GByteArray* (*byte_array_ref)(GByteArray *array);
    void (*byte_array_unref)(GByteArray *array);
    GByteArray* (*byte_array_append)(GByteArray *array, const guint8 *data, guint len);
    GByteArray* (*byte_array_prepend)(GByteArray *array, const guint8 *data, guint len);
    GByteArray* (*byte_array_set_size)(GByteArray *array, guint length);
    GByteArray* (*byte_array_remove_index)(GByteArray *array, guint index_);
    GByteArray* (*byte_array_remove_index_fast)(GByteArray *array, guint index_);
    GByteArray* (*byte_array_remove_range)(GByteArray *array, guint index_, guint length);
    void (*byte_array_sort)(GByteArray *array, GCompareFunc compare_func);
    void (*byte_array_sort_with_data)(GByteArray *array, GCompareDataFunc compare_func, gpointer user_data);
    GArray* (*array_new)(gboolean zero_terminated, gboolean clear_, guint element_size);
    GAsyncQueue* (*async_queue_new_full)(GDestroyNotify item_free_func);
    void (*async_queue_lock)(GAsyncQueue *queue);
    void (*async_queue_unlock)(GAsyncQueue *queue);
    GAsyncQueue* (*async_queue_ref)(GAsyncQueue *queue);
    void (*async_queue_unref)(GAsyncQueue *queue);
    void (*async_queue_ref_unlocked)(GAsyncQueue *queue);
    void (*async_queue_unref_and_unlock)(GAsyncQueue *queue);
    void (*async_queue_push)(GAsyncQueue *queue, gpointer data);
    void (*async_queue_push_unlocked)(GAsyncQueue *queue, gpointer data);
    void (*async_queue_push_sorted)(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);
    void (*async_queue_push_sorted_unlocked)(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);
    gpointer (*async_queue_pop)(GAsyncQueue *queue);
    gpointer (*async_queue_pop_unlocked)(GAsyncQueue *queue);
    gpointer (*async_queue_try_pop)(GAsyncQueue *queue);
    gpointer (*async_queue_try_pop_unlocked)(GAsyncQueue *queue);
    gpointer (*async_queue_timeout_pop)(GAsyncQueue *queue, guint64 timeout);
    gpointer (*async_queue_timeout_pop_unlocked)(GAsyncQueue *queue, guint64 timeout);
    gint (*async_queue_length)(GAsyncQueue *queue);
    gint (*async_queue_length_unlocked)(GAsyncQueue *queue);
    void (*async_queue_sort)(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);
    void (*async_queue_sort_unlocked)(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);
    gboolean (*async_queue_remove)(GAsyncQueue *queue, gpointer item);
    gboolean (*async_queue_remove_unlocked)(GAsyncQueue *queue, gpointer item);
    void (*async_queue_push_front)(GAsyncQueue *queue, gpointer item);
    void (*async_queue_push_front_unlocked)(GAsyncQueue *queue, gpointer item);
    gpointer (*async_queue_timed_pop_unlocked)(GAsyncQueue *queue, GTimeVal *end_time);
    GAsyncQueue* (*async_queue_new)(void);
    void (*atomic_int_set)(volatile gint *atomic, gint newval);
    void (*atomic_int_inc)(volatile gint *atomic);
    gboolean (*atomic_int_dec_and_test)(volatile gint *atomic);
    gboolean (*atomic_int_compare_and_exchange)(volatile gint *atomic, gint oldval, gint newval);
    gboolean (*atomic_int_compare_and_exchange_full)(gint *atomic, gint oldval, gint newval, gint *preval);
    gint (*atomic_int_exchange)(gint *atomic, gint newval);
    gint (*atomic_int_add)(volatile gint *atomic, gint val);
    guint (*atomic_int_and)(volatile guint *atomic, guint val);
    guint (*atomic_int_or)(volatile guint *atomic, guint val);
    guint (*atomic_int_xor)(volatile guint *atomic, guint val);
    gpointer (*atomic_pointer_get)(const volatile void *atomic);
    void (*atomic_pointer_set)(volatile void *atomic, gpointer newval);
    gboolean (*atomic_pointer_compare_and_exchange)(volatile void *atomic, gpointer oldval, gpointer newval);
    gboolean (*atomic_pointer_compare_and_exchange_full)(void *atomic, gpointer oldval, gpointer newval, void *preval);
    gpointer (*atomic_pointer_exchange)(void *atomic, gpointer newval);
    gintptr (*atomic_pointer_add)(volatile void *atomic, gssize val);
    guintptr (*atomic_pointer_and)(volatile void *atomic, gsize val);
    guintptr (*atomic_pointer_or)(volatile void *atomic, gsize val);
    guintptr (*atomic_pointer_xor)(volatile void *atomic, gsize val);
    gint (*atomic_int_exchange_and_add)(volatile gint *atomic, gint val);
    gint (*atomic_int_get)(const volatile gint *atomic);
    void (*on_error_stack_trace)(const gchar *prg_name);
    void (*on_error_query)(const gchar *prg_name);
    gsize (*base64_encode_close)(gboolean break_lines, gchar *out, gint *state, gint *save);
    gchar* (*base64_encode)(const guchar *data, gsize len);
    gsize (*base64_decode_step)(const gchar *in, gsize len, guchar *out, gint *state, guint *save);
    guchar* (*base64_decode)(const gchar *text, gsize *out_len);
    guchar* (*base64_decode_inplace)(gchar *text, gsize *out_len);
    gsize (*base64_encode_step)(const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save);
    gboolean (*bit_trylock)(volatile gint *address, gint lock_bit);
    void (*bit_unlock)(volatile gint *address, gint lock_bit);
    void (*pointer_bit_lock)(volatile void *address, gint lock_bit);
    void (*pointer_bit_lock_and_get)(gpointer address, guint lock_bit, guintptr *out_ptr);
    gboolean (*pointer_bit_trylock)(volatile void *address, gint lock_bit);
    void (*pointer_bit_unlock)(volatile void *address, gint lock_bit);
    gpointer (*pointer_bit_lock_mask_ptr)(gpointer ptr, guint lock_bit, gboolean set, guintptr preserve_mask, gpointer preserve_ptr);
    void (*pointer_bit_unlock_and_set)(void *address, guint lock_bit, gpointer ptr, guintptr preserve_mask);
    void (*bit_lock)(volatile gint *address, gint lock_bit);
    GBookmarkFile* (*bookmark_file_new)(void);
    void (*bookmark_file_free)(GBookmarkFile *bookmark);
    GBookmarkFile* (*bookmark_file_copy)(GBookmarkFile *bookmark);
    gboolean (*bookmark_file_load_from_file)(GBookmarkFile *bookmark, const gchar *filename, GError **error);
    gboolean (*bookmark_file_load_from_data)(GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error);
    gboolean (*bookmark_file_load_from_data_dirs)(GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error);
    gchar * (*bookmark_file_to_data)(GBookmarkFile *bookmark, gsize *length, GError **error);
    gboolean (*bookmark_file_to_file)(GBookmarkFile *bookmark, const gchar *filename, GError **error);
    void (*bookmark_file_set_title)(GBookmarkFile *bookmark, const gchar *uri, const gchar *title);
    gchar * (*bookmark_file_get_title)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    void (*bookmark_file_set_description)(GBookmarkFile *bookmark, const gchar *uri, const gchar *description);
    gchar * (*bookmark_file_get_description)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    void (*bookmark_file_set_mime_type)(GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type);
    gchar * (*bookmark_file_get_mime_type)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    void (*bookmark_file_set_groups)(GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length);
    void (*bookmark_file_add_group)(GBookmarkFile *bookmark, const gchar *uri, const gchar *group);
    gboolean (*bookmark_file_has_group)(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);
    gchar ** (*bookmark_file_get_groups)(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error);
    void (*bookmark_file_add_application)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec);
    gboolean (*bookmark_file_has_application)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);
    gchar ** (*bookmark_file_get_applications)(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error);
    gboolean (*bookmark_file_set_app_info)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error);
    gboolean (*bookmark_file_set_application_info)(GBookmarkFile *bookmark, const char *uri, const char *name, const char *exec, int count, GDateTime *stamp, GError **error);
    gboolean (*bookmark_file_get_app_info)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error);
    gboolean (*bookmark_file_get_application_info)(GBookmarkFile *bookmark, const char *uri, const char *name, char **exec, unsigned int *count, GDateTime **stamp, GError **error);
    void (*bookmark_file_set_is_private)(GBookmarkFile *bookmark, const gchar *uri, gboolean is_private);
    gboolean (*bookmark_file_get_is_private)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    void (*bookmark_file_set_icon)(GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type);
    gboolean (*bookmark_file_get_icon)(GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error);
    void (*bookmark_file_set_added)(GBookmarkFile *bookmark, const gchar *uri, time_t added);
    void (*bookmark_file_set_added_date_time)(GBookmarkFile *bookmark, const char *uri, GDateTime *added);
    time_t (*bookmark_file_get_added)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    GDateTime* (*bookmark_file_get_added_date_time)(GBookmarkFile *bookmark, const char *uri, GError **error);
    void (*bookmark_file_set_modified)(GBookmarkFile *bookmark, const gchar *uri, time_t modified);
    void (*bookmark_file_set_modified_date_time)(GBookmarkFile *bookmark, const char *uri, GDateTime *modified);
    time_t (*bookmark_file_get_modified)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    GDateTime* (*bookmark_file_get_modified_date_time)(GBookmarkFile *bookmark, const char *uri, GError **error);
    void (*bookmark_file_set_visited)(GBookmarkFile *bookmark, const gchar *uri, time_t visited);
    void (*bookmark_file_set_visited_date_time)(GBookmarkFile *bookmark, const char *uri, GDateTime *visited);
    time_t (*bookmark_file_get_visited)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    GDateTime* (*bookmark_file_get_visited_date_time)(GBookmarkFile *bookmark, const char *uri, GError **error);
    gboolean (*bookmark_file_has_item)(GBookmarkFile *bookmark, const gchar *uri);
    gint (*bookmark_file_get_size)(GBookmarkFile *bookmark);
    gchar ** (*bookmark_file_get_uris)(GBookmarkFile *bookmark, gsize *length);
    gboolean (*bookmark_file_remove_group)(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);
    gboolean (*bookmark_file_remove_application)(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);
    gboolean (*bookmark_file_remove_item)(GBookmarkFile *bookmark, const gchar *uri, GError **error);
    gboolean (*bookmark_file_move_item)(GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error);
    GQuark (*bookmark_file_error_quark)(void);
    GBytes * (*bytes_new_take)(gpointer data, gsize size);
    GBytes * (*bytes_new_static)(gconstpointer data, gsize size);
    GBytes * (*bytes_new_with_free_func)(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);
    GBytes * (*bytes_new_from_bytes)(GBytes *bytes, gsize offset, gsize length);
    gconstpointer (*bytes_get_data)(GBytes *bytes, gsize *size);
    gsize (*bytes_get_size)(GBytes *bytes);
    GBytes * (*bytes_ref)(GBytes *bytes);
    void (*bytes_unref)(GBytes *bytes);
    gpointer (*bytes_unref_to_data)(GBytes *bytes, gsize *size);
    GByteArray * (*bytes_unref_to_array)(GBytes *bytes);
    guint (*bytes_hash)(gconstpointer bytes);
    gboolean (*bytes_equal)(gconstpointer bytes1, gconstpointer bytes2);
    gint (*bytes_compare)(gconstpointer bytes1, gconstpointer bytes2);
    gconstpointer (*bytes_get_region)(GBytes *bytes, gsize element_size, gsize offset, gsize n_elements);
    GBytes * (*bytes_new)(gconstpointer data, gsize size);
    gchar * (*get_codeset)(void);
    gboolean (*get_console_charset)(const char **charset);
    const gchar * const * (*get_language_names)(void);
    const gchar * const * (*get_language_names_with_category)(const gchar *category_name);
    gchar ** (*get_locale_variants)(const gchar *locale);
    gboolean (*get_charset)(const char **charset);
    GChecksum * (*checksum_new)(GChecksumType checksum_type);
    void (*checksum_reset)(GChecksum *checksum);
    GChecksum * (*checksum_copy)(const GChecksum *checksum);
    void (*checksum_free)(GChecksum *checksum);
    void (*checksum_update)(GChecksum *checksum, const guchar *data, gssize length);
    const gchar * (*checksum_get_string)(GChecksum *checksum);
    void (*checksum_get_digest)(GChecksum *checksum, guint8 *buffer, gsize *digest_len);
    gchar* (*compute_checksum_for_data)(GChecksumType checksum_type, const guchar *data, gsize length);
    gchar* (*compute_checksum_for_string)(GChecksumType checksum_type, const gchar *str, gssize length);
    gchar* (*compute_checksum_for_bytes)(GChecksumType checksum_type, GBytes *data);
    gssize (*checksum_type_get_length)(GChecksumType checksum_type);
    GIConv (*iconv_open)(const gchar *to_codeset, const gchar *from_codeset);
    gsize (*iconv)(GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left);
    gint (*iconv_close)(GIConv converter);
    gchar* (*convert)(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*convert_with_iconv)(const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*convert_with_fallback)(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*locale_to_utf8)(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*locale_from_utf8)(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*filename_to_utf8)(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*filename_from_utf8)(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);
    gchar* (*filename_from_uri)(const gchar *uri, gchar **hostname, GError **error);
    gchar* (*filename_to_uri)(const gchar *filename, const gchar *hostname, GError **error);
    gchar* (*filename_display_name)(const gchar *filename);
    gboolean (*get_filename_charsets)(const gchar ***filename_charsets);
    gchar* (*filename_display_basename)(const gchar *filename);
    gchar** (*uri_list_extract_uris)(const gchar *uri_list);
    GQuark (*convert_error_quark)(void);
    void (*datalist_clear)(GData **datalist);
    gpointer (*datalist_id_get_data)(GData **datalist, GQuark key_id);
    void (*datalist_id_set_data_full)(GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);
    void (*datalist_id_remove_multiple)(GData **datalist, GQuark *keys, gsize n_keys);
    gpointer (*datalist_id_dup_data)(GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);
    gboolean (*datalist_id_replace_data)(GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);
    gpointer (*datalist_id_remove_no_notify)(GData **datalist, GQuark key_id);
    void (*datalist_foreach)(GData **datalist, GDataForeachFunc func, gpointer user_data);
    void (*datalist_set_flags)(GData **datalist, guint flags);
    void (*datalist_unset_flags)(GData **datalist, guint flags);
    guint (*datalist_get_flags)(GData **datalist);
    void (*dataset_destroy)(gconstpointer dataset_location);
    gpointer (*dataset_id_get_data)(gconstpointer dataset_location, GQuark key_id);
    gpointer (*datalist_get_data)(GData **datalist, const gchar *key);
    void (*dataset_id_set_data_full)(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);
    gpointer (*dataset_id_remove_no_notify)(gconstpointer dataset_location, GQuark key_id);
    void (*dataset_foreach)(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);
    void (*datalist_init)(GData **datalist);
    GDate* (*date_new_dmy)(GDateDay day, GDateMonth month, GDateYear year);
    GDate* (*date_new_julian)(guint32 julian_day);
    void (*date_free)(GDate *date);
    GDate* (*date_copy)(const GDate *date);
    gboolean (*date_valid)(const GDate *date);
    gboolean (*date_valid_day)(GDateDay day);
    gboolean (*date_valid_month)(GDateMonth month);
    gboolean (*date_valid_year)(GDateYear year);
    gboolean (*date_valid_weekday)(GDateWeekday weekday);
    gboolean (*date_valid_julian)(guint32 julian_date);
    gboolean (*date_valid_dmy)(GDateDay day, GDateMonth month, GDateYear year);
    GDateWeekday (*date_get_weekday)(const GDate *date);
    GDateMonth (*date_get_month)(const GDate *date);
    GDateYear (*date_get_year)(const GDate *date);
    GDateDay (*date_get_day)(const GDate *date);
    guint32 (*date_get_julian)(const GDate *date);
    guint (*date_get_day_of_year)(const GDate *date);
    guint (*date_get_monday_week_of_year)(const GDate *date);
    guint (*date_get_sunday_week_of_year)(const GDate *date);
    guint (*date_get_iso8601_week_of_year)(const GDate *date);
    void (*date_clear)(GDate *date, guint n_dates);
    void (*date_set_parse)(GDate *date, const gchar *str);
    void (*date_set_time_t)(GDate *date, time_t timet);
    void (*date_set_time)(GDate *date, GTime time_);
    void (*date_set_day)(GDate *date, GDateDay day);
    void (*date_set_year)(GDate *date, GDateYear year);
    void (*date_set_dmy)(GDate *date, GDateDay day, GDateMonth month, GDateYear y);
    void (*date_set_julian)(GDate *date, guint32 julian_date);
    gboolean (*date_is_first_of_month)(const GDate *date);
    gboolean (*date_is_last_of_month)(const GDate *date);
    void (*date_add_days)(GDate *date, guint n_days);
    void (*date_subtract_days)(GDate *date, guint n_days);
    void (*date_add_months)(GDate *date, guint n_months);
    void (*date_subtract_months)(GDate *date, guint n_months);
    void (*date_add_years)(GDate *date, guint n_years);
    void (*date_subtract_years)(GDate *date, guint n_years);
    gboolean (*date_is_leap_year)(GDateYear year);
    guint8 (*date_get_days_in_month)(GDateMonth month, GDateYear year);
    guint8 (*date_get_monday_weeks_in_year)(GDateYear year);
    guint8 (*date_get_sunday_weeks_in_year)(GDateYear year);
    gint (*date_days_between)(const GDate *date1, const GDate *date2);
    gint (*date_compare)(const GDate *lhs, const GDate *rhs);
    void (*date_to_struct_tm)(const GDate *date, struct tm *tm);
    void (*date_clamp)(GDate *date, const GDate *min_date, const GDate *max_date);
    void (*date_order)(GDate *date1, GDate *date2);
    gsize (*date_strftime)(gchar *s, gsize slen, const gchar *format, const GDate *date);
    GDate* (*date_new)(void);
    GDateTime * (*date_time_ref)(GDateTime *datetime);
    GDateTime * (*date_time_new_now)(GTimeZone *tz);
    GDateTime * (*date_time_new_now_local)(void);
    GDateTime * (*date_time_new_now_utc)(void);
    GDateTime * (*date_time_new_from_unix_local)(gint64 t);
    GDateTime * (*date_time_new_from_unix_utc)(gint64 t);
    GDateTime * (*date_time_new_from_unix_local_usec)(gint64 usecs);
    GDateTime * (*date_time_new_from_unix_utc_usec)(gint64 usecs);
    GDateTime * (*date_time_new_from_timeval_utc)(const GTimeVal *tv);
    GDateTime * (*date_time_new)(GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
    GDateTime * (*date_time_new_local)(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
    GDateTime * (*date_time_new_utc)(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);
    GDateTime * (*date_time_add)(GDateTime *datetime, GTimeSpan timespan);
    GDateTime * (*date_time_add_years)(GDateTime *datetime, gint years);
    GDateTime * (*date_time_add_months)(GDateTime *datetime, gint months);
    GDateTime * (*date_time_add_weeks)(GDateTime *datetime, gint weeks);
    GDateTime * (*date_time_add_days)(GDateTime *datetime, gint days);
    GDateTime * (*date_time_add_hours)(GDateTime *datetime, gint hours);
    GDateTime * (*date_time_add_minutes)(GDateTime *datetime, gint minutes);
    GDateTime * (*date_time_add_seconds)(GDateTime *datetime, gdouble seconds);
    GDateTime * (*date_time_add_full)(GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds);
    gint (*date_time_compare)(gconstpointer dt1, gconstpointer dt2);
    GTimeSpan (*date_time_difference)(GDateTime *end, GDateTime *begin);
    guint (*date_time_hash)(gconstpointer datetime);
    gboolean (*date_time_equal)(gconstpointer dt1, gconstpointer dt2);
    void (*date_time_get_ymd)(GDateTime *datetime, gint *year, gint *month, gint *day);
    gint (*date_time_get_year)(GDateTime *datetime);
    gint (*date_time_get_month)(GDateTime *datetime);
    gint (*date_time_get_day_of_month)(GDateTime *datetime);
    gint (*date_time_get_week_numbering_year)(GDateTime *datetime);
    gint (*date_time_get_week_of_year)(GDateTime *datetime);
    gint (*date_time_get_day_of_week)(GDateTime *datetime);
    gint (*date_time_get_day_of_year)(GDateTime *datetime);
    gint (*date_time_get_hour)(GDateTime *datetime);
    gint (*date_time_get_minute)(GDateTime *datetime);
    gint (*date_time_get_second)(GDateTime *datetime);
    gint (*date_time_get_microsecond)(GDateTime *datetime);
    gdouble (*date_time_get_seconds)(GDateTime *datetime);
    gint64 (*date_time_to_unix)(GDateTime *datetime);
    gint64 (*date_time_to_unix_usec)(GDateTime *datetime);
    GTimeZone * (*date_time_get_timezone)(GDateTime *datetime);
    const gchar * (*date_time_get_timezone_abbreviation)(GDateTime *datetime);
    gboolean (*date_time_is_daylight_savings)(GDateTime *datetime);
    GDateTime * (*date_time_to_timezone)(GDateTime *datetime, GTimeZone *tz);
    GDateTime * (*date_time_to_local)(GDateTime *datetime);
    GDateTime * (*date_time_to_utc)(GDateTime *datetime);
    gchar * (*date_time_format)(GDateTime *datetime, const gchar *format);
    gchar * (*date_time_format_iso8601)(GDateTime *datetime);
    void (*date_time_unref)(GDateTime *datetime);
    const gchar * (*dir_read_name)(GDir *dir);
    void (*dir_rewind)(GDir *dir);
    void (*dir_close)(GDir *dir);
    GDir * (*dir_ref)(GDir *dir);
    void (*dir_unref)(GDir *dir);
    GDir * (*dir_open)(const gchar *path, guint flags, GError **error);
    gboolean (*setenv)(const gchar *variable, const gchar *value, gboolean overwrite);
    void (*unsetenv)(const gchar *variable);
    gchar ** (*listenv)(void);
    gchar ** (*get_environ)(void);
    const gchar * (*environ_getenv)(gchar **envp, const gchar *variable);
    gchar ** (*environ_setenv)(gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite);
    gchar ** (*environ_unsetenv)(gchar **envp, const gchar *variable);
    const gchar * (*getenv)(const gchar *variable);
    GQuark (*error_domain_register)(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear);
    GError* (*error_new)(GQuark domain, gint code, const gchar *format, ...);
    GError* (*error_new_literal)(GQuark domain, gint code, const gchar *message);
    GError* (*error_new_valist)(GQuark domain, gint code, const gchar *format, va_list args);
    void (*error_free)(GError *error);
    GError* (*error_copy)(const GError *error);
    gboolean (*error_matches)(const GError *error, GQuark domain, gint code);
    void (*set_error)(GError **err, GQuark domain, gint code, const gchar *format, ...);
    void (*set_error_literal)(GError **err, GQuark domain, gint code, const gchar *message);
    void (*propagate_error)(GError **dest, GError *src);
    void (*clear_error)(GError **err);
    void (*prefix_error)(GError **err, const gchar *format, ...);
    void (*prefix_error_literal)(GError **err, const gchar *prefix);
    void (*propagate_prefixed_error)(GError **dest, GError *src, const gchar *format, ...);
    GQuark (*error_domain_register_static)(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear);
    GQuark (*file_error_quark)(void);
    GFileError (*file_error_from_errno)(gint err_no);
    gboolean (*file_test)(const gchar *filename, GFileTest test);
    gboolean (*file_get_contents)(const gchar *filename, gchar **contents, gsize *length, GError **error);
    gboolean (*file_set_contents)(const gchar *filename, const gchar *contents, gssize length, GError **error);
    gchar* (*mkdtemp)(gchar *tmpl);
    gchar* (*mkdtemp_full)(gchar *tmpl, gint mode);
    gint (*mkstemp)(gchar *tmpl);
    gint (*mkstemp_full)(gchar *tmpl, gint flags, gint mode);
    gint (*file_open_tmp)(const gchar *tmpl, gchar **name_used, GError **error);
    gchar* (*dir_make_tmp)(const gchar *tmpl, GError **error);
    gchar* (*build_path)(const gchar *separator, const gchar *first_element, ...);
    gchar* (*build_pathv)(const gchar *separator, gchar **args);
    gchar* (*build_filename)(const gchar *first_element, ...);
    gchar* (*build_filenamev)(gchar **args);
    gchar* (*build_filename_valist)(const gchar *first_element, va_list *args);
    gint (*mkdir_with_parents)(const gchar *pathname, gint mode);
    gboolean (*path_is_absolute)(const gchar *file_name);
    const gchar* (*path_skip_root)(const gchar *file_name);
    const gchar* (*basename)(const gchar *file_name);
    gchar* (*get_current_dir)(void);
    gchar* (*path_get_basename)(const gchar *file_name);
    gchar* (*path_get_dirname)(const gchar *file_name);
    gchar* (*canonicalize_filename)(const gchar *filename, const gchar *relative_to);
    const gchar* (*dgettext)(const gchar *domain, const gchar *msgid);
    const gchar* (*dcgettext)(const gchar *domain, const gchar *msgid, gint category);
    const gchar* (*dngettext)(const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n);
    const gchar* (*dpgettext)(const gchar *domain, const gchar *msgctxtid, gsize msgidoffset);
    const gchar* (*dpgettext2)(const gchar *domain, const gchar *context, const gchar *msgid);
    const gchar* (*strip_context)(const gchar *msgid, const gchar *msgval);
    GHashTable* (*hash_table_new_full)(GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);
    GHashTable* (*hash_table_new_similar)(GHashTable *other_hash_table);
    void (*hash_table_destroy)(GHashTable *hash_table);
    gboolean (*hash_table_insert)(GHashTable *hash_table, gpointer key, gpointer value);
    gboolean (*hash_table_replace)(GHashTable *hash_table, gpointer key, gpointer value);
    gboolean (*hash_table_add)(GHashTable *hash_table, gpointer key);
    gboolean (*hash_table_remove)(GHashTable *hash_table, gconstpointer key);
    void (*hash_table_remove_all)(GHashTable *hash_table);
    gboolean (*hash_table_steal)(GHashTable *hash_table, gconstpointer key);
    gboolean (*hash_table_steal_extended)(GHashTable *hash_table, gconstpointer lookup_key, gpointer *stolen_key, gpointer *stolen_value);
    void (*hash_table_steal_all)(GHashTable *hash_table);
    GPtrArray * (*hash_table_steal_all_keys)(GHashTable *hash_table);
    GPtrArray * (*hash_table_steal_all_values)(GHashTable *hash_table);
    gpointer (*hash_table_lookup)(GHashTable *hash_table, gconstpointer key);
    gboolean (*hash_table_contains)(GHashTable *hash_table, gconstpointer key);
    gboolean (*hash_table_lookup_extended)(GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);
    void (*hash_table_foreach)(GHashTable *hash_table, GHFunc func, gpointer user_data);
    gpointer (*hash_table_find)(GHashTable *hash_table, GHRFunc predicate, gpointer user_data);
    guint (*hash_table_foreach_remove)(GHashTable *hash_table, GHRFunc func, gpointer user_data);
    guint (*hash_table_foreach_steal)(GHashTable *hash_table, GHRFunc func, gpointer user_data);
    guint (*hash_table_size)(GHashTable *hash_table);
    GList * (*hash_table_get_keys)(GHashTable *hash_table);
    GList * (*hash_table_get_values)(GHashTable *hash_table);
    gpointer * (*hash_table_get_keys_as_array)(GHashTable *hash_table, guint *length);
    GPtrArray * (*hash_table_get_keys_as_ptr_array)(GHashTable *hash_table);
    GPtrArray * (*hash_table_get_values_as_ptr_array)(GHashTable *hash_table);
    void (*hash_table_iter_init)(GHashTableIter *iter, GHashTable *hash_table);
    gboolean (*hash_table_iter_next)(GHashTableIter *iter, gpointer *key, gpointer *value);
    GHashTable* (*hash_table_iter_get_hash_table)(GHashTableIter *iter);
    void (*hash_table_iter_remove)(GHashTableIter *iter);
    void (*hash_table_iter_replace)(GHashTableIter *iter, gpointer value);
    void (*hash_table_iter_steal)(GHashTableIter *iter);
    GHashTable* (*hash_table_ref)(GHashTable *hash_table);
    void (*hash_table_unref)(GHashTable *hash_table);
    gboolean (*str_equal)(gconstpointer v1, gconstpointer v2);
    guint (*str_hash)(gconstpointer v);
    gboolean (*int_equal)(gconstpointer v1, gconstpointer v2);
    guint (*int_hash)(gconstpointer v);
    gboolean (*int64_equal)(gconstpointer v1, gconstpointer v2);
    guint (*int64_hash)(gconstpointer v);
    gboolean (*double_equal)(gconstpointer v1, gconstpointer v2);
    guint (*double_hash)(gconstpointer v);
    guint (*direct_hash)(gconstpointer v);
    gboolean (*direct_equal)(gconstpointer v1, gconstpointer v2);
    GHashTable* (*hash_table_new)(GHashFunc hash_func, GEqualFunc key_equal_func);
    GHmac * (*hmac_copy)(const GHmac *hmac);
    GHmac * (*hmac_ref)(GHmac *hmac);
    void (*hmac_unref)(GHmac *hmac);
    void (*hmac_update)(GHmac *hmac, const guchar *data, gssize length);
    const gchar * (*hmac_get_string)(GHmac *hmac);
    void (*hmac_get_digest)(GHmac *hmac, guint8 *buffer, gsize *digest_len);
    gchar* (*compute_hmac_for_data)(GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length);
    gchar* (*compute_hmac_for_string)(GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length);
    gchar* (*compute_hmac_for_bytes)(GChecksumType digest_type, GBytes *key, GBytes *data);
    GHmac * (*hmac_new)(GChecksumType digest_type, const guchar *key, gsize key_len);
    void (*hook_list_clear)(GHookList *hook_list);
    GHook* (*hook_alloc)(GHookList *hook_list);
    void (*hook_free)(GHookList *hook_list, GHook *hook);
    GHook * (*hook_ref)(GHookList *hook_list, GHook *hook);
    void (*hook_unref)(GHookList *hook_list, GHook *hook);
    gboolean (*hook_destroy)(GHookList *hook_list, gulong hook_id);
    void (*hook_destroy_link)(GHookList *hook_list, GHook *hook);
    void (*hook_prepend)(GHookList *hook_list, GHook *hook);
    void (*hook_insert_before)(GHookList *hook_list, GHook *sibling, GHook *hook);
    void (*hook_insert_sorted)(GHookList *hook_list, GHook *hook, GHookCompareFunc func);
    GHook* (*hook_get)(GHookList *hook_list, gulong hook_id);
    GHook* (*hook_find)(GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);
    GHook* (*hook_find_data)(GHookList *hook_list, gboolean need_valids, gpointer data);
    GHook* (*hook_find_func)(GHookList *hook_list, gboolean need_valids, gpointer func);
    GHook* (*hook_find_func_data)(GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data);
    GHook* (*hook_first_valid)(GHookList *hook_list, gboolean may_be_in_call);
    GHook* (*hook_next_valid)(GHookList *hook_list, GHook *hook, gboolean may_be_in_call);
    gint (*hook_compare_ids)(GHook *new_hook, GHook *sibling);
    void (*hook_list_invoke)(GHookList *hook_list, gboolean may_recurse);
    void (*hook_list_invoke_check)(GHookList *hook_list, gboolean may_recurse);
    void (*hook_list_marshal)(GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);
    void (*hook_list_marshal_check)(GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);
    void (*hook_list_init)(GHookList *hook_list, guint hook_size);
    gboolean (*hostname_is_ascii_encoded)(const gchar *hostname);
    gboolean (*hostname_is_ip_address)(const gchar *hostname);
    gchar* (*hostname_to_ascii)(const gchar *hostname);
    gchar* (*hostname_to_unicode)(const gchar *hostname);
    gboolean (*hostname_is_non_ascii)(const gchar *hostname);
    GIOChannel* (*io_channel_ref)(GIOChannel *channel);
    void (*io_channel_unref)(GIOChannel *channel);
    GIOError (*io_channel_read)(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read);
    GIOError (*io_channel_write)(GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written);
    GIOError (*io_channel_seek)(GIOChannel *channel, gint64 offset, GSeekType type);
    void (*io_channel_close)(GIOChannel *channel);
    GIOStatus (*io_channel_shutdown)(GIOChannel *channel, gboolean flush, GError **err);
    guint (*io_add_watch_full)(GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);
    GSource * (*io_create_watch)(GIOChannel *channel, GIOCondition condition);
    guint (*io_add_watch)(GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data);
    void (*io_channel_set_buffer_size)(GIOChannel *channel, gsize size);
    gsize (*io_channel_get_buffer_size)(GIOChannel *channel);
    GIOCondition (*io_channel_get_buffer_condition)(GIOChannel *channel);
    GIOStatus (*io_channel_set_flags)(GIOChannel *channel, GIOFlags flags, GError **error);
    GIOFlags (*io_channel_get_flags)(GIOChannel *channel);
    void (*io_channel_set_line_term)(GIOChannel *channel, const gchar *line_term, gint length);
    const gchar * (*io_channel_get_line_term)(GIOChannel *channel, gint *length);
    void (*io_channel_set_buffered)(GIOChannel *channel, gboolean buffered);
    gboolean (*io_channel_get_buffered)(GIOChannel *channel);
    GIOStatus (*io_channel_set_encoding)(GIOChannel *channel, const gchar *encoding, GError **error);
    const gchar * (*io_channel_get_encoding)(GIOChannel *channel);
    void (*io_channel_set_close_on_unref)(GIOChannel *channel, gboolean do_close);
    gboolean (*io_channel_get_close_on_unref)(GIOChannel *channel);
    GIOStatus (*io_channel_flush)(GIOChannel *channel, GError **error);
    GIOStatus (*io_channel_read_line)(GIOChannel *channel, gchar **str_return, gsize *length, gsize *terminator_pos, GError **error);
    GIOStatus (*io_channel_read_line_string)(GIOChannel *channel, GString *buffer, gsize *terminator_pos, GError **error);
    GIOStatus (*io_channel_read_to_end)(GIOChannel *channel, gchar **str_return, gsize *length, GError **error);
    GIOStatus (*io_channel_read_chars)(GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **error);
    GIOStatus (*io_channel_read_unichar)(GIOChannel *channel, gunichar *thechar, GError **error);
    GIOStatus (*io_channel_write_chars)(GIOChannel *channel, const gchar *buf, gssize count, gsize *bytes_written, GError **error);
    GIOStatus (*io_channel_write_unichar)(GIOChannel *channel, gunichar thechar, GError **error);
    GIOStatus (*io_channel_seek_position)(GIOChannel *channel, gint64 offset, GSeekType type, GError **error);
    GIOChannel* (*io_channel_new_file)(const gchar *filename, const gchar *mode, GError **error);
    GQuark (*io_channel_error_quark)(void);
    GIOChannelError (*io_channel_error_from_errno)(gint en);
    GIOChannel* (*io_channel_unix_new)(int fd);
    gint (*io_channel_unix_get_fd)(GIOChannel *channel);
    void (*io_channel_win32_make_pollfd)(GIOChannel *channel, GIOCondition condition, GPollFD *fd);
    gint (*io_channel_win32_poll)(GPollFD *fds, gint n_fds, gint timeout_);
    GIOChannel* (*io_channel_win32_new_messages)(gsize hwnd);
    GIOChannel* (*io_channel_win32_new_fd)(gint fd);
    gint (*io_channel_win32_get_fd)(GIOChannel *channel);
    GIOChannel* (*io_channel_win32_new_socket)(gint socket);
    GIOChannel* (*io_channel_win32_new_stream_socket)(gint socket);
    void (*io_channel_win32_set_debug)(GIOChannel *channel, gboolean flag);
    void (*io_channel_init)(GIOChannel *channel);
    GKeyFile* (*key_file_new)(void);
    GKeyFile* (*key_file_ref)(GKeyFile *key_file);
    void (*key_file_unref)(GKeyFile *key_file);
    void (*key_file_free)(GKeyFile *key_file);
    void (*key_file_set_list_separator)(GKeyFile *key_file, gchar separator);
    gboolean (*key_file_load_from_file)(GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error);
    gboolean (*key_file_load_from_data)(GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error);
    gboolean (*key_file_load_from_bytes)(GKeyFile *key_file, GBytes *bytes, GKeyFileFlags flags, GError **error);
    gboolean (*key_file_load_from_dirs)(GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error);
    gboolean (*key_file_load_from_data_dirs)(GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error);
    gchar* (*key_file_to_data)(GKeyFile *key_file, gsize *length, GError **error);
    gboolean (*key_file_save_to_file)(GKeyFile *key_file, const gchar *filename, GError **error);
    gchar* (*key_file_get_start_group)(GKeyFile *key_file);
    gchar** (*key_file_get_groups)(GKeyFile *key_file, gsize *length);
    gchar** (*key_file_get_keys)(GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error);
    gboolean (*key_file_has_group)(GKeyFile *key_file, const gchar *group_name);
    gboolean (*key_file_has_key)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    gchar* (*key_file_get_value)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_value)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value);
    gchar* (*key_file_get_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string);
    gchar* (*key_file_get_locale_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error);
    gchar* (*key_file_get_locale_for_key)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale);
    void (*key_file_set_locale_string)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string);
    gboolean (*key_file_get_boolean)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_boolean)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value);
    gint (*key_file_get_integer)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_integer)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value);
    gint64 (*key_file_get_int64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_int64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value);
    guint64 (*key_file_get_uint64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_uint64)(GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value);
    gdouble (*key_file_get_double)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    void (*key_file_set_double)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value);
    gchar** (*key_file_get_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
    void (*key_file_set_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar * const list[], gsize length);
    gchar** (*key_file_get_locale_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error);
    void (*key_file_set_locale_string_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar * const list[], gsize length);
    gboolean* (*key_file_get_boolean_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
    void (*key_file_set_boolean_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length);
    gint* (*key_file_get_integer_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
    void (*key_file_set_double_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length);
    gdouble* (*key_file_get_double_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);
    void (*key_file_set_integer_list)(GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length);
    gboolean (*key_file_set_comment)(GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error);
    gchar* (*key_file_get_comment)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    gboolean (*key_file_remove_comment)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    gboolean (*key_file_remove_key)(GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);
    gboolean (*key_file_remove_group)(GKeyFile *key_file, const gchar *group_name, GError **error);
    GQuark (*key_file_error_quark)(void);
    void (*list_free)(GList *list);
    void (*list_free_1)(GList *list);
    void (*list_free_full)(GList *list, GDestroyNotify free_func);
    GList* (*list_append)(GList *list, gpointer data);
    GList* (*list_prepend)(GList *list, gpointer data);
    GList* (*list_insert)(GList *list, gpointer data, gint position);
    GList* (*list_insert_sorted)(GList *list, gpointer data, GCompareFunc func);
    GList* (*list_insert_sorted_with_data)(GList *list, gpointer data, GCompareDataFunc func, gpointer user_data);
    GList* (*list_insert_before)(GList *list, GList *sibling, gpointer data);
    GList* (*list_insert_before_link)(GList *list, GList *sibling, GList *link_);
    GList* (*list_concat)(GList *list1, GList *list2);
    GList* (*list_remove)(GList *list, gconstpointer data);
    GList* (*list_remove_all)(GList *list, gconstpointer data);
    GList* (*list_remove_link)(GList *list, GList *llink);
    GList* (*list_delete_link)(GList *list, GList *link_);
    GList* (*list_reverse)(GList *list);
    GList* (*list_copy)(GList *list);
    GList* (*list_copy_deep)(GList *list, GCopyFunc func, gpointer user_data);
    GList* (*list_nth)(GList *list, guint n);
    GList* (*list_nth_prev)(GList *list, guint n);
    GList* (*list_find)(GList *list, gconstpointer data);
    GList* (*list_find_custom)(GList *list, gconstpointer data, GCompareFunc func);
    gint (*list_position)(GList *list, GList *llink);
    gint (*list_index)(GList *list, gconstpointer data);
    GList* (*list_last)(GList *list);
    GList* (*list_first)(GList *list);
    guint (*list_length)(GList *list);
    void (*list_foreach)(GList *list, GFunc func, gpointer user_data);
    GList* (*list_sort)(GList *list, GCompareFunc compare_func);
    GList* (*list_sort_with_data)(GList *list, GCompareDataFunc compare_func, gpointer user_data);
    gpointer (*list_nth_data)(GList *list, guint n);
    void (*clear_list)(GList **list_ptr, GDestroyNotify destroy);
    GList* (*list_alloc)(void);
    void (*main_context_unref)(GMainContext *context);
    GMainContext* (*main_context_default)(void);
    gboolean (*main_context_iteration)(GMainContext *context, gboolean may_block);
    gboolean (*main_context_pending)(GMainContext *context);
    GSource* (*main_context_find_source_by_id)(GMainContext *context, guint source_id);
    GSource* (*main_context_find_source_by_user_data)(GMainContext *context, gpointer user_data);
    GSource* (*main_context_find_source_by_funcs_user_data)(GMainContext *context, GSourceFuncs *funcs, gpointer user_data);
    void (*main_context_wakeup)(GMainContext *context);
    gboolean (*main_context_acquire)(GMainContext *context);
    void (*main_context_release)(GMainContext *context);
    gboolean (*main_context_is_owner)(GMainContext *context);
    gboolean (*main_context_wait)(GMainContext *context, GCond *cond, GMutex *mutex);
    gboolean (*main_context_prepare)(GMainContext *context, gint *priority);
    gint (*main_context_query)(GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds);
    gboolean (*main_context_check)(GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds);
    void (*main_context_dispatch)(GMainContext *context);
    void (*main_context_set_poll_func)(GMainContext *context, GPollFunc func);
    GPollFunc (*main_context_get_poll_func)(GMainContext *context);
    void (*main_context_add_poll)(GMainContext *context, GPollFD *fd, gint priority);
    void (*main_context_remove_poll)(GMainContext *context, GPollFD *fd);
    gint (*main_depth)(void);
    GSource* (*main_current_source)(void);
    void (*main_context_push_thread_default)(GMainContext *context);
    void (*main_context_pop_thread_default)(GMainContext *context);
    GMainContext* (*main_context_get_thread_default)(void);
    GMainContext* (*main_context_ref_thread_default)(void);
    void (*main_loop_run)(GMainLoop *loop);
    void (*main_loop_quit)(GMainLoop *loop);
    GMainLoop* (*main_loop_ref)(GMainLoop *loop);
    void (*main_loop_unref)(GMainLoop *loop);
    gboolean (*main_loop_is_running)(GMainLoop *loop);
    GMainContext* (*main_loop_get_context)(GMainLoop *loop);
    GSource* (*source_new)(GSourceFuncs *source_funcs, guint struct_size);
    void (*source_unref)(GSource *source);
    guint (*source_attach)(GSource *source, GMainContext *context);
    void (*source_destroy)(GSource *source);
    void (*source_set_priority)(GSource *source, gint priority);
    gint (*source_get_priority)(GSource *source);
    void (*source_set_can_recurse)(GSource *source, gboolean can_recurse);
    gboolean (*source_get_can_recurse)(GSource *source);
    guint (*source_get_id)(GSource *source);
    GMainContext* (*source_get_context)(GSource *source);
    void (*source_set_callback)(GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify);
    void (*source_set_funcs)(GSource *source, GSourceFuncs *funcs);
    gboolean (*source_is_destroyed)(GSource *source);
    void (*source_set_name)(GSource *source, const char *name);
    void (*source_set_static_name)(GSource *source, const char *name);
    const char * (*source_get_name)(GSource *source);
    void (*source_set_name_by_id)(guint tag, const char *name);
    void (*source_set_ready_time)(GSource *source, gint64 ready_time);
    gint64 (*source_get_ready_time)(GSource *source);
    gpointer (*source_add_unix_fd)(GSource *source, gint fd, GIOCondition events);
    void (*source_modify_unix_fd)(GSource *source, gpointer tag, GIOCondition new_events);
    void (*source_remove_unix_fd)(GSource *source, gpointer tag);
    GIOCondition (*source_query_unix_fd)(GSource *source, gpointer tag);
    void (*source_set_callback_indirect)(GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs);
    void (*source_add_poll)(GSource *source, GPollFD *fd);
    void (*source_remove_poll)(GSource *source, GPollFD *fd);
    void (*source_add_child_source)(GSource *source, GSource *child_source);
    void (*source_remove_child_source)(GSource *source, GSource *child_source);
    GSource* (*idle_source_new)(void);
    GSource* (*child_watch_source_new)(GPid pid);
    GSource* (*timeout_source_new)(guint interval);
    GSource* (*timeout_source_new_seconds)(guint interval);
    gint64 (*get_real_time)(void);
    gboolean (*source_remove)(guint tag);
    gboolean (*source_remove_by_user_data)(gpointer user_data);
    gboolean (*source_remove_by_funcs_user_data)(GSourceFuncs *funcs, gpointer user_data);
    void (*clear_handle_id)(guint *tag_ptr, GClearHandleFunc clear_func);
    guint (*timeout_add_full)(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);
    guint (*timeout_add)(guint interval, GSourceFunc function, gpointer data);
    guint (*timeout_add_once)(guint interval, GSourceOnceFunc function, gpointer data);
    guint (*timeout_add_seconds_full)(gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);
    guint (*timeout_add_seconds)(guint interval, GSourceFunc function, gpointer data);
    guint (*timeout_add_seconds_once)(guint interval, GSourceOnceFunc function, gpointer data);
    guint (*child_watch_add_full)(gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);
    guint (*child_watch_add)(GPid pid, GChildWatchFunc function, gpointer data);
    guint (*idle_add)(GSourceFunc function, gpointer data);
    guint (*idle_add_full)(gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);
    guint (*idle_add_once)(GSourceOnceFunc function, gpointer data);
    gboolean (*idle_remove_by_data)(gpointer data);
    void (*main_context_invoke_full)(GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);
    void (*main_context_invoke)(GMainContext *context, GSourceFunc function, gpointer data);
    GMainContext* (*main_context_new)(void);
    GMappedFile* (*mapped_file_new_from_fd)(gint fd, gboolean writable, GError **error);
    gsize (*mapped_file_get_length)(GMappedFile *file);
    gchar* (*mapped_file_get_contents)(GMappedFile *file);
    GBytes * (*mapped_file_get_bytes)(GMappedFile *file);
    GMappedFile* (*mapped_file_ref)(GMappedFile *file);
    void (*mapped_file_unref)(GMappedFile *file);
    void (*mapped_file_free)(GMappedFile *file);
    GMappedFile* (*mapped_file_new)(const gchar *filename, gboolean writable, GError **error);
    GMarkupParseContext* (*markup_parse_context_new)(const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);
    GMarkupParseContext* (*markup_parse_context_ref)(GMarkupParseContext *context);
    void (*markup_parse_context_unref)(GMarkupParseContext *context);
    void (*markup_parse_context_free)(GMarkupParseContext *context);
    gboolean (*markup_parse_context_parse)(GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error);
    void (*markup_parse_context_push)(GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data);
    gpointer (*markup_parse_context_pop)(GMarkupParseContext *context);
    gboolean (*markup_parse_context_end_parse)(GMarkupParseContext *context, GError **error);
    const gchar * (*markup_parse_context_get_element)(GMarkupParseContext *context);
    const GSList * (*markup_parse_context_get_element_stack)(GMarkupParseContext *context);
    void (*markup_parse_context_get_position)(GMarkupParseContext *context, gint *line_number, gint *char_number);
    gpointer (*markup_parse_context_get_user_data)(GMarkupParseContext *context);
    gchar* (*markup_escape_text)(const gchar *text, gssize length);
    gchar* (*markup_printf_escaped)(const char *format, ...);
    gchar* (*markup_vprintf_escaped)(const char *format, va_list args);
    gboolean (*markup_collect_attributes)(const gchar *element_name, const gchar **attribute_names, const gchar **attribute_values, GError **error, GMarkupCollectType first_type, const gchar *first_attr, ...);
    GQuark (*markup_error_quark)(void);
    void (*free_sized)(gpointer mem, size_t size);
    void (*clear_pointer)(gpointer *pp, GDestroyNotify destroy);
    gpointer (*malloc)(gsize n_bytes);
    gpointer (*malloc0)(gsize n_bytes);
    gpointer (*realloc)(gpointer mem, gsize n_bytes);
    gpointer (*try_malloc)(gsize n_bytes);
    gpointer (*try_malloc0)(gsize n_bytes);
    gpointer (*try_realloc)(gpointer mem, gsize n_bytes);
    gpointer (*malloc_n)(gsize n_blocks, gsize n_block_bytes);
    gpointer (*malloc0_n)(gsize n_blocks, gsize n_block_bytes);
    gpointer (*realloc_n)(gpointer mem, gsize n_blocks, gsize n_block_bytes);
    gpointer (*try_malloc_n)(gsize n_blocks, gsize n_block_bytes);
    gpointer (*try_malloc0_n)(gsize n_blocks, gsize n_block_bytes);
    gpointer (*try_realloc_n)(gpointer mem, gsize n_blocks, gsize n_block_bytes);
    gpointer (*aligned_alloc)(gsize n_blocks, gsize n_block_bytes, gsize alignment);
    gpointer (*aligned_alloc0)(gsize n_blocks, gsize n_block_bytes, gsize alignment);
    void (*aligned_free)(gpointer mem);
    void (*aligned_free_sized)(gpointer mem, size_t alignment, size_t size);
    void (*mem_set_vtable)(GMemVTable *vtable);
    gboolean (*mem_is_system_malloc)(void);
    void (*mem_profile)(void);
    void (*free)(gpointer mem);
    guint (*log_set_handler)(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);
    guint (*log_set_handler_full)(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy);
    void (*log_remove_handler)(const gchar *log_domain, guint handler_id);
    void (*log_default_handler)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data);
    GLogFunc (*log_set_default_handler)(GLogFunc log_func, gpointer user_data);
    void (*log)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, ...);
    void (*logv)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, va_list args);
    GLogLevelFlags (*log_set_fatal_mask)(const gchar *log_domain, GLogLevelFlags fatal_mask);
    GLogLevelFlags (*log_set_always_fatal)(GLogLevelFlags fatal_mask);
    void (*log_structured)(const gchar *log_domain, GLogLevelFlags log_level, ...);
    void (*log_structured_array)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields);
    void (*log_variant)(const gchar *log_domain, GLogLevelFlags log_level, GVariant *fields);
    void (*log_set_writer_func)(GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free);
    gboolean (*log_writer_supports_color)(gint output_fd);
    gboolean (*log_writer_is_journald)(gint output_fd);
    gchar* (*log_writer_format_fields)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gboolean use_color);
    GLogWriterOutput (*log_writer_syslog)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
    GLogWriterOutput (*log_writer_journald)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
    GLogWriterOutput (*log_writer_standard_streams)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
    GLogWriterOutput (*log_writer_default)(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);
    void (*log_writer_default_set_use_stderr)(gboolean use_stderr);
    gboolean (*log_writer_default_would_drop)(GLogLevelFlags log_level, const char *log_domain);
    void (*log_writer_default_set_debug_domains)(const gchar * const *domains);
    gboolean (*log_get_debug_enabled)(void);
    void (*log_set_debug_enabled)(gboolean enabled);
    void (*_g_log_fallback_handler)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data);
    void (*return_if_fail_warning)(const char *log_domain, const char *pretty_function, const char *expression);
    void (*warn_message)(const char *domain, const char *file, int line, const char *func, const char *warnexpr);
    void (*assert_warning)(const char *log_domain, const char *file, const int line, const char *pretty_function, const char *expression);
    void (*log_structured_standard)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *file, const gchar *line, const gchar *func, const gchar *message_format, ...);
    void (*error)(const gchar *format, ...);
    void (*critical)(const gchar *format, ...);
    void (*print)(const gchar *format, ...);
    GPrintFunc (*set_print_handler)(GPrintFunc func);
    void (*printerr)(const gchar *format, ...);
    GPrintFunc (*set_printerr_handler)(GPrintFunc func);
    gsize (*printf_string_upper_bound)(const gchar* format, va_list args);
    void (*node_destroy)(GNode *root);
    void (*node_unlink)(GNode *node);
    GNode* (*node_copy_deep)(GNode *node, GCopyFunc copy_func, gpointer data);
    GNode* (*node_copy)(GNode *node);
    GNode* (*node_insert)(GNode *parent, gint position, GNode *node);
    GNode* (*node_insert_before)(GNode *parent, GNode *sibling, GNode *node);
    GNode* (*node_insert_after)(GNode *parent, GNode *sibling, GNode *node);
    GNode* (*node_prepend)(GNode *parent, GNode *node);
    guint (*node_n_nodes)(GNode *root, GTraverseFlags flags);
    GNode* (*node_get_root)(GNode *node);
    gboolean (*node_is_ancestor)(GNode *node, GNode *descendant);
    guint (*node_depth)(GNode *node);
    GNode* (*node_find)(GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data);
    void (*node_traverse)(GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);
    guint (*node_max_height)(GNode *root);
    void (*node_children_foreach)(GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);
    void (*node_reverse_children)(GNode *node);
    guint (*node_n_children)(GNode *node);
    GNode* (*node_nth_child)(GNode *node, guint n);
    GNode* (*node_last_child)(GNode *node);
    GNode* (*node_find_child)(GNode *node, GTraverseFlags flags, gpointer data);
    gint (*node_child_position)(GNode *node, GNode *child);
    gint (*node_child_index)(GNode *node, gpointer data);
    GNode* (*node_first_sibling)(GNode *node);
    GNode* (*node_last_sibling)(GNode *node);
    GNode* (*node_new)(gpointer data);
    GOptionContext* (*option_context_new)(const gchar *parameter_string);
    void (*option_context_set_summary)(GOptionContext *context, const gchar *summary);
    const gchar * (*option_context_get_summary)(GOptionContext *context);
    void (*option_context_set_description)(GOptionContext *context, const gchar *description);
    const gchar * (*option_context_get_description)(GOptionContext *context);
    void (*option_context_free)(GOptionContext *context);
    void (*option_context_set_help_enabled)(GOptionContext *context, gboolean help_enabled);
    gboolean (*option_context_get_help_enabled)(GOptionContext *context);
    void (*option_context_set_ignore_unknown_options)(GOptionContext *context, gboolean ignore_unknown);
    gboolean (*option_context_get_ignore_unknown_options)(GOptionContext *context);
    void (*option_context_set_strict_posix)(GOptionContext *context, gboolean strict_posix);
    gboolean (*option_context_get_strict_posix)(GOptionContext *context);
    void (*option_context_add_main_entries)(GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain);
    gboolean (*option_context_parse)(GOptionContext *context, gint *argc, gchar ***argv, GError **error);
    gboolean (*option_context_parse_strv)(GOptionContext *context, gchar ***arguments, GError **error);
    void (*option_context_set_translate_func)(GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);
    void (*option_context_set_translation_domain)(GOptionContext *context, const gchar *domain);
    void (*option_context_add_group)(GOptionContext *context, GOptionGroup *group);
    void (*option_context_set_main_group)(GOptionContext *context, GOptionGroup *group);
    GOptionGroup* (*option_context_get_main_group)(GOptionContext *context);
    gchar* (*option_context_get_help)(GOptionContext *context, gboolean main_help, GOptionGroup *group);
    GOptionGroup* (*option_group_new)(const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy);
    void (*option_group_set_parse_hooks)(GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func);
    void (*option_group_set_error_hook)(GOptionGroup *group, GOptionErrorFunc error_func);
    void (*option_group_free)(GOptionGroup *group);
    GOptionGroup* (*option_group_ref)(GOptionGroup *group);
    void (*option_group_unref)(GOptionGroup *group);
    void (*option_group_add_entries)(GOptionGroup *group, const GOptionEntry *entries);
    void (*option_group_set_translate_func)(GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);
    void (*option_group_set_translation_domain)(GOptionGroup *group, const gchar *domain);
    GQuark (*option_error_quark)(void);
    GPathBuf * (*path_buf_new_from_path)(const char *path);
    GPathBuf * (*path_buf_init)(GPathBuf *buf);
    GPathBuf * (*path_buf_init_from_path)(GPathBuf *buf, const char *path);
    void (*path_buf_clear)(GPathBuf *buf);
    char * (*path_buf_clear_to_path)(GPathBuf *buf);
    void (*path_buf_free)(GPathBuf *buf);
    char * (*path_buf_free_to_path)(GPathBuf *buf);
    GPathBuf * (*path_buf_copy)(GPathBuf *buf);
    GPathBuf * (*path_buf_push)(GPathBuf *buf, const char *path);
    gboolean (*path_buf_pop)(GPathBuf *buf);
    gboolean (*path_buf_set_filename)(GPathBuf *buf, const char *file_name);
    gboolean (*path_buf_set_extension)(GPathBuf *buf, const char *extension);
    char * (*path_buf_to_path)(GPathBuf *buf);
    gboolean (*path_buf_equal)(gconstpointer v1, gconstpointer v2);
    GPathBuf * (*path_buf_new)(void);
    void (*pattern_spec_free)(GPatternSpec *pspec);
    GPatternSpec* (*pattern_spec_copy)(GPatternSpec *pspec);
    gboolean (*pattern_spec_equal)(GPatternSpec *pspec1, GPatternSpec *pspec2);
    gboolean (*pattern_spec_match)(GPatternSpec *pspec, gsize string_length, const gchar *string, const gchar *string_reversed);
    gboolean (*pattern_spec_match_string)(GPatternSpec *pspec, const gchar *string);
    gboolean (*pattern_match)(GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed);
    gboolean (*pattern_match_string)(GPatternSpec *pspec, const gchar *string);
    gboolean (*pattern_match_simple)(const gchar *pattern, const gchar *string);
    GPatternSpec* (*pattern_spec_new)(const gchar *pattern);
    gint (*poll)(GPollFD *fds, guint nfds, gint timeout);
    guint (*spaced_primes_closest)(guint num);
    gint (*fprintf)(FILE *file, gchar const *format, ...);
    gint (*sprintf)(gchar *string, gchar const *format, ...);
    gint (*vprintf)(gchar const *format, va_list args);
    gint (*vfprintf)(FILE *file, gchar const *format, va_list args);
    gint (*vsprintf)(gchar *string, gchar const *format, va_list args);
    gint (*vasprintf)(gchar **string, gchar const *format, va_list args);
    gint (*printf)(gchar const *format, ...);
    void (*qsort_with_data)(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);
    GQuark (*quark_from_static_string)(const gchar *string);
    GQuark (*quark_from_string)(const gchar *string);
    const gchar * (*quark_to_string)(GQuark quark);
    const gchar * (*intern_string)(const gchar *string);
    const gchar * (*intern_static_string)(const gchar *string);
    GQuark (*quark_try_string)(const gchar *string);
    void (*queue_free)(GQueue *queue);
    void (*queue_free_full)(GQueue *queue, GDestroyNotify free_func);
    void (*queue_init)(GQueue *queue);
    void (*queue_clear)(GQueue *queue);
    gboolean (*queue_is_empty)(GQueue *queue);
    void (*queue_clear_full)(GQueue *queue, GDestroyNotify free_func);
    guint (*queue_get_length)(GQueue *queue);
    void (*queue_reverse)(GQueue *queue);
    GQueue * (*queue_copy)(GQueue *queue);
    void (*queue_foreach)(GQueue *queue, GFunc func, gpointer user_data);
    GList * (*queue_find)(GQueue *queue, gconstpointer data);
    GList * (*queue_find_custom)(GQueue *queue, gconstpointer data, GCompareFunc func);
    void (*queue_sort)(GQueue *queue, GCompareDataFunc compare_func, gpointer user_data);
    void (*queue_push_head)(GQueue *queue, gpointer data);
    void (*queue_push_tail)(GQueue *queue, gpointer data);
    void (*queue_push_nth)(GQueue *queue, gpointer data, gint n);
    gpointer (*queue_pop_head)(GQueue *queue);
    gpointer (*queue_pop_tail)(GQueue *queue);
    gpointer (*queue_pop_nth)(GQueue *queue, guint n);
    gpointer (*queue_peek_head)(GQueue *queue);
    gpointer (*queue_peek_tail)(GQueue *queue);
    gpointer (*queue_peek_nth)(GQueue *queue, guint n);
    gint (*queue_index)(GQueue *queue, gconstpointer data);
    gboolean (*queue_remove)(GQueue *queue, gconstpointer data);
    guint (*queue_remove_all)(GQueue *queue, gconstpointer data);
    void (*queue_insert_before)(GQueue *queue, GList *sibling, gpointer data);
    void (*queue_insert_before_link)(GQueue *queue, GList *sibling, GList *link_);
    void (*queue_insert_after)(GQueue *queue, GList *sibling, gpointer data);
    void (*queue_insert_after_link)(GQueue *queue, GList *sibling, GList *link_);
    void (*queue_insert_sorted)(GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);
    void (*queue_push_head_link)(GQueue *queue, GList *link_);
    void (*queue_push_tail_link)(GQueue *queue, GList *link_);
    void (*queue_push_nth_link)(GQueue *queue, gint n, GList *link_);
    GList* (*queue_pop_head_link)(GQueue *queue);
    GList* (*queue_pop_tail_link)(GQueue *queue);
    GList* (*queue_pop_nth_link)(GQueue *queue, guint n);
    GList* (*queue_peek_head_link)(GQueue *queue);
    GList* (*queue_peek_tail_link)(GQueue *queue);
    GList* (*queue_peek_nth_link)(GQueue *queue, guint n);
    gint (*queue_link_index)(GQueue *queue, GList *link_);
    void (*queue_unlink)(GQueue *queue, GList *link_);
    void (*queue_delete_link)(GQueue *queue, GList *link_);
    GQueue* (*queue_new)(void);
    GRand* (*rand_new_with_seed_array)(const guint32 *seed, guint seed_length);
    GRand* (*rand_new)(void);
    void (*rand_free)(GRand *rand_);
    GRand* (*rand_copy)(GRand *rand_);
    void (*rand_set_seed)(GRand *rand_, guint32 seed);
    void (*rand_set_seed_array)(GRand *rand_, const guint32 *seed, guint seed_length);
    guint32 (*rand_int)(GRand *rand_);
    gint32 (*rand_int_range)(GRand *rand_, gint32 begin, gint32 end);
    gdouble (*rand_double)(GRand *rand_);
    gdouble (*rand_double_range)(GRand *rand_, gdouble begin, gdouble end);
    void (*random_set_seed)(guint32 seed);
    guint32 (*random_int)(void);
    gint32 (*random_int_range)(gint32 begin, gint32 end);
    gdouble (*random_double)(void);
    gdouble (*random_double_range)(gdouble begin, gdouble end);
    GRand* (*rand_new_with_seed)(guint32 seed);
    gpointer (*rc_box_alloc0)(gsize block_size);
    gpointer (*rc_box_dup)(gsize block_size, gconstpointer mem_block);
    gpointer (*rc_box_acquire)(gpointer mem_block);
    void (*rc_box_release)(gpointer mem_block);
    void (*rc_box_release_full)(gpointer mem_block, GDestroyNotify clear_func);
    gsize (*rc_box_get_size)(gpointer mem_block);
    gpointer (*atomic_rc_box_alloc)(gsize block_size);
    gpointer (*atomic_rc_box_alloc0)(gsize block_size);
    gpointer (*atomic_rc_box_dup)(gsize block_size, gconstpointer mem_block);
    gpointer (*atomic_rc_box_acquire)(gpointer mem_block);
    void (*atomic_rc_box_release)(gpointer mem_block);
    void (*atomic_rc_box_release_full)(gpointer mem_block, GDestroyNotify clear_func);
    gsize (*atomic_rc_box_get_size)(gpointer mem_block);
    gpointer (*rc_box_alloc)(gsize block_size);
    void (*ref_count_inc)(grefcount *rc);
    gboolean (*ref_count_dec)(grefcount *rc);
    gboolean (*ref_count_compare)(grefcount *rc, gint val);
    void (*atomic_ref_count_init)(gatomicrefcount *arc);
    void (*atomic_ref_count_inc)(gatomicrefcount *arc);
    gboolean (*atomic_ref_count_dec)(gatomicrefcount *arc);
    gboolean (*atomic_ref_count_compare)(gatomicrefcount *arc, gint val);
    void (*ref_count_init)(grefcount *rc);
    char * (*ref_string_new_len)(const char *str, gssize len);
    char * (*ref_string_new_intern)(const char *str);
    char * (*ref_string_acquire)(char *str);
    void (*ref_string_release)(char *str);
    gsize (*ref_string_length)(char *str);
    char * (*ref_string_new)(const char *str);
    GRegex* (*regex_new)(const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error);
    GRegex* (*regex_ref)(GRegex *regex);
    void (*regex_unref)(GRegex *regex);
    const gchar* (*regex_get_pattern)(const GRegex *regex);
    gint (*regex_get_max_backref)(const GRegex *regex);
    gint (*regex_get_capture_count)(const GRegex *regex);
    gboolean (*regex_get_has_cr_or_lf)(const GRegex *regex);
    gint (*regex_get_max_lookbehind)(const GRegex *regex);
    gint (*regex_get_string_number)(const GRegex *regex, const gchar *name);
    gchar* (*regex_escape_string)(const gchar *string, gint length);
    gchar* (*regex_escape_nul)(const gchar *string, gint length);
    GRegexCompileFlags (*regex_get_compile_flags)(const GRegex *regex);
    GRegexMatchFlags (*regex_get_match_flags)(const GRegex *regex);
    gboolean (*regex_match_simple)(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);
    gboolean (*regex_match)(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);
    gboolean (*regex_match_full)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);
    gboolean (*regex_match_all)(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);
    gboolean (*regex_match_all_full)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);
    gchar** (*regex_split_simple)(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);
    gchar** (*regex_split)(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options);
    gchar** (*regex_split_full)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error);
    gchar* (*regex_replace)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);
    gchar* (*regex_replace_literal)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);
    gchar* (*regex_replace_eval)(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error);
    gboolean (*regex_check_replacement)(const gchar *replacement, gboolean *has_references, GError **error);
    GRegex* (*match_info_get_regex)(const GMatchInfo *match_info);
    const gchar* (*match_info_get_string)(const GMatchInfo *match_info);
    GMatchInfo* (*match_info_ref)(GMatchInfo *match_info);
    void (*match_info_unref)(GMatchInfo *match_info);
    void (*match_info_free)(GMatchInfo *match_info);
    gboolean (*match_info_next)(GMatchInfo *match_info, GError **error);
    gboolean (*match_info_matches)(const GMatchInfo *match_info);
    gint (*match_info_get_match_count)(const GMatchInfo *match_info);
    gboolean (*match_info_is_partial_match)(const GMatchInfo *match_info);
    gchar* (*match_info_expand_references)(const GMatchInfo *match_info, const gchar *string_to_expand, GError **error);
    gchar* (*match_info_fetch)(const GMatchInfo *match_info, gint match_num);
    gboolean (*match_info_fetch_pos)(const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos);
    gchar* (*match_info_fetch_named)(const GMatchInfo *match_info, const gchar *name);
    gboolean (*match_info_fetch_named_pos)(const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos);
    gchar** (*match_info_fetch_all)(const GMatchInfo *match_info);
    GQuark (*regex_error_quark)(void);
    void (*scanner_destroy)(GScanner *scanner);
    void (*scanner_input_file)(GScanner *scanner, gint input_fd);
    void (*scanner_sync_file_offset)(GScanner *scanner);
    void (*scanner_input_text)(GScanner *scanner, const gchar *text, guint text_len);
    GTokenType (*scanner_get_next_token)(GScanner *scanner);
    GTokenType (*scanner_peek_next_token)(GScanner *scanner);
    GTokenType (*scanner_cur_token)(GScanner *scanner);
    GTokenValue (*scanner_cur_value)(GScanner *scanner);
    guint (*scanner_cur_line)(GScanner *scanner);
    guint (*scanner_cur_position)(GScanner *scanner);
    gboolean (*scanner_eof)(GScanner *scanner);
    guint (*scanner_set_scope)(GScanner *scanner, guint scope_id);
    void (*scanner_scope_add_symbol)(GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value);
    void (*scanner_scope_remove_symbol)(GScanner *scanner, guint scope_id, const gchar *symbol);
    gpointer (*scanner_scope_lookup_symbol)(GScanner *scanner, guint scope_id, const gchar *symbol);
    void (*scanner_scope_foreach_symbol)(GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data);
    gpointer (*scanner_lookup_symbol)(GScanner *scanner, const gchar *symbol);
    void (*scanner_unexp_token)(GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error);
    void (*scanner_error)(GScanner *scanner, const gchar *format, ...);
    void (*scanner_warn)(GScanner *scanner, const gchar *format, ...);
    GScanner* (*scanner_new)(const GScannerConfig *config_templ);
    void (*sequence_free)(GSequence *seq);
    gint (*sequence_get_length)(GSequence *seq);
    void (*sequence_foreach)(GSequence *seq, GFunc func, gpointer user_data);
    void (*sequence_foreach_range)(GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data);
    void (*sequence_sort)(GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data);
    void (*sequence_sort_iter)(GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);
    gboolean (*sequence_is_empty)(GSequence *seq);
    GSequenceIter* (*sequence_get_begin_iter)(GSequence *seq);
    GSequenceIter* (*sequence_get_end_iter)(GSequence *seq);
    GSequenceIter* (*sequence_get_iter_at_pos)(GSequence *seq, gint pos);
    GSequenceIter* (*sequence_append)(GSequence *seq, gpointer data);
    GSequenceIter* (*sequence_prepend)(GSequence *seq, gpointer data);
    GSequenceIter* (*sequence_insert_before)(GSequenceIter *iter, gpointer data);
    void (*sequence_move)(GSequenceIter *src, GSequenceIter *dest);
    void (*sequence_swap)(GSequenceIter *a, GSequenceIter *b);
    GSequenceIter* (*sequence_insert_sorted)(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
    GSequenceIter* (*sequence_insert_sorted_iter)(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
    void (*sequence_sort_changed)(GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data);
    void (*sequence_sort_changed_iter)(GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
    void (*sequence_remove)(GSequenceIter *iter);
    void (*sequence_remove_range)(GSequenceIter *begin, GSequenceIter *end);
    void (*sequence_move_range)(GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end);
    GSequenceIter* (*sequence_search)(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
    GSequenceIter* (*sequence_search_iter)(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
    GSequenceIter* (*sequence_lookup)(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);
    GSequenceIter* (*sequence_lookup_iter)(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);
    gpointer (*sequence_get)(GSequenceIter *iter);
    void (*sequence_set)(GSequenceIter *iter, gpointer data);
    gboolean (*sequence_iter_is_begin)(GSequenceIter *iter);
    gboolean (*sequence_iter_is_end)(GSequenceIter *iter);
    GSequenceIter* (*sequence_iter_next)(GSequenceIter *iter);
    GSequenceIter* (*sequence_iter_prev)(GSequenceIter *iter);
    gint (*sequence_iter_get_position)(GSequenceIter *iter);
    GSequenceIter* (*sequence_iter_move)(GSequenceIter *iter, gint delta);
    GSequence * (*sequence_iter_get_sequence)(GSequenceIter *iter);
    gint (*sequence_iter_compare)(GSequenceIter *a, GSequenceIter *b);
    GSequenceIter* (*sequence_range_get_midpoint)(GSequenceIter *begin, GSequenceIter *end);
    GSequence * (*sequence_new)(GDestroyNotify data_destroy);
    gchar* (*shell_quote)(const gchar *unquoted_string);
    gchar* (*shell_unquote)(const gchar *quoted_string, GError **error);
    gboolean (*shell_parse_argv)(const gchar *command_line, gint *argcp, gchar ***argvp, GError **error);
    GQuark (*shell_error_quark)(void);
    gpointer (*slice_alloc0)(gsize block_size);
    gpointer (*slice_copy)(gsize block_size, gconstpointer mem_block);
    void (*slice_free1)(gsize block_size, gpointer mem_block);
    void (*slice_free_chain_with_offset)(gsize block_size, gpointer mem_chain, gsize next_offset);
    void (*slice_set_config)(GSliceConfig ckey, gint64 value);
    gint64 (*slice_get_config)(GSliceConfig ckey);
    gint64* (*slice_get_config_state)(GSliceConfig ckey, gint64 address, guint *n_values);
    void (*slice_debug_tree_statistics)(void);
    gpointer (*slice_alloc)(gsize block_size);
    void (*slist_free)(GSList *list);
    void (*slist_free_1)(GSList *list);
    void (*slist_free_full)(GSList *list, GDestroyNotify free_func);
    GSList* (*slist_append)(GSList *list, gpointer data);
    GSList* (*slist_prepend)(GSList *list, gpointer data);
    GSList* (*slist_insert)(GSList *list, gpointer data, gint position);
    GSList* (*slist_insert_sorted)(GSList *list, gpointer data, GCompareFunc func);
    GSList* (*slist_insert_sorted_with_data)(GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data);
    GSList* (*slist_insert_before)(GSList *slist, GSList *sibling, gpointer data);
    GSList* (*slist_concat)(GSList *list1, GSList *list2);
    GSList* (*slist_remove)(GSList *list, gconstpointer data);
    GSList* (*slist_remove_all)(GSList *list, gconstpointer data);
    GSList* (*slist_remove_link)(GSList *list, GSList *link_);
    GSList* (*slist_delete_link)(GSList *list, GSList *link_);
    GSList* (*slist_reverse)(GSList *list);
    GSList* (*slist_copy)(GSList *list);
    GSList* (*slist_copy_deep)(GSList *list, GCopyFunc func, gpointer user_data);
    GSList* (*slist_nth)(GSList *list, guint n);
    GSList* (*slist_find)(GSList *list, gconstpointer data);
    GSList* (*slist_find_custom)(GSList *list, gconstpointer data, GCompareFunc func);
    gint (*slist_position)(GSList *list, GSList *llink);
    gint (*slist_index)(GSList *list, gconstpointer data);
    GSList* (*slist_last)(GSList *list);
    guint (*slist_length)(GSList *list);
    void (*slist_foreach)(GSList *list, GFunc func, gpointer user_data);
    GSList* (*slist_sort)(GSList *list, GCompareFunc compare_func);
    GSList* (*slist_sort_with_data)(GSList *list, GCompareDataFunc compare_func, gpointer user_data);
    gpointer (*slist_nth_data)(GSList *list, guint n);
    void (*clear_slist)(GSList **slist_ptr, GDestroyNotify destroy);
    GSList* (*slist_alloc)(void);
    GQuark (*spawn_exit_error_quark)(void);
    gboolean (*spawn_async)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error);
    gboolean (*spawn_async_with_pipes)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error);
    gboolean (*spawn_async_with_pipes_and_fds)(const gchar *working_directory, const gchar * const *argv, const gchar * const *envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint stdin_fd, gint stdout_fd, gint stderr_fd, const gint *source_fds, const gint *target_fds, gsize n_fds, GPid *child_pid_out, gint *stdin_pipe_out, gint *stdout_pipe_out, gint *stderr_pipe_out, GError **error);
    gboolean (*spawn_async_with_fds)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint stdin_fd, gint stdout_fd, gint stderr_fd, GError **error);
    gboolean (*spawn_sync)(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error);
    gboolean (*spawn_command_line_sync)(const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error);
    gboolean (*spawn_command_line_async)(const gchar *command_line, GError **error);
    gboolean (*spawn_check_wait_status)(gint wait_status, GError **error);
    gboolean (*spawn_check_exit_status)(gint wait_status, GError **error);
    void (*spawn_close_pid)(GPid pid);
    GQuark (*spawn_error_quark)(void);
    int (*chdir)(const gchar *path);
    int (*unlink)(const gchar *filename);
    int (*rmdir)(const gchar *filename);
    int (*access)(const gchar *filename, int mode);
    int (*chmod)(const gchar *filename, int mode);
    int (*open)(const gchar *filename, int flags, int mode);
    int (*creat)(const gchar *filename, int mode);
    int (*rename)(const gchar *oldfilename, const gchar *newfilename);
    int (*mkdir)(const gchar *filename, int mode);
    int (*stat)(const gchar *filename, GStatBuf *buf);
    int (*lstat)(const gchar *filename, GStatBuf *buf);
    int (*remove)(const gchar *filename);
    FILE* (*fopen)(const gchar *filename, const gchar *mode);
    FILE* (*freopen)(const gchar *filename, const gchar *mode, FILE *stream);
    gint (*fsync)(gint fd);
    int (*utime)(const gchar *filename, struct utimbuf *utb);
    gboolean (*close)(gint fd, GError **error);
    gchar (*ascii_tolower)(gchar c);
    gchar (*ascii_toupper)(gchar c);
    gint (*ascii_digit_value)(gchar c);
    gint (*ascii_xdigit_value)(gchar c);
    gchar* (*strdelimit)(gchar *string, const gchar *delimiters, gchar new_delimiter);
    gchar* (*strcanon)(gchar *string, const gchar *valid_chars, gchar substitutor);
    const gchar * (*strerror)(gint errnum);
    const gchar * (*strsignal)(gint signum);
    gchar * (*strreverse)(gchar *string);
    gsize (*strlcpy)(gchar *dest, const gchar *src, gsize dest_size);
    gsize (*strlcat)(gchar *dest, const gchar *src, gsize dest_size);
    gchar * (*strstr_len)(const gchar *haystack, gssize haystack_len, const gchar *needle);
    gchar * (*strrstr)(const gchar *haystack, const gchar *needle);
    gchar * (*strrstr_len)(const gchar *haystack, gssize haystack_len, const gchar *needle);
    gboolean (*str_has_suffix)(const gchar *str, const gchar *suffix);
    gboolean (*str_has_prefix)(const gchar *str, const gchar *prefix);
    gdouble (*strtod)(const gchar *nptr, gchar **endptr);
    gdouble (*ascii_strtod)(const gchar *nptr, gchar **endptr);
    guint64 (*ascii_strtoull)(const gchar *nptr, gchar **endptr, guint base);
    gint64 (*ascii_strtoll)(const gchar *nptr, gchar **endptr, guint base);
    gchar * (*ascii_dtostr)(gchar *buffer, gint buf_len, gdouble d);
    gchar * (*ascii_formatd)(gchar *buffer, gint buf_len, const gchar *format, gdouble d);
    gchar* (*strchug)(gchar *string);
    gchar* (*strchomp)(gchar *string);
    gint (*ascii_strcasecmp)(const gchar *s1, const gchar *s2);
    gint (*ascii_strncasecmp)(const gchar *s1, const gchar *s2, gsize n);
    gchar* (*ascii_strdown)(const gchar *str, gssize len);
    gchar* (*ascii_strup)(const gchar *str, gssize len);
    gboolean (*str_is_ascii)(const gchar *str);
    gint (*strcasecmp)(const gchar *s1, const gchar *s2);
    gint (*strncasecmp)(const gchar *s1, const gchar *s2, guint n);
    gchar* (*strdown)(gchar *string);
    gchar* (*strup)(gchar *string);
    gchar* (*strdup)(const gchar *str);
    gchar* (*strdup_printf)(const gchar *format, ...);
    gchar* (*strdup_vprintf)(const gchar *format, va_list args);
    gchar* (*strndup)(const gchar *str, gsize n);
    gchar* (*strnfill)(gsize length, gchar fill_char);
    gchar* (*strconcat)(const gchar *string1, ...);
    gchar* (*strjoin)(const gchar *separator, ...);
    gchar* (*strcompress)(const gchar *source);
    gchar* (*strescape)(const gchar *source, const gchar *exceptions);
    gpointer (*memdup)(gconstpointer mem, guint byte_size);
    gpointer (*memdup2)(gconstpointer mem, gsize byte_size);
    gchar** (*strsplit)(const gchar *string, const gchar *delimiter, gint max_tokens);
    gchar ** (*strsplit_set)(const gchar *string, const gchar *delimiters, gint max_tokens);
    gchar* (*strjoinv)(const gchar *separator, gchar **str_array);
    void (*strfreev)(gchar **str_array);
    gchar** (*strdupv)(gchar **str_array);
    guint (*strv_length)(gchar **str_array);
    gchar* (*stpcpy)(gchar *dest, const char *src);
    gchar * (*str_to_ascii)(const gchar *str, const gchar *from_locale);
    gchar ** (*str_tokenize_and_fold)(const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates);
    gboolean (*str_match_string)(const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates);
    gboolean (*strv_contains)(const gchar * const *strv, const gchar *str);
    gboolean (*strv_equal)(const gchar * const *strv1, const gchar * const *strv2);
    GQuark (*number_parser_error_quark)(void);
    gboolean (*ascii_string_to_signed)(const gchar *str, guint base, gint64 min, gint64 max, gint64 *out_num, GError **error);
    gboolean (*ascii_string_to_unsigned)(const gchar *str, guint base, guint64 min, guint64 max, guint64 *out_num, GError **error);
    GString* (*string_new_take)(gchar *init);
    GString* (*string_new_len)(const gchar *init, gssize len);
    GString* (*string_sized_new)(gsize dfl_size);
    gchar* (*string_free)(GString *string, gboolean free_segment);
    gchar* (*string_free_and_steal)(GString *string);
    GBytes* (*string_free_to_bytes)(GString *string);
    gboolean (*string_equal)(const GString *v, const GString *v2);
    guint (*string_hash)(const GString *str);
    GString* (*string_assign)(GString *string, const gchar *rval);
    GString* (*string_truncate)(GString *string, gsize len);
    GString* (*string_set_size)(GString *string, gsize len);
    GString* (*string_insert_len)(GString *string, gssize pos, const gchar *val, gssize len);
    GString* (*string_append)(GString *string, const gchar *val);
    GString* (*string_append_len)(GString *string, const gchar *val, gssize len);
    GString* (*string_append_c)(GString *string, gchar c);
    GString* (*string_append_unichar)(GString *string, gunichar wc);
    GString* (*string_prepend)(GString *string, const gchar *val);
    GString* (*string_prepend_c)(GString *string, gchar c);
    GString* (*string_prepend_unichar)(GString *string, gunichar wc);
    GString* (*string_prepend_len)(GString *string, const gchar *val, gssize len);
    GString* (*string_insert)(GString *string, gssize pos, const gchar *val);
    GString* (*string_insert_c)(GString *string, gssize pos, gchar c);
    GString* (*string_insert_unichar)(GString *string, gssize pos, gunichar wc);
    GString* (*string_overwrite)(GString *string, gsize pos, const gchar *val);
    GString* (*string_overwrite_len)(GString *string, gsize pos, const gchar *val, gssize len);
    GString* (*string_erase)(GString *string, gssize pos, gssize len);
    guint (*string_replace)(GString *string, const gchar *find, const gchar *replace, guint limit);
    GString* (*string_ascii_down)(GString *string);
    GString* (*string_ascii_up)(GString *string);
    void (*string_vprintf)(GString *string, const gchar *format, va_list args);
    void (*string_printf)(GString *string, const gchar *format, ...);
    void (*string_append_vprintf)(GString *string, const gchar *format, va_list args);
    void (*string_append_printf)(GString *string, const gchar *format, ...);
    GString* (*string_append_uri_escaped)(GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8);
    GString* (*string_down)(GString *string);
    GString* (*string_up)(GString *string);
    GString* (*string_new)(const gchar *init);
    void (*string_chunk_free)(GStringChunk *chunk);
    void (*string_chunk_clear)(GStringChunk *chunk);
    gchar* (*string_chunk_insert)(GStringChunk *chunk, const gchar *string);
    gchar* (*string_chunk_insert_len)(GStringChunk *chunk, const gchar *string, gssize len);
    gchar* (*string_chunk_insert_const)(GStringChunk *chunk, const gchar *string);
    GStringChunk* (*string_chunk_new)(gsize size);
    void (*strv_builder_unref)(GStrvBuilder *builder);
    GStrvBuilder* (*strv_builder_ref)(GStrvBuilder *builder);
    void (*strv_builder_add)(GStrvBuilder *builder, const char *value);
    void (*strv_builder_addv)(GStrvBuilder *builder, const char **value);
    void (*strv_builder_add_many)(GStrvBuilder *builder, ...);
    void (*strv_builder_take)(GStrvBuilder *builder, char *value);
    GStrv (*strv_builder_end)(GStrvBuilder *builder);
    GStrvBuilder* (*strv_builder_new)(void);
    void (*test_minimized_result)(double minimized_quantity, const char *format, ...);
    void (*test_maximized_result)(double maximized_quantity, const char *format, ...);
    void (*test_init)(int *argc, char ***argv, ...);
    gboolean (*test_subprocess)(void);
    int (*test_run)(void);
    void (*test_add_func)(const char *testpath, GTestFunc test_func);
    void (*test_add_data_func)(const char *testpath, gconstpointer test_data, GTestDataFunc test_func);
    void (*test_add_data_func_full)(const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);
    const char * (*test_get_path)(void);
    void (*test_fail)(void);
    void (*test_fail_printf)(const char *format, ...);
    void (*test_incomplete)(const gchar *msg);
    void (*test_incomplete_printf)(const char *format, ...);
    void (*test_skip)(const gchar *msg);
    void (*test_skip_printf)(const char *format, ...);
    gboolean (*test_failed)(void);
    void (*test_set_nonfatal_assertions)(void);
    void (*test_disable_crash_reporting)(void);
    void (*test_message)(const char *format, ...);
    void (*test_bug_base)(const char *uri_pattern);
    void (*test_bug)(const char *bug_uri_snippet);
    void (*test_summary)(const char *summary);
    void (*test_timer_start)(void);
    double (*test_timer_elapsed)(void);
    double (*test_timer_last)(void);
    void (*test_queue_free)(gpointer gfree_pointer);
    void (*test_queue_destroy)(GDestroyNotify destroy_func, gpointer destroy_data);
    void (*test_trap_subprocess_with_envp)(const char *test_path, const char * const *envp, guint64 usec_timeout, GTestSubprocessFlags test_flags);
    gboolean (*test_trap_has_passed)(void);
    gboolean (*test_trap_reached_timeout)(void);
    gint32 (*test_rand_int)(void);
    gint32 (*test_rand_int_range)(gint32 begin, gint32 end);
    double (*test_rand_double)(void);
    double (*test_rand_double_range)(double range_start, double range_end);
    GTestCase* (*test_create_case)(const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);
    GTestSuite* (*test_create_suite)(const char *suite_name);
    GTestSuite* (*test_get_root)(void);
    void (*test_suite_add)(GTestSuite *suite, GTestCase *test_case);
    void (*test_suite_add_suite)(GTestSuite *suite, GTestSuite *nestedsuite);
    int (*test_run_suite)(GTestSuite *suite);
    void (*test_case_free)(GTestCase *test_case);
    void (*test_suite_free)(GTestSuite *suite);
    void (*test_trap_assertions)(const char *domain, const char *file, int line, const char *func, guint64 assertion_flags, const char *pattern);
    void (*assertion_message)(const char *domain, const char *file, int line, const char *func, const char *message);
    void (*assertion_message_expr)(const char *domain, const char *file, int line, const char *func, const char *expr);
    void (*assertion_message_cmpstr)(const char *domain, const char *file, int line, const char *func, const char *expr, const char *arg1, const char *cmp, const char *arg2);
    void (*assertion_message_cmpstrv)(const char *domain, const char *file, int line, const char *func, const char *expr, const char * const *arg1, const char * const *arg2, gsize first_wrong_idx);
    void (*assertion_message_cmpint)(const char *domain, const char *file, int line, const char *func, const char *expr, guint64 arg1, const char *cmp, guint64 arg2, char numtype);
    void (*assertion_message_cmpnum)(const char *domain, const char *file, int line, const char *func, const char *expr, long double arg1, const char *cmp, long double arg2, char numtype);
    void (*assertion_message_error)(const char *domain, const char *file, int line, const char *func, const char *expr, const GError *error, GQuark error_domain, int error_code);
    void (*test_add_vtable)(const char *testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);
    const char* (*test_log_type_name)(GTestLogType log_type);
    GTestLogBuffer* (*test_log_buffer_new)(void);
    void (*test_log_buffer_free)(GTestLogBuffer *tbuffer);
    void (*test_log_buffer_push)(GTestLogBuffer *tbuffer, guint n_bytes, const guint8 *bytes);
    GTestLogMsg* (*test_log_buffer_pop)(GTestLogBuffer *tbuffer);
    void (*test_log_msg_free)(GTestLogMsg *tmsg);
    void (*test_log_set_fatal_handler)(GTestLogFatalFunc log_func, gpointer user_data);
    void (*test_expect_message)(const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern);
    void (*test_assert_expected_messages_internal)(const char *domain, const char *file, int line, const char *func);
    gchar * (*test_build_filename)(GTestFileType file_type, const gchar *first_path, ...);
    const gchar* (*test_get_dir)(GTestFileType file_type);
    const gchar* (*test_get_filename)(GTestFileType file_type, const gchar *first_path, ...);
    int (*strcmp0)(const char *str1, const char *str2);
    GThread * (*thread_ref)(GThread *thread);
    void (*thread_unref)(GThread *thread);
    GThread * (*thread_new)(const gchar *name, GThreadFunc func, gpointer data);
    GThread * (*thread_try_new)(const gchar *name, GThreadFunc func, gpointer data, GError **error);
    GThread * (*thread_self)(void);
    void (*thread_exit)(gpointer retval);
    gpointer (*thread_join)(GThread *thread);
    void (*thread_yield)(void);
    void (*mutex_init)(GMutex *mutex);
    void (*mutex_clear)(GMutex *mutex);
    void (*mutex_lock)(GMutex *mutex);
    gboolean (*mutex_trylock)(GMutex *mutex);
    void (*mutex_unlock)(GMutex *mutex);
    void (*rw_lock_init)(GRWLock *rw_lock);
    void (*rw_lock_clear)(GRWLock *rw_lock);
    void (*rw_lock_writer_lock)(GRWLock *rw_lock);
    gboolean (*rw_lock_writer_trylock)(GRWLock *rw_lock);
    void (*rw_lock_writer_unlock)(GRWLock *rw_lock);
    void (*rw_lock_reader_lock)(GRWLock *rw_lock);
    gboolean (*rw_lock_reader_trylock)(GRWLock *rw_lock);
    void (*rw_lock_reader_unlock)(GRWLock *rw_lock);
    void (*rec_mutex_init)(GRecMutex *rec_mutex);
    void (*rec_mutex_clear)(GRecMutex *rec_mutex);
    void (*rec_mutex_lock)(GRecMutex *rec_mutex);
    gboolean (*rec_mutex_trylock)(GRecMutex *rec_mutex);
    void (*rec_mutex_unlock)(GRecMutex *rec_mutex);
    void (*cond_init)(GCond *cond);
    void (*cond_clear)(GCond *cond);
    void (*cond_wait)(GCond *cond, GMutex *mutex);
    void (*cond_signal)(GCond *cond);
    void (*cond_broadcast)(GCond *cond);
    gboolean (*cond_wait_until)(GCond *cond, GMutex *mutex, gint64 end_time);
    gpointer (*private_get)(GPrivate *key);
    void (*private_set)(GPrivate *key, gpointer value);
    void (*private_replace)(GPrivate *key, gpointer value);
    gpointer (*once_impl)(GOnce *once, GThreadFunc func, gpointer arg);
    gboolean (*once_init_enter)(volatile void *location);
    void (*once_init_leave)(volatile void *location, gsize result);
    gboolean (*once_init_enter_pointer)(void *location);
    void (*once_init_leave_pointer)(void *location, gpointer result);
    guint (*get_num_processors)(void);
    GQuark (*thread_error_quark)(void);
    GThreadPool * (*thread_pool_new_full)(GFunc func, gpointer user_data, GDestroyNotify item_free_func, gint max_threads, gboolean exclusive, GError **error);
    void (*thread_pool_free)(GThreadPool *pool, gboolean immediate, gboolean wait_);
    gboolean (*thread_pool_push)(GThreadPool *pool, gpointer data, GError **error);
    guint (*thread_pool_unprocessed)(GThreadPool *pool);
    void (*thread_pool_set_sort_function)(GThreadPool *pool, GCompareDataFunc func, gpointer user_data);
    gboolean (*thread_pool_move_to_front)(GThreadPool *pool, gpointer data);
    gboolean (*thread_pool_set_max_threads)(GThreadPool *pool, gint max_threads, GError **error);
    gint (*thread_pool_get_max_threads)(GThreadPool *pool);
    guint (*thread_pool_get_num_threads)(GThreadPool *pool);
    void (*thread_pool_set_max_unused_threads)(gint max_threads);
    gint (*thread_pool_get_max_unused_threads)(void);
    guint (*thread_pool_get_num_unused_threads)(void);
    void (*thread_pool_stop_unused_threads)(void);
    void (*thread_pool_set_max_idle_time)(guint interval);
    guint (*thread_pool_get_max_idle_time)(void);
    GThreadPool * (*thread_pool_new)(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error);
    void (*timer_destroy)(GTimer *timer);
    void (*timer_start)(GTimer *timer);
    void (*timer_stop)(GTimer *timer);
    void (*timer_reset)(GTimer *timer);
    void (*timer_continue)(GTimer *timer);
    gdouble (*timer_elapsed)(GTimer *timer, gulong *microseconds);
    gboolean (*timer_is_active)(GTimer *timer);
    void (*usleep)(gulong microseconds);
    gboolean (*time_val_from_iso8601)(const gchar *iso_date, GTimeVal *time_);
    gchar* (*time_val_to_iso8601)(GTimeVal *time_);
    GTimer* (*timer_new)(void);
    GTimeZone * (*time_zone_new_identifier)(const gchar *identifier);
    GTimeZone * (*time_zone_new_utc)(void);
    GTimeZone * (*time_zone_new_local)(void);
    GTimeZone * (*time_zone_new_offset)(gint32 seconds);
    GTimeZone * (*time_zone_ref)(GTimeZone *tz);
    void (*time_zone_unref)(GTimeZone *tz);
    gint (*time_zone_find_interval)(GTimeZone *tz, GTimeType type, gint64 time_);
    gint (*time_zone_adjust_time)(GTimeZone *tz, GTimeType type, gint64 *time_);
    const gchar * (*time_zone_get_abbreviation)(GTimeZone *tz, gint interval);
    gint32 (*time_zone_get_offset)(GTimeZone *tz, gint interval);
    gboolean (*time_zone_is_dst)(GTimeZone *tz, gint interval);
    const gchar * (*time_zone_get_identifier)(GTimeZone *tz);
    GTimeZone * (*time_zone_new)(const gchar *identifier);
    gpointer (*trash_stack_pop)(GTrashStack **stack_p);
    gpointer (*trash_stack_peek)(GTrashStack **stack_p);
    guint (*trash_stack_height)(GTrashStack **stack_p);
    GTree* (*tree_new_with_data)(GCompareDataFunc key_compare_func, gpointer key_compare_data);
    GTree* (*tree_new_full)(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);
    GTreeNode* (*tree_node_first)(GTree *tree);
    GTreeNode* (*tree_node_last)(GTree *tree);
    GTreeNode* (*tree_node_previous)(GTreeNode *node);
    GTreeNode* (*tree_node_next)(GTreeNode *node);
    GTree* (*tree_ref)(GTree *tree);
    void (*tree_unref)(GTree *tree);
    void (*tree_destroy)(GTree *tree);
    GTreeNode* (*tree_insert_node)(GTree *tree, gpointer key, gpointer value);
    void (*tree_insert)(GTree *tree, gpointer key, gpointer value);
    GTreeNode* (*tree_replace_node)(GTree *tree, gpointer key, gpointer value);
    void (*tree_replace)(GTree *tree, gpointer key, gpointer value);
    gboolean (*tree_remove)(GTree *tree, gconstpointer key);
    void (*tree_remove_all)(GTree *tree);
    gboolean (*tree_steal)(GTree *tree, gconstpointer key);
    gpointer (*tree_node_key)(GTreeNode *node);
    gpointer (*tree_node_value)(GTreeNode *node);
    GTreeNode* (*tree_lookup_node)(GTree *tree, gconstpointer key);
    gpointer (*tree_lookup)(GTree *tree, gconstpointer key);
    gboolean (*tree_lookup_extended)(GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);
    void (*tree_foreach)(GTree *tree, GTraverseFunc func, gpointer user_data);
    void (*tree_foreach_node)(GTree *tree, GTraverseNodeFunc func, gpointer user_data);
    void (*tree_traverse)(GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);
    GTreeNode* (*tree_search_node)(GTree *tree, GCompareFunc search_func, gconstpointer user_data);
    gpointer (*tree_search)(GTree *tree, GCompareFunc search_func, gconstpointer user_data);
    GTreeNode* (*tree_lower_bound)(GTree *tree, gconstpointer key);
    GTreeNode* (*tree_upper_bound)(GTree *tree, gconstpointer key);
    gint (*tree_height)(GTree *tree);
    gint (*tree_nnodes)(GTree *tree);
    void (*tree_dump)(GTree *tree);
    GTree* (*tree_new)(GCompareFunc key_compare_func);
    GUnicodeScript (*unicode_script_from_iso15924)(guint32 iso15924);
    gboolean (*unichar_isalnum)(gunichar c);
    gboolean (*unichar_isalpha)(gunichar c);
    gboolean (*unichar_iscntrl)(gunichar c);
    gboolean (*unichar_isdigit)(gunichar c);
    gboolean (*unichar_isgraph)(gunichar c);
    gboolean (*unichar_islower)(gunichar c);
    gboolean (*unichar_isprint)(gunichar c);
    gboolean (*unichar_ispunct)(gunichar c);
    gboolean (*unichar_isspace)(gunichar c);
    gboolean (*unichar_isupper)(gunichar c);
    gboolean (*unichar_isxdigit)(gunichar c);
    gboolean (*unichar_istitle)(gunichar c);
    gboolean (*unichar_isdefined)(gunichar c);
    gboolean (*unichar_iswide)(gunichar c);
    gboolean (*unichar_iswide_cjk)(gunichar c);
    gboolean (*unichar_iszerowidth)(gunichar c);
    gboolean (*unichar_ismark)(gunichar c);
    gunichar (*unichar_toupper)(gunichar c);
    gunichar (*unichar_tolower)(gunichar c);
    gunichar (*unichar_totitle)(gunichar c);
    gint (*unichar_digit_value)(gunichar c);
    gint (*unichar_xdigit_value)(gunichar c);
    GUnicodeType (*unichar_type)(gunichar c);
    GUnicodeBreakType (*unichar_break_type)(gunichar c);
    gint (*unichar_combining_class)(gunichar uc);
    gboolean (*unichar_get_mirror_char)(gunichar ch, gunichar *mirrored_ch);
    GUnicodeScript (*unichar_get_script)(gunichar ch);
    gboolean (*unichar_validate)(gunichar ch);
    gboolean (*unichar_compose)(gunichar a, gunichar b, gunichar *ch);
    gboolean (*unichar_decompose)(gunichar ch, gunichar *a, gunichar *b);
    gsize (*unichar_fully_decompose)(gunichar ch, gboolean compat, gunichar *result, gsize result_len);
    void (*unicode_canonical_ordering)(gunichar *string, gsize len);
    gunichar* (*unicode_canonical_decomposition)(gunichar ch, gsize *result_len);
    gunichar (*utf8_get_char)(const gchar *);
    gunichar (*utf8_get_char_validated)(const gchar *p, gssize max_le);
    gchar* (*utf8_offset_to_pointer)(const gchar *str, glong offse);
    glong (*utf8_pointer_to_offset)(const gchar *str, const gchar *po);
    gchar* (*utf8_prev_char)(const gchar *);
    gchar* (*utf8_find_next_char)(const gchar *p, const gchar *en);
    gchar* (*utf8_find_prev_char)(const gchar *str, const gchar *);
    glong (*utf8_strlen)(const gchar *p, gssize ma);
    gchar* (*utf8_substring)(const gchar *str, glong start_pos, glong end_pos);
    gchar* (*utf8_strncpy)(gchar *dest, const gchar *src, gsize n);
    gchar* (*utf8_truncate_middle)(const gchar *string, gsize truncate_length);
    gchar* (*utf8_strchr)(const gchar *p, gssize len, gunichar c);
    gchar* (*utf8_strrchr)(const gchar *p, gssize len, gunichar c);
    gchar* (*utf8_strreverse)(const gchar *str, gssize len);
    gunichar2* (*utf8_to_utf16)(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error);
    gunichar * (*utf8_to_ucs4)(const gchar *str, glong len, glong *items_read, glong *items_written, GError **error);
    gunichar * (*utf8_to_ucs4_fast)(const gchar *str, glong len, glong *items_written);
    gunichar * (*utf16_to_ucs4)(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error);
    gchar* (*utf16_to_utf8)(const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error);
    gunichar2* (*ucs4_to_utf16)(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error);
    gchar* (*ucs4_to_utf8)(const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error);
    gint (*unichar_to_utf8)(gunichar c, gchar *outbuf);
    gboolean (*utf8_validate)(const gchar *str, gssize max_len, const gchar **end);
    gboolean (*utf8_validate_len)(const gchar *str, gsize max_len, const gchar **end);
    gchar* (*utf8_strup)(const gchar *str, gssize len);
    gchar* (*utf8_strdown)(const gchar *str, gssize len);
    gchar* (*utf8_casefold)(const gchar *str, gssize len);
    gchar* (*utf8_normalize)(const gchar *str, gssize len, GNormalizeMode mode);
    gint (*utf8_collate)(const gchar *str1, const gchar *str);
    gchar* (*utf8_collate_key)(const gchar *str, gssize len);
    gchar* (*utf8_collate_key_for_filename)(const gchar *str, gssize len);
    gchar* (*utf8_make_valid)(const gchar *str, gssize len);
    guint32 (*unicode_script_to_iso15924)(GUnicodeScript script);
    void (*uri_unref)(GUri *uri);
    gboolean (*uri_split)(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **userinfo, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error);
    gboolean (*uri_split_with_user)(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **user, gchar **password, gchar **auth_params, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error);
    gboolean (*uri_split_network)(const gchar *uri_string, GUriFlags flags, gchar **scheme, gchar **host, gint *port, GError **error);
    gboolean (*uri_is_valid)(const gchar *uri_string, GUriFlags flags, GError **error);
    gchar * (*uri_join)(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
    gchar * (*uri_join_with_user)(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
    GUri * (*uri_parse)(const gchar *uri_string, GUriFlags flags, GError **error);
    GUri * (*uri_parse_relative)(GUri *base_uri, const gchar *uri_ref, GUriFlags flags, GError **error);
    gchar * (*uri_resolve_relative)(const gchar *base_uri_string, const gchar *uri_ref, GUriFlags flags, GError **error);
    GUri * (*uri_build)(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
    GUri * (*uri_build_with_user)(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment);
    char * (*uri_to_string)(GUri *uri);
    char * (*uri_to_string_partial)(GUri *uri, GUriHideFlags flags);
    const gchar* (*uri_get_scheme)(GUri *uri);
    const gchar* (*uri_get_userinfo)(GUri *uri);
    const gchar* (*uri_get_user)(GUri *uri);
    const gchar* (*uri_get_password)(GUri *uri);
    const gchar* (*uri_get_auth_params)(GUri *uri);
    const gchar* (*uri_get_host)(GUri *uri);
    gint (*uri_get_port)(GUri *uri);
    const gchar* (*uri_get_path)(GUri *uri);
    const gchar* (*uri_get_query)(GUri *uri);
    const gchar* (*uri_get_fragment)(GUri *uri);
    GUriFlags (*uri_get_flags)(GUri *uri);
    GHashTable* (*uri_parse_params)(const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags, GError **error);
    void (*uri_params_iter_init)(GUriParamsIter *iter, const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags);
    gboolean (*uri_params_iter_next)(GUriParamsIter *iter, gchar **attribute, gchar **value, GError **error);
    GQuark (*uri_error_quark)(void);
    char * (*uri_unescape_string)(const char *escaped_string, const char *illegal_characters);
    char * (*uri_unescape_segment)(const char *escaped_string, const char *escaped_string_end, const char *illegal_characters);
    char * (*uri_parse_scheme)(const char *uri);
    const char* (*uri_peek_scheme)(const char *uri);
    char * (*uri_escape_string)(const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8);
    GBytes * (*uri_unescape_bytes)(const char *escaped_string, gssize length, const char *illegal_characters, GError **error);
    char * (*uri_escape_bytes)(const guint8 *unescaped, gsize length, const char *reserved_chars_allowed);
    const gchar * (*get_real_name)(void);
    const gchar * (*get_home_dir)(void);
    const gchar * (*get_tmp_dir)(void);
    const gchar * (*get_host_name)(void);
    const gchar * (*get_prgname)(void);
    void (*set_prgname)(const gchar *prgname);
    const gchar * (*get_application_name)(void);
    void (*set_application_name)(const gchar *application_name);
    gchar * (*get_os_info)(const gchar *key_name);
    void (*reload_user_special_dirs_cache)(void);
    const gchar * (*get_user_data_dir)(void);
    const gchar * (*get_user_config_dir)(void);
    const gchar * (*get_user_cache_dir)(void);
    const gchar * (*get_user_state_dir)(void);
    const gchar * const * (*get_system_data_dirs)(void);
    const gchar * const * (*get_system_config_dirs)(void);
    const gchar * (*get_user_runtime_dir)(void);
    const gchar * (*get_user_special_dir)(GUserDirectory directory);
    guint (*parse_debug_string)(const gchar *string, const GDebugKey *keys, guint nkeys);
    gint (*snprintf)(gchar *string, gulong n, gchar const *format, ...);
    gint (*vsnprintf)(gchar *string, gulong n, gchar const *format, va_list args);
    void (*nullify_pointer)(gpointer *nullify_location);
    gchar* (*format_size_full)(guint64 size, GFormatSizeFlags flags);
    gchar* (*format_size)(guint64 size);
    gchar* (*format_size_for_display)(goffset size);
    gchar* (*find_program_in_path)(const gchar *program);
    gint (*bit_nth_lsf)(gulong mask, gint nth_bit);
    gint (*bit_nth_msf)(gulong mask, gint nth_bit);
    guint (*bit_storage)(gulong number);
    void (*abort)(void);
    const gchar * (*get_user_name)(void);
    gchar * (*uuid_string_random)(void);
    gboolean (*uuid_string_is_valid)(const gchar *str);
    gboolean (*variant_type_string_scan)(const gchar *string, const gchar *limit, const gchar **endptr);
    void (*variant_type_free)(GVariantType *type);
    GVariantType * (*variant_type_copy)(const GVariantType *type);
    GVariantType * (*variant_type_new)(const gchar *type_string);
    gsize (*variant_type_get_string_length)(const GVariantType *type);
    const gchar * (*variant_type_peek_string)(const GVariantType *type);
    gchar * (*variant_type_dup_string)(const GVariantType *type);
    gboolean (*variant_type_is_definite)(const GVariantType *type);
    gboolean (*variant_type_is_container)(const GVariantType *type);
    gboolean (*variant_type_is_basic)(const GVariantType *type);
    gboolean (*variant_type_is_maybe)(const GVariantType *type);
    gboolean (*variant_type_is_array)(const GVariantType *type);
    gboolean (*variant_type_is_tuple)(const GVariantType *type);
    gboolean (*variant_type_is_dict_entry)(const GVariantType *type);
    gboolean (*variant_type_is_variant)(const GVariantType *type);
    guint (*variant_type_hash)(gconstpointer type);
    gboolean (*variant_type_equal)(gconstpointer type1, gconstpointer type2);
    gboolean (*variant_type_is_subtype_of)(const GVariantType *type, const GVariantType *supertype);
    const GVariantType * (*variant_type_element)(const GVariantType *type);
    const GVariantType * (*variant_type_first)(const GVariantType *type);
    const GVariantType * (*variant_type_next)(const GVariantType *type);
    gsize (*variant_type_n_items)(const GVariantType *type);
    const GVariantType * (*variant_type_key)(const GVariantType *type);
    const GVariantType * (*variant_type_value)(const GVariantType *type);
    GVariantType * (*variant_type_new_array)(const GVariantType *element);
    GVariantType * (*variant_type_new_maybe)(const GVariantType *element);
    GVariantType * (*variant_type_new_tuple)(const GVariantType * const *items, gint length);
    GVariantType * (*variant_type_new_dict_entry)(const GVariantType *key, const GVariantType *value);
    const GVariantType * (*variant_type_checked_)(const gchar *type_string);
    gsize (*variant_type_string_get_depth_)(const gchar *type_string);
    gboolean (*variant_type_string_is_valid)(const gchar *type_string);
    const gchar * (*glib_check_version)(guint required_major, guint required_minor, guint required_micro);
    gboolean (*unix_open_pipe)(gint *fds, gint flags, GError **error);
    gboolean (*unix_set_fd_nonblocking)(gint fd, gboolean nonblock, GError **error);
    GSource* (*unix_signal_source_new)(gint signum);
    guint (*unix_signal_add_full)(gint priority, gint signum, GSourceFunc handler, gpointer user_data, GDestroyNotify notify);
    guint (*unix_signal_add)(gint signum, GSourceFunc handler, gpointer user_data);
    GSource* (*unix_fd_source_new)(gint fd, GIOCondition condition);
    guint (*unix_fd_add_full)(gint priority, gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data, GDestroyNotify notify);
    guint (*unix_fd_add)(gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data);
    struct passwd* (*unix_get_passwd_entry)(const gchar *user_name, GError **error);
    int (*fdwalk_set_cloexec)(int lowfd);
    GQuark (*unix_error_quark)(void);
};

// DEFINE_STRUCT_HERE


extern struct glib_syms *glib;
// DEFINE_STRUCT_VAR_HERE
#endif

void initialize_glib(void);
void close_glib(void);
