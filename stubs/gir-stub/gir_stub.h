#include "glib.h"
#include "girepository/girepository.h"
#include "girepository/girffi.h"

#ifndef SYMS_GIR_H
#define SYMS_GIR_H

struct girepository_syms {
    void *lib;
    // SYMS_girepository_HERE
    gboolean (*gi_arg_info_is_return_value)(GIArgInfo *info);
    gboolean (*gi_arg_info_is_optional)(GIArgInfo *info);
    gboolean (*gi_arg_info_is_caller_allocates)(GIArgInfo *info);
    gboolean (*gi_arg_info_may_be_null)(GIArgInfo *info);
    gboolean (*gi_arg_info_is_skip)(GIArgInfo *info);
    GITransfer (*gi_arg_info_get_ownership_transfer)(GIArgInfo *info);
    GIScopeType (*gi_arg_info_get_scope)(GIArgInfo *info);
    gboolean (*gi_arg_info_get_closure_index)(GIArgInfo *info, unsigned int *out_closure_index);
    gboolean (*gi_arg_info_get_destroy_index)(GIArgInfo *info, unsigned int *out_destroy_index);
    GITypeInfo * (*gi_arg_info_get_type_info)(GIArgInfo *info);
    void (*gi_arg_info_load_type_info)(GIArgInfo *info, GITypeInfo *type);
    GIDirection (*gi_arg_info_get_direction)(GIArgInfo *info);
    GIBaseInfo * (*gi_base_info_ref)(void *info);
    void (*gi_base_info_unref)(void *info);
    void (*gi_base_info_clear)(void *info);
    const char * (*gi_base_info_get_name)(GIBaseInfo *info);
    const char * (*gi_base_info_get_namespace)(GIBaseInfo *info);
    gboolean (*gi_base_info_is_deprecated)(GIBaseInfo *info);
    const char * (*gi_base_info_get_attribute)(GIBaseInfo *info, const char *name);
    gboolean (*gi_base_info_iterate_attributes)(GIBaseInfo *info, GIAttributeIter *iterator, const char **name, const char **value);
    GIBaseInfo * (*gi_base_info_get_container)(GIBaseInfo *info);
    GITypelib * (*gi_base_info_get_typelib)(GIBaseInfo *info);
    gboolean (*gi_base_info_equal)(GIBaseInfo *info1, GIBaseInfo *info2);
    GType (*gi_base_info_get_type)(void);
    gboolean (*gi_callable_info_can_throw_gerror)(GICallableInfo *info);
    GITypeInfo * (*gi_callable_info_get_return_type)(GICallableInfo *info);
    void (*gi_callable_info_load_return_type)(GICallableInfo *info, GITypeInfo *type);
    const char * (*gi_callable_info_get_return_attribute)(GICallableInfo *info, const char *name);
    gboolean (*gi_callable_info_iterate_return_attributes)(GICallableInfo *info, GIAttributeIter *iterator, const char **name, const char **value);
    GITransfer (*gi_callable_info_get_caller_owns)(GICallableInfo *info);
    gboolean (*gi_callable_info_may_return_null)(GICallableInfo *info);
    gboolean (*gi_callable_info_skip_return)(GICallableInfo *info);
    unsigned int (*gi_callable_info_get_n_args)(GICallableInfo *info);
    GIArgInfo * (*gi_callable_info_get_arg)(GICallableInfo *info, unsigned int n);
    void (*gi_callable_info_load_arg)(GICallableInfo *info, unsigned int n, GIArgInfo *arg);
    gboolean (*gi_callable_info_invoke)(GICallableInfo *info, void *function, const GIArgument *in_args, size_t n_in_args, GIArgument *out_args, size_t n_out_args, GIArgument *return_value, GError **error);
    GITransfer (*gi_callable_info_get_instance_ownership_transfer)(GICallableInfo *info);
    gboolean (*gi_callable_info_is_method)(GICallableInfo *info);
    void (*gi_constant_info_free_value)(GIConstantInfo *info, GIArgument *value);
    size_t (*gi_constant_info_get_value)(GIConstantInfo *info, GIArgument *value);
    GITypeInfo * (*gi_constant_info_get_type_info)(GIConstantInfo *info);
    GIValueInfo * (*gi_enum_info_get_value)(GIEnumInfo *info, unsigned int n);
    unsigned int (*gi_enum_info_get_n_methods)(GIEnumInfo *info);
    GIFunctionInfo * (*gi_enum_info_get_method)(GIEnumInfo *info, unsigned int n);
    GITypeTag (*gi_enum_info_get_storage_type)(GIEnumInfo *info);
    const char * (*gi_enum_info_get_error_domain)(GIEnumInfo *info);
    unsigned int (*gi_enum_info_get_n_values)(GIEnumInfo *info);
    size_t (*gi_field_info_get_size)(GIFieldInfo *info);
    size_t (*gi_field_info_get_offset)(GIFieldInfo *info);
    GITypeInfo * (*gi_field_info_get_type_info)(GIFieldInfo *info);
    gboolean (*gi_field_info_get_field)(GIFieldInfo *field_info, void *mem, GIArgument *value);
    gboolean (*gi_field_info_set_field)(GIFieldInfo *field_info, void *mem, const GIArgument *value);
    GIFieldInfoFlags (*gi_field_info_get_flags)(GIFieldInfo *info);
    GIFunctionInfoFlags (*gi_function_info_get_flags)(GIFunctionInfo *info);
    GIPropertyInfo * (*gi_function_info_get_property)(GIFunctionInfo *info);
    GIVFuncInfo * (*gi_function_info_get_vfunc)(GIFunctionInfo *info);
    GQuark (*gi_invoke_error_quark)(void);
    gboolean (*gi_function_info_invoke)(GIFunctionInfo *info, const GIArgument *in_args, size_t n_in_args, GIArgument *out_args, size_t n_out_args, GIArgument *return_value, GError **error);
    const char * (*gi_function_info_get_symbol)(GIFunctionInfo *info);
    GIBaseInfo * (*gi_interface_info_get_prerequisite)(GIInterfaceInfo *info, unsigned int n);
    unsigned int (*gi_interface_info_get_n_properties)(GIInterfaceInfo *info);
    GIPropertyInfo * (*gi_interface_info_get_property)(GIInterfaceInfo *info, unsigned int n);
    unsigned int (*gi_interface_info_get_n_methods)(GIInterfaceInfo *info);
    GIFunctionInfo * (*gi_interface_info_get_method)(GIInterfaceInfo *info, unsigned int n);
    GIFunctionInfo * (*gi_interface_info_find_method)(GIInterfaceInfo *info, const char *name);
    unsigned int (*gi_interface_info_get_n_signals)(GIInterfaceInfo *info);
    GISignalInfo * (*gi_interface_info_get_signal)(GIInterfaceInfo *info, unsigned int n);
    GISignalInfo * (*gi_interface_info_find_signal)(GIInterfaceInfo *info, const char *name);
    unsigned int (*gi_interface_info_get_n_vfuncs)(GIInterfaceInfo *info);
    GIVFuncInfo * (*gi_interface_info_get_vfunc)(GIInterfaceInfo *info, unsigned int n);
    GIVFuncInfo * (*gi_interface_info_find_vfunc)(GIInterfaceInfo *info, const char *name);
    unsigned int (*gi_interface_info_get_n_constants)(GIInterfaceInfo *info);
    GIConstantInfo * (*gi_interface_info_get_constant)(GIInterfaceInfo *info, unsigned int n);
    GIStructInfo * (*gi_interface_info_get_iface_struct)(GIInterfaceInfo *info);
    unsigned int (*gi_interface_info_get_n_prerequisites)(GIInterfaceInfo *info);
    const char * (*gi_object_info_get_type_init_function_name)(GIObjectInfo *info);
    gboolean (*gi_object_info_get_abstract)(GIObjectInfo *info);
    gboolean (*gi_object_info_get_final)(GIObjectInfo *info);
    gboolean (*gi_object_info_get_fundamental)(GIObjectInfo *info);
    GIObjectInfo * (*gi_object_info_get_parent)(GIObjectInfo *info);
    unsigned int (*gi_object_info_get_n_interfaces)(GIObjectInfo *info);
    GIInterfaceInfo * (*gi_object_info_get_interface)(GIObjectInfo *info, unsigned int n);
    unsigned int (*gi_object_info_get_n_fields)(GIObjectInfo *info);
    GIFieldInfo * (*gi_object_info_get_field)(GIObjectInfo *info, unsigned int n);
    unsigned int (*gi_object_info_get_n_properties)(GIObjectInfo *info);
    GIPropertyInfo * (*gi_object_info_get_property)(GIObjectInfo *info, unsigned int n);
    unsigned int (*gi_object_info_get_n_methods)(GIObjectInfo *info);
    GIFunctionInfo * (*gi_object_info_get_method)(GIObjectInfo *info, unsigned int n);
    GIFunctionInfo * (*gi_object_info_find_method)(GIObjectInfo *info, const char *name);
    GIFunctionInfo * (*gi_object_info_find_method_using_interfaces)(GIObjectInfo *info, const char *name, GIBaseInfo **declarer);
    unsigned int (*gi_object_info_get_n_signals)(GIObjectInfo *info);
    GISignalInfo * (*gi_object_info_get_signal)(GIObjectInfo *info, unsigned int n);
    GISignalInfo * (*gi_object_info_find_signal)(GIObjectInfo *info, const char *name);
    unsigned int (*gi_object_info_get_n_vfuncs)(GIObjectInfo *info);
    GIVFuncInfo * (*gi_object_info_get_vfunc)(GIObjectInfo *info, unsigned int n);
    GIVFuncInfo * (*gi_object_info_find_vfunc)(GIObjectInfo *info, const char *name);
    GIVFuncInfo * (*gi_object_info_find_vfunc_using_interfaces)(GIObjectInfo *info, const char *name, GIBaseInfo **declarer);
    unsigned int (*gi_object_info_get_n_constants)(GIObjectInfo *info);
    GIConstantInfo * (*gi_object_info_get_constant)(GIObjectInfo *info, unsigned int n);
    GIStructInfo * (*gi_object_info_get_class_struct)(GIObjectInfo *info);
    const char * (*gi_object_info_get_ref_function_name)(GIObjectInfo *info);
    GIObjectInfoRefFunction (*gi_object_info_get_ref_function_pointer)(GIObjectInfo *info);
    const char * (*gi_object_info_get_unref_function_name)(GIObjectInfo *info);
    GIObjectInfoUnrefFunction (*gi_object_info_get_unref_function_pointer)(GIObjectInfo *info);
    const char * (*gi_object_info_get_set_value_function_name)(GIObjectInfo *info);
    GIObjectInfoSetValueFunction (*gi_object_info_get_set_value_function_pointer)(GIObjectInfo *info);
    const char * (*gi_object_info_get_get_value_function_name)(GIObjectInfo *info);
    GIObjectInfoGetValueFunction (*gi_object_info_get_get_value_function_pointer)(GIObjectInfo *info);
    const char * (*gi_object_info_get_type_name)(GIObjectInfo *info);
    GITypeInfo* (*gi_property_info_get_type_info)(GIPropertyInfo *info);
    GITransfer (*gi_property_info_get_ownership_transfer)(GIPropertyInfo *info);
    GIFunctionInfo* (*gi_property_info_get_setter)(GIPropertyInfo *info);
    GIFunctionInfo* (*gi_property_info_get_getter)(GIPropertyInfo *info);
    GParamFlags (*gi_property_info_get_flags)(GIPropertyInfo *info);
    const char * (*gi_registered_type_info_get_type_init_function_name)(GIRegisteredTypeInfo *info);
    GType (*gi_registered_type_info_get_g_type)(GIRegisteredTypeInfo *info);
    gboolean (*gi_registered_type_info_is_boxed)(GIRegisteredTypeInfo *info);
    const char * (*gi_registered_type_info_get_type_name)(GIRegisteredTypeInfo *info);
    void (*gi_repository_prepend_search_path)(GIRepository *repository, const char *directory);
    void (*gi_repository_prepend_library_path)(GIRepository *repository, const char *directory);
    const char * const * (*gi_repository_get_search_path)(GIRepository *repository, size_t *n_paths_out);
    const char * const* (*gi_repository_get_library_path)(GIRepository *repository, size_t *n_paths_out);
    const char * (*gi_repository_load_typelib)(GIRepository *repository, GITypelib *typelib, GIRepositoryLoadFlags flags, GError **error);
    gboolean (*gi_repository_is_registered)(GIRepository *repository, const char *namespace_, const char *version);
    GIBaseInfo * (*gi_repository_find_by_name)(GIRepository *repository, const char *namespace_, const char *name);
    char ** (*gi_repository_enumerate_versions)(GIRepository *repository, const char *namespace_, size_t *n_versions_out);
    GITypelib * (*gi_repository_require)(GIRepository *repository, const char *namespace_, const char *version, GIRepositoryLoadFlags flags, GError **error);
    GITypelib * (*gi_repository_require_private)(GIRepository *repository, const char *typelib_dir, const char *namespace_, const char *version, GIRepositoryLoadFlags flags, GError **error);
    char ** (*gi_repository_get_immediate_dependencies)(GIRepository *repository, const char *namespace_, size_t *n_dependencies_out);
    char ** (*gi_repository_get_dependencies)(GIRepository *repository, const char *namespace_, size_t *n_dependencies_out);
    char ** (*gi_repository_get_loaded_namespaces)(GIRepository *repository, size_t *n_namespaces_out);
    GIBaseInfo * (*gi_repository_find_by_gtype)(GIRepository *repository, GType gtype);
    void (*gi_repository_get_object_gtype_interfaces)(GIRepository *repository, GType gtype, size_t *n_interfaces_out, GIInterfaceInfo ***interfaces_out);
    unsigned int (*gi_repository_get_n_infos)(GIRepository *repository, const char *namespace_);
    GIBaseInfo * (*gi_repository_get_info)(GIRepository *repository, const char *namespace_, unsigned int idx);
    GIEnumInfo * (*gi_repository_find_by_error_domain)(GIRepository *repository, GQuark domain);
    const char * (*gi_repository_get_typelib_path)(GIRepository *repository, const char *namespace_);
    const char * const* (*gi_repository_get_shared_libraries)(GIRepository *repository, const char *namespace_, size_t *out_n_elements);
    const char * (*gi_repository_get_c_prefix)(GIRepository *repository, const char *namespace_);
    const char * (*gi_repository_get_version)(GIRepository *repository, const char *namespace_);
    GOptionGroup * (*gi_repository_get_option_group)(void);
    gboolean (*gi_repository_dump)(const char *input_filename, const char *output_filename, GError **error);
    GQuark (*gi_repository_error_quark)(void);
    void (*gi_cclosure_marshal_generic)(GClosure *closure, GValue *return_gvalue, unsigned int n_param_values, const GValue *param_values, void *invocation_hint, void *marshal_data);
    GIRepository* (*gi_repository_new)(void);
    ffi_type * (*gi_type_info_get_ffi_type)(GITypeInfo *info);
    void (*gi_type_info_extract_ffi_return_value)(GITypeInfo *return_info, GIFFIReturnValue *ffi_value, GIArgument *arg);
    void (*gi_type_tag_extract_ffi_return_value)(GITypeTag return_tag, GType interface_type, GIFFIReturnValue *ffi_value, GIArgument *arg);
    gboolean (*gi_function_info_prep_invoker)(GIFunctionInfo *info, GIFunctionInvoker *invoker, GError **error);
    gboolean (*gi_function_invoker_new_for_address)(void *addr, GICallableInfo *info, GIFunctionInvoker *invoker, GError **error);
    void (*gi_function_invoker_clear)(GIFunctionInvoker *invoker);
    ffi_closure * (*gi_callable_info_create_closure)(GICallableInfo *callable_info, ffi_cif *cif, GIFFIClosureCallback callback, void *user_data);
    void ** (*gi_callable_info_get_closure_native_address)(GICallableInfo *callable_info, ffi_closure *closure);
    void (*gi_callable_info_destroy_closure)(GICallableInfo *callable_info, ffi_closure *closure);
    ffi_type * (*gi_type_tag_get_ffi_type)(GITypeTag type_tag, gboolean is_pointer);
    GIVFuncInfo * (*gi_signal_info_get_class_closure)(GISignalInfo *info);
    gboolean (*gi_signal_info_true_stops_emit)(GISignalInfo *info);
    GSignalFlags (*gi_signal_info_get_flags)(GISignalInfo *info);
    GIFieldInfo * (*gi_struct_info_get_field)(GIStructInfo *info, unsigned int n);
    GIFieldInfo * (*gi_struct_info_find_field)(GIStructInfo *info, const char *name);
    unsigned int (*gi_struct_info_get_n_methods)(GIStructInfo *info);
    GIFunctionInfo * (*gi_struct_info_get_method)(GIStructInfo *info, unsigned int n);
    GIFunctionInfo * (*gi_struct_info_find_method)(GIStructInfo *info, const char *name);
    size_t (*gi_struct_info_get_size)(GIStructInfo *info);
    size_t (*gi_struct_info_get_alignment)(GIStructInfo *info);
    gboolean (*gi_struct_info_is_gtype_struct)(GIStructInfo *info);
    gboolean (*gi_struct_info_is_foreign)(GIStructInfo *info);
    const char * (*gi_struct_info_get_copy_function_name)(GIStructInfo *info);
    const char * (*gi_struct_info_get_free_function_name)(GIStructInfo *info);
    unsigned int (*gi_struct_info_get_n_fields)(GIStructInfo *info);
    gboolean (*gi_type_info_is_pointer)(GITypeInfo *info);
    GITypeTag (*gi_type_info_get_tag)(GITypeInfo *info);
    GITypeInfo * (*gi_type_info_get_param_type)(GITypeInfo *info, unsigned int n);
    GIBaseInfo * (*gi_type_info_get_interface)(GITypeInfo *info);
    gboolean (*gi_type_info_get_array_length_index)(GITypeInfo *info, unsigned int *out_length_index);
    gboolean (*gi_type_info_get_array_fixed_size)(GITypeInfo *info, size_t *out_size);
    gboolean (*gi_type_info_is_zero_terminated)(GITypeInfo *info);
    GIArrayType (*gi_type_info_get_array_type)(GITypeInfo *info);
    GITypeTag (*gi_type_info_get_storage_type)(GITypeInfo *info);
    void (*gi_type_info_argument_from_hash_pointer)(GITypeInfo *info, void *hash_pointer, GIArgument *arg);
    void * (*gi_type_info_hash_pointer_from_argument)(GITypeInfo *info, GIArgument *arg);
    void (*gi_type_tag_argument_from_hash_pointer)(GITypeTag storage_type, void *hash_pointer, GIArgument *arg);
    void * (*gi_type_tag_hash_pointer_from_argument)(GITypeTag storage_type, GIArgument *arg);
    const char * (*gi_type_tag_to_string)(GITypeTag type);
    GITypelib * (*gi_typelib_new_from_bytes)(GBytes *bytes, GError **error);
    GITypelib * (*gi_typelib_ref)(GITypelib *typelib);
    void (*gi_typelib_unref)(GITypelib *typelib);
    gboolean (*gi_typelib_symbol)(GITypelib *typelib, const char *symbol_name, void **symbol);
    const char * (*gi_typelib_get_namespace)(GITypelib *typelib);
    GType (*gi_typelib_get_type)(void);
    GType (*gi_function_info_get_type)(void);
    GType (*gi_callback_info_get_type)(void);
    GType (*gi_registered_type_info_get_type)(void);
    GType (*gi_struct_info_get_type)(void);
    GType (*gi_union_info_get_type)(void);
    GType (*gi_enum_info_get_type)(void);
    GType (*gi_flags_info_get_type)(void);
    GType (*gi_object_info_get_type)(void);
    GType (*gi_interface_info_get_type)(void);
    GType (*gi_constant_info_get_type)(void);
    GType (*gi_value_info_get_type)(void);
    GType (*gi_signal_info_get_type)(void);
    GType (*gi_vfunc_info_get_type)(void);
    GType (*gi_property_info_get_type)(void);
    GType (*gi_field_info_get_type)(void);
    GType (*gi_arg_info_get_type)(void);
    GType (*gi_type_info_get_type)(void);
    GType (*gi_unresolved_info_get_type)(void);
    GType (*gi_callable_info_get_type)(void);
    GIFieldInfo * (*gi_union_info_get_field)(GIUnionInfo *info, unsigned int n);
    unsigned int (*gi_union_info_get_n_methods)(GIUnionInfo *info);
    GIFunctionInfo * (*gi_union_info_get_method)(GIUnionInfo *info, unsigned int n);
    gboolean (*gi_union_info_is_discriminated)(GIUnionInfo *info);
    gboolean (*gi_union_info_get_discriminator_offset)(GIUnionInfo *info, size_t *out_offset);
    GITypeInfo * (*gi_union_info_get_discriminator_type)(GIUnionInfo *info);
    GIConstantInfo * (*gi_union_info_get_discriminator)(GIUnionInfo *info, size_t n);
    GIFunctionInfo * (*gi_union_info_find_method)(GIUnionInfo *info, const char *name);
    size_t (*gi_union_info_get_size)(GIUnionInfo *info);
    size_t (*gi_union_info_get_alignment)(GIUnionInfo *info);
    const char * (*gi_union_info_get_copy_function_name)(GIUnionInfo *info);
    const char * (*gi_union_info_get_free_function_name)(GIUnionInfo *info);
    unsigned int (*gi_union_info_get_n_fields)(GIUnionInfo *info);
    int64_t (*gi_value_info_get_value)(GIValueInfo *info);
    size_t (*gi_vfunc_info_get_offset)(GIVFuncInfo *info);
    GISignalInfo * (*gi_vfunc_info_get_signal)(GIVFuncInfo *info);
    GIFunctionInfo * (*gi_vfunc_info_get_invoker)(GIVFuncInfo *info);
    void * (*gi_vfunc_info_get_address)(GIVFuncInfo *info, GType implementor_gtype, GError **error);
    gboolean (*gi_vfunc_info_invoke)(GIVFuncInfo *info, GType implementor, const GIArgument *in_args, size_t n_in_args, GIArgument *out_args, size_t n_out_args, GIArgument *return_value, GError **error);
    GIVFuncInfoFlags (*gi_vfunc_info_get_flags)(GIVFuncInfo *info);
};

// DEFINE_STRUCT_HERE


extern struct girepository_syms *girepository;
// DEFINE_STRUCT_VAR_HERE
#endif

void initialize_gir(void);
void close_gir(void);
